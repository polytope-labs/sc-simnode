[package]
name = "babe-node"
version = "0.1.0"
authors = ["Parity Technologies <admin@parity.io>"]
description = "Generic Substrate node implementation in Rust."
build = "build.rs"
edition = "2021"
license = "GPL-3.0-or-later WITH Classpath-exception-2.0"
default-run = "babe-node"
homepage = "https://substrate.io"
repository = "https://github.com/paritytech/substrate/"
publish = false

[package.metadata.wasm-pack.profile.release]
# `wasm-opt` has some problems on linux, see
# https://github.com/rustwasm/wasm-pack/issues/781 etc.
wasm-opt = false

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[badges]
travis-ci = { repository = "paritytech/substrate" }
maintenance = { status = "actively-developed" }
is-it-maintained-issue-resolution = { repository = "paritytech/substrate" }
is-it-maintained-open-issues = { repository = "paritytech/substrate" }

[[bin]]
name = "babe-node"
path = "src/main.rs"
required-features = ["cli"]

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
# third-party dependencies
array-bytes = "4.1"
clap = { version = "4.0.9", features = ["derive"], optional = true }
codec = { workspace = true }
serde = { version = "1.0.136", features = ["derive"] }
jsonrpsee = { workspace = true, features = ["server"] }
futures = "0.3.21"
log = "0.4.17"
rand = "0.8"

# primitives
sp-consensus-babe = { workspace = true }
sp-consensus-grandpa = { workspace = true }
sp-api = { workspace = true }
sp-core = { workspace = true }
sp-runtime = { workspace = true }
sp-timestamp = { workspace = true }
sp-inherents = { workspace = true }
sp-keyring = { workspace = true}
sp-keystore = { workspace = true }
sp-consensus = { workspace = true }
sp-transaction-pool = { workspace = true }
sp-transaction-storage-proof = { workspace = true, default-features = true }
sp-io = {  workspace = true }

# client dependencies
sc-client-api = { workspace = true }
sc-chain-spec = { workspace = true }
sc-consensus = { workspace = true }
sc-transaction-pool = { workspace = true }
sc-transaction-pool-api = { workspace = true }
sc-network = { workspace = true}
sc-network-common = { workspace = true }
sc-network-sync = { workspace = true}
sc-consensus-slots = { workspace = true }
sc-consensus-babe = { workspace = true }
sc-consensus-grandpa = { workspace = true }
sc-rpc = { workspace = true }
sc-basic-authorship = { workspace = true }
sc-service = { workspace = true }
sc-telemetry = { workspace = true }
sc-executor = { workspace = true }
sc-sync-state-rpc = { workspace = true }
sc-sysinfo = { workspace = true }
sc-storage-monitor = { workspace = true }
sc-offchain = { workspace = true }

# frame dependencies
frame-system = { workspace = true }
frame-benchmarking = { workspace = true }
frame-system-rpc-runtime-api = { workspace = true }
pallet-transaction-payment = { workspace = true }

# node-specific dependencies
babe-runtime = { path = "../runtime" }
node-rpc = { package = "babe-node-rpc", path = "../rpc" }
sc-simnode = { path = "../../../simnode", features = ["babe"] }

# CLI-specific dependencies
sc-cli = { optional = true,  workspace = true }
frame-benchmarking-cli = { optional = true,  workspace = true }
try-runtime-cli = { optional = true,  workspace = true }
serde_json = "1.0.85"

[dev-dependencies]
tempfile = "3.1.0"
#sp-tracing = { workspace = true }
sc-keystore = { workspace = true }
#sc-service-test = { workspace = true }
sc-consensus-epochs = { workspace = true }

[build-dependencies]
substrate-build-script-utils = { optional = true,  workspace = true }

[features]
default = ["cli"]
cli = [
    "sc-cli",
    "frame-benchmarking-cli",
    "sc-service/rocksdb",
    "clap",
    "substrate-build-script-utils",
    "try-runtime-cli",
]
runtime-benchmarks = [
    "babe-runtime/runtime-benchmarks",
    "frame-benchmarking-cli/runtime-benchmarks"
]
# Enable features that allow the runtime to be tried and debugged. Name might be subject to change
# in the near future.
try-runtime = ["babe-runtime/try-runtime", "try-runtime-cli/try-runtime"]
