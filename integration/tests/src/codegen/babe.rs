#[allow(dead_code, unused_imports, non_camel_case_types)]
#[allow(clippy::all)]
pub mod api {
	#[allow(unused_imports)]
	mod root_mod {
		pub use super::*;
	}
	pub static PALLETS: [&str; 60usize] = [
		"System",
		"Utility",
		"Babe",
		"Timestamp",
		"Authorship",
		"Indices",
		"Balances",
		"TransactionPayment",
		"AssetTxPayment",
		"ElectionProviderMultiPhase",
		"Staking",
		"Session",
		"Democracy",
		"Council",
		"TechnicalCommittee",
		"Elections",
		"TechnicalMembership",
		"Grandpa",
		"Treasury",
		"Sudo",
		"ImOnline",
		"AuthorityDiscovery",
		"Offences",
		"Historical",
		"RandomnessCollectiveFlip",
		"Identity",
		"Society",
		"Recovery",
		"Vesting",
		"Scheduler",
		"Glutton",
		"Preimage",
		"Proxy",
		"Multisig",
		"Bounties",
		"Tips",
		"Assets",
		"Lottery",
		"Nis",
		"Uniques",
		"Nfts",
		"Salary",
		"CoreFellowship",
		"TransactionStorage",
		"VoterList",
		"StateTrieMigration",
		"ChildBounties",
		"Referenda",
		"Remark",
		"RootTesting",
		"ConvictionVoting",
		"Whitelist",
		"AllianceMotion",
		"Alliance",
		"NominationPools",
		"RankedPolls",
		"RankedCollective",
		"FastUnstake",
		"MessageQueue",
		"Pov",
	];
	/// The error type returned when there is a runtime issue.
	pub type DispatchError = runtime_types::sp_runtime::DispatchError;
	#[derive(
		::subxt::ext::codec::Decode,
		::subxt::ext::codec::Encode,
		::subxt::ext::scale_decode::DecodeAsType,
		::subxt::ext::scale_encode::EncodeAsType,
		Debug,
	)]
	#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
	#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
	pub enum Event {
		#[codec(index = 0)]
		System(system::Event),
		#[codec(index = 1)]
		Utility(utility::Event),
		#[codec(index = 5)]
		Indices(indices::Event),
		#[codec(index = 6)]
		Balances(balances::Event),
		#[codec(index = 7)]
		TransactionPayment(transaction_payment::Event),
		#[codec(index = 8)]
		AssetTxPayment(asset_tx_payment::Event),
		#[codec(index = 9)]
		ElectionProviderMultiPhase(election_provider_multi_phase::Event),
		#[codec(index = 10)]
		Staking(staking::Event),
		#[codec(index = 11)]
		Session(session::Event),
		#[codec(index = 12)]
		Democracy(democracy::Event),
		#[codec(index = 13)]
		Council(council::Event),
		#[codec(index = 14)]
		TechnicalCommittee(technical_committee::Event),
		#[codec(index = 15)]
		Elections(elections::Event),
		#[codec(index = 16)]
		TechnicalMembership(technical_membership::Event),
		#[codec(index = 17)]
		Grandpa(grandpa::Event),
		#[codec(index = 18)]
		Treasury(treasury::Event),
		#[codec(index = 19)]
		Sudo(sudo::Event),
		#[codec(index = 20)]
		ImOnline(im_online::Event),
		#[codec(index = 22)]
		Offences(offences::Event),
		#[codec(index = 25)]
		Identity(identity::Event),
		#[codec(index = 26)]
		Society(society::Event),
		#[codec(index = 27)]
		Recovery(recovery::Event),
		#[codec(index = 28)]
		Vesting(vesting::Event),
		#[codec(index = 29)]
		Scheduler(scheduler::Event),
		#[codec(index = 30)]
		Glutton(glutton::Event),
		#[codec(index = 31)]
		Preimage(preimage::Event),
		#[codec(index = 32)]
		Proxy(proxy::Event),
		#[codec(index = 33)]
		Multisig(multisig::Event),
		#[codec(index = 34)]
		Bounties(bounties::Event),
		#[codec(index = 35)]
		Tips(tips::Event),
		#[codec(index = 36)]
		Assets(assets::Event),
		#[codec(index = 37)]
		Lottery(lottery::Event),
		#[codec(index = 38)]
		Nis(nis::Event),
		#[codec(index = 39)]
		Uniques(uniques::Event),
		#[codec(index = 40)]
		Nfts(nfts::Event),
		#[codec(index = 41)]
		Salary(salary::Event),
		#[codec(index = 42)]
		CoreFellowship(core_fellowship::Event),
		#[codec(index = 43)]
		TransactionStorage(transaction_storage::Event),
		#[codec(index = 44)]
		VoterList(voter_list::Event),
		#[codec(index = 45)]
		StateTrieMigration(state_trie_migration::Event),
		#[codec(index = 46)]
		ChildBounties(child_bounties::Event),
		#[codec(index = 47)]
		Referenda(referenda::Event),
		#[codec(index = 48)]
		Remark(remark::Event),
		#[codec(index = 50)]
		ConvictionVoting(conviction_voting::Event),
		#[codec(index = 51)]
		Whitelist(whitelist::Event),
		#[codec(index = 52)]
		AllianceMotion(alliance_motion::Event),
		#[codec(index = 53)]
		Alliance(alliance::Event),
		#[codec(index = 54)]
		NominationPools(nomination_pools::Event),
		#[codec(index = 55)]
		RankedPolls(ranked_polls::Event),
		#[codec(index = 56)]
		RankedCollective(ranked_collective::Event),
		#[codec(index = 57)]
		FastUnstake(fast_unstake::Event),
		#[codec(index = 58)]
		MessageQueue(message_queue::Event),
		#[codec(index = 59)]
		Pov(pov::Event),
	}
	impl ::subxt::events::RootEvent for Event {
		fn root_event(
			pallet_bytes: &[u8],
			pallet_name: &str,
			pallet_ty: u32,
			metadata: &::subxt::Metadata,
		) -> Result<Self, ::subxt::Error> {
			use ::subxt::metadata::DecodeWithMetadata;
			if pallet_name == "System" {
				return Ok(Event::System(system::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Utility" {
				return Ok(Event::Utility(utility::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Indices" {
				return Ok(Event::Indices(indices::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Balances" {
				return Ok(Event::Balances(balances::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "TransactionPayment" {
				return Ok(Event::TransactionPayment(
					transaction_payment::Event::decode_with_metadata(
						&mut &*pallet_bytes,
						pallet_ty,
						metadata,
					)?,
				))
			}
			if pallet_name == "AssetTxPayment" {
				return Ok(Event::AssetTxPayment(asset_tx_payment::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "ElectionProviderMultiPhase" {
				return Ok(Event::ElectionProviderMultiPhase(
					election_provider_multi_phase::Event::decode_with_metadata(
						&mut &*pallet_bytes,
						pallet_ty,
						metadata,
					)?,
				))
			}
			if pallet_name == "Staking" {
				return Ok(Event::Staking(staking::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Session" {
				return Ok(Event::Session(session::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Democracy" {
				return Ok(Event::Democracy(democracy::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Council" {
				return Ok(Event::Council(council::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "TechnicalCommittee" {
				return Ok(Event::TechnicalCommittee(
					technical_committee::Event::decode_with_metadata(
						&mut &*pallet_bytes,
						pallet_ty,
						metadata,
					)?,
				))
			}
			if pallet_name == "Elections" {
				return Ok(Event::Elections(elections::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "TechnicalMembership" {
				return Ok(Event::TechnicalMembership(
					technical_membership::Event::decode_with_metadata(
						&mut &*pallet_bytes,
						pallet_ty,
						metadata,
					)?,
				))
			}
			if pallet_name == "Grandpa" {
				return Ok(Event::Grandpa(grandpa::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Treasury" {
				return Ok(Event::Treasury(treasury::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Sudo" {
				return Ok(Event::Sudo(sudo::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "ImOnline" {
				return Ok(Event::ImOnline(im_online::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Offences" {
				return Ok(Event::Offences(offences::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Identity" {
				return Ok(Event::Identity(identity::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Society" {
				return Ok(Event::Society(society::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Recovery" {
				return Ok(Event::Recovery(recovery::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Vesting" {
				return Ok(Event::Vesting(vesting::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Scheduler" {
				return Ok(Event::Scheduler(scheduler::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Glutton" {
				return Ok(Event::Glutton(glutton::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Preimage" {
				return Ok(Event::Preimage(preimage::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Proxy" {
				return Ok(Event::Proxy(proxy::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Multisig" {
				return Ok(Event::Multisig(multisig::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Bounties" {
				return Ok(Event::Bounties(bounties::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Tips" {
				return Ok(Event::Tips(tips::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Assets" {
				return Ok(Event::Assets(assets::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Lottery" {
				return Ok(Event::Lottery(lottery::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Nis" {
				return Ok(Event::Nis(nis::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Uniques" {
				return Ok(Event::Uniques(uniques::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Nfts" {
				return Ok(Event::Nfts(nfts::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Salary" {
				return Ok(Event::Salary(salary::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "CoreFellowship" {
				return Ok(Event::CoreFellowship(core_fellowship::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "TransactionStorage" {
				return Ok(Event::TransactionStorage(
					transaction_storage::Event::decode_with_metadata(
						&mut &*pallet_bytes,
						pallet_ty,
						metadata,
					)?,
				))
			}
			if pallet_name == "VoterList" {
				return Ok(Event::VoterList(voter_list::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "StateTrieMigration" {
				return Ok(Event::StateTrieMigration(
					state_trie_migration::Event::decode_with_metadata(
						&mut &*pallet_bytes,
						pallet_ty,
						metadata,
					)?,
				))
			}
			if pallet_name == "ChildBounties" {
				return Ok(Event::ChildBounties(child_bounties::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Referenda" {
				return Ok(Event::Referenda(referenda::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Remark" {
				return Ok(Event::Remark(remark::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "ConvictionVoting" {
				return Ok(Event::ConvictionVoting(conviction_voting::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Whitelist" {
				return Ok(Event::Whitelist(whitelist::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "AllianceMotion" {
				return Ok(Event::AllianceMotion(alliance_motion::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Alliance" {
				return Ok(Event::Alliance(alliance::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "NominationPools" {
				return Ok(Event::NominationPools(nomination_pools::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "RankedPolls" {
				return Ok(Event::RankedPolls(ranked_polls::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "RankedCollective" {
				return Ok(Event::RankedCollective(ranked_collective::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "FastUnstake" {
				return Ok(Event::FastUnstake(fast_unstake::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "MessageQueue" {
				return Ok(Event::MessageQueue(message_queue::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			if pallet_name == "Pov" {
				return Ok(Event::Pov(pov::Event::decode_with_metadata(
					&mut &*pallet_bytes,
					pallet_ty,
					metadata,
				)?))
			}
			Err(::subxt::ext::scale_decode::Error::custom(format!(
				"Pallet name '{}' not found in root Event enum",
				pallet_name
			))
			.into())
		}
	}
	pub fn constants() -> ConstantsApi {
		ConstantsApi
	}
	pub fn storage() -> StorageApi {
		StorageApi
	}
	pub fn tx() -> TransactionApi {
		TransactionApi
	}
	pub struct ConstantsApi;
	impl ConstantsApi {
		pub fn system(&self) -> system::constants::ConstantsApi {
			system::constants::ConstantsApi
		}
		pub fn utility(&self) -> utility::constants::ConstantsApi {
			utility::constants::ConstantsApi
		}
		pub fn babe(&self) -> babe::constants::ConstantsApi {
			babe::constants::ConstantsApi
		}
		pub fn timestamp(&self) -> timestamp::constants::ConstantsApi {
			timestamp::constants::ConstantsApi
		}
		pub fn indices(&self) -> indices::constants::ConstantsApi {
			indices::constants::ConstantsApi
		}
		pub fn balances(&self) -> balances::constants::ConstantsApi {
			balances::constants::ConstantsApi
		}
		pub fn transaction_payment(&self) -> transaction_payment::constants::ConstantsApi {
			transaction_payment::constants::ConstantsApi
		}
		pub fn election_provider_multi_phase(
			&self,
		) -> election_provider_multi_phase::constants::ConstantsApi {
			election_provider_multi_phase::constants::ConstantsApi
		}
		pub fn staking(&self) -> staking::constants::ConstantsApi {
			staking::constants::ConstantsApi
		}
		pub fn democracy(&self) -> democracy::constants::ConstantsApi {
			democracy::constants::ConstantsApi
		}
		pub fn elections(&self) -> elections::constants::ConstantsApi {
			elections::constants::ConstantsApi
		}
		pub fn grandpa(&self) -> grandpa::constants::ConstantsApi {
			grandpa::constants::ConstantsApi
		}
		pub fn treasury(&self) -> treasury::constants::ConstantsApi {
			treasury::constants::ConstantsApi
		}
		pub fn im_online(&self) -> im_online::constants::ConstantsApi {
			im_online::constants::ConstantsApi
		}
		pub fn identity(&self) -> identity::constants::ConstantsApi {
			identity::constants::ConstantsApi
		}
		pub fn society(&self) -> society::constants::ConstantsApi {
			society::constants::ConstantsApi
		}
		pub fn recovery(&self) -> recovery::constants::ConstantsApi {
			recovery::constants::ConstantsApi
		}
		pub fn vesting(&self) -> vesting::constants::ConstantsApi {
			vesting::constants::ConstantsApi
		}
		pub fn scheduler(&self) -> scheduler::constants::ConstantsApi {
			scheduler::constants::ConstantsApi
		}
		pub fn proxy(&self) -> proxy::constants::ConstantsApi {
			proxy::constants::ConstantsApi
		}
		pub fn multisig(&self) -> multisig::constants::ConstantsApi {
			multisig::constants::ConstantsApi
		}
		pub fn bounties(&self) -> bounties::constants::ConstantsApi {
			bounties::constants::ConstantsApi
		}
		pub fn tips(&self) -> tips::constants::ConstantsApi {
			tips::constants::ConstantsApi
		}
		pub fn assets(&self) -> assets::constants::ConstantsApi {
			assets::constants::ConstantsApi
		}
		pub fn lottery(&self) -> lottery::constants::ConstantsApi {
			lottery::constants::ConstantsApi
		}
		pub fn nis(&self) -> nis::constants::ConstantsApi {
			nis::constants::ConstantsApi
		}
		pub fn uniques(&self) -> uniques::constants::ConstantsApi {
			uniques::constants::ConstantsApi
		}
		pub fn nfts(&self) -> nfts::constants::ConstantsApi {
			nfts::constants::ConstantsApi
		}
		pub fn salary(&self) -> salary::constants::ConstantsApi {
			salary::constants::ConstantsApi
		}
		pub fn core_fellowship(&self) -> core_fellowship::constants::ConstantsApi {
			core_fellowship::constants::ConstantsApi
		}
		pub fn voter_list(&self) -> voter_list::constants::ConstantsApi {
			voter_list::constants::ConstantsApi
		}
		pub fn state_trie_migration(&self) -> state_trie_migration::constants::ConstantsApi {
			state_trie_migration::constants::ConstantsApi
		}
		pub fn child_bounties(&self) -> child_bounties::constants::ConstantsApi {
			child_bounties::constants::ConstantsApi
		}
		pub fn referenda(&self) -> referenda::constants::ConstantsApi {
			referenda::constants::ConstantsApi
		}
		pub fn conviction_voting(&self) -> conviction_voting::constants::ConstantsApi {
			conviction_voting::constants::ConstantsApi
		}
		pub fn alliance(&self) -> alliance::constants::ConstantsApi {
			alliance::constants::ConstantsApi
		}
		pub fn nomination_pools(&self) -> nomination_pools::constants::ConstantsApi {
			nomination_pools::constants::ConstantsApi
		}
		pub fn ranked_polls(&self) -> ranked_polls::constants::ConstantsApi {
			ranked_polls::constants::ConstantsApi
		}
		pub fn fast_unstake(&self) -> fast_unstake::constants::ConstantsApi {
			fast_unstake::constants::ConstantsApi
		}
		pub fn message_queue(&self) -> message_queue::constants::ConstantsApi {
			message_queue::constants::ConstantsApi
		}
	}
	pub struct StorageApi;
	impl StorageApi {
		pub fn system(&self) -> system::storage::StorageApi {
			system::storage::StorageApi
		}
		pub fn babe(&self) -> babe::storage::StorageApi {
			babe::storage::StorageApi
		}
		pub fn timestamp(&self) -> timestamp::storage::StorageApi {
			timestamp::storage::StorageApi
		}
		pub fn authorship(&self) -> authorship::storage::StorageApi {
			authorship::storage::StorageApi
		}
		pub fn indices(&self) -> indices::storage::StorageApi {
			indices::storage::StorageApi
		}
		pub fn balances(&self) -> balances::storage::StorageApi {
			balances::storage::StorageApi
		}
		pub fn transaction_payment(&self) -> transaction_payment::storage::StorageApi {
			transaction_payment::storage::StorageApi
		}
		pub fn election_provider_multi_phase(
			&self,
		) -> election_provider_multi_phase::storage::StorageApi {
			election_provider_multi_phase::storage::StorageApi
		}
		pub fn staking(&self) -> staking::storage::StorageApi {
			staking::storage::StorageApi
		}
		pub fn session(&self) -> session::storage::StorageApi {
			session::storage::StorageApi
		}
		pub fn democracy(&self) -> democracy::storage::StorageApi {
			democracy::storage::StorageApi
		}
		pub fn council(&self) -> council::storage::StorageApi {
			council::storage::StorageApi
		}
		pub fn technical_committee(&self) -> technical_committee::storage::StorageApi {
			technical_committee::storage::StorageApi
		}
		pub fn elections(&self) -> elections::storage::StorageApi {
			elections::storage::StorageApi
		}
		pub fn technical_membership(&self) -> technical_membership::storage::StorageApi {
			technical_membership::storage::StorageApi
		}
		pub fn grandpa(&self) -> grandpa::storage::StorageApi {
			grandpa::storage::StorageApi
		}
		pub fn treasury(&self) -> treasury::storage::StorageApi {
			treasury::storage::StorageApi
		}
		pub fn sudo(&self) -> sudo::storage::StorageApi {
			sudo::storage::StorageApi
		}
		pub fn im_online(&self) -> im_online::storage::StorageApi {
			im_online::storage::StorageApi
		}
		pub fn authority_discovery(&self) -> authority_discovery::storage::StorageApi {
			authority_discovery::storage::StorageApi
		}
		pub fn offences(&self) -> offences::storage::StorageApi {
			offences::storage::StorageApi
		}
		pub fn randomness_collective_flip(
			&self,
		) -> randomness_collective_flip::storage::StorageApi {
			randomness_collective_flip::storage::StorageApi
		}
		pub fn identity(&self) -> identity::storage::StorageApi {
			identity::storage::StorageApi
		}
		pub fn society(&self) -> society::storage::StorageApi {
			society::storage::StorageApi
		}
		pub fn recovery(&self) -> recovery::storage::StorageApi {
			recovery::storage::StorageApi
		}
		pub fn vesting(&self) -> vesting::storage::StorageApi {
			vesting::storage::StorageApi
		}
		pub fn scheduler(&self) -> scheduler::storage::StorageApi {
			scheduler::storage::StorageApi
		}
		pub fn glutton(&self) -> glutton::storage::StorageApi {
			glutton::storage::StorageApi
		}
		pub fn preimage(&self) -> preimage::storage::StorageApi {
			preimage::storage::StorageApi
		}
		pub fn proxy(&self) -> proxy::storage::StorageApi {
			proxy::storage::StorageApi
		}
		pub fn multisig(&self) -> multisig::storage::StorageApi {
			multisig::storage::StorageApi
		}
		pub fn bounties(&self) -> bounties::storage::StorageApi {
			bounties::storage::StorageApi
		}
		pub fn tips(&self) -> tips::storage::StorageApi {
			tips::storage::StorageApi
		}
		pub fn assets(&self) -> assets::storage::StorageApi {
			assets::storage::StorageApi
		}
		pub fn lottery(&self) -> lottery::storage::StorageApi {
			lottery::storage::StorageApi
		}
		pub fn nis(&self) -> nis::storage::StorageApi {
			nis::storage::StorageApi
		}
		pub fn uniques(&self) -> uniques::storage::StorageApi {
			uniques::storage::StorageApi
		}
		pub fn nfts(&self) -> nfts::storage::StorageApi {
			nfts::storage::StorageApi
		}
		pub fn salary(&self) -> salary::storage::StorageApi {
			salary::storage::StorageApi
		}
		pub fn core_fellowship(&self) -> core_fellowship::storage::StorageApi {
			core_fellowship::storage::StorageApi
		}
		pub fn transaction_storage(&self) -> transaction_storage::storage::StorageApi {
			transaction_storage::storage::StorageApi
		}
		pub fn voter_list(&self) -> voter_list::storage::StorageApi {
			voter_list::storage::StorageApi
		}
		pub fn state_trie_migration(&self) -> state_trie_migration::storage::StorageApi {
			state_trie_migration::storage::StorageApi
		}
		pub fn child_bounties(&self) -> child_bounties::storage::StorageApi {
			child_bounties::storage::StorageApi
		}
		pub fn referenda(&self) -> referenda::storage::StorageApi {
			referenda::storage::StorageApi
		}
		pub fn conviction_voting(&self) -> conviction_voting::storage::StorageApi {
			conviction_voting::storage::StorageApi
		}
		pub fn whitelist(&self) -> whitelist::storage::StorageApi {
			whitelist::storage::StorageApi
		}
		pub fn alliance_motion(&self) -> alliance_motion::storage::StorageApi {
			alliance_motion::storage::StorageApi
		}
		pub fn alliance(&self) -> alliance::storage::StorageApi {
			alliance::storage::StorageApi
		}
		pub fn nomination_pools(&self) -> nomination_pools::storage::StorageApi {
			nomination_pools::storage::StorageApi
		}
		pub fn ranked_polls(&self) -> ranked_polls::storage::StorageApi {
			ranked_polls::storage::StorageApi
		}
		pub fn ranked_collective(&self) -> ranked_collective::storage::StorageApi {
			ranked_collective::storage::StorageApi
		}
		pub fn fast_unstake(&self) -> fast_unstake::storage::StorageApi {
			fast_unstake::storage::StorageApi
		}
		pub fn message_queue(&self) -> message_queue::storage::StorageApi {
			message_queue::storage::StorageApi
		}
		pub fn pov(&self) -> pov::storage::StorageApi {
			pov::storage::StorageApi
		}
	}
	pub struct TransactionApi;
	impl TransactionApi {
		pub fn system(&self) -> system::calls::TransactionApi {
			system::calls::TransactionApi
		}
		pub fn utility(&self) -> utility::calls::TransactionApi {
			utility::calls::TransactionApi
		}
		pub fn babe(&self) -> babe::calls::TransactionApi {
			babe::calls::TransactionApi
		}
		pub fn timestamp(&self) -> timestamp::calls::TransactionApi {
			timestamp::calls::TransactionApi
		}
		pub fn indices(&self) -> indices::calls::TransactionApi {
			indices::calls::TransactionApi
		}
		pub fn balances(&self) -> balances::calls::TransactionApi {
			balances::calls::TransactionApi
		}
		pub fn election_provider_multi_phase(
			&self,
		) -> election_provider_multi_phase::calls::TransactionApi {
			election_provider_multi_phase::calls::TransactionApi
		}
		pub fn staking(&self) -> staking::calls::TransactionApi {
			staking::calls::TransactionApi
		}
		pub fn session(&self) -> session::calls::TransactionApi {
			session::calls::TransactionApi
		}
		pub fn democracy(&self) -> democracy::calls::TransactionApi {
			democracy::calls::TransactionApi
		}
		pub fn council(&self) -> council::calls::TransactionApi {
			council::calls::TransactionApi
		}
		pub fn technical_committee(&self) -> technical_committee::calls::TransactionApi {
			technical_committee::calls::TransactionApi
		}
		pub fn elections(&self) -> elections::calls::TransactionApi {
			elections::calls::TransactionApi
		}
		pub fn technical_membership(&self) -> technical_membership::calls::TransactionApi {
			technical_membership::calls::TransactionApi
		}
		pub fn grandpa(&self) -> grandpa::calls::TransactionApi {
			grandpa::calls::TransactionApi
		}
		pub fn treasury(&self) -> treasury::calls::TransactionApi {
			treasury::calls::TransactionApi
		}
		pub fn sudo(&self) -> sudo::calls::TransactionApi {
			sudo::calls::TransactionApi
		}
		pub fn im_online(&self) -> im_online::calls::TransactionApi {
			im_online::calls::TransactionApi
		}
		pub fn identity(&self) -> identity::calls::TransactionApi {
			identity::calls::TransactionApi
		}
		pub fn society(&self) -> society::calls::TransactionApi {
			society::calls::TransactionApi
		}
		pub fn recovery(&self) -> recovery::calls::TransactionApi {
			recovery::calls::TransactionApi
		}
		pub fn vesting(&self) -> vesting::calls::TransactionApi {
			vesting::calls::TransactionApi
		}
		pub fn scheduler(&self) -> scheduler::calls::TransactionApi {
			scheduler::calls::TransactionApi
		}
		pub fn glutton(&self) -> glutton::calls::TransactionApi {
			glutton::calls::TransactionApi
		}
		pub fn preimage(&self) -> preimage::calls::TransactionApi {
			preimage::calls::TransactionApi
		}
		pub fn proxy(&self) -> proxy::calls::TransactionApi {
			proxy::calls::TransactionApi
		}
		pub fn multisig(&self) -> multisig::calls::TransactionApi {
			multisig::calls::TransactionApi
		}
		pub fn bounties(&self) -> bounties::calls::TransactionApi {
			bounties::calls::TransactionApi
		}
		pub fn tips(&self) -> tips::calls::TransactionApi {
			tips::calls::TransactionApi
		}
		pub fn assets(&self) -> assets::calls::TransactionApi {
			assets::calls::TransactionApi
		}
		pub fn lottery(&self) -> lottery::calls::TransactionApi {
			lottery::calls::TransactionApi
		}
		pub fn nis(&self) -> nis::calls::TransactionApi {
			nis::calls::TransactionApi
		}
		pub fn uniques(&self) -> uniques::calls::TransactionApi {
			uniques::calls::TransactionApi
		}
		pub fn nfts(&self) -> nfts::calls::TransactionApi {
			nfts::calls::TransactionApi
		}
		pub fn salary(&self) -> salary::calls::TransactionApi {
			salary::calls::TransactionApi
		}
		pub fn core_fellowship(&self) -> core_fellowship::calls::TransactionApi {
			core_fellowship::calls::TransactionApi
		}
		pub fn transaction_storage(&self) -> transaction_storage::calls::TransactionApi {
			transaction_storage::calls::TransactionApi
		}
		pub fn voter_list(&self) -> voter_list::calls::TransactionApi {
			voter_list::calls::TransactionApi
		}
		pub fn state_trie_migration(&self) -> state_trie_migration::calls::TransactionApi {
			state_trie_migration::calls::TransactionApi
		}
		pub fn child_bounties(&self) -> child_bounties::calls::TransactionApi {
			child_bounties::calls::TransactionApi
		}
		pub fn referenda(&self) -> referenda::calls::TransactionApi {
			referenda::calls::TransactionApi
		}
		pub fn remark(&self) -> remark::calls::TransactionApi {
			remark::calls::TransactionApi
		}
		pub fn root_testing(&self) -> root_testing::calls::TransactionApi {
			root_testing::calls::TransactionApi
		}
		pub fn conviction_voting(&self) -> conviction_voting::calls::TransactionApi {
			conviction_voting::calls::TransactionApi
		}
		pub fn whitelist(&self) -> whitelist::calls::TransactionApi {
			whitelist::calls::TransactionApi
		}
		pub fn alliance_motion(&self) -> alliance_motion::calls::TransactionApi {
			alliance_motion::calls::TransactionApi
		}
		pub fn alliance(&self) -> alliance::calls::TransactionApi {
			alliance::calls::TransactionApi
		}
		pub fn nomination_pools(&self) -> nomination_pools::calls::TransactionApi {
			nomination_pools::calls::TransactionApi
		}
		pub fn ranked_polls(&self) -> ranked_polls::calls::TransactionApi {
			ranked_polls::calls::TransactionApi
		}
		pub fn ranked_collective(&self) -> ranked_collective::calls::TransactionApi {
			ranked_collective::calls::TransactionApi
		}
		pub fn fast_unstake(&self) -> fast_unstake::calls::TransactionApi {
			fast_unstake::calls::TransactionApi
		}
		pub fn message_queue(&self) -> message_queue::calls::TransactionApi {
			message_queue::calls::TransactionApi
		}
		pub fn pov(&self) -> pov::calls::TransactionApi {
			pov::calls::TransactionApi
		}
	}
	/// check whether the Client you are using is aligned with the statically generated codegen.
	pub fn validate_codegen<T: ::subxt::Config, C: ::subxt::client::OfflineClientT<T>>(
		client: &C,
	) -> Result<(), ::subxt::error::MetadataError> {
		let runtime_metadata_hash = client.metadata().metadata_hash(&PALLETS);
		if runtime_metadata_hash !=
			[
				151u8, 142u8, 189u8, 25u8, 195u8, 35u8, 139u8, 227u8, 211u8, 42u8, 111u8, 85u8,
				189u8, 193u8, 101u8, 143u8, 26u8, 222u8, 53u8, 76u8, 237u8, 20u8, 237u8, 100u8,
				214u8, 69u8, 184u8, 83u8, 80u8, 251u8, 184u8, 204u8,
			] {
			Err(::subxt::error::MetadataError::IncompatibleMetadata)
		} else {
			Ok(())
		}
	}
	pub mod system {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Remark {
				pub remark: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetHeapPages {
				pub pages: ::core::primitive::u64,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetCode {
				pub code: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetCodeWithoutChecks {
				pub code: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetStorage {
				pub items: ::std::vec::Vec<(
					::std::vec::Vec<::core::primitive::u8>,
					::std::vec::Vec<::core::primitive::u8>,
				)>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct KillStorage {
				pub keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct KillPrefix {
				pub prefix: ::std::vec::Vec<::core::primitive::u8>,
				pub subkeys: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemarkWithEvent {
				pub remark: ::std::vec::Vec<::core::primitive::u8>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Make some on-chain remark.
				///
				///## Complexity
				/// - `O(1)`
				pub fn remark(
					&self,
					remark: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::Payload<Remark> {
					::subxt::tx::Payload::new_static(
						"System",
						"remark",
						Remark { remark },
						[
							101u8, 80u8, 195u8, 226u8, 224u8, 247u8, 60u8, 128u8, 3u8, 101u8, 51u8,
							147u8, 96u8, 126u8, 76u8, 230u8, 194u8, 227u8, 191u8, 73u8, 160u8,
							146u8, 87u8, 147u8, 243u8, 28u8, 228u8, 116u8, 224u8, 181u8, 129u8,
							160u8,
						],
					)
				}
				///Set the number of pages in the WebAssembly environment's heap.
				pub fn set_heap_pages(
					&self,
					pages: ::core::primitive::u64,
				) -> ::subxt::tx::Payload<SetHeapPages> {
					::subxt::tx::Payload::new_static(
						"System",
						"set_heap_pages",
						SetHeapPages { pages },
						[
							43u8, 103u8, 128u8, 49u8, 156u8, 136u8, 11u8, 204u8, 80u8, 6u8, 244u8,
							86u8, 171u8, 44u8, 140u8, 225u8, 142u8, 198u8, 43u8, 87u8, 26u8, 45u8,
							125u8, 222u8, 165u8, 254u8, 172u8, 158u8, 39u8, 178u8, 86u8, 87u8,
						],
					)
				}
				///Set the new runtime code.
				///
				///## Complexity
				/// - `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`
				pub fn set_code(
					&self,
					code: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::Payload<SetCode> {
					::subxt::tx::Payload::new_static(
						"System",
						"set_code",
						SetCode { code },
						[
							27u8, 104u8, 244u8, 205u8, 188u8, 254u8, 121u8, 13u8, 106u8, 120u8,
							244u8, 108u8, 97u8, 84u8, 100u8, 68u8, 26u8, 69u8, 93u8, 128u8, 107u8,
							4u8, 3u8, 142u8, 13u8, 134u8, 196u8, 62u8, 113u8, 181u8, 14u8, 40u8,
						],
					)
				}
				///Set the new runtime code without doing any checks of the given `code`.
				///
				///## Complexity
				/// - `O(C)` where `C` length of `code`
				pub fn set_code_without_checks(
					&self,
					code: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::Payload<SetCodeWithoutChecks> {
					::subxt::tx::Payload::new_static(
						"System",
						"set_code_without_checks",
						SetCodeWithoutChecks { code },
						[
							102u8, 160u8, 125u8, 235u8, 30u8, 23u8, 45u8, 239u8, 112u8, 148u8,
							159u8, 158u8, 42u8, 93u8, 206u8, 94u8, 80u8, 250u8, 66u8, 195u8, 60u8,
							40u8, 142u8, 169u8, 183u8, 80u8, 80u8, 96u8, 3u8, 231u8, 99u8, 216u8,
						],
					)
				}
				///Set some items of storage.
				pub fn set_storage(
					&self,
					items: ::std::vec::Vec<(
						::std::vec::Vec<::core::primitive::u8>,
						::std::vec::Vec<::core::primitive::u8>,
					)>,
				) -> ::subxt::tx::Payload<SetStorage> {
					::subxt::tx::Payload::new_static(
						"System",
						"set_storage",
						SetStorage { items },
						[
							74u8, 43u8, 106u8, 255u8, 50u8, 151u8, 192u8, 155u8, 14u8, 90u8, 19u8,
							45u8, 165u8, 16u8, 235u8, 242u8, 21u8, 131u8, 33u8, 172u8, 119u8, 78u8,
							140u8, 10u8, 107u8, 202u8, 122u8, 235u8, 181u8, 191u8, 22u8, 116u8,
						],
					)
				}
				///Kill some items from storage.
				pub fn kill_storage(
					&self,
					keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
				) -> ::subxt::tx::Payload<KillStorage> {
					::subxt::tx::Payload::new_static(
						"System",
						"kill_storage",
						KillStorage { keys },
						[
							174u8, 174u8, 13u8, 174u8, 75u8, 138u8, 128u8, 235u8, 222u8, 216u8,
							85u8, 18u8, 198u8, 1u8, 138u8, 70u8, 19u8, 108u8, 209u8, 41u8, 228u8,
							67u8, 130u8, 230u8, 160u8, 207u8, 11u8, 180u8, 139u8, 242u8, 41u8,
							15u8,
						],
					)
				}
				///Kill all storage items with a key that starts with the given prefix.
				///
				///**NOTE:** We rely on the Root origin to provide us the number of subkeys under
				///the prefix we are removing to accurately calculate the weight of this function.
				pub fn kill_prefix(
					&self,
					prefix: ::std::vec::Vec<::core::primitive::u8>,
					subkeys: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<KillPrefix> {
					::subxt::tx::Payload::new_static(
						"System",
						"kill_prefix",
						KillPrefix { prefix, subkeys },
						[
							203u8, 116u8, 217u8, 42u8, 154u8, 215u8, 77u8, 217u8, 13u8, 22u8,
							193u8, 2u8, 128u8, 115u8, 179u8, 115u8, 187u8, 218u8, 129u8, 34u8,
							80u8, 4u8, 173u8, 120u8, 92u8, 35u8, 237u8, 112u8, 201u8, 207u8, 200u8,
							48u8,
						],
					)
				}
				///Make some on-chain remark and emit event.
				pub fn remark_with_event(
					&self,
					remark: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::Payload<RemarkWithEvent> {
					::subxt::tx::Payload::new_static(
						"System",
						"remark_with_event",
						RemarkWithEvent { remark },
						[
							123u8, 225u8, 180u8, 179u8, 144u8, 74u8, 27u8, 85u8, 101u8, 75u8,
							134u8, 44u8, 181u8, 25u8, 183u8, 158u8, 14u8, 213u8, 56u8, 225u8,
							136u8, 88u8, 26u8, 114u8, 178u8, 43u8, 176u8, 43u8, 240u8, 84u8, 116u8,
							46u8,
						],
					)
				}
			}
		}
		///Event for the System pallet.
		pub type Event = runtime_types::frame_system::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An extrinsic completed successfully.
			pub struct ExtrinsicSuccess {
				pub dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
			}
			impl ::subxt::events::StaticEvent for ExtrinsicSuccess {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "ExtrinsicSuccess";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An extrinsic failed.
			pub struct ExtrinsicFailed {
				pub dispatch_error: runtime_types::sp_runtime::DispatchError,
				pub dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
			}
			impl ::subxt::events::StaticEvent for ExtrinsicFailed {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "ExtrinsicFailed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///`:code` was updated.
			pub struct CodeUpdated;
			impl ::subxt::events::StaticEvent for CodeUpdated {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "CodeUpdated";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A new account was created.
			pub struct NewAccount {
				pub account: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for NewAccount {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "NewAccount";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An account was reaped.
			pub struct KilledAccount {
				pub account: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for KilledAccount {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "KilledAccount";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///On on-chain remark happened.
			pub struct Remarked {
				pub sender: ::subxt::utils::AccountId32,
				pub hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for Remarked {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "Remarked";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The full account information for a particular account ID.
				pub fn account(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::frame_system::AccountInfo<
						::core::primitive::u32,
						runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"Account",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							176u8, 187u8, 21u8, 220u8, 159u8, 204u8, 127u8, 14u8, 21u8, 69u8, 77u8,
							114u8, 230u8, 141u8, 107u8, 79u8, 23u8, 16u8, 174u8, 243u8, 252u8,
							42u8, 65u8, 120u8, 229u8, 38u8, 210u8, 255u8, 22u8, 40u8, 109u8, 223u8,
						],
					)
				}
				/// The full account information for a particular account ID.
				pub fn account_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::frame_system::AccountInfo<
						::core::primitive::u32,
						runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"Account",
						Vec::new(),
						[
							176u8, 187u8, 21u8, 220u8, 159u8, 204u8, 127u8, 14u8, 21u8, 69u8, 77u8,
							114u8, 230u8, 141u8, 107u8, 79u8, 23u8, 16u8, 174u8, 243u8, 252u8,
							42u8, 65u8, 120u8, 229u8, 38u8, 210u8, 255u8, 22u8, 40u8, 109u8, 223u8,
						],
					)
				}
				/// Total extrinsics count for the current block.
				pub fn extrinsic_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"ExtrinsicCount",
						vec![],
						[
							223u8, 60u8, 201u8, 120u8, 36u8, 44u8, 180u8, 210u8, 242u8, 53u8,
							222u8, 154u8, 123u8, 176u8, 249u8, 8u8, 225u8, 28u8, 232u8, 4u8, 136u8,
							41u8, 151u8, 82u8, 189u8, 149u8, 49u8, 166u8, 139u8, 9u8, 163u8, 231u8,
						],
					)
				}
				/// The current weight for the block.
				pub fn block_weight(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::frame_support::dispatch::PerDispatchClass<
						runtime_types::sp_weights::weight_v2::Weight,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"BlockWeight",
						vec![],
						[
							120u8, 67u8, 71u8, 163u8, 36u8, 202u8, 52u8, 106u8, 143u8, 155u8,
							144u8, 87u8, 142u8, 241u8, 232u8, 183u8, 56u8, 235u8, 27u8, 237u8,
							20u8, 202u8, 33u8, 85u8, 189u8, 0u8, 28u8, 52u8, 198u8, 40u8, 219u8,
							54u8,
						],
					)
				}
				/// Total length (in bytes) for all extrinsics put together, for the current block.
				pub fn all_extrinsics_len(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"AllExtrinsicsLen",
						vec![],
						[
							202u8, 145u8, 209u8, 225u8, 40u8, 220u8, 174u8, 74u8, 93u8, 164u8,
							254u8, 248u8, 254u8, 192u8, 32u8, 117u8, 96u8, 149u8, 53u8, 145u8,
							219u8, 64u8, 234u8, 18u8, 217u8, 200u8, 203u8, 141u8, 145u8, 28u8,
							134u8, 60u8,
						],
					)
				}
				/// Map of block numbers to block hashes.
				pub fn block_hash(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::H256,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"BlockHash",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							50u8, 112u8, 176u8, 239u8, 175u8, 18u8, 205u8, 20u8, 241u8, 195u8,
							21u8, 228u8, 186u8, 57u8, 200u8, 25u8, 38u8, 44u8, 106u8, 20u8, 168u8,
							80u8, 76u8, 235u8, 12u8, 51u8, 137u8, 149u8, 200u8, 4u8, 220u8, 237u8,
						],
					)
				}
				/// Map of block numbers to block hashes.
				pub fn block_hash_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::H256,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"BlockHash",
						Vec::new(),
						[
							50u8, 112u8, 176u8, 239u8, 175u8, 18u8, 205u8, 20u8, 241u8, 195u8,
							21u8, 228u8, 186u8, 57u8, 200u8, 25u8, 38u8, 44u8, 106u8, 20u8, 168u8,
							80u8, 76u8, 235u8, 12u8, 51u8, 137u8, 149u8, 200u8, 4u8, 220u8, 237u8,
						],
					)
				}
				/// Extrinsics data for the current block (maps an extrinsic's index to its data).
				pub fn extrinsic_data(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::core::primitive::u8>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"ExtrinsicData",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							210u8, 224u8, 211u8, 186u8, 118u8, 210u8, 185u8, 194u8, 238u8, 211u8,
							254u8, 73u8, 67u8, 184u8, 31u8, 229u8, 168u8, 125u8, 98u8, 23u8, 241u8,
							59u8, 49u8, 86u8, 126u8, 9u8, 114u8, 163u8, 160u8, 62u8, 50u8, 67u8,
						],
					)
				}
				/// Extrinsics data for the current block (maps an extrinsic's index to its data).
				pub fn extrinsic_data_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::core::primitive::u8>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"ExtrinsicData",
						Vec::new(),
						[
							210u8, 224u8, 211u8, 186u8, 118u8, 210u8, 185u8, 194u8, 238u8, 211u8,
							254u8, 73u8, 67u8, 184u8, 31u8, 229u8, 168u8, 125u8, 98u8, 23u8, 241u8,
							59u8, 49u8, 86u8, 126u8, 9u8, 114u8, 163u8, 160u8, 62u8, 50u8, 67u8,
						],
					)
				}
				/// The current block number being processed. Set by `execute_block`.
				pub fn number(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"Number",
						vec![],
						[
							228u8, 96u8, 102u8, 190u8, 252u8, 130u8, 239u8, 172u8, 126u8, 235u8,
							246u8, 139u8, 208u8, 15u8, 88u8, 245u8, 141u8, 232u8, 43u8, 204u8,
							36u8, 87u8, 211u8, 141u8, 187u8, 68u8, 236u8, 70u8, 193u8, 235u8,
							164u8, 191u8,
						],
					)
				}
				/// Hash of the previous block.
				pub fn parent_hash(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::H256,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"ParentHash",
						vec![],
						[
							232u8, 206u8, 177u8, 119u8, 38u8, 57u8, 233u8, 50u8, 225u8, 49u8,
							169u8, 176u8, 210u8, 51u8, 231u8, 176u8, 234u8, 186u8, 188u8, 112u8,
							15u8, 152u8, 195u8, 232u8, 201u8, 97u8, 208u8, 249u8, 9u8, 163u8, 69u8,
							36u8,
						],
					)
				}
				/// Digest of the current block, also part of the block header.
				pub fn digest(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::sp_runtime::generic::digest::Digest,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"Digest",
						vec![],
						[
							83u8, 141u8, 200u8, 132u8, 182u8, 55u8, 197u8, 122u8, 13u8, 159u8,
							31u8, 42u8, 60u8, 191u8, 89u8, 221u8, 242u8, 47u8, 199u8, 213u8, 48u8,
							216u8, 131u8, 168u8, 245u8, 82u8, 56u8, 190u8, 62u8, 69u8, 96u8, 37u8,
						],
					)
				}
				/// Events deposited for the current block.
				///
				/// NOTE: The item is unbound and should therefore never be read on chain.
				/// It could otherwise inflate the PoV size of a block.
				///
				/// Events have a large in-memory size. Box the events to not go out-of-memory
				/// just in case someone still reads them from within the runtime.
				pub fn events(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<
						runtime_types::frame_system::EventRecord<
							runtime_types::babe_runtime::RuntimeEvent,
							::subxt::utils::H256,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"Events",
						vec![],
						[
							109u8, 241u8, 85u8, 182u8, 42u8, 49u8, 147u8, 135u8, 122u8, 53u8, 70u8,
							76u8, 176u8, 77u8, 207u8, 113u8, 68u8, 186u8, 65u8, 126u8, 243u8, 3u8,
							44u8, 72u8, 39u8, 127u8, 175u8, 39u8, 207u8, 52u8, 107u8, 212u8,
						],
					)
				}
				/// The number of events in the `Events<T>` list.
				pub fn event_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"EventCount",
						vec![],
						[
							236u8, 93u8, 90u8, 177u8, 250u8, 211u8, 138u8, 187u8, 26u8, 208u8,
							203u8, 113u8, 221u8, 233u8, 227u8, 9u8, 249u8, 25u8, 202u8, 185u8,
							161u8, 144u8, 167u8, 104u8, 127u8, 187u8, 38u8, 18u8, 52u8, 61u8, 66u8,
							112u8,
						],
					)
				}
				/// Mapping between a topic (represented by T::Hash) and a vector of indexes
				/// of events in the `<Events<T>>` list.
				///
				/// All topic vectors have deterministic storage locations depending on the topic.
				/// This allows light-clients to leverage the changes trie storage tracking
				/// mechanism and in case of changes fetch the list of events of interest.
				///
				/// The value has the type `(T::BlockNumber, EventIndex)` because if we used only
				/// just the `EventIndex` then in case if the topic has the same contents on the
				/// next block no notification will be triggered thus the event might be lost.
				pub fn event_topics(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"EventTopics",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							205u8, 90u8, 142u8, 190u8, 176u8, 37u8, 94u8, 82u8, 98u8, 1u8, 129u8,
							63u8, 246u8, 101u8, 130u8, 58u8, 216u8, 16u8, 139u8, 196u8, 154u8,
							111u8, 110u8, 178u8, 24u8, 44u8, 183u8, 176u8, 232u8, 82u8, 223u8,
							38u8,
						],
					)
				}
				/// Mapping between a topic (represented by T::Hash) and a vector of indexes
				/// of events in the `<Events<T>>` list.
				///
				/// All topic vectors have deterministic storage locations depending on the topic.
				/// This allows light-clients to leverage the changes trie storage tracking
				/// mechanism and in case of changes fetch the list of events of interest.
				///
				/// The value has the type `(T::BlockNumber, EventIndex)` because if we used only
				/// just the `EventIndex` then in case if the topic has the same contents on the
				/// next block no notification will be triggered thus the event might be lost.
				pub fn event_topics_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"EventTopics",
						Vec::new(),
						[
							205u8, 90u8, 142u8, 190u8, 176u8, 37u8, 94u8, 82u8, 98u8, 1u8, 129u8,
							63u8, 246u8, 101u8, 130u8, 58u8, 216u8, 16u8, 139u8, 196u8, 154u8,
							111u8, 110u8, 178u8, 24u8, 44u8, 183u8, 176u8, 232u8, 82u8, 223u8,
							38u8,
						],
					)
				}
				/// Stores the `spec_version` and `spec_name` of when the last runtime upgrade
				/// happened.
				pub fn last_runtime_upgrade(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::frame_system::LastRuntimeUpgradeInfo,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"LastRuntimeUpgrade",
						vec![],
						[
							52u8, 37u8, 117u8, 111u8, 57u8, 130u8, 196u8, 14u8, 99u8, 77u8, 91u8,
							126u8, 178u8, 249u8, 78u8, 34u8, 9u8, 194u8, 92u8, 105u8, 113u8, 81u8,
							185u8, 127u8, 245u8, 184u8, 60u8, 29u8, 234u8, 182u8, 96u8, 196u8,
						],
					)
				}
				/// True if we have upgraded so that `type RefCount` is `u32`. False (default) if
				/// not.
				pub fn upgraded_to_u32_ref_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::bool,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"UpgradedToU32RefCount",
						vec![],
						[
							171u8, 88u8, 244u8, 92u8, 122u8, 67u8, 27u8, 18u8, 59u8, 175u8, 175u8,
							178u8, 20u8, 150u8, 213u8, 59u8, 222u8, 141u8, 32u8, 107u8, 3u8, 114u8,
							83u8, 250u8, 180u8, 233u8, 152u8, 54u8, 187u8, 99u8, 131u8, 204u8,
						],
					)
				}
				/// True if we have upgraded so that AccountInfo contains three types of `RefCount`.
				/// False (default) if not.
				pub fn upgraded_to_triple_ref_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::bool,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"UpgradedToTripleRefCount",
						vec![],
						[
							90u8, 33u8, 56u8, 86u8, 90u8, 101u8, 89u8, 133u8, 203u8, 56u8, 201u8,
							210u8, 244u8, 232u8, 150u8, 18u8, 51u8, 105u8, 14u8, 230u8, 103u8,
							155u8, 246u8, 99u8, 53u8, 207u8, 225u8, 128u8, 186u8, 76u8, 40u8,
							185u8,
						],
					)
				}
				/// The execution phase of the block.
				pub fn execution_phase(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::frame_system::Phase,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"System",
						"ExecutionPhase",
						vec![],
						[
							230u8, 183u8, 221u8, 135u8, 226u8, 223u8, 55u8, 104u8, 138u8, 224u8,
							103u8, 156u8, 222u8, 99u8, 203u8, 199u8, 164u8, 168u8, 193u8, 133u8,
							201u8, 155u8, 63u8, 95u8, 17u8, 206u8, 165u8, 123u8, 161u8, 33u8,
							172u8, 93u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// Block & extrinsics weights: base values and limits.
				pub fn block_weights(
					&self,
				) -> ::subxt::constants::Address<runtime_types::frame_system::limits::BlockWeights>
				{
					::subxt::constants::Address::new_static(
						"System",
						"BlockWeights",
						[
							118u8, 253u8, 239u8, 217u8, 145u8, 115u8, 85u8, 86u8, 172u8, 248u8,
							139u8, 32u8, 158u8, 126u8, 172u8, 188u8, 197u8, 105u8, 145u8, 235u8,
							171u8, 50u8, 31u8, 225u8, 167u8, 187u8, 241u8, 87u8, 6u8, 17u8, 234u8,
							185u8,
						],
					)
				}
				/// The maximum length of a block (in bytes).
				pub fn block_length(
					&self,
				) -> ::subxt::constants::Address<runtime_types::frame_system::limits::BlockLength> {
					::subxt::constants::Address::new_static(
						"System",
						"BlockLength",
						[
							116u8, 184u8, 225u8, 228u8, 207u8, 203u8, 4u8, 220u8, 234u8, 198u8,
							150u8, 108u8, 205u8, 87u8, 194u8, 131u8, 229u8, 51u8, 140u8, 4u8, 47u8,
							12u8, 200u8, 144u8, 153u8, 62u8, 51u8, 39u8, 138u8, 205u8, 203u8,
							236u8,
						],
					)
				}
				/// Maximum number of block number to block hash mappings to keep (oldest pruned
				/// first).
				pub fn block_hash_count(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"System",
						"BlockHashCount",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The weight of runtime database operations the runtime can invoke.
				pub fn db_weight(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_weights::RuntimeDbWeight> {
					::subxt::constants::Address::new_static(
						"System",
						"DbWeight",
						[
							124u8, 162u8, 190u8, 149u8, 49u8, 177u8, 162u8, 231u8, 62u8, 167u8,
							199u8, 181u8, 43u8, 232u8, 185u8, 116u8, 195u8, 51u8, 233u8, 223u8,
							20u8, 129u8, 246u8, 13u8, 65u8, 180u8, 64u8, 9u8, 157u8, 59u8, 245u8,
							118u8,
						],
					)
				}
				/// Get the chain's current version.
				pub fn version(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_version::RuntimeVersion> {
					::subxt::constants::Address::new_static(
						"System",
						"Version",
						[
							93u8, 98u8, 57u8, 243u8, 229u8, 8u8, 234u8, 231u8, 72u8, 230u8, 139u8,
							47u8, 63u8, 181u8, 17u8, 2u8, 220u8, 231u8, 104u8, 237u8, 185u8, 143u8,
							165u8, 253u8, 188u8, 76u8, 147u8, 12u8, 170u8, 26u8, 74u8, 200u8,
						],
					)
				}
				/// The designated SS58 prefix of this chain.
				///
				/// This replaces the "ss58Format" property declared in the chain spec. Reason is
				/// that the runtime should know about the prefix in order to make use of it as
				/// an identifier of the chain.
				pub fn ss58_prefix(&self) -> ::subxt::constants::Address<::core::primitive::u16> {
					::subxt::constants::Address::new_static(
						"System",
						"SS58Prefix",
						[
							116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
							41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
							90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
						],
					)
				}
			}
		}
	}
	pub mod utility {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Batch {
				pub calls: ::std::vec::Vec<runtime_types::babe_runtime::RuntimeCall>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AsDerivative {
				pub index: ::core::primitive::u16,
				pub call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct BatchAll {
				pub calls: ::std::vec::Vec<runtime_types::babe_runtime::RuntimeCall>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DispatchAs {
				pub as_origin: ::std::boxed::Box<runtime_types::babe_runtime::OriginCaller>,
				pub call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceBatch {
				pub calls: ::std::vec::Vec<runtime_types::babe_runtime::RuntimeCall>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct WithWeight {
				pub call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
				pub weight: runtime_types::sp_weights::weight_v2::Weight,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Send a batch of dispatch calls.
				///
				///May be called from any origin except `None`.
				///
				/// - `calls`: The calls to be dispatched from the same origin. The number of call
				///   must not
				///  exceed the constant: `batched_calls_limit` (available in constant metadata).
				///
				///If origin is root then the calls are dispatched without checking origin filter.
				/// (This includes bypassing `frame_system::Config::BaseCallFilter`).
				///
				///## Complexity
				/// - O(C) where C is the number of calls to be batched.
				///
				///This will return `Ok` in all circumstances. To determine the success of the
				/// batch, an event is deposited. If a call failed and the batch was interrupted,
				/// then the `BatchInterrupted` event is deposited, along with the number of
				/// successful calls made and the error of the failed call. If all were successful,
				/// then the `BatchCompleted` event is deposited.
				pub fn batch(
					&self,
					calls: ::std::vec::Vec<runtime_types::babe_runtime::RuntimeCall>,
				) -> ::subxt::tx::Payload<Batch> {
					::subxt::tx::Payload::new_static(
						"Utility",
						"batch",
						Batch { calls },
						[
							110u8, 16u8, 19u8, 155u8, 24u8, 80u8, 38u8, 182u8, 12u8, 57u8, 11u8,
							37u8, 236u8, 162u8, 216u8, 67u8, 179u8, 26u8, 58u8, 22u8, 226u8, 8u8,
							221u8, 81u8, 251u8, 154u8, 183u8, 125u8, 98u8, 22u8, 6u8, 124u8,
						],
					)
				}
				///Send a call through an indexed pseudonym of the sender.
				///
				///Filter from origin are passed along. The call will be dispatched with an origin
				/// which use the same filter as the origin of this call.
				///
				///NOTE: If you need to ensure that any account-based filtering is not honored
				/// (i.e. because you expect `proxy` to have been used prior in the call stack and
				/// you do not want the call restrictions to apply to any sub-accounts), then use
				/// `as_multi_threshold_1` in the Multisig pallet instead.
				///
				///NOTE: Prior to version *12, this was called `as_limited_sub`.
				///
				///The dispatch origin for this call must be _Signed_.
				pub fn as_derivative(
					&self,
					index: ::core::primitive::u16,
					call: runtime_types::babe_runtime::RuntimeCall,
				) -> ::subxt::tx::Payload<AsDerivative> {
					::subxt::tx::Payload::new_static(
						"Utility",
						"as_derivative",
						AsDerivative { index, call: ::std::boxed::Box::new(call) },
						[
							38u8, 126u8, 166u8, 80u8, 141u8, 137u8, 119u8, 17u8, 149u8, 175u8,
							143u8, 81u8, 186u8, 128u8, 6u8, 15u8, 215u8, 159u8, 47u8, 247u8, 26u8,
							24u8, 37u8, 88u8, 37u8, 241u8, 11u8, 11u8, 111u8, 87u8, 4u8, 230u8,
						],
					)
				}
				///Send a batch of dispatch calls and atomically execute them.
				///The whole transaction will rollback and fail if any of the calls failed.
				///
				///May be called from any origin except `None`.
				///
				/// - `calls`: The calls to be dispatched from the same origin. The number of call
				///   must not
				///  exceed the constant: `batched_calls_limit` (available in constant metadata).
				///
				///If origin is root then the calls are dispatched without checking origin filter.
				/// (This includes bypassing `frame_system::Config::BaseCallFilter`).
				///
				///## Complexity
				/// - O(C) where C is the number of calls to be batched.
				pub fn batch_all(
					&self,
					calls: ::std::vec::Vec<runtime_types::babe_runtime::RuntimeCall>,
				) -> ::subxt::tx::Payload<BatchAll> {
					::subxt::tx::Payload::new_static(
						"Utility",
						"batch_all",
						BatchAll { calls },
						[
							131u8, 52u8, 138u8, 42u8, 215u8, 152u8, 23u8, 195u8, 195u8, 18u8, 64u8,
							71u8, 229u8, 133u8, 165u8, 222u8, 120u8, 160u8, 1u8, 110u8, 20u8,
							218u8, 12u8, 83u8, 76u8, 72u8, 67u8, 205u8, 120u8, 147u8, 43u8, 14u8,
						],
					)
				}
				///Dispatches a function call with a provided origin.
				///
				///The dispatch origin for this call must be _Root_.
				///
				///## Complexity
				/// - O(1).
				pub fn dispatch_as(
					&self,
					as_origin: runtime_types::babe_runtime::OriginCaller,
					call: runtime_types::babe_runtime::RuntimeCall,
				) -> ::subxt::tx::Payload<DispatchAs> {
					::subxt::tx::Payload::new_static(
						"Utility",
						"dispatch_as",
						DispatchAs {
							as_origin: ::std::boxed::Box::new(as_origin),
							call: ::std::boxed::Box::new(call),
						},
						[
							165u8, 232u8, 106u8, 246u8, 230u8, 129u8, 5u8, 13u8, 244u8, 34u8,
							132u8, 33u8, 192u8, 230u8, 122u8, 223u8, 160u8, 115u8, 206u8, 194u8,
							82u8, 58u8, 71u8, 226u8, 207u8, 10u8, 210u8, 91u8, 11u8, 72u8, 35u8,
							98u8,
						],
					)
				}
				///Send a batch of dispatch calls.
				///Unlike `batch`, it allows errors and won't interrupt.
				///
				///May be called from any origin except `None`.
				///
				/// - `calls`: The calls to be dispatched from the same origin. The number of call
				///   must not
				///  exceed the constant: `batched_calls_limit` (available in constant metadata).
				///
				///If origin is root then the calls are dispatch without checking origin filter.
				/// (This includes bypassing `frame_system::Config::BaseCallFilter`).
				///
				///## Complexity
				/// - O(C) where C is the number of calls to be batched.
				pub fn force_batch(
					&self,
					calls: ::std::vec::Vec<runtime_types::babe_runtime::RuntimeCall>,
				) -> ::subxt::tx::Payload<ForceBatch> {
					::subxt::tx::Payload::new_static(
						"Utility",
						"force_batch",
						ForceBatch { calls },
						[
							195u8, 128u8, 54u8, 62u8, 81u8, 226u8, 246u8, 60u8, 184u8, 209u8,
							191u8, 95u8, 140u8, 125u8, 67u8, 149u8, 128u8, 174u8, 250u8, 0u8,
							201u8, 120u8, 5u8, 92u8, 29u8, 195u8, 188u8, 109u8, 89u8, 96u8, 107u8,
							125u8,
						],
					)
				}
				///Dispatch a function call with a specified weight.
				///
				///This function does not check the weight of the call, and instead allows the
				///Root origin to specify the weight of the call.
				///
				///The dispatch origin for this call must be _Root_.
				pub fn with_weight(
					&self,
					call: runtime_types::babe_runtime::RuntimeCall,
					weight: runtime_types::sp_weights::weight_v2::Weight,
				) -> ::subxt::tx::Payload<WithWeight> {
					::subxt::tx::Payload::new_static(
						"Utility",
						"with_weight",
						WithWeight { call: ::std::boxed::Box::new(call), weight },
						[
							76u8, 113u8, 38u8, 241u8, 157u8, 49u8, 165u8, 151u8, 213u8, 40u8, 55u8,
							161u8, 182u8, 234u8, 132u8, 203u8, 156u8, 107u8, 88u8, 27u8, 160u8,
							185u8, 114u8, 211u8, 31u8, 144u8, 239u8, 63u8, 82u8, 96u8, 190u8, 23u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_utility::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Batch of dispatches did not complete fully. Index of first failing dispatch given,
			/// as well as the error.
			pub struct BatchInterrupted {
				pub index: ::core::primitive::u32,
				pub error: runtime_types::sp_runtime::DispatchError,
			}
			impl ::subxt::events::StaticEvent for BatchInterrupted {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "BatchInterrupted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Batch of dispatches completed fully with no error.
			pub struct BatchCompleted;
			impl ::subxt::events::StaticEvent for BatchCompleted {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "BatchCompleted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Batch of dispatches completed but has errors.
			pub struct BatchCompletedWithErrors;
			impl ::subxt::events::StaticEvent for BatchCompletedWithErrors {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "BatchCompletedWithErrors";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A single item within a Batch of dispatches has completed with no error.
			pub struct ItemCompleted;
			impl ::subxt::events::StaticEvent for ItemCompleted {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "ItemCompleted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A single item within a Batch of dispatches has completed with error.
			pub struct ItemFailed {
				pub error: runtime_types::sp_runtime::DispatchError,
			}
			impl ::subxt::events::StaticEvent for ItemFailed {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "ItemFailed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A call was dispatched.
			pub struct DispatchedAs {
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for DispatchedAs {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "DispatchedAs";
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The limit on the number of batched calls.
				pub fn batched_calls_limit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Utility",
						"batched_calls_limit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod babe {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ReportEquivocation {
				pub equivocation_proof: ::std::boxed::Box<
					runtime_types::sp_consensus_slots::EquivocationProof<
						runtime_types::sp_runtime::generic::header::Header<
							::core::primitive::u32,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
						runtime_types::sp_consensus_babe::app::Public,
					>,
				>,
				pub key_owner_proof: runtime_types::sp_session::MembershipProof,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ReportEquivocationUnsigned {
				pub equivocation_proof: ::std::boxed::Box<
					runtime_types::sp_consensus_slots::EquivocationProof<
						runtime_types::sp_runtime::generic::header::Header<
							::core::primitive::u32,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
						runtime_types::sp_consensus_babe::app::Public,
					>,
				>,
				pub key_owner_proof: runtime_types::sp_session::MembershipProof,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct PlanConfigChange {
				pub config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Report authority equivocation/misbehavior. This method will verify
				///the equivocation proof and validate the given key ownership proof
				///against the extracted offender. If both are valid, the offence will
				///be reported.
				pub fn report_equivocation(
					&self,
					equivocation_proof: runtime_types::sp_consensus_slots::EquivocationProof<
						runtime_types::sp_runtime::generic::header::Header<
							::core::primitive::u32,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
						runtime_types::sp_consensus_babe::app::Public,
					>,
					key_owner_proof: runtime_types::sp_session::MembershipProof,
				) -> ::subxt::tx::Payload<ReportEquivocation> {
					::subxt::tx::Payload::new_static(
						"Babe",
						"report_equivocation",
						ReportEquivocation {
							equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
							key_owner_proof,
						},
						[
							177u8, 237u8, 107u8, 138u8, 237u8, 233u8, 30u8, 195u8, 112u8, 176u8,
							185u8, 113u8, 157u8, 221u8, 134u8, 151u8, 62u8, 151u8, 64u8, 164u8,
							254u8, 112u8, 2u8, 94u8, 175u8, 79u8, 160u8, 3u8, 72u8, 145u8, 244u8,
							137u8,
						],
					)
				}
				///Report authority equivocation/misbehavior. This method will verify
				///the equivocation proof and validate the given key ownership proof
				///against the extracted offender. If both are valid, the offence will
				///be reported.
				///This extrinsic must be called unsigned and it is expected that only
				///block authors will call it (validated in `ValidateUnsigned`), as such
				///if the block author is defined it will be defined as the equivocation
				///reporter.
				pub fn report_equivocation_unsigned(
					&self,
					equivocation_proof: runtime_types::sp_consensus_slots::EquivocationProof<
						runtime_types::sp_runtime::generic::header::Header<
							::core::primitive::u32,
							runtime_types::sp_runtime::traits::BlakeTwo256,
						>,
						runtime_types::sp_consensus_babe::app::Public,
					>,
					key_owner_proof: runtime_types::sp_session::MembershipProof,
				) -> ::subxt::tx::Payload<ReportEquivocationUnsigned> {
					::subxt::tx::Payload::new_static(
						"Babe",
						"report_equivocation_unsigned",
						ReportEquivocationUnsigned {
							equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
							key_owner_proof,
						},
						[
							56u8, 103u8, 238u8, 118u8, 61u8, 192u8, 222u8, 87u8, 254u8, 24u8,
							138u8, 219u8, 210u8, 85u8, 201u8, 147u8, 128u8, 49u8, 199u8, 144u8,
							46u8, 158u8, 163u8, 31u8, 101u8, 224u8, 72u8, 98u8, 68u8, 120u8, 215u8,
							19u8,
						],
					)
				}
				///Plan an epoch config change. The epoch config change is recorded and will be
				/// enacted on the next call to `enact_epoch_change`. The config will be activated
				/// one epoch after. Multiple calls to this method will replace any existing planned
				/// config change that had not been enacted yet.
				pub fn plan_config_change(
					&self,
					config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
				) -> ::subxt::tx::Payload<PlanConfigChange> {
					::subxt::tx::Payload::new_static(
						"Babe",
						"plan_config_change",
						PlanConfigChange { config },
						[
							229u8, 157u8, 41u8, 58u8, 56u8, 4u8, 52u8, 107u8, 104u8, 20u8, 42u8,
							110u8, 1u8, 17u8, 45u8, 196u8, 30u8, 135u8, 63u8, 46u8, 40u8, 137u8,
							209u8, 37u8, 24u8, 108u8, 251u8, 189u8, 77u8, 208u8, 74u8, 32u8,
						],
					)
				}
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// Current epoch index.
				pub fn epoch_index(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u64,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Babe",
						"EpochIndex",
						vec![],
						[
							51u8, 27u8, 91u8, 156u8, 118u8, 99u8, 46u8, 219u8, 190u8, 147u8, 205u8,
							23u8, 106u8, 169u8, 121u8, 218u8, 208u8, 235u8, 135u8, 127u8, 243u8,
							41u8, 55u8, 243u8, 235u8, 122u8, 57u8, 86u8, 37u8, 90u8, 208u8, 71u8,
						],
					)
				}
				/// Current epoch authorities.
				pub fn authorities(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<(
						runtime_types::sp_consensus_babe::app::Public,
						::core::primitive::u64,
					)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Babe",
						"Authorities",
						vec![],
						[
							61u8, 8u8, 133u8, 111u8, 169u8, 120u8, 0u8, 213u8, 31u8, 159u8, 204u8,
							212u8, 18u8, 205u8, 93u8, 84u8, 140u8, 108u8, 136u8, 209u8, 234u8,
							107u8, 145u8, 9u8, 204u8, 224u8, 105u8, 9u8, 238u8, 241u8, 65u8, 30u8,
						],
					)
				}
				/// The slot at which the first epoch actually started. This is 0
				/// until the first block of the chain.
				pub fn genesis_slot(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::sp_consensus_slots::Slot,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Babe",
						"GenesisSlot",
						vec![],
						[
							234u8, 127u8, 243u8, 100u8, 124u8, 160u8, 66u8, 248u8, 48u8, 218u8,
							61u8, 52u8, 54u8, 142u8, 158u8, 77u8, 32u8, 63u8, 156u8, 39u8, 94u8,
							255u8, 192u8, 238u8, 170u8, 118u8, 58u8, 42u8, 199u8, 61u8, 199u8,
							77u8,
						],
					)
				}
				/// Current slot number.
				pub fn current_slot(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::sp_consensus_slots::Slot,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Babe",
						"CurrentSlot",
						vec![],
						[
							139u8, 237u8, 185u8, 137u8, 251u8, 179u8, 69u8, 167u8, 133u8, 168u8,
							204u8, 64u8, 178u8, 123u8, 92u8, 250u8, 119u8, 190u8, 208u8, 178u8,
							208u8, 176u8, 124u8, 187u8, 74u8, 165u8, 33u8, 78u8, 161u8, 206u8, 8u8,
							108u8,
						],
					)
				}
				/// The epoch randomness for the *current* epoch.
				///
				/// # Security
				///
				/// This MUST NOT be used for gambling, as it can be influenced by a
				/// malicious validator in the short term. It MAY be used in many
				/// cryptographic protocols, however, so long as one remembers that this
				/// (like everything else on-chain) it is public. For example, it can be
				/// used where a number is needed that cannot have been chosen by an
				/// adversary, for purposes such as public-coin zero-knowledge proofs.
				pub fn randomness(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					[::core::primitive::u8; 32usize],
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Babe",
						"Randomness",
						vec![],
						[
							191u8, 197u8, 25u8, 164u8, 104u8, 248u8, 247u8, 193u8, 244u8, 60u8,
							181u8, 195u8, 248u8, 90u8, 41u8, 199u8, 82u8, 123u8, 72u8, 126u8, 18u8,
							17u8, 128u8, 215u8, 34u8, 251u8, 227u8, 70u8, 166u8, 10u8, 104u8,
							140u8,
						],
					)
				}
				/// Pending epoch configuration change that will be applied when the next epoch is
				/// enacted.
				pub fn pending_epoch_config_change(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Babe",
						"PendingEpochConfigChange",
						vec![],
						[
							4u8, 201u8, 0u8, 204u8, 47u8, 246u8, 4u8, 185u8, 163u8, 242u8, 242u8,
							152u8, 29u8, 222u8, 71u8, 127u8, 49u8, 203u8, 206u8, 180u8, 244u8,
							50u8, 80u8, 49u8, 199u8, 97u8, 3u8, 170u8, 156u8, 139u8, 106u8, 113u8,
						],
					)
				}
				/// Next epoch randomness.
				pub fn next_randomness(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					[::core::primitive::u8; 32usize],
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Babe",
						"NextRandomness",
						vec![],
						[
							185u8, 98u8, 45u8, 109u8, 253u8, 38u8, 238u8, 221u8, 240u8, 29u8, 38u8,
							107u8, 118u8, 117u8, 131u8, 115u8, 21u8, 255u8, 203u8, 81u8, 243u8,
							251u8, 91u8, 60u8, 163u8, 202u8, 125u8, 193u8, 173u8, 234u8, 166u8,
							92u8,
						],
					)
				}
				/// Next epoch authorities.
				pub fn next_authorities(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<(
						runtime_types::sp_consensus_babe::app::Public,
						::core::primitive::u64,
					)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Babe",
						"NextAuthorities",
						vec![],
						[
							201u8, 193u8, 164u8, 18u8, 155u8, 253u8, 124u8, 163u8, 143u8, 73u8,
							212u8, 20u8, 241u8, 108u8, 110u8, 5u8, 171u8, 66u8, 224u8, 208u8, 10u8,
							65u8, 148u8, 164u8, 1u8, 12u8, 216u8, 83u8, 20u8, 226u8, 254u8, 183u8,
						],
					)
				}
				/// Randomness under construction.
				///
				/// We make a trade-off between storage accesses and list length.
				/// We store the under-construction randomness in segments of up to
				/// `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.
				///
				/// Once a segment reaches this length, we begin the next one.
				/// We reset all segments and return to `0` at the beginning of every
				/// epoch.
				pub fn segment_index(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Babe",
						"SegmentIndex",
						vec![],
						[
							128u8, 45u8, 87u8, 58u8, 174u8, 152u8, 241u8, 156u8, 56u8, 192u8, 19u8,
							45u8, 75u8, 160u8, 35u8, 253u8, 145u8, 11u8, 178u8, 81u8, 114u8, 117u8,
							112u8, 107u8, 163u8, 208u8, 240u8, 151u8, 102u8, 176u8, 246u8, 5u8,
						],
					)
				}
				/// TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay.
				pub fn under_construction(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						[::core::primitive::u8; 32usize],
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Babe",
						"UnderConstruction",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							180u8, 4u8, 149u8, 245u8, 231u8, 92u8, 99u8, 170u8, 254u8, 172u8,
							182u8, 3u8, 152u8, 156u8, 132u8, 196u8, 140u8, 97u8, 7u8, 84u8, 220u8,
							89u8, 195u8, 177u8, 235u8, 51u8, 98u8, 144u8, 73u8, 238u8, 59u8, 164u8,
						],
					)
				}
				/// TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay.
				pub fn under_construction_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						[::core::primitive::u8; 32usize],
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Babe",
						"UnderConstruction",
						Vec::new(),
						[
							180u8, 4u8, 149u8, 245u8, 231u8, 92u8, 99u8, 170u8, 254u8, 172u8,
							182u8, 3u8, 152u8, 156u8, 132u8, 196u8, 140u8, 97u8, 7u8, 84u8, 220u8,
							89u8, 195u8, 177u8, 235u8, 51u8, 98u8, 144u8, 73u8, 238u8, 59u8, 164u8,
						],
					)
				}
				/// Temporary value (cleared at block finalization) which is `Some`
				/// if per-block initialization has already been called for current block.
				pub fn initialized(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::option::Option<runtime_types::sp_consensus_babe::digests::PreDigest>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Babe",
						"Initialized",
						vec![],
						[
							142u8, 101u8, 250u8, 113u8, 93u8, 201u8, 157u8, 18u8, 166u8, 153u8,
							59u8, 197u8, 107u8, 247u8, 124u8, 110u8, 202u8, 67u8, 62u8, 57u8,
							186u8, 134u8, 49u8, 182u8, 149u8, 44u8, 255u8, 85u8, 87u8, 177u8,
							149u8, 121u8,
						],
					)
				}
				/// This field should always be populated during block processing unless
				/// secondary plain slots are enabled (which don't contain a VRF output).
				///
				/// It is set in `on_finalize`, before it will contain the value from the last
				/// block.
				pub fn author_vrf_randomness(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::option::Option<[::core::primitive::u8; 32usize]>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Babe",
						"AuthorVrfRandomness",
						vec![],
						[
							66u8, 235u8, 74u8, 252u8, 222u8, 135u8, 19u8, 28u8, 74u8, 191u8, 170u8,
							197u8, 207u8, 127u8, 77u8, 121u8, 138u8, 138u8, 110u8, 187u8, 34u8,
							14u8, 230u8, 43u8, 241u8, 241u8, 63u8, 163u8, 53u8, 179u8, 250u8,
							247u8,
						],
					)
				}
				/// The block numbers when the last and current epoch have started, respectively
				/// `N-1` and `N`.
				/// NOTE: We track this is in order to annotate the block number when a given pool
				/// of entropy was fixed (i.e. it was known to chain observers). Since epochs are
				/// defined in slots, which may be skipped, the block numbers may not line up with
				/// the slot numbers.
				pub fn epoch_start(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(::core::primitive::u32, ::core::primitive::u32),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Babe",
						"EpochStart",
						vec![],
						[
							196u8, 39u8, 241u8, 20u8, 150u8, 180u8, 136u8, 4u8, 195u8, 205u8,
							218u8, 10u8, 130u8, 131u8, 168u8, 243u8, 207u8, 249u8, 58u8, 195u8,
							177u8, 119u8, 110u8, 243u8, 241u8, 3u8, 245u8, 56u8, 157u8, 5u8, 68u8,
							60u8,
						],
					)
				}
				/// How late the current block is compared to its parent.
				///
				/// This entry is populated as part of block execution and is cleaned up
				/// on block finalization. Querying this storage entry outside of block
				/// execution context should always yield zero.
				pub fn lateness(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Babe",
						"Lateness",
						vec![],
						[
							229u8, 230u8, 224u8, 89u8, 49u8, 213u8, 198u8, 236u8, 144u8, 56u8,
							193u8, 234u8, 62u8, 242u8, 191u8, 199u8, 105u8, 131u8, 74u8, 63u8,
							75u8, 1u8, 210u8, 49u8, 3u8, 128u8, 18u8, 77u8, 219u8, 146u8, 60u8,
							88u8,
						],
					)
				}
				/// The configuration for the current epoch. Should never be `None` as it is
				/// initialized in genesis.
				pub fn epoch_config(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::sp_consensus_babe::BabeEpochConfiguration,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Babe",
						"EpochConfig",
						vec![],
						[
							41u8, 118u8, 141u8, 244u8, 72u8, 17u8, 125u8, 203u8, 43u8, 153u8,
							203u8, 119u8, 117u8, 223u8, 123u8, 133u8, 73u8, 235u8, 130u8, 21u8,
							160u8, 167u8, 16u8, 173u8, 177u8, 35u8, 117u8, 97u8, 149u8, 49u8,
							220u8, 24u8,
						],
					)
				}
				/// The configuration for the next epoch, `None` if the config will not change
				/// (you can fallback to `EpochConfig` instead in that case).
				pub fn next_epoch_config(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::sp_consensus_babe::BabeEpochConfiguration,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Babe",
						"NextEpochConfig",
						vec![],
						[
							111u8, 182u8, 144u8, 180u8, 92u8, 146u8, 102u8, 249u8, 196u8, 229u8,
							226u8, 30u8, 25u8, 198u8, 133u8, 9u8, 136u8, 95u8, 11u8, 151u8, 139u8,
							156u8, 105u8, 228u8, 181u8, 12u8, 175u8, 148u8, 174u8, 33u8, 233u8,
							228u8,
						],
					)
				}
				/// A list of the last 100 skipped epochs and the corresponding session index
				/// when the epoch was skipped.
				///
				/// This is only used for validating equivocation proofs. An equivocation proof
				/// must contains a key-ownership proof for a given session, therefore we need a
				/// way to tie together sessions and epoch indices, i.e. we need to validate that
				/// a validator was the owner of a given key on a given session, and what the
				/// active epoch index was during that session.
				pub fn skipped_epochs(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						::core::primitive::u64,
						::core::primitive::u32,
					)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Babe",
						"SkippedEpochs",
						vec![],
						[
							187u8, 66u8, 178u8, 110u8, 247u8, 41u8, 128u8, 194u8, 173u8, 197u8,
							28u8, 219u8, 112u8, 75u8, 9u8, 184u8, 51u8, 12u8, 121u8, 117u8, 176u8,
							213u8, 139u8, 144u8, 122u8, 72u8, 243u8, 105u8, 248u8, 63u8, 6u8, 87u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The amount of time, in slots, that each epoch should last.
				/// NOTE: Currently it is not possible to change the epoch duration after
				/// the chain has started. Attempting to do so will brick block production.
				pub fn epoch_duration(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u64> {
					::subxt::constants::Address::new_static(
						"Babe",
						"EpochDuration",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
				/// The expected average block time at which BABE should be creating
				/// blocks. Since BABE is probabilistic it is not trivial to figure out
				/// what the expected average block time should be based on the slot
				/// duration and the security parameter `c` (where `1 - c` represents
				/// the probability of a slot being empty).
				pub fn expected_block_time(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u64> {
					::subxt::constants::Address::new_static(
						"Babe",
						"ExpectedBlockTime",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
				/// Max number of authorities allowed
				pub fn max_authorities(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Babe",
						"MaxAuthorities",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod timestamp {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Set {
				#[codec(compact)]
				pub now: ::core::primitive::u64,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Set the current time.
				///
				///This call should be invoked exactly once per block. It will panic at the
				/// finalization phase, if this call hasn't been invoked by that time.
				///
				///The timestamp should be greater than the previous one by the amount specified by
				///`MinimumPeriod`.
				///
				///The dispatch origin for this call must be `Inherent`.
				///
				///## Complexity
				/// - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)
				/// - 1 storage read and 1 storage mutation (codec `O(1)`). (because of
				///   `DidUpdate::take` in
				///  `on_finalize`)
				/// - 1 event handler `on_timestamp_set`. Must be `O(1)`.
				pub fn set(&self, now: ::core::primitive::u64) -> ::subxt::tx::Payload<Set> {
					::subxt::tx::Payload::new_static(
						"Timestamp",
						"set",
						Set { now },
						[
							6u8, 97u8, 172u8, 236u8, 118u8, 238u8, 228u8, 114u8, 15u8, 115u8,
							102u8, 85u8, 66u8, 151u8, 16u8, 33u8, 187u8, 17u8, 166u8, 88u8, 127u8,
							214u8, 182u8, 51u8, 168u8, 88u8, 43u8, 101u8, 185u8, 8u8, 1u8, 28u8,
						],
					)
				}
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// Current time for the current block.
				pub fn now(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u64,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Timestamp",
						"Now",
						vec![],
						[
							148u8, 53u8, 50u8, 54u8, 13u8, 161u8, 57u8, 150u8, 16u8, 83u8, 144u8,
							221u8, 59u8, 75u8, 158u8, 130u8, 39u8, 123u8, 106u8, 134u8, 202u8,
							185u8, 83u8, 85u8, 60u8, 41u8, 120u8, 96u8, 210u8, 34u8, 2u8, 250u8,
						],
					)
				}
				/// Did the timestamp get updated in this block?
				pub fn did_update(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::bool,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Timestamp",
						"DidUpdate",
						vec![],
						[
							70u8, 13u8, 92u8, 186u8, 80u8, 151u8, 167u8, 90u8, 158u8, 232u8, 175u8,
							13u8, 103u8, 135u8, 2u8, 78u8, 16u8, 6u8, 39u8, 158u8, 167u8, 85u8,
							27u8, 47u8, 122u8, 73u8, 127u8, 26u8, 35u8, 168u8, 72u8, 204u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The minimum period between blocks. Beware that this is different to the
				/// *expected* period that the block production apparatus provides. Your chosen
				/// consensus system will generally work with this to determine a sensible block
				/// time. e.g. For Aura, it will be double this period on default settings.
				pub fn minimum_period(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u64> {
					::subxt::constants::Address::new_static(
						"Timestamp",
						"MinimumPeriod",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
			}
		}
	}
	pub mod authorship {
		use super::{root_mod, runtime_types};
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// Author of current block.
				pub fn author(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Authorship",
						"Author",
						vec![],
						[
							149u8, 42u8, 33u8, 147u8, 190u8, 207u8, 174u8, 227u8, 190u8, 110u8,
							25u8, 131u8, 5u8, 167u8, 237u8, 188u8, 188u8, 33u8, 177u8, 126u8,
							181u8, 49u8, 126u8, 118u8, 46u8, 128u8, 154u8, 95u8, 15u8, 91u8, 103u8,
							113u8,
						],
					)
				}
			}
		}
	}
	pub mod indices {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Claim {
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Transfer {
				pub new: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Free {
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceTransfer {
				pub new: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub index: ::core::primitive::u32,
				pub freeze: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Freeze {
				pub index: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Assign an previously unassigned index.
				///
				///Payment: `Deposit` is reserved from the sender account.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				/// - `index`: the index to be claimed. This must not be in use.
				///
				///Emits `IndexAssigned` if successful.
				///
				///## Complexity
				/// - `O(1)`.
				pub fn claim(&self, index: ::core::primitive::u32) -> ::subxt::tx::Payload<Claim> {
					::subxt::tx::Payload::new_static(
						"Indices",
						"claim",
						Claim { index },
						[
							5u8, 24u8, 11u8, 173u8, 226u8, 170u8, 0u8, 30u8, 193u8, 102u8, 214u8,
							59u8, 252u8, 32u8, 221u8, 88u8, 196u8, 189u8, 244u8, 18u8, 233u8, 37u8,
							228u8, 248u8, 76u8, 175u8, 212u8, 233u8, 238u8, 203u8, 162u8, 68u8,
						],
					)
				}
				///Assign an index already owned by the sender to another account. The balance
				/// reservation is effectively transferred to the new account.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				/// - `index`: the index to be re-assigned. This must be owned by the sender.
				/// - `new`: the new owner of the index. This function is a no-op if it is equal to
				///   sender.
				///
				///Emits `IndexAssigned` if successful.
				///
				///## Complexity
				/// - `O(1)`.
				pub fn transfer(
					&self,
					new: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Transfer> {
					::subxt::tx::Payload::new_static(
						"Indices",
						"transfer",
						Transfer { new, index },
						[
							1u8, 83u8, 197u8, 184u8, 8u8, 96u8, 48u8, 146u8, 116u8, 76u8, 229u8,
							115u8, 226u8, 215u8, 41u8, 154u8, 27u8, 34u8, 205u8, 188u8, 10u8,
							169u8, 203u8, 39u8, 2u8, 236u8, 181u8, 162u8, 115u8, 254u8, 42u8, 28u8,
						],
					)
				}
				///Free up an index owned by the sender.
				///
				///Payment: Any previous deposit placed for the index is unreserved in the sender
				/// account.
				///
				///The dispatch origin for this call must be _Signed_ and the sender must own the
				/// index.
				///
				/// - `index`: the index to be freed. This must be owned by the sender.
				///
				///Emits `IndexFreed` if successful.
				///
				///## Complexity
				/// - `O(1)`.
				pub fn free(&self, index: ::core::primitive::u32) -> ::subxt::tx::Payload<Free> {
					::subxt::tx::Payload::new_static(
						"Indices",
						"free",
						Free { index },
						[
							133u8, 202u8, 225u8, 127u8, 69u8, 145u8, 43u8, 13u8, 160u8, 248u8,
							215u8, 243u8, 232u8, 166u8, 74u8, 203u8, 235u8, 138u8, 255u8, 27u8,
							163u8, 71u8, 254u8, 217u8, 6u8, 208u8, 202u8, 204u8, 238u8, 70u8,
							126u8, 252u8,
						],
					)
				}
				///Force an index to an account. This doesn't require a deposit. If the index is
				/// already held, then any deposit is reimbursed to its current owner.
				///
				///The dispatch origin for this call must be _Root_.
				///
				/// - `index`: the index to be (re-)assigned.
				/// - `new`: the new owner of the index. This function is a no-op if it is equal to
				///   sender.
				/// - `freeze`: if set to `true`, will freeze the index so it cannot be transferred.
				///
				///Emits `IndexAssigned` if successful.
				///
				///## Complexity
				/// - `O(1)`.
				pub fn force_transfer(
					&self,
					new: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					index: ::core::primitive::u32,
					freeze: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<ForceTransfer> {
					::subxt::tx::Payload::new_static(
						"Indices",
						"force_transfer",
						ForceTransfer { new, index, freeze },
						[
							126u8, 8u8, 145u8, 175u8, 177u8, 153u8, 131u8, 123u8, 184u8, 53u8,
							72u8, 207u8, 21u8, 140u8, 87u8, 181u8, 172u8, 64u8, 37u8, 165u8, 121u8,
							111u8, 173u8, 224u8, 181u8, 79u8, 76u8, 134u8, 93u8, 169u8, 65u8,
							131u8,
						],
					)
				}
				///Freeze an index so it will always point to the sender account. This consumes the
				///deposit.
				///
				///The dispatch origin for this call must be _Signed_ and the signing account must
				/// have a non-frozen account `index`.
				///
				/// - `index`: the index to be frozen in place.
				///
				///Emits `IndexFrozen` if successful.
				///
				///## Complexity
				/// - `O(1)`.
				pub fn freeze(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Freeze> {
					::subxt::tx::Payload::new_static(
						"Indices",
						"freeze",
						Freeze { index },
						[
							121u8, 45u8, 118u8, 2u8, 72u8, 48u8, 38u8, 7u8, 234u8, 204u8, 68u8,
							20u8, 76u8, 251u8, 205u8, 246u8, 149u8, 31u8, 168u8, 186u8, 208u8,
							90u8, 40u8, 47u8, 100u8, 228u8, 188u8, 33u8, 79u8, 220u8, 105u8, 209u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_indices::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A account index was assigned.
			pub struct IndexAssigned {
				pub who: ::subxt::utils::AccountId32,
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for IndexAssigned {
				const PALLET: &'static str = "Indices";
				const EVENT: &'static str = "IndexAssigned";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A account index has been freed up (unassigned).
			pub struct IndexFreed {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for IndexFreed {
				const PALLET: &'static str = "Indices";
				const EVENT: &'static str = "IndexFreed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A account index has been frozen to its current account ID.
			pub struct IndexFrozen {
				pub index: ::core::primitive::u32,
				pub who: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for IndexFrozen {
				const PALLET: &'static str = "Indices";
				const EVENT: &'static str = "IndexFrozen";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The lookup from index to account.
				pub fn accounts(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(::subxt::utils::AccountId32, ::core::primitive::u128, ::core::primitive::bool),
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Indices",
						"Accounts",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							211u8, 169u8, 54u8, 254u8, 88u8, 57u8, 22u8, 223u8, 108u8, 27u8, 38u8,
							9u8, 202u8, 209u8, 111u8, 209u8, 144u8, 13u8, 211u8, 114u8, 239u8,
							127u8, 75u8, 166u8, 234u8, 222u8, 225u8, 35u8, 160u8, 163u8, 112u8,
							242u8,
						],
					)
				}
				/// The lookup from index to account.
				pub fn accounts_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(::subxt::utils::AccountId32, ::core::primitive::u128, ::core::primitive::bool),
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Indices",
						"Accounts",
						Vec::new(),
						[
							211u8, 169u8, 54u8, 254u8, 88u8, 57u8, 22u8, 223u8, 108u8, 27u8, 38u8,
							9u8, 202u8, 209u8, 111u8, 209u8, 144u8, 13u8, 211u8, 114u8, 239u8,
							127u8, 75u8, 166u8, 234u8, 222u8, 225u8, 35u8, 160u8, 163u8, 112u8,
							242u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The deposit needed for reserving an index.
				pub fn deposit(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Indices",
						"Deposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
			}
		}
	}
	pub mod balances {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Transfer {
				pub dest: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetBalance {
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub new_free: ::core::primitive::u128,
				#[codec(compact)]
				pub new_reserved: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceTransfer {
				pub source: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub dest: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TransferKeepAlive {
				pub dest: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TransferAll {
				pub dest: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub keep_alive: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceUnreserve {
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub amount: ::core::primitive::u128,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Transfer some liquid free balance to another account.
				///
				///`transfer` will set the `FreeBalance` of the sender and receiver.
				///If the sender's account is below the existential deposit as a result
				///of the transfer, the account will be reaped.
				///
				///The dispatch origin for this call must be `Signed` by the transactor.
				///
				///## Complexity
				/// - Dependent on arguments but not critical, given proper implementations for
				///   input config
				///  types. See related functions below.
				/// - It contains a limited number of reads and writes internally and no complex
				///  computation.
				///
				///Related functions:
				///
				///  - `ensure_can_withdraw` is always called internally but has a bounded
				///    complexity.
				///  - Transferring balances to accounts that did not exist before will cause
				///    `T::OnNewAccount::on_new_account` to be called.
				///  - Removing enough funds from an account will trigger
				///    `T::DustRemoval::on_unbalanced`.
				///  - `transfer_keep_alive` works the same way as `transfer`, but has an additional
				///    check that the transfer will not kill the origin account.
				pub fn transfer(
					&self,
					dest: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					value: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<Transfer> {
					::subxt::tx::Payload::new_static(
						"Balances",
						"transfer",
						Transfer { dest, value },
						[
							255u8, 181u8, 144u8, 248u8, 64u8, 167u8, 5u8, 134u8, 208u8, 20u8,
							223u8, 103u8, 235u8, 35u8, 66u8, 184u8, 27u8, 94u8, 176u8, 60u8, 233u8,
							236u8, 145u8, 218u8, 44u8, 138u8, 240u8, 224u8, 16u8, 193u8, 220u8,
							95u8,
						],
					)
				}
				///Set the balances of a given account.
				///
				///This will alter `FreeBalance` and `ReservedBalance` in storage. it will
				///also alter the total issuance of the system (`TotalIssuance`) appropriately.
				///If the new free or reserved balance is below the existential deposit,
				///it will reset the account nonce (`frame_system::AccountNonce`).
				///
				///The dispatch origin for this call is `root`.
				pub fn set_balance(
					&self,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					new_free: ::core::primitive::u128,
					new_reserved: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<SetBalance> {
					::subxt::tx::Payload::new_static(
						"Balances",
						"set_balance",
						SetBalance { who, new_free, new_reserved },
						[
							174u8, 34u8, 80u8, 252u8, 193u8, 51u8, 228u8, 236u8, 234u8, 16u8,
							173u8, 214u8, 122u8, 21u8, 254u8, 7u8, 49u8, 176u8, 18u8, 128u8, 122u8,
							68u8, 72u8, 181u8, 119u8, 90u8, 167u8, 46u8, 203u8, 220u8, 109u8,
							110u8,
						],
					)
				}
				///Exactly as `transfer`, except the origin must be root and the source account may
				/// be specified.
				///## Complexity
				/// - Same as transfer, but additional read and write because the source account is
				///   not
				///  assumed to be in the overlay.
				pub fn force_transfer(
					&self,
					source: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					dest: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					value: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<ForceTransfer> {
					::subxt::tx::Payload::new_static(
						"Balances",
						"force_transfer",
						ForceTransfer { source, dest, value },
						[
							56u8, 80u8, 186u8, 45u8, 134u8, 147u8, 200u8, 19u8, 53u8, 221u8, 213u8,
							32u8, 13u8, 51u8, 130u8, 42u8, 244u8, 85u8, 50u8, 246u8, 189u8, 51u8,
							93u8, 1u8, 108u8, 142u8, 112u8, 245u8, 104u8, 255u8, 15u8, 62u8,
						],
					)
				}
				///Same as the [`transfer`] call, but with a check that the transfer will not kill
				/// the origin account.
				///
				///99% of the time you want [`transfer`] instead.
				///
				///[`transfer`]: struct.Pallet.html#method.transfer
				pub fn transfer_keep_alive(
					&self,
					dest: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					value: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<TransferKeepAlive> {
					::subxt::tx::Payload::new_static(
						"Balances",
						"transfer_keep_alive",
						TransferKeepAlive { dest, value },
						[
							202u8, 239u8, 204u8, 0u8, 52u8, 57u8, 158u8, 8u8, 252u8, 178u8, 91u8,
							197u8, 238u8, 186u8, 205u8, 56u8, 217u8, 250u8, 21u8, 44u8, 239u8,
							66u8, 79u8, 99u8, 25u8, 106u8, 70u8, 226u8, 50u8, 255u8, 176u8, 71u8,
						],
					)
				}
				///Transfer the entire transferable balance from the caller account.
				///
				///NOTE: This function only attempts to transfer _transferable_ balances. This
				/// means that any locked, reserved, or existential deposits (when `keep_alive` is
				/// `true`), will not be transferred by this function. To ensure that this function
				/// results in a killed account, you might need to prepare the account by removing
				/// any reference counters, storage deposits, etc...
				///
				///The dispatch origin of this call must be Signed.
				///
				/// - `dest`: The recipient of the transfer.
				/// - `keep_alive`: A boolean to determine if the `transfer_all` operation should
				///   send all
				///  of the funds the account has, causing the sender account to be killed (false),
				/// or  transfer everything except at least the existential deposit, which will
				/// guarantee to  keep the sender account alive (true). ## Complexity
				/// - O(1). Just like transfer, but reading the user's transferable balance first.
				pub fn transfer_all(
					&self,
					dest: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					keep_alive: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<TransferAll> {
					::subxt::tx::Payload::new_static(
						"Balances",
						"transfer_all",
						TransferAll { dest, keep_alive },
						[
							118u8, 215u8, 198u8, 243u8, 4u8, 173u8, 108u8, 224u8, 113u8, 203u8,
							149u8, 23u8, 130u8, 176u8, 53u8, 205u8, 112u8, 147u8, 88u8, 167u8,
							197u8, 32u8, 104u8, 117u8, 201u8, 168u8, 144u8, 230u8, 120u8, 29u8,
							122u8, 159u8,
						],
					)
				}
				///Unreserve some balance from a user by force.
				///
				///Can only be called by ROOT.
				pub fn force_unreserve(
					&self,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					amount: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<ForceUnreserve> {
					::subxt::tx::Payload::new_static(
						"Balances",
						"force_unreserve",
						ForceUnreserve { who, amount },
						[
							39u8, 229u8, 111u8, 44u8, 147u8, 80u8, 7u8, 26u8, 185u8, 121u8, 149u8,
							25u8, 151u8, 37u8, 124u8, 46u8, 108u8, 136u8, 167u8, 145u8, 103u8,
							65u8, 33u8, 168u8, 36u8, 214u8, 126u8, 237u8, 180u8, 61u8, 108u8,
							110u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_balances::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An account was created with some free balance.
			pub struct Endowed {
				pub account: ::subxt::utils::AccountId32,
				pub free_balance: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Endowed {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Endowed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An account was removed whose balance was non-zero but below ExistentialDeposit,
			///resulting in an outright loss.
			pub struct DustLost {
				pub account: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for DustLost {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "DustLost";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Transfer succeeded.
			#[derive(PartialEq, Eq)]
			pub struct Transfer {
				pub from: ::subxt::utils::AccountId32,
				pub to: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Transfer {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Transfer";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A balance was set by root.
			pub struct BalanceSet {
				pub who: ::subxt::utils::AccountId32,
				pub free: ::core::primitive::u128,
				pub reserved: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for BalanceSet {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "BalanceSet";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some balance was reserved (moved from free to reserved).
			pub struct Reserved {
				pub who: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Reserved {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Reserved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some balance was unreserved (moved from reserved to free).
			pub struct Unreserved {
				pub who: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Unreserved {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Unreserved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some balance was moved from the reserve of the first account to the second account.
			///Final argument indicates the destination balance type.
			pub struct ReserveRepatriated {
				pub from: ::subxt::utils::AccountId32,
				pub to: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
				pub destination_status:
					runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
			}
			impl ::subxt::events::StaticEvent for ReserveRepatriated {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "ReserveRepatriated";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some amount was deposited (e.g. for transaction fees).
			pub struct Deposit {
				pub who: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Deposit {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Deposit";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some amount was withdrawn from the account (e.g. for transaction fees).
			pub struct Withdraw {
				pub who: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Withdraw {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Withdraw";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some amount was removed from the account (e.g. for misbehavior).
			pub struct Slashed {
				pub who: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Slashed {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Slashed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The total units issued in the system.
				pub fn total_issuance(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"TotalIssuance",
						vec![],
						[
							1u8, 206u8, 252u8, 237u8, 6u8, 30u8, 20u8, 232u8, 164u8, 115u8, 51u8,
							156u8, 156u8, 206u8, 241u8, 187u8, 44u8, 84u8, 25u8, 164u8, 235u8,
							20u8, 86u8, 242u8, 124u8, 23u8, 28u8, 140u8, 26u8, 73u8, 231u8, 51u8,
						],
					)
				}
				/// The total units of outstanding deactivated balance in the system.
				pub fn inactive_issuance(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"InactiveIssuance",
						vec![],
						[
							74u8, 203u8, 111u8, 142u8, 225u8, 104u8, 173u8, 51u8, 226u8, 12u8,
							85u8, 135u8, 41u8, 206u8, 177u8, 238u8, 94u8, 246u8, 184u8, 250u8,
							140u8, 213u8, 91u8, 118u8, 163u8, 111u8, 211u8, 46u8, 204u8, 160u8,
							154u8, 21u8,
						],
					)
				}
				/// The Balances pallet example of storing the balance of an account.
				///
				/// # Example
				///
				/// ```nocompile
				///  impl pallet_balances::Config for Runtime {
				///    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>
				///  }
				/// ```
				///
				/// You can also store the balance of an account in the `System` pallet.
				///
				/// # Example
				///
				/// ```nocompile
				///  impl pallet_balances::Config for Runtime {
				///   type AccountStore = System
				///  }
				/// ```
				///
				/// But this comes with tradeoffs, storing account balances in the system pallet
				/// stores `frame_system` data alongside the account data contrary to storing
				/// account balances in the `Balances` pallet, which uses a `StorageMap` to store
				/// balances data only. NOTE: This is only used in the case that this pallet is used
				/// to store balances.
				pub fn account(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"Account",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							246u8, 154u8, 253u8, 71u8, 192u8, 192u8, 192u8, 236u8, 128u8, 80u8,
							40u8, 252u8, 201u8, 43u8, 3u8, 131u8, 19u8, 49u8, 141u8, 240u8, 172u8,
							217u8, 215u8, 109u8, 87u8, 135u8, 248u8, 57u8, 98u8, 185u8, 22u8, 4u8,
						],
					)
				}
				/// The Balances pallet example of storing the balance of an account.
				///
				/// # Example
				///
				/// ```nocompile
				///  impl pallet_balances::Config for Runtime {
				///    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>
				///  }
				/// ```
				///
				/// You can also store the balance of an account in the `System` pallet.
				///
				/// # Example
				///
				/// ```nocompile
				///  impl pallet_balances::Config for Runtime {
				///   type AccountStore = System
				///  }
				/// ```
				///
				/// But this comes with tradeoffs, storing account balances in the system pallet
				/// stores `frame_system` data alongside the account data contrary to storing
				/// account balances in the `Balances` pallet, which uses a `StorageMap` to store
				/// balances data only. NOTE: This is only used in the case that this pallet is used
				/// to store balances.
				pub fn account_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"Account",
						Vec::new(),
						[
							246u8, 154u8, 253u8, 71u8, 192u8, 192u8, 192u8, 236u8, 128u8, 80u8,
							40u8, 252u8, 201u8, 43u8, 3u8, 131u8, 19u8, 49u8, 141u8, 240u8, 172u8,
							217u8, 215u8, 109u8, 87u8, 135u8, 248u8, 57u8, 98u8, 185u8, 22u8, 4u8,
						],
					)
				}
				/// Any liquidity locks on some account balances.
				/// NOTE: Should only be accessed when setting, changing and freeing a lock.
				pub fn locks(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
						runtime_types::pallet_balances::BalanceLock<::core::primitive::u128>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"Locks",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							216u8, 253u8, 87u8, 73u8, 24u8, 218u8, 35u8, 0u8, 244u8, 134u8, 195u8,
							58u8, 255u8, 64u8, 153u8, 212u8, 210u8, 232u8, 4u8, 122u8, 90u8, 212u8,
							136u8, 14u8, 127u8, 232u8, 8u8, 192u8, 40u8, 233u8, 18u8, 250u8,
						],
					)
				}
				/// Any liquidity locks on some account balances.
				/// NOTE: Should only be accessed when setting, changing and freeing a lock.
				pub fn locks_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
						runtime_types::pallet_balances::BalanceLock<::core::primitive::u128>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"Locks",
						Vec::new(),
						[
							216u8, 253u8, 87u8, 73u8, 24u8, 218u8, 35u8, 0u8, 244u8, 134u8, 195u8,
							58u8, 255u8, 64u8, 153u8, 212u8, 210u8, 232u8, 4u8, 122u8, 90u8, 212u8,
							136u8, 14u8, 127u8, 232u8, 8u8, 192u8, 40u8, 233u8, 18u8, 250u8,
						],
					)
				}
				/// Named reserves on some account balances.
				pub fn reserves(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_balances::ReserveData<
							[::core::primitive::u8; 8usize],
							::core::primitive::u128,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"Reserves",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							17u8, 32u8, 191u8, 46u8, 76u8, 220u8, 101u8, 100u8, 42u8, 250u8, 128u8,
							167u8, 117u8, 44u8, 85u8, 96u8, 105u8, 216u8, 16u8, 147u8, 74u8, 55u8,
							183u8, 94u8, 160u8, 177u8, 26u8, 187u8, 71u8, 197u8, 187u8, 163u8,
						],
					)
				}
				/// Named reserves on some account balances.
				pub fn reserves_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_balances::ReserveData<
							[::core::primitive::u8; 8usize],
							::core::primitive::u128,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Balances",
						"Reserves",
						Vec::new(),
						[
							17u8, 32u8, 191u8, 46u8, 76u8, 220u8, 101u8, 100u8, 42u8, 250u8, 128u8,
							167u8, 117u8, 44u8, 85u8, 96u8, 105u8, 216u8, 16u8, 147u8, 74u8, 55u8,
							183u8, 94u8, 160u8, 177u8, 26u8, 187u8, 71u8, 197u8, 187u8, 163u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The minimum amount required to keep an account open.
				pub fn existential_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Balances",
						"ExistentialDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The maximum number of locks that should exist on an account.
				/// Not strictly enforced, but used for weight estimation.
				pub fn max_locks(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Balances",
						"MaxLocks",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum number of named reserves that can exist on an account.
				pub fn max_reserves(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Balances",
						"MaxReserves",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod transaction_payment {
		use super::{root_mod, runtime_types};
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_transaction_payment::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion
			/// fee, has been paid by `who`.
			pub struct TransactionFeePaid {
				pub who: ::subxt::utils::AccountId32,
				pub actual_fee: ::core::primitive::u128,
				pub tip: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for TransactionFeePaid {
				const PALLET: &'static str = "TransactionPayment";
				const EVENT: &'static str = "TransactionFeePaid";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				pub fn next_fee_multiplier(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::sp_arithmetic::fixed_point::FixedU128,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TransactionPayment",
						"NextFeeMultiplier",
						vec![],
						[
							210u8, 0u8, 206u8, 165u8, 183u8, 10u8, 206u8, 52u8, 14u8, 90u8, 218u8,
							197u8, 189u8, 125u8, 113u8, 216u8, 52u8, 161u8, 45u8, 24u8, 245u8,
							237u8, 121u8, 41u8, 106u8, 29u8, 45u8, 129u8, 250u8, 203u8, 206u8,
							180u8,
						],
					)
				}
				pub fn storage_version(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_transaction_payment::Releases,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TransactionPayment",
						"StorageVersion",
						vec![],
						[
							219u8, 243u8, 82u8, 176u8, 65u8, 5u8, 132u8, 114u8, 8u8, 82u8, 176u8,
							200u8, 97u8, 150u8, 177u8, 164u8, 166u8, 11u8, 34u8, 12u8, 12u8, 198u8,
							58u8, 191u8, 186u8, 221u8, 221u8, 119u8, 181u8, 253u8, 154u8, 228u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// A fee mulitplier for `Operational` extrinsics to compute "virtual tip" to boost
				/// their `priority`
				///
				/// This value is multipled by the `final_fee` to obtain a "virtual tip" that is
				/// later added to a tip component in regular `priority` calculations.
				/// It means that a `Normal` transaction can front-run a similarly-sized
				/// `Operational` extrinsic (with no tip), by including a tip value greater than the
				/// virtual tip.
				///
				/// ```rust,ignore
				/// // For `Normal`
				/// let priority = priority_calc(tip);
				///
				/// // For `Operational`
				/// let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;
				/// let priority = priority_calc(tip + virtual_tip);
				/// ```
				///
				/// Note that since we use `final_fee` the multiplier applies also to the regular
				/// `tip` sent with the transaction. So, not only does the transaction get a
				/// priority bump based on the `inclusion_fee`, but we also amplify the impact of
				/// tips applied to `Operational` transactions.
				pub fn operational_fee_multiplier(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u8> {
					::subxt::constants::Address::new_static(
						"TransactionPayment",
						"OperationalFeeMultiplier",
						[
							141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
							28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
							114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
							165u8,
						],
					)
				}
			}
		}
	}
	pub mod asset_tx_payment {
		use super::{root_mod, runtime_types};
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_asset_tx_payment::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion
			/// fee, has been paid by `who` in an asset `asset_id`.
			pub struct AssetTxFeePaid {
				pub who: ::subxt::utils::AccountId32,
				pub actual_fee: ::core::primitive::u128,
				pub tip: ::core::primitive::u128,
				pub asset_id: ::core::option::Option<::core::primitive::u32>,
			}
			impl ::subxt::events::StaticEvent for AssetTxFeePaid {
				const PALLET: &'static str = "AssetTxPayment";
				const EVENT: &'static str = "AssetTxFeePaid";
			}
		}
	}
	pub mod election_provider_multi_phase {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SubmitUnsigned {
				pub raw_solution: ::std::boxed::Box<
					runtime_types::pallet_election_provider_multi_phase::RawSolution<
						runtime_types::babe_runtime::NposSolution16,
					>,
				>,
				pub witness:
					runtime_types::pallet_election_provider_multi_phase::SolutionOrSnapshotSize,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetMinimumUntrustedScore {
				pub maybe_next_score:
					::core::option::Option<runtime_types::sp_npos_elections::ElectionScore>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetEmergencyElectionResult {
				pub supports: ::std::vec::Vec<(
					::subxt::utils::AccountId32,
					runtime_types::sp_npos_elections::Support<::subxt::utils::AccountId32>,
				)>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Submit {
				pub raw_solution: ::std::boxed::Box<
					runtime_types::pallet_election_provider_multi_phase::RawSolution<
						runtime_types::babe_runtime::NposSolution16,
					>,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct GovernanceFallback {
				pub maybe_max_voters: ::core::option::Option<::core::primitive::u32>,
				pub maybe_max_targets: ::core::option::Option<::core::primitive::u32>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Submit a solution for the unsigned phase.
				///
				///The dispatch origin fo this call must be __none__.
				///
				///This submission is checked on the fly. Moreover, this unsigned solution is only
				///validated when submitted to the pool from the **local** node. Effectively, this
				/// means that only active validators can submit this transaction when authoring a
				/// block (similar to an inherent).
				///
				///To prevent any incorrect solution (and thus wasted time/weight), this
				/// transaction will panic if the solution submitted by the validator is invalid in
				/// any way, effectively putting their authoring reward at risk.
				///
				///No deposit or reward is associated with this submission.
				pub fn submit_unsigned(
					&self,
					raw_solution: runtime_types::pallet_election_provider_multi_phase::RawSolution<
						runtime_types::babe_runtime::NposSolution16,
					>,
					witness: runtime_types::pallet_election_provider_multi_phase::SolutionOrSnapshotSize,
				) -> ::subxt::tx::Payload<SubmitUnsigned> {
					::subxt::tx::Payload::new_static(
						"ElectionProviderMultiPhase",
						"submit_unsigned",
						SubmitUnsigned {
							raw_solution: ::std::boxed::Box::new(raw_solution),
							witness,
						},
						[
							100u8, 240u8, 31u8, 34u8, 93u8, 98u8, 93u8, 57u8, 41u8, 197u8, 97u8,
							58u8, 242u8, 10u8, 69u8, 250u8, 185u8, 169u8, 21u8, 8u8, 202u8, 61u8,
							36u8, 25u8, 4u8, 148u8, 82u8, 56u8, 242u8, 18u8, 27u8, 219u8,
						],
					)
				}
				///Set a new value for `MinimumUntrustedScore`.
				///
				///Dispatch origin must be aligned with `T::ForceOrigin`.
				///
				///This check can be turned off by setting the value to `None`.
				pub fn set_minimum_untrusted_score(
					&self,
					maybe_next_score: ::core::option::Option<
						runtime_types::sp_npos_elections::ElectionScore,
					>,
				) -> ::subxt::tx::Payload<SetMinimumUntrustedScore> {
					::subxt::tx::Payload::new_static(
						"ElectionProviderMultiPhase",
						"set_minimum_untrusted_score",
						SetMinimumUntrustedScore { maybe_next_score },
						[
							63u8, 101u8, 105u8, 146u8, 133u8, 162u8, 149u8, 112u8, 150u8, 219u8,
							183u8, 213u8, 234u8, 211u8, 144u8, 74u8, 106u8, 15u8, 62u8, 196u8,
							247u8, 49u8, 20u8, 48u8, 3u8, 105u8, 85u8, 46u8, 76u8, 4u8, 67u8, 81u8,
						],
					)
				}
				///Set a solution in the queue, to be handed out to the client of this pallet in
				/// the next call to `ElectionProvider::elect`.
				///
				///This can only be set by `T::ForceOrigin`, and only when the phase is
				/// `Emergency`.
				///
				///The solution is not checked for any feasibility and is assumed to be
				/// trustworthy, as any feasibility check itself can in principle cause the election
				/// process to fail (due to memory/weight constrains).
				pub fn set_emergency_election_result(
					&self,
					supports: ::std::vec::Vec<(
						::subxt::utils::AccountId32,
						runtime_types::sp_npos_elections::Support<::subxt::utils::AccountId32>,
					)>,
				) -> ::subxt::tx::Payload<SetEmergencyElectionResult> {
					::subxt::tx::Payload::new_static(
						"ElectionProviderMultiPhase",
						"set_emergency_election_result",
						SetEmergencyElectionResult { supports },
						[
							115u8, 255u8, 205u8, 58u8, 153u8, 1u8, 246u8, 8u8, 225u8, 36u8, 66u8,
							144u8, 250u8, 145u8, 70u8, 76u8, 54u8, 63u8, 251u8, 51u8, 214u8, 204u8,
							55u8, 112u8, 46u8, 228u8, 255u8, 250u8, 151u8, 5u8, 44u8, 133u8,
						],
					)
				}
				///Submit a solution for the signed phase.
				///
				///The dispatch origin fo this call must be __signed__.
				///
				///The solution is potentially queued, based on the claimed score and processed at
				/// the end of the signed phase.
				///
				///A deposit is reserved and recorded for the solution. Based on the outcome, the
				/// solution might be rewarded, slashed, or get all or a part of the deposit back.
				pub fn submit(
					&self,
					raw_solution: runtime_types::pallet_election_provider_multi_phase::RawSolution<
						runtime_types::babe_runtime::NposSolution16,
					>,
				) -> ::subxt::tx::Payload<Submit> {
					::subxt::tx::Payload::new_static(
						"ElectionProviderMultiPhase",
						"submit",
						Submit { raw_solution: ::std::boxed::Box::new(raw_solution) },
						[
							220u8, 167u8, 40u8, 47u8, 253u8, 244u8, 72u8, 124u8, 30u8, 123u8,
							127u8, 227u8, 2u8, 66u8, 119u8, 64u8, 211u8, 200u8, 210u8, 98u8, 248u8,
							132u8, 68u8, 25u8, 34u8, 182u8, 230u8, 225u8, 241u8, 58u8, 193u8,
							134u8,
						],
					)
				}
				///Trigger the governance fallback.
				///
				///This can only be called when [`Phase::Emergency`] is enabled, as an alternative
				/// to calling [`Call::set_emergency_election_result`].
				pub fn governance_fallback(
					&self,
					maybe_max_voters: ::core::option::Option<::core::primitive::u32>,
					maybe_max_targets: ::core::option::Option<::core::primitive::u32>,
				) -> ::subxt::tx::Payload<GovernanceFallback> {
					::subxt::tx::Payload::new_static(
						"ElectionProviderMultiPhase",
						"governance_fallback",
						GovernanceFallback { maybe_max_voters, maybe_max_targets },
						[
							206u8, 247u8, 76u8, 85u8, 7u8, 24u8, 231u8, 226u8, 192u8, 143u8, 43u8,
							67u8, 91u8, 202u8, 88u8, 176u8, 130u8, 1u8, 83u8, 229u8, 227u8, 200u8,
							179u8, 4u8, 113u8, 60u8, 99u8, 190u8, 53u8, 226u8, 142u8, 182u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_election_provider_multi_phase::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A solution was stored with the given compute.
			///
			///The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,
			///the stored solution was submited in the signed phase by a miner with the
			/// `AccountId`. Otherwise, the solution was stored either during the unsigned phase or
			/// by `T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to
			/// make room for this one.
			pub struct SolutionStored {
				pub compute: runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
				pub origin: ::core::option::Option<::subxt::utils::AccountId32>,
				pub prev_ejected: ::core::primitive::bool,
			}
			impl ::subxt::events::StaticEvent for SolutionStored {
				const PALLET: &'static str = "ElectionProviderMultiPhase";
				const EVENT: &'static str = "SolutionStored";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The election has been finalized, with the given computation and score.
			pub struct ElectionFinalized {
				pub compute: runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
				pub score: runtime_types::sp_npos_elections::ElectionScore,
			}
			impl ::subxt::events::StaticEvent for ElectionFinalized {
				const PALLET: &'static str = "ElectionProviderMultiPhase";
				const EVENT: &'static str = "ElectionFinalized";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An election failed.
			///
			///Not much can be said about which computes failed in the process.
			pub struct ElectionFailed;
			impl ::subxt::events::StaticEvent for ElectionFailed {
				const PALLET: &'static str = "ElectionProviderMultiPhase";
				const EVENT: &'static str = "ElectionFailed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An account has been rewarded for their signed submission being finalized.
			pub struct Rewarded {
				pub account: ::subxt::utils::AccountId32,
				pub value: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Rewarded {
				const PALLET: &'static str = "ElectionProviderMultiPhase";
				const EVENT: &'static str = "Rewarded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An account has been slashed for submitting an invalid signed submission.
			pub struct Slashed {
				pub account: ::subxt::utils::AccountId32,
				pub value: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Slashed {
				const PALLET: &'static str = "ElectionProviderMultiPhase";
				const EVENT: &'static str = "Slashed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///There was a phase transition in a given round.
			pub struct PhaseTransitioned {
				pub from: runtime_types::pallet_election_provider_multi_phase::Phase<
					::core::primitive::u32,
				>,
				pub to: runtime_types::pallet_election_provider_multi_phase::Phase<
					::core::primitive::u32,
				>,
				pub round: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for PhaseTransitioned {
				const PALLET: &'static str = "ElectionProviderMultiPhase";
				const EVENT: &'static str = "PhaseTransitioned";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// Internal counter for the number of rounds.
				///
				/// This is useful for de-duplication of transactions submitted to the pool, and
				/// general diagnostics of the pallet.
				///
				/// This is merely incremented once per every time that an upstream `elect` is
				/// called.
				pub fn round(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ElectionProviderMultiPhase",
						"Round",
						vec![],
						[
							16u8, 49u8, 176u8, 52u8, 202u8, 111u8, 120u8, 8u8, 217u8, 96u8, 35u8,
							14u8, 233u8, 130u8, 47u8, 98u8, 34u8, 44u8, 166u8, 188u8, 199u8, 210u8,
							21u8, 19u8, 70u8, 96u8, 139u8, 8u8, 53u8, 82u8, 165u8, 239u8,
						],
					)
				}
				/// Current phase.
				pub fn current_phase(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_election_provider_multi_phase::Phase<
						::core::primitive::u32,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ElectionProviderMultiPhase",
						"CurrentPhase",
						vec![],
						[
							236u8, 101u8, 8u8, 52u8, 68u8, 240u8, 74u8, 159u8, 181u8, 53u8, 153u8,
							101u8, 228u8, 81u8, 96u8, 161u8, 34u8, 67u8, 35u8, 28u8, 121u8, 44u8,
							229u8, 45u8, 196u8, 87u8, 73u8, 125u8, 216u8, 245u8, 255u8, 15u8,
						],
					)
				}
				/// Current best solution, signed or unsigned, queued to be returned upon `elect`.
				pub fn queued_solution(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_election_provider_multi_phase::ReadySolution,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ElectionProviderMultiPhase",
						"QueuedSolution",
						vec![],
						[
							11u8, 152u8, 13u8, 167u8, 204u8, 209u8, 171u8, 249u8, 59u8, 250u8,
							58u8, 152u8, 164u8, 121u8, 146u8, 112u8, 241u8, 16u8, 159u8, 251u8,
							209u8, 251u8, 114u8, 29u8, 188u8, 30u8, 84u8, 71u8, 136u8, 173u8,
							145u8, 236u8,
						],
					)
				}
				/// Snapshot data of the round.
				///
				/// This is created at the beginning of the signed phase and cleared upon calling
				/// `elect`.
				pub fn snapshot(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_election_provider_multi_phase::RoundSnapshot<
						::subxt::utils::AccountId32,
						(
							::subxt::utils::AccountId32,
							::core::primitive::u64,
							runtime_types::bounded_collections::bounded_vec::BoundedVec<
								::subxt::utils::AccountId32,
							>,
						),
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ElectionProviderMultiPhase",
						"Snapshot",
						vec![],
						[
							239u8, 56u8, 191u8, 77u8, 150u8, 224u8, 248u8, 88u8, 132u8, 224u8,
							164u8, 83u8, 253u8, 36u8, 46u8, 156u8, 72u8, 152u8, 36u8, 206u8, 72u8,
							27u8, 226u8, 87u8, 146u8, 220u8, 93u8, 178u8, 26u8, 115u8, 232u8, 71u8,
						],
					)
				}
				/// Desired number of targets to elect for this round.
				///
				/// Only exists when [`Snapshot`] is present.
				pub fn desired_targets(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ElectionProviderMultiPhase",
						"DesiredTargets",
						vec![],
						[
							16u8, 247u8, 4u8, 181u8, 93u8, 79u8, 12u8, 212u8, 146u8, 167u8, 80u8,
							58u8, 118u8, 52u8, 68u8, 87u8, 90u8, 140u8, 31u8, 210u8, 2u8, 116u8,
							220u8, 231u8, 115u8, 112u8, 118u8, 118u8, 68u8, 34u8, 151u8, 165u8,
						],
					)
				}
				/// The metadata of the [`RoundSnapshot`]
				///
				/// Only exists when [`Snapshot`] is present.
				pub fn snapshot_metadata(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_election_provider_multi_phase::SolutionOrSnapshotSize,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ElectionProviderMultiPhase",
						"SnapshotMetadata",
						vec![],
						[
							135u8, 122u8, 60u8, 75u8, 194u8, 240u8, 187u8, 96u8, 240u8, 203u8,
							192u8, 22u8, 117u8, 148u8, 118u8, 24u8, 240u8, 213u8, 94u8, 22u8,
							194u8, 47u8, 181u8, 245u8, 77u8, 149u8, 11u8, 251u8, 117u8, 220u8,
							205u8, 78u8,
						],
					)
				}
				/// The next index to be assigned to an incoming signed submission.
				///
				/// Every accepted submission is assigned a unique index; that index is bound to
				/// that particular submission for the duration of the election. On election
				/// finalization, the next index is reset to 0.
				///
				/// We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set;
				/// past its capacity, it will simply saturate. We can't just iterate over
				/// `SignedSubmissionsMap`, because iteration is slow. Instead, we store the value
				/// here.
				pub fn signed_submission_next_index(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ElectionProviderMultiPhase",
						"SignedSubmissionNextIndex",
						vec![],
						[
							242u8, 11u8, 157u8, 105u8, 96u8, 7u8, 31u8, 20u8, 51u8, 141u8, 182u8,
							180u8, 13u8, 172u8, 155u8, 59u8, 42u8, 238u8, 115u8, 8u8, 6u8, 137u8,
							45u8, 2u8, 123u8, 187u8, 53u8, 215u8, 19u8, 129u8, 54u8, 22u8,
						],
					)
				}
				/// A sorted, bounded vector of `(score, block_number, index)`, where each `index`
				/// points to a value in `SignedSubmissions`.
				///
				/// We never need to process more than a single signed submission at a time. Signed
				/// submissions can be quite large, so we're willing to pay the cost of multiple
				/// database accesses to access them one at a time instead of reading and decoding
				/// all of them at once.
				pub fn signed_submission_indices(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						runtime_types::sp_npos_elections::ElectionScore,
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ElectionProviderMultiPhase",
						"SignedSubmissionIndices",
						vec![],
						[
							228u8, 166u8, 94u8, 248u8, 71u8, 26u8, 125u8, 81u8, 32u8, 22u8, 46u8,
							185u8, 209u8, 123u8, 46u8, 17u8, 152u8, 149u8, 222u8, 125u8, 112u8,
							230u8, 29u8, 177u8, 162u8, 214u8, 66u8, 38u8, 170u8, 121u8, 129u8,
							100u8,
						],
					)
				}
				/// Unchecked, signed solutions.
				///
				/// Together with `SubmissionIndices`, this stores a bounded set of
				/// `SignedSubmissions` while allowing us to keep only a single one in memory at a
				/// time.
				///
				/// Twox note: the key of the map is an auto-incrementing index which users cannot
				/// inspect or affect; we shouldn't need a cryptographically secure hasher.
				pub fn signed_submissions_map(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_election_provider_multi_phase::signed::SignedSubmission<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
						runtime_types::babe_runtime::NposSolution16,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ElectionProviderMultiPhase",
						"SignedSubmissionsMap",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							84u8, 65u8, 205u8, 191u8, 143u8, 246u8, 239u8, 27u8, 243u8, 54u8,
							250u8, 8u8, 125u8, 32u8, 241u8, 141u8, 210u8, 225u8, 56u8, 101u8,
							241u8, 52u8, 157u8, 29u8, 13u8, 155u8, 73u8, 132u8, 118u8, 53u8, 2u8,
							135u8,
						],
					)
				}
				/// Unchecked, signed solutions.
				///
				/// Together with `SubmissionIndices`, this stores a bounded set of
				/// `SignedSubmissions` while allowing us to keep only a single one in memory at a
				/// time.
				///
				/// Twox note: the key of the map is an auto-incrementing index which users cannot
				/// inspect or affect; we shouldn't need a cryptographically secure hasher.
				pub fn signed_submissions_map_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_election_provider_multi_phase::signed::SignedSubmission<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
						runtime_types::babe_runtime::NposSolution16,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ElectionProviderMultiPhase",
						"SignedSubmissionsMap",
						Vec::new(),
						[
							84u8, 65u8, 205u8, 191u8, 143u8, 246u8, 239u8, 27u8, 243u8, 54u8,
							250u8, 8u8, 125u8, 32u8, 241u8, 141u8, 210u8, 225u8, 56u8, 101u8,
							241u8, 52u8, 157u8, 29u8, 13u8, 155u8, 73u8, 132u8, 118u8, 53u8, 2u8,
							135u8,
						],
					)
				}
				/// The minimum score that each 'untrusted' solution must attain in order to be
				/// considered feasible.
				///
				/// Can be set via `set_minimum_untrusted_score`.
				pub fn minimum_untrusted_score(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::sp_npos_elections::ElectionScore,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ElectionProviderMultiPhase",
						"MinimumUntrustedScore",
						vec![],
						[
							77u8, 235u8, 181u8, 45u8, 230u8, 12u8, 0u8, 179u8, 152u8, 38u8, 74u8,
							199u8, 47u8, 84u8, 85u8, 55u8, 171u8, 226u8, 217u8, 125u8, 17u8, 194u8,
							95u8, 157u8, 73u8, 245u8, 75u8, 130u8, 248u8, 7u8, 53u8, 226u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// Duration of the unsigned phase.
				pub fn unsigned_phase(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"UnsignedPhase",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Duration of the signed phase.
				pub fn signed_phase(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"SignedPhase",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The minimum amount of improvement to the solution score that defines a solution
				/// as "better" in the Signed phase.
				pub fn better_signed_threshold(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Perbill>
				{
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"BetterSignedThreshold",
						[
							225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8, 192u8, 254u8, 19u8, 87u8,
							80u8, 16u8, 62u8, 42u8, 204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
							177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8, 86u8, 227u8,
						],
					)
				}
				/// The minimum amount of improvement to the solution score that defines a solution
				/// as "better" in the Unsigned phase.
				pub fn better_unsigned_threshold(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Perbill>
				{
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"BetterUnsignedThreshold",
						[
							225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8, 192u8, 254u8, 19u8, 87u8,
							80u8, 16u8, 62u8, 42u8, 204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
							177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8, 86u8, 227u8,
						],
					)
				}
				/// The repeat threshold of the offchain worker.
				///
				/// For example, if it is 5, that means that at least 5 blocks will elapse between
				/// attempts to submit the worker's solution.
				pub fn offchain_repeat(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"OffchainRepeat",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The priority of the unsigned transaction submitted in the unsigned-phase
				pub fn miner_tx_priority(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u64> {
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"MinerTxPriority",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
				/// Maximum number of signed submissions that can be queued.
				///
				/// It is best to avoid adjusting this during an election, as it impacts downstream
				/// data structures. In particular, `SignedSubmissionIndices<T>` is bounded on this
				/// value. If you update this value during an election, you _must_ ensure that
				/// `SignedSubmissionIndices.len()` is less than or equal to the new value.
				/// Otherwise, attempts to submit new solutions may cause a runtime panic.
				pub fn signed_max_submissions(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"SignedMaxSubmissions",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Maximum weight of a signed solution.
				///
				/// If [`Config::MinerConfig`] is being implemented to submit signed solutions
				/// (outside of this pallet), then [`MinerConfig::solution_weight`] is used to
				/// compare against this value.
				pub fn signed_max_weight(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight> {
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"SignedMaxWeight",
						[
							206u8, 61u8, 253u8, 247u8, 163u8, 40u8, 161u8, 52u8, 134u8, 140u8,
							206u8, 83u8, 44u8, 166u8, 226u8, 115u8, 181u8, 14u8, 227u8, 130u8,
							210u8, 32u8, 85u8, 29u8, 230u8, 97u8, 130u8, 165u8, 147u8, 134u8,
							106u8, 76u8,
						],
					)
				}
				/// The maximum amount of unchecked solutions to refund the call fee for.
				pub fn signed_max_refunds(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"SignedMaxRefunds",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Base reward for a signed solution
				pub fn signed_reward_base(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"SignedRewardBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// Base deposit for a signed solution.
				pub fn signed_deposit_base(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"SignedDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// Per-byte deposit for a signed solution.
				pub fn signed_deposit_byte(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"SignedDepositByte",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// Per-weight deposit for a signed solution.
				pub fn signed_deposit_weight(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"SignedDepositWeight",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The maximum number of electing voters to put in the snapshot. At the moment,
				/// snapshots are only over a single block, but once multi-block elections are
				/// introduced they will take place over multiple blocks.
				pub fn max_electing_voters(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"MaxElectingVoters",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum number of electable targets to put in the snapshot.
				pub fn max_electable_targets(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u16> {
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"MaxElectableTargets",
						[
							116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
							41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
							90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
						],
					)
				}
				/// The maximum number of winners that can be elected by this `ElectionProvider`
				/// implementation.
				///
				/// Note: This must always be greater or equal to
				/// `T::DataProvider::desired_targets()`.
				pub fn max_winners(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"MaxWinners",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				pub fn miner_max_length(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"MinerMaxLength",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				pub fn miner_max_weight(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight> {
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"MinerMaxWeight",
						[
							206u8, 61u8, 253u8, 247u8, 163u8, 40u8, 161u8, 52u8, 134u8, 140u8,
							206u8, 83u8, 44u8, 166u8, 226u8, 115u8, 181u8, 14u8, 227u8, 130u8,
							210u8, 32u8, 85u8, 29u8, 230u8, 97u8, 130u8, 165u8, 147u8, 134u8,
							106u8, 76u8,
						],
					)
				}
				pub fn miner_max_votes_per_voter(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"MinerMaxVotesPerVoter",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				pub fn miner_max_winners(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ElectionProviderMultiPhase",
						"MinerMaxWinners",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod staking {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Bond {
				pub controller: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
				pub payee:
					runtime_types::pallet_staking::RewardDestination<::subxt::utils::AccountId32>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct BondExtra {
				#[codec(compact)]
				pub max_additional: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Unbond {
				#[codec(compact)]
				pub value: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct WithdrawUnbonded {
				pub num_slashing_spans: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Validate {
				pub prefs: runtime_types::pallet_staking::ValidatorPrefs,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Nominate {
				pub targets: ::std::vec::Vec<
					::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Chill;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetPayee {
				pub payee:
					runtime_types::pallet_staking::RewardDestination<::subxt::utils::AccountId32>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetController {
				pub controller: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetValidatorCount {
				#[codec(compact)]
				pub new: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct IncreaseValidatorCount {
				#[codec(compact)]
				pub additional: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ScaleValidatorCount {
				pub factor: runtime_types::sp_arithmetic::per_things::Percent,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceNoEras;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceNewEra;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetInvulnerables {
				pub invulnerables: ::std::vec::Vec<::subxt::utils::AccountId32>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceUnstake {
				pub stash: ::subxt::utils::AccountId32,
				pub num_slashing_spans: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceNewEraAlways;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CancelDeferredSlash {
				pub era: ::core::primitive::u32,
				pub slash_indices: ::std::vec::Vec<::core::primitive::u32>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct PayoutStakers {
				pub validator_stash: ::subxt::utils::AccountId32,
				pub era: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Rebond {
				#[codec(compact)]
				pub value: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ReapStash {
				pub stash: ::subxt::utils::AccountId32,
				pub num_slashing_spans: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Kick {
				pub who: ::std::vec::Vec<
					::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetStakingConfigs {
				pub min_nominator_bond: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
					::core::primitive::u128,
				>,
				pub min_validator_bond: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
					::core::primitive::u128,
				>,
				pub max_nominator_count:
					runtime_types::pallet_staking::pallet::pallet::ConfigOp<::core::primitive::u32>,
				pub max_validator_count:
					runtime_types::pallet_staking::pallet::pallet::ConfigOp<::core::primitive::u32>,
				pub chill_threshold: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
					runtime_types::sp_arithmetic::per_things::Percent,
				>,
				pub min_commission: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
					runtime_types::sp_arithmetic::per_things::Perbill,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ChillOther {
				pub controller: ::subxt::utils::AccountId32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceApplyMinCommission {
				pub validator_stash: ::subxt::utils::AccountId32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetMinCommission {
				pub new: runtime_types::sp_arithmetic::per_things::Perbill,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Take the origin account as a stash and lock up `value` of its balance.
				/// `controller` will be the account that controls it.
				///
				///`value` must be more than the `minimum_balance` specified by `T::Currency`.
				///
				///The dispatch origin for this call must be _Signed_ by the stash account.
				///
				///Emits `Bonded`.
				///## Complexity
				/// - Independent of the arguments. Moderate complexity.
				/// - O(1).
				/// - Three extra DB entries.
				///
				///NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_
				/// cleaned unless the `origin` falls below _existential deposit_ and gets removed
				/// as dust.
				pub fn bond(
					&self,
					controller: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					value: ::core::primitive::u128,
					payee: runtime_types::pallet_staking::RewardDestination<
						::subxt::utils::AccountId32,
					>,
				) -> ::subxt::tx::Payload<Bond> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"bond",
						Bond { controller, value, payee },
						[
							140u8, 13u8, 108u8, 181u8, 212u8, 177u8, 190u8, 212u8, 163u8, 40u8,
							120u8, 232u8, 126u8, 213u8, 6u8, 181u8, 99u8, 252u8, 58u8, 54u8, 139u8,
							64u8, 67u8, 76u8, 53u8, 226u8, 11u8, 133u8, 235u8, 159u8, 103u8, 210u8,
						],
					)
				}
				///Add some extra amount that have appeared in the stash `free_balance` into the
				/// balance up for staking.
				///
				///The dispatch origin for this call must be _Signed_ by the stash, not the
				/// controller.
				///
				///Use this if there are additional funds in your stash account that you wish to
				/// bond. Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does
				/// not impose any limitation on the amount that can be added.
				///
				///Emits `Bonded`.
				///
				///## Complexity
				/// - Independent of the arguments. Insignificant complexity.
				/// - O(1).
				pub fn bond_extra(
					&self,
					max_additional: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<BondExtra> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"bond_extra",
						BondExtra { max_additional },
						[
							60u8, 45u8, 82u8, 223u8, 113u8, 95u8, 0u8, 71u8, 59u8, 108u8, 228u8,
							9u8, 95u8, 210u8, 113u8, 106u8, 252u8, 15u8, 19u8, 128u8, 11u8, 187u8,
							4u8, 151u8, 103u8, 143u8, 24u8, 33u8, 149u8, 82u8, 35u8, 192u8,
						],
					)
				}
				///Schedule a portion of the stash to be unlocked ready for transfer out after the
				/// bond period ends. If this leaves an amount actively bonded less than
				///T::Currency::minimum_balance(), then it is increased to the full amount.
				///
				///The dispatch origin for this call must be _Signed_ by the controller, not the
				/// stash.
				///
				///Once the unlock period is done, you can call `withdraw_unbonded` to actually
				/// move the funds out of management ready for transfer.
				///
				///No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)
				///can co-exists at the same time. If there are no unlocking chunks slots available
				///[`Call::withdraw_unbonded`] is called to remove some of the chunks (if
				/// possible).
				///
				///If a user encounters the `InsufficientBond` error when calling this extrinsic,
				///they should call `chill` first in order to free up their bonded funds.
				///
				///Emits `Unbonded`.
				///
				///See also [`Call::withdraw_unbonded`].
				pub fn unbond(
					&self,
					value: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<Unbond> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"unbond",
						Unbond { value },
						[
							85u8, 62u8, 34u8, 127u8, 60u8, 241u8, 134u8, 60u8, 125u8, 91u8, 31u8,
							193u8, 50u8, 230u8, 237u8, 42u8, 114u8, 230u8, 240u8, 146u8, 14u8,
							109u8, 185u8, 151u8, 148u8, 44u8, 147u8, 182u8, 192u8, 253u8, 51u8,
							87u8,
						],
					)
				}
				///Remove any unlocked chunks from the `unlocking` queue from our management.
				///
				///This essentially frees up that balance to be used by the stash account to do
				///whatever it wants.
				///
				///The dispatch origin for this call must be _Signed_ by the controller.
				///
				///Emits `Withdrawn`.
				///
				///See also [`Call::unbond`].
				///
				///## Complexity
				///O(S) where S is the number of slashing spans to remove
				///NOTE: Weight annotation is the kill scenario, we refund otherwise.
				pub fn withdraw_unbonded(
					&self,
					num_slashing_spans: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<WithdrawUnbonded> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"withdraw_unbonded",
						WithdrawUnbonded { num_slashing_spans },
						[
							95u8, 223u8, 122u8, 217u8, 76u8, 208u8, 86u8, 129u8, 31u8, 104u8, 70u8,
							154u8, 23u8, 250u8, 165u8, 192u8, 149u8, 249u8, 158u8, 159u8, 194u8,
							224u8, 118u8, 134u8, 204u8, 157u8, 72u8, 136u8, 19u8, 193u8, 183u8,
							84u8,
						],
					)
				}
				///Declare the desire to validate for the origin controller.
				///
				///Effects will be felt at the beginning of the next era.
				///
				///The dispatch origin for this call must be _Signed_ by the controller, not the
				/// stash.
				pub fn validate(
					&self,
					prefs: runtime_types::pallet_staking::ValidatorPrefs,
				) -> ::subxt::tx::Payload<Validate> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"validate",
						Validate { prefs },
						[
							191u8, 116u8, 139u8, 35u8, 250u8, 211u8, 86u8, 240u8, 35u8, 9u8, 19u8,
							44u8, 148u8, 35u8, 91u8, 106u8, 200u8, 172u8, 108u8, 145u8, 194u8,
							146u8, 61u8, 145u8, 233u8, 168u8, 2u8, 26u8, 145u8, 101u8, 114u8,
							157u8,
						],
					)
				}
				///Declare the desire to nominate `targets` for the origin controller.
				///
				///Effects will be felt at the beginning of the next era.
				///
				///The dispatch origin for this call must be _Signed_ by the controller, not the
				/// stash.
				///
				///## Complexity
				/// - The transaction's complexity is proportional to the size of `targets` (N)
				///which is capped at CompactAssignments::LIMIT (T::MaxNominations).
				/// - Both the reads and writes follow a similar pattern.
				pub fn nominate(
					&self,
					targets: ::std::vec::Vec<
						::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					>,
				) -> ::subxt::tx::Payload<Nominate> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"nominate",
						Nominate { targets },
						[
							249u8, 66u8, 140u8, 39u8, 26u8, 221u8, 135u8, 225u8, 98u8, 255u8, 13u8,
							54u8, 106u8, 215u8, 129u8, 156u8, 190u8, 83u8, 178u8, 170u8, 116u8,
							27u8, 8u8, 244u8, 56u8, 73u8, 164u8, 223u8, 199u8, 115u8, 168u8, 83u8,
						],
					)
				}
				///Declare no desire to either validate or nominate.
				///
				///Effects will be felt at the beginning of the next era.
				///
				///The dispatch origin for this call must be _Signed_ by the controller, not the
				/// stash.
				///
				///## Complexity
				/// - Independent of the arguments. Insignificant complexity.
				/// - Contains one read.
				/// - Writes are limited to the `origin` account key.
				pub fn chill(&self) -> ::subxt::tx::Payload<Chill> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"chill",
						Chill {},
						[
							94u8, 20u8, 196u8, 31u8, 220u8, 125u8, 115u8, 167u8, 140u8, 3u8, 20u8,
							132u8, 81u8, 120u8, 215u8, 166u8, 230u8, 56u8, 16u8, 222u8, 31u8,
							153u8, 120u8, 62u8, 153u8, 67u8, 220u8, 239u8, 11u8, 234u8, 127u8,
							122u8,
						],
					)
				}
				///(Re-)set the payment target for a controller.
				///
				///Effects will be felt instantly (as soon as this function is completed
				/// successfully).
				///
				///The dispatch origin for this call must be _Signed_ by the controller, not the
				/// stash.
				///
				///## Complexity
				/// - O(1)
				/// - Independent of the arguments. Insignificant complexity.
				/// - Contains a limited number of reads.
				/// - Writes are limited to the `origin` account key.
				///---------
				pub fn set_payee(
					&self,
					payee: runtime_types::pallet_staking::RewardDestination<
						::subxt::utils::AccountId32,
					>,
				) -> ::subxt::tx::Payload<SetPayee> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"set_payee",
						SetPayee { payee },
						[
							96u8, 8u8, 254u8, 164u8, 87u8, 46u8, 120u8, 11u8, 197u8, 63u8, 20u8,
							178u8, 167u8, 236u8, 149u8, 245u8, 14u8, 171u8, 108u8, 195u8, 250u8,
							133u8, 0u8, 75u8, 192u8, 159u8, 84u8, 220u8, 242u8, 133u8, 60u8, 62u8,
						],
					)
				}
				///(Re-)set the controller of a stash.
				///
				///Effects will be felt instantly (as soon as this function is completed
				/// successfully).
				///
				///The dispatch origin for this call must be _Signed_ by the stash, not the
				/// controller.
				///
				///## Complexity
				///O(1)
				/// - Independent of the arguments. Insignificant complexity.
				/// - Contains a limited number of reads.
				/// - Writes are limited to the `origin` account key.
				pub fn set_controller(
					&self,
					controller: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<SetController> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"set_controller",
						SetController { controller },
						[
							154u8, 80u8, 184u8, 176u8, 74u8, 106u8, 72u8, 242u8, 64u8, 81u8, 169u8,
							157u8, 200u8, 97u8, 117u8, 192u8, 143u8, 166u8, 38u8, 235u8, 75u8,
							161u8, 177u8, 229u8, 229u8, 82u8, 95u8, 39u8, 40u8, 116u8, 9u8, 204u8,
						],
					)
				}
				///Sets the ideal number of validators.
				///
				///The dispatch origin must be Root.
				///
				///## Complexity
				///O(1)
				pub fn set_validator_count(
					&self,
					new: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<SetValidatorCount> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"set_validator_count",
						SetValidatorCount { new },
						[
							55u8, 232u8, 95u8, 66u8, 228u8, 217u8, 11u8, 27u8, 3u8, 202u8, 199u8,
							242u8, 70u8, 160u8, 250u8, 187u8, 194u8, 91u8, 15u8, 36u8, 215u8, 36u8,
							160u8, 108u8, 251u8, 60u8, 240u8, 202u8, 249u8, 235u8, 28u8, 94u8,
						],
					)
				}
				///Increments the ideal number of validators upto maximum of
				///`ElectionProviderBase::MaxWinners`.
				///
				///The dispatch origin must be Root.
				///
				///## Complexity
				///Same as [`Self::set_validator_count`].
				pub fn increase_validator_count(
					&self,
					additional: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<IncreaseValidatorCount> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"increase_validator_count",
						IncreaseValidatorCount { additional },
						[
							239u8, 184u8, 155u8, 213u8, 25u8, 22u8, 193u8, 13u8, 102u8, 192u8,
							82u8, 153u8, 249u8, 192u8, 60u8, 158u8, 8u8, 78u8, 175u8, 219u8, 46u8,
							51u8, 222u8, 193u8, 193u8, 201u8, 78u8, 90u8, 58u8, 86u8, 196u8, 17u8,
						],
					)
				}
				///Scale up the ideal number of validators by a factor upto maximum of
				///`ElectionProviderBase::MaxWinners`.
				///
				///The dispatch origin must be Root.
				///
				///## Complexity
				///Same as [`Self::set_validator_count`].
				pub fn scale_validator_count(
					&self,
					factor: runtime_types::sp_arithmetic::per_things::Percent,
				) -> ::subxt::tx::Payload<ScaleValidatorCount> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"scale_validator_count",
						ScaleValidatorCount { factor },
						[
							198u8, 68u8, 227u8, 94u8, 110u8, 157u8, 209u8, 217u8, 112u8, 37u8,
							78u8, 142u8, 12u8, 193u8, 219u8, 167u8, 149u8, 112u8, 49u8, 139u8,
							74u8, 81u8, 172u8, 72u8, 253u8, 224u8, 56u8, 194u8, 185u8, 90u8, 87u8,
							125u8,
						],
					)
				}
				///Force there to be no new eras indefinitely.
				///
				///The dispatch origin must be Root.
				///
				///# Warning
				///
				///The election process starts multiple blocks before the end of the era.
				///Thus the election process may be ongoing when this is called. In this case the
				///election will continue until the next era is triggered.
				///
				///## Complexity
				/// - No arguments.
				/// - Weight: O(1)
				pub fn force_no_eras(&self) -> ::subxt::tx::Payload<ForceNoEras> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"force_no_eras",
						ForceNoEras {},
						[
							16u8, 81u8, 207u8, 168u8, 23u8, 236u8, 11u8, 75u8, 141u8, 107u8, 92u8,
							2u8, 53u8, 111u8, 252u8, 116u8, 91u8, 120u8, 75u8, 24u8, 125u8, 53u8,
							9u8, 28u8, 242u8, 87u8, 245u8, 55u8, 40u8, 103u8, 151u8, 178u8,
						],
					)
				}
				///Force there to be a new era at the end of the next session. After this, it will
				/// be reset to normal (non-forced) behaviour.
				///
				///The dispatch origin must be Root.
				///
				///# Warning
				///
				///The election process starts multiple blocks before the end of the era.
				///If this is called just before a new era is triggered, the election process may
				/// not have enough blocks to get a result.
				///
				///## Complexity
				/// - No arguments.
				/// - Weight: O(1)
				pub fn force_new_era(&self) -> ::subxt::tx::Payload<ForceNewEra> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"force_new_era",
						ForceNewEra {},
						[
							230u8, 242u8, 169u8, 196u8, 78u8, 145u8, 24u8, 191u8, 113u8, 68u8, 5u8,
							138u8, 48u8, 51u8, 109u8, 126u8, 73u8, 136u8, 162u8, 158u8, 174u8,
							201u8, 213u8, 230u8, 215u8, 44u8, 200u8, 32u8, 75u8, 27u8, 23u8, 254u8,
						],
					)
				}
				///Set the validators who cannot be slashed (if any).
				///
				///The dispatch origin must be Root.
				pub fn set_invulnerables(
					&self,
					invulnerables: ::std::vec::Vec<::subxt::utils::AccountId32>,
				) -> ::subxt::tx::Payload<SetInvulnerables> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"set_invulnerables",
						SetInvulnerables { invulnerables },
						[
							2u8, 148u8, 221u8, 111u8, 153u8, 48u8, 222u8, 36u8, 228u8, 84u8, 18u8,
							35u8, 168u8, 239u8, 53u8, 245u8, 27u8, 76u8, 18u8, 203u8, 206u8, 9u8,
							8u8, 81u8, 35u8, 224u8, 22u8, 133u8, 58u8, 99u8, 103u8, 39u8,
						],
					)
				}
				///Force a current staker to become completely unstaked, immediately.
				///
				///The dispatch origin must be Root.
				pub fn force_unstake(
					&self,
					stash: ::subxt::utils::AccountId32,
					num_slashing_spans: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<ForceUnstake> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"force_unstake",
						ForceUnstake { stash, num_slashing_spans },
						[
							94u8, 247u8, 238u8, 47u8, 250u8, 6u8, 96u8, 175u8, 173u8, 123u8, 161u8,
							187u8, 162u8, 214u8, 176u8, 233u8, 33u8, 33u8, 167u8, 239u8, 40u8,
							223u8, 19u8, 131u8, 230u8, 39u8, 175u8, 200u8, 36u8, 182u8, 76u8,
							207u8,
						],
					)
				}
				///Force there to be a new era at the end of sessions indefinitely.
				///
				///The dispatch origin must be Root.
				///
				///# Warning
				///
				///The election process starts multiple blocks before the end of the era.
				///If this is called just before a new era is triggered, the election process may
				/// not have enough blocks to get a result.
				pub fn force_new_era_always(&self) -> ::subxt::tx::Payload<ForceNewEraAlways> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"force_new_era_always",
						ForceNewEraAlways {},
						[
							179u8, 118u8, 189u8, 54u8, 248u8, 141u8, 207u8, 142u8, 80u8, 37u8,
							241u8, 185u8, 138u8, 254u8, 117u8, 147u8, 225u8, 118u8, 34u8, 177u8,
							197u8, 158u8, 8u8, 82u8, 202u8, 108u8, 208u8, 26u8, 64u8, 33u8, 74u8,
							43u8,
						],
					)
				}
				///Cancel enactment of a deferred slash.
				///
				///Can be called by the `T::AdminOrigin`.
				///
				///Parameters: era and indices of the slashes for that era to kill.
				pub fn cancel_deferred_slash(
					&self,
					era: ::core::primitive::u32,
					slash_indices: ::std::vec::Vec<::core::primitive::u32>,
				) -> ::subxt::tx::Payload<CancelDeferredSlash> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"cancel_deferred_slash",
						CancelDeferredSlash { era, slash_indices },
						[
							120u8, 57u8, 162u8, 105u8, 91u8, 250u8, 129u8, 240u8, 110u8, 234u8,
							170u8, 98u8, 164u8, 65u8, 106u8, 101u8, 19u8, 88u8, 146u8, 210u8,
							171u8, 44u8, 37u8, 50u8, 65u8, 178u8, 37u8, 223u8, 239u8, 197u8, 116u8,
							168u8,
						],
					)
				}
				///Pay out all the stakers behind a single validator for a single era.
				///
				/// - `validator_stash` is the stash account of the validator. Their nominators, up
				///   to
				///  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.
				/// - `era` may be any era between `[current_era - history_depth; current_era]`.
				///
				///The origin of this call must be _Signed_. Any account can call this function,
				/// even if it is not one of the stakers.
				///
				///## Complexity
				/// - At most O(MaxNominatorRewardedPerValidator).
				pub fn payout_stakers(
					&self,
					validator_stash: ::subxt::utils::AccountId32,
					era: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<PayoutStakers> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"payout_stakers",
						PayoutStakers { validator_stash, era },
						[
							184u8, 194u8, 33u8, 118u8, 7u8, 203u8, 89u8, 119u8, 214u8, 76u8, 178u8,
							20u8, 82u8, 111u8, 57u8, 132u8, 212u8, 43u8, 232u8, 91u8, 252u8, 49u8,
							42u8, 115u8, 1u8, 181u8, 154u8, 207u8, 144u8, 206u8, 205u8, 33u8,
						],
					)
				}
				///Rebond a portion of the stash scheduled to be unlocked.
				///
				///The dispatch origin must be signed by the controller.
				///
				///## Complexity
				/// - Time complexity: O(L), where L is unlocking chunks
				/// - Bounded by `MaxUnlockingChunks`.
				pub fn rebond(
					&self,
					value: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<Rebond> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"rebond",
						Rebond { value },
						[
							25u8, 22u8, 191u8, 172u8, 133u8, 101u8, 139u8, 102u8, 134u8, 16u8,
							136u8, 56u8, 137u8, 162u8, 4u8, 253u8, 196u8, 30u8, 234u8, 49u8, 102u8,
							68u8, 145u8, 96u8, 148u8, 219u8, 162u8, 17u8, 177u8, 184u8, 34u8,
							113u8,
						],
					)
				}
				///Remove all data structures concerning a staker/stash once it is at a state where
				/// it can be considered `dust` in the staking system. The requirements are:
				///
				///1. the `total_balance` of the stash is below existential deposit.
				///2. or, the `ledger.total` of the stash is below existential deposit.
				///
				///The former can happen in cases like a slash; the latter when a fully unbonded
				/// account is still receiving staking rewards in `RewardDestination::Staked`.
				///
				///It can be called by anyone, as long as `stash` meets the above requirements.
				///
				///Refunds the transaction fees upon successful execution.
				pub fn reap_stash(
					&self,
					stash: ::subxt::utils::AccountId32,
					num_slashing_spans: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<ReapStash> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"reap_stash",
						ReapStash { stash, num_slashing_spans },
						[
							34u8, 168u8, 120u8, 161u8, 95u8, 199u8, 106u8, 233u8, 61u8, 240u8,
							166u8, 31u8, 183u8, 165u8, 158u8, 179u8, 32u8, 130u8, 27u8, 164u8,
							112u8, 44u8, 14u8, 125u8, 227u8, 87u8, 70u8, 203u8, 194u8, 24u8, 212u8,
							177u8,
						],
					)
				}
				///Remove the given nominations from the calling validator.
				///
				///Effects will be felt at the beginning of the next era.
				///
				///The dispatch origin for this call must be _Signed_ by the controller, not the
				/// stash.
				///
				/// - `who`: A list of nominator stash accounts who are nominating this validator
				///   which
				///  should no longer be nominating this validator.
				///
				///Note: Making this call only makes sense if you first set the validator
				/// preferences to block any further nominations.
				pub fn kick(
					&self,
					who: ::std::vec::Vec<
						::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					>,
				) -> ::subxt::tx::Payload<Kick> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"kick",
						Kick { who },
						[
							94u8, 27u8, 18u8, 16u8, 126u8, 129u8, 47u8, 169u8, 114u8, 84u8, 48u8,
							95u8, 235u8, 237u8, 33u8, 118u8, 115u8, 243u8, 166u8, 120u8, 121u8,
							70u8, 227u8, 240u8, 205u8, 240u8, 211u8, 202u8, 251u8, 232u8, 209u8,
							12u8,
						],
					)
				}
				///Update the various staking configurations .
				///
				/// * `min_nominator_bond`: The minimum active bond needed to be a nominator.
				/// * `min_validator_bond`: The minimum active bond needed to be a validator.
				/// * `max_nominator_count`: The max number of users who can be a nominator at once.
				///   When
				///  set to `None`, no limit is enforced.
				/// * `max_validator_count`: The max number of users who can be a validator at once.
				///   When
				///  set to `None`, no limit is enforced.
				/// * `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count`
				///   which
				///  should be filled in order for the `chill_other` transaction to work.
				/// * `min_commission`: The minimum amount of commission that each validators must
				///   maintain.
				///  This is checked only upon calling `validate`. Existing validators are not
				/// affected.
				///
				///RuntimeOrigin must be Root to call this function.
				///
				///NOTE: Existing nominators and validators will not be affected by this update.
				///to kick people under the new limits, `chill_other` should be called.
				pub fn set_staking_configs(
					&self,
					min_nominator_bond: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
						::core::primitive::u128,
					>,
					min_validator_bond: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
						::core::primitive::u128,
					>,
					max_nominator_count: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
						::core::primitive::u32,
					>,
					max_validator_count: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
						::core::primitive::u32,
					>,
					chill_threshold: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
						runtime_types::sp_arithmetic::per_things::Percent,
					>,
					min_commission: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
						runtime_types::sp_arithmetic::per_things::Perbill,
					>,
				) -> ::subxt::tx::Payload<SetStakingConfigs> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"set_staking_configs",
						SetStakingConfigs {
							min_nominator_bond,
							min_validator_bond,
							max_nominator_count,
							max_validator_count,
							chill_threshold,
							min_commission,
						},
						[
							176u8, 168u8, 155u8, 176u8, 27u8, 79u8, 223u8, 92u8, 88u8, 93u8, 223u8,
							69u8, 179u8, 250u8, 138u8, 138u8, 87u8, 220u8, 36u8, 3u8, 126u8, 213u8,
							16u8, 68u8, 3u8, 16u8, 218u8, 151u8, 98u8, 169u8, 217u8, 75u8,
						],
					)
				}
				///Declare a `controller` to stop participating as either a validator or nominator.
				///
				///Effects will be felt at the beginning of the next era.
				///
				///The dispatch origin for this call must be _Signed_, but can be called by anyone.
				///
				///If the caller is the same as the controller being targeted, then no further
				/// checks are enforced, and this function behaves just like `chill`.
				///
				///If the caller is different than the controller being targeted, the following
				/// conditions must be met:
				///
				/// * `controller` must belong to a nominator who has become non-decodable,
				///
				///Or:
				///
				/// * A `ChillThreshold` must be set and checked which defines how close to the max
				///  nominators or validators we must reach before users can start chilling
				/// one-another.
				/// * A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to
				///   determine
				///  how close we are to the threshold.
				/// * A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which
				///   determines
				///  if this is a person that should be chilled because they have not met the
				/// threshold  bond required.
				///
				///This can be helpful if bond requirements are updated, and we need to remove old
				/// users who do not satisfy these requirements.
				pub fn chill_other(
					&self,
					controller: ::subxt::utils::AccountId32,
				) -> ::subxt::tx::Payload<ChillOther> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"chill_other",
						ChillOther { controller },
						[
							140u8, 98u8, 4u8, 203u8, 91u8, 131u8, 123u8, 119u8, 169u8, 47u8, 188u8,
							23u8, 205u8, 170u8, 82u8, 220u8, 166u8, 170u8, 135u8, 176u8, 68u8,
							228u8, 14u8, 67u8, 42u8, 52u8, 140u8, 231u8, 62u8, 167u8, 80u8, 173u8,
						],
					)
				}
				///Force a validator to have at least the minimum commission. This will not affect
				/// a validator who already has a commission greater than or equal to the minimum.
				/// Any account can call this.
				pub fn force_apply_min_commission(
					&self,
					validator_stash: ::subxt::utils::AccountId32,
				) -> ::subxt::tx::Payload<ForceApplyMinCommission> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"force_apply_min_commission",
						ForceApplyMinCommission { validator_stash },
						[
							136u8, 163u8, 85u8, 134u8, 240u8, 247u8, 183u8, 227u8, 226u8, 202u8,
							102u8, 186u8, 138u8, 119u8, 78u8, 123u8, 229u8, 135u8, 129u8, 241u8,
							119u8, 106u8, 41u8, 182u8, 121u8, 181u8, 242u8, 175u8, 74u8, 207u8,
							64u8, 106u8,
						],
					)
				}
				///Sets the minimum amount of commission that each validators must maintain.
				///
				///This call has lower privilege requirements than `set_staking_config` and can be
				/// called by the `T::AdminOrigin`. Root can always call this.
				pub fn set_min_commission(
					&self,
					new: runtime_types::sp_arithmetic::per_things::Perbill,
				) -> ::subxt::tx::Payload<SetMinCommission> {
					::subxt::tx::Payload::new_static(
						"Staking",
						"set_min_commission",
						SetMinCommission { new },
						[
							62u8, 139u8, 175u8, 245u8, 212u8, 113u8, 117u8, 130u8, 191u8, 173u8,
							78u8, 97u8, 19u8, 104u8, 185u8, 207u8, 201u8, 14u8, 200u8, 208u8,
							184u8, 195u8, 242u8, 175u8, 158u8, 156u8, 51u8, 58u8, 118u8, 154u8,
							68u8, 221u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_staking::pallet::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The era payout has been set; the first balance is the validator-payout; the second
			/// is the remainder from the maximum amount of reward.
			pub struct EraPaid {
				pub era_index: ::core::primitive::u32,
				pub validator_payout: ::core::primitive::u128,
				pub remainder: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for EraPaid {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "EraPaid";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The nominator has been rewarded by this amount.
			pub struct Rewarded {
				pub stash: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Rewarded {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "Rewarded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A staker (validator or nominator) has been slashed by the given amount.
			pub struct Slashed {
				pub staker: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Slashed {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "Slashed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A slash for the given validator, for the given percentage of their stake, at the
			/// given era as been reported.
			pub struct SlashReported {
				pub validator: ::subxt::utils::AccountId32,
				pub fraction: runtime_types::sp_arithmetic::per_things::Perbill,
				pub slash_era: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for SlashReported {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "SlashReported";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An old slashing report from a prior era was discarded because it could
			///not be processed.
			pub struct OldSlashingReportDiscarded {
				pub session_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for OldSlashingReportDiscarded {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "OldSlashingReportDiscarded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A new set of stakers was elected.
			pub struct StakersElected;
			impl ::subxt::events::StaticEvent for StakersElected {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "StakersElected";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An account has bonded this amount. \[stash, amount\]
			///
			///NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,
			///it will not be emitted for staking rewards when they are added to stake.
			pub struct Bonded {
				pub stash: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Bonded {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "Bonded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An account has unbonded this amount.
			pub struct Unbonded {
				pub stash: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Unbonded {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "Unbonded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An account has called `withdraw_unbonded` and removed unbonding chunks worth
			/// `Balance` from the unlocking queue.
			pub struct Withdrawn {
				pub stash: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Withdrawn {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "Withdrawn";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A nominator has been kicked from a validator.
			pub struct Kicked {
				pub nominator: ::subxt::utils::AccountId32,
				pub stash: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Kicked {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "Kicked";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The election failed. No new era is planned.
			pub struct StakingElectionFailed;
			impl ::subxt::events::StaticEvent for StakingElectionFailed {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "StakingElectionFailed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An account has stopped participating as either a validator or nominator.
			pub struct Chilled {
				pub stash: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Chilled {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "Chilled";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The stakers' rewards are getting paid.
			pub struct PayoutStarted {
				pub era_index: ::core::primitive::u32,
				pub validator_stash: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for PayoutStarted {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "PayoutStarted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A validator has set their preferences.
			pub struct ValidatorPrefsSet {
				pub stash: ::subxt::utils::AccountId32,
				pub prefs: runtime_types::pallet_staking::ValidatorPrefs,
			}
			impl ::subxt::events::StaticEvent for ValidatorPrefsSet {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "ValidatorPrefsSet";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A new force era mode was set.
			pub struct ForceEra {
				pub mode: runtime_types::pallet_staking::Forcing,
			}
			impl ::subxt::events::StaticEvent for ForceEra {
				const PALLET: &'static str = "Staking";
				const EVENT: &'static str = "ForceEra";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The ideal number of active validators.
				pub fn validator_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ValidatorCount",
						vec![],
						[
							245u8, 75u8, 214u8, 110u8, 66u8, 164u8, 86u8, 206u8, 69u8, 89u8, 12u8,
							111u8, 117u8, 16u8, 228u8, 184u8, 207u8, 6u8, 0u8, 126u8, 221u8, 67u8,
							125u8, 218u8, 188u8, 245u8, 156u8, 188u8, 34u8, 85u8, 208u8, 197u8,
						],
					)
				}
				/// Minimum number of staking participants before emergency conditions are imposed.
				pub fn minimum_validator_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"MinimumValidatorCount",
						vec![],
						[
							82u8, 95u8, 128u8, 55u8, 136u8, 134u8, 71u8, 117u8, 135u8, 76u8, 44u8,
							46u8, 174u8, 34u8, 170u8, 228u8, 175u8, 1u8, 234u8, 162u8, 91u8, 252u8,
							127u8, 68u8, 243u8, 241u8, 13u8, 107u8, 214u8, 70u8, 87u8, 249u8,
						],
					)
				}
				/// Any validators that may never be slashed or forcibly kicked. It's a Vec since
				/// they're easy to initialize and the performance hit is minimal (we expect no more
				/// than four invulnerables) and restricted to testnets.
				pub fn invulnerables(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::subxt::utils::AccountId32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"Invulnerables",
						vec![],
						[
							77u8, 78u8, 63u8, 199u8, 150u8, 167u8, 135u8, 130u8, 192u8, 51u8,
							202u8, 119u8, 68u8, 49u8, 241u8, 68u8, 82u8, 90u8, 226u8, 201u8, 96u8,
							170u8, 21u8, 173u8, 236u8, 116u8, 148u8, 8u8, 174u8, 92u8, 7u8, 11u8,
						],
					)
				}
				/// Map from all locked "stash" accounts to the controller account.
				///
				/// TWOX-NOTE: SAFE since `AccountId` is a secure hash.
				pub fn bonded(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"Bonded",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							35u8, 197u8, 156u8, 60u8, 22u8, 59u8, 103u8, 83u8, 77u8, 15u8, 118u8,
							193u8, 155u8, 97u8, 229u8, 36u8, 119u8, 128u8, 224u8, 162u8, 21u8,
							46u8, 199u8, 221u8, 15u8, 74u8, 59u8, 70u8, 77u8, 218u8, 73u8, 165u8,
						],
					)
				}
				/// Map from all locked "stash" accounts to the controller account.
				///
				/// TWOX-NOTE: SAFE since `AccountId` is a secure hash.
				pub fn bonded_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"Bonded",
						Vec::new(),
						[
							35u8, 197u8, 156u8, 60u8, 22u8, 59u8, 103u8, 83u8, 77u8, 15u8, 118u8,
							193u8, 155u8, 97u8, 229u8, 36u8, 119u8, 128u8, 224u8, 162u8, 21u8,
							46u8, 199u8, 221u8, 15u8, 74u8, 59u8, 70u8, 77u8, 218u8, 73u8, 165u8,
						],
					)
				}
				/// The minimum active bond to become and maintain the role of a nominator.
				pub fn min_nominator_bond(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"MinNominatorBond",
						vec![],
						[
							187u8, 66u8, 149u8, 226u8, 72u8, 219u8, 57u8, 246u8, 102u8, 47u8, 71u8,
							12u8, 219u8, 204u8, 127u8, 223u8, 58u8, 134u8, 81u8, 165u8, 200u8,
							142u8, 196u8, 158u8, 26u8, 38u8, 165u8, 19u8, 91u8, 251u8, 119u8, 84u8,
						],
					)
				}
				/// The minimum active bond to become and maintain the role of a validator.
				pub fn min_validator_bond(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"MinValidatorBond",
						vec![],
						[
							48u8, 105u8, 85u8, 178u8, 142u8, 208u8, 208u8, 19u8, 236u8, 130u8,
							129u8, 169u8, 35u8, 245u8, 66u8, 182u8, 92u8, 20u8, 22u8, 109u8, 155u8,
							174u8, 87u8, 118u8, 242u8, 216u8, 193u8, 154u8, 4u8, 5u8, 66u8, 56u8,
						],
					)
				}
				/// The minimum active nominator stake of the last successful election.
				pub fn minimum_active_stake(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"MinimumActiveStake",
						vec![],
						[
							172u8, 190u8, 228u8, 47u8, 47u8, 192u8, 182u8, 59u8, 9u8, 18u8, 103u8,
							46u8, 175u8, 54u8, 17u8, 79u8, 89u8, 107u8, 255u8, 200u8, 182u8, 107u8,
							89u8, 157u8, 55u8, 16u8, 77u8, 46u8, 154u8, 169u8, 103u8, 151u8,
						],
					)
				}
				/// The minimum amount of commission that validators can set.
				///
				/// If set to `0`, no limit exists.
				pub fn min_commission(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::sp_arithmetic::per_things::Perbill,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"MinCommission",
						vec![],
						[
							61u8, 101u8, 69u8, 27u8, 220u8, 179u8, 5u8, 71u8, 66u8, 227u8, 84u8,
							98u8, 18u8, 141u8, 183u8, 49u8, 98u8, 46u8, 123u8, 114u8, 198u8, 85u8,
							15u8, 175u8, 243u8, 239u8, 133u8, 129u8, 146u8, 174u8, 254u8, 158u8,
						],
					)
				}
				/// Map from all (unlocked) "controller" accounts to the info regarding the staking.
				pub fn ledger(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::StakingLedger,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"Ledger",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							31u8, 205u8, 3u8, 165u8, 22u8, 22u8, 62u8, 92u8, 33u8, 189u8, 124u8,
							120u8, 177u8, 70u8, 27u8, 242u8, 188u8, 184u8, 204u8, 188u8, 242u8,
							140u8, 128u8, 230u8, 85u8, 99u8, 181u8, 173u8, 67u8, 252u8, 37u8,
							236u8,
						],
					)
				}
				/// Map from all (unlocked) "controller" accounts to the info regarding the staking.
				pub fn ledger_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::StakingLedger,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"Ledger",
						Vec::new(),
						[
							31u8, 205u8, 3u8, 165u8, 22u8, 22u8, 62u8, 92u8, 33u8, 189u8, 124u8,
							120u8, 177u8, 70u8, 27u8, 242u8, 188u8, 184u8, 204u8, 188u8, 242u8,
							140u8, 128u8, 230u8, 85u8, 99u8, 181u8, 173u8, 67u8, 252u8, 37u8,
							236u8,
						],
					)
				}
				/// Where the reward payment should be made. Keyed by stash.
				///
				/// TWOX-NOTE: SAFE since `AccountId` is a secure hash.
				pub fn payee(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::RewardDestination<::subxt::utils::AccountId32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"Payee",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							195u8, 125u8, 82u8, 213u8, 216u8, 64u8, 76u8, 63u8, 187u8, 163u8, 20u8,
							230u8, 153u8, 13u8, 189u8, 232u8, 119u8, 118u8, 107u8, 17u8, 102u8,
							245u8, 36u8, 42u8, 232u8, 137u8, 177u8, 165u8, 169u8, 246u8, 199u8,
							57u8,
						],
					)
				}
				/// Where the reward payment should be made. Keyed by stash.
				///
				/// TWOX-NOTE: SAFE since `AccountId` is a secure hash.
				pub fn payee_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::RewardDestination<::subxt::utils::AccountId32>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"Payee",
						Vec::new(),
						[
							195u8, 125u8, 82u8, 213u8, 216u8, 64u8, 76u8, 63u8, 187u8, 163u8, 20u8,
							230u8, 153u8, 13u8, 189u8, 232u8, 119u8, 118u8, 107u8, 17u8, 102u8,
							245u8, 36u8, 42u8, 232u8, 137u8, 177u8, 165u8, 169u8, 246u8, 199u8,
							57u8,
						],
					)
				}
				/// The map from (wannabe) validator stash key to the preferences of that validator.
				///
				/// TWOX-NOTE: SAFE since `AccountId` is a secure hash.
				pub fn validators(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::ValidatorPrefs,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"Validators",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							80u8, 77u8, 66u8, 18u8, 197u8, 250u8, 41u8, 185u8, 43u8, 24u8, 149u8,
							164u8, 208u8, 60u8, 144u8, 29u8, 251u8, 195u8, 236u8, 196u8, 108u8,
							58u8, 80u8, 115u8, 246u8, 66u8, 226u8, 241u8, 201u8, 172u8, 229u8,
							152u8,
						],
					)
				}
				/// The map from (wannabe) validator stash key to the preferences of that validator.
				///
				/// TWOX-NOTE: SAFE since `AccountId` is a secure hash.
				pub fn validators_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::ValidatorPrefs,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"Validators",
						Vec::new(),
						[
							80u8, 77u8, 66u8, 18u8, 197u8, 250u8, 41u8, 185u8, 43u8, 24u8, 149u8,
							164u8, 208u8, 60u8, 144u8, 29u8, 251u8, 195u8, 236u8, 196u8, 108u8,
							58u8, 80u8, 115u8, 246u8, 66u8, 226u8, 241u8, 201u8, 172u8, 229u8,
							152u8,
						],
					)
				}
				///Counter for the related counted storage map
				pub fn counter_for_validators(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"CounterForValidators",
						vec![],
						[
							139u8, 25u8, 223u8, 6u8, 160u8, 239u8, 212u8, 85u8, 36u8, 185u8, 69u8,
							63u8, 21u8, 156u8, 144u8, 241u8, 112u8, 85u8, 49u8, 78u8, 88u8, 11u8,
							8u8, 48u8, 118u8, 34u8, 62u8, 159u8, 239u8, 122u8, 90u8, 45u8,
						],
					)
				}
				/// The maximum validator count before we stop allowing new validators to join.
				///
				/// When this value is not set, no limits are enforced.
				pub fn max_validators_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"MaxValidatorsCount",
						vec![],
						[
							250u8, 62u8, 16u8, 68u8, 192u8, 216u8, 236u8, 211u8, 217u8, 9u8, 213u8,
							49u8, 41u8, 37u8, 58u8, 62u8, 131u8, 112u8, 64u8, 26u8, 133u8, 7u8,
							130u8, 1u8, 71u8, 158u8, 14u8, 55u8, 169u8, 239u8, 223u8, 245u8,
						],
					)
				}
				/// The map from nominator stash key to their nomination preferences, namely the
				/// validators that they wish to support.
				///
				/// Note that the keys of this storage map might become non-decodable in case the
				/// [`Config::MaxNominations`] configuration is decreased. In this rare case, these
				/// nominators are still existent in storage, their key is correct and retrievable
				/// (i.e. `contains_key` indicates that they exist), but their value cannot be
				/// decoded. Therefore, the non-decodable nominators will effectively not-exist,
				/// until they re-submit their preferences such that it is within the bounds of the
				/// newly set `Config::MaxNominations`.
				///
				/// This implies that `::iter_keys().count()` and `::iter().count()` might return
				/// different values for this map. Moreover, the main `::count()` is aligned with
				/// the former, namely the number of keys that exist.
				///
				/// Lastly, if any of the nominators become non-decodable, they can be chilled
				/// immediately via [`Call::chill_other`] dispatchable by anyone.
				///
				/// TWOX-NOTE: SAFE since `AccountId` is a secure hash.
				pub fn nominators(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::Nominations,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"Nominators",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							1u8, 154u8, 55u8, 170u8, 215u8, 64u8, 56u8, 83u8, 254u8, 19u8, 152u8,
							85u8, 164u8, 171u8, 206u8, 129u8, 184u8, 45u8, 221u8, 181u8, 229u8,
							133u8, 200u8, 231u8, 16u8, 146u8, 247u8, 21u8, 77u8, 122u8, 165u8,
							134u8,
						],
					)
				}
				/// The map from nominator stash key to their nomination preferences, namely the
				/// validators that they wish to support.
				///
				/// Note that the keys of this storage map might become non-decodable in case the
				/// [`Config::MaxNominations`] configuration is decreased. In this rare case, these
				/// nominators are still existent in storage, their key is correct and retrievable
				/// (i.e. `contains_key` indicates that they exist), but their value cannot be
				/// decoded. Therefore, the non-decodable nominators will effectively not-exist,
				/// until they re-submit their preferences such that it is within the bounds of the
				/// newly set `Config::MaxNominations`.
				///
				/// This implies that `::iter_keys().count()` and `::iter().count()` might return
				/// different values for this map. Moreover, the main `::count()` is aligned with
				/// the former, namely the number of keys that exist.
				///
				/// Lastly, if any of the nominators become non-decodable, they can be chilled
				/// immediately via [`Call::chill_other`] dispatchable by anyone.
				///
				/// TWOX-NOTE: SAFE since `AccountId` is a secure hash.
				pub fn nominators_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::Nominations,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"Nominators",
						Vec::new(),
						[
							1u8, 154u8, 55u8, 170u8, 215u8, 64u8, 56u8, 83u8, 254u8, 19u8, 152u8,
							85u8, 164u8, 171u8, 206u8, 129u8, 184u8, 45u8, 221u8, 181u8, 229u8,
							133u8, 200u8, 231u8, 16u8, 146u8, 247u8, 21u8, 77u8, 122u8, 165u8,
							134u8,
						],
					)
				}
				///Counter for the related counted storage map
				pub fn counter_for_nominators(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"CounterForNominators",
						vec![],
						[
							31u8, 94u8, 130u8, 138u8, 75u8, 8u8, 38u8, 162u8, 181u8, 5u8, 125u8,
							116u8, 9u8, 51u8, 22u8, 234u8, 40u8, 117u8, 215u8, 46u8, 82u8, 117u8,
							225u8, 1u8, 9u8, 208u8, 83u8, 63u8, 39u8, 187u8, 207u8, 191u8,
						],
					)
				}
				/// The maximum nominator count before we stop allowing new validators to join.
				///
				/// When this value is not set, no limits are enforced.
				pub fn max_nominators_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"MaxNominatorsCount",
						vec![],
						[
							180u8, 190u8, 180u8, 66u8, 235u8, 173u8, 76u8, 160u8, 197u8, 92u8,
							96u8, 165u8, 220u8, 188u8, 32u8, 119u8, 3u8, 73u8, 86u8, 49u8, 104u8,
							17u8, 186u8, 98u8, 221u8, 175u8, 109u8, 254u8, 207u8, 245u8, 125u8,
							179u8,
						],
					)
				}
				/// The current era index.
				///
				/// This is the latest planned era, depending on how the Session pallet queues the
				/// validator set, it might be active or not.
				pub fn current_era(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"CurrentEra",
						vec![],
						[
							105u8, 150u8, 49u8, 122u8, 4u8, 78u8, 8u8, 121u8, 34u8, 136u8, 157u8,
							227u8, 59u8, 139u8, 7u8, 253u8, 7u8, 10u8, 117u8, 71u8, 240u8, 74u8,
							86u8, 36u8, 198u8, 37u8, 153u8, 93u8, 196u8, 22u8, 192u8, 243u8,
						],
					)
				}
				/// The active era information, it holds index and start.
				///
				/// The active era is the era being currently rewarded. Validator set of this era
				/// must be equal to [`SessionInterface::validators`].
				pub fn active_era(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::ActiveEraInfo,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ActiveEra",
						vec![],
						[
							15u8, 112u8, 251u8, 183u8, 108u8, 61u8, 28u8, 71u8, 44u8, 150u8, 162u8,
							4u8, 143u8, 121u8, 11u8, 37u8, 83u8, 29u8, 193u8, 21u8, 210u8, 116u8,
							190u8, 236u8, 213u8, 235u8, 49u8, 97u8, 189u8, 142u8, 251u8, 124u8,
						],
					)
				}
				/// The session index at which the era start for the last `HISTORY_DEPTH` eras.
				///
				/// Note: This tracks the starting session (i.e. session index when era start being
				/// active) for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`.
				pub fn eras_start_session_index(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ErasStartSessionIndex",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							92u8, 157u8, 168u8, 144u8, 132u8, 3u8, 212u8, 80u8, 230u8, 229u8,
							251u8, 218u8, 97u8, 55u8, 79u8, 100u8, 163u8, 91u8, 32u8, 246u8, 122u8,
							78u8, 149u8, 214u8, 103u8, 249u8, 119u8, 20u8, 101u8, 116u8, 110u8,
							185u8,
						],
					)
				}
				/// The session index at which the era start for the last `HISTORY_DEPTH` eras.
				///
				/// Note: This tracks the starting session (i.e. session index when era start being
				/// active) for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`.
				pub fn eras_start_session_index_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ErasStartSessionIndex",
						Vec::new(),
						[
							92u8, 157u8, 168u8, 144u8, 132u8, 3u8, 212u8, 80u8, 230u8, 229u8,
							251u8, 218u8, 97u8, 55u8, 79u8, 100u8, 163u8, 91u8, 32u8, 246u8, 122u8,
							78u8, 149u8, 214u8, 103u8, 249u8, 119u8, 20u8, 101u8, 116u8, 110u8,
							185u8,
						],
					)
				}
				/// Exposure of validator at era.
				///
				/// This is keyed first by the era index to allow bulk deletion and then the stash
				/// account.
				///
				/// Is it removed after `HISTORY_DEPTH` eras.
				/// If stakers hasn't been set or has been removed then empty exposure is returned.
				pub fn eras_stakers(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::Exposure<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ErasStakers",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							192u8, 50u8, 152u8, 151u8, 92u8, 180u8, 206u8, 15u8, 139u8, 210u8,
							128u8, 65u8, 92u8, 253u8, 43u8, 35u8, 139u8, 171u8, 73u8, 185u8, 32u8,
							78u8, 20u8, 197u8, 154u8, 90u8, 233u8, 231u8, 23u8, 22u8, 187u8, 156u8,
						],
					)
				}
				/// Exposure of validator at era.
				///
				/// This is keyed first by the era index to allow bulk deletion and then the stash
				/// account.
				///
				/// Is it removed after `HISTORY_DEPTH` eras.
				/// If stakers hasn't been set or has been removed then empty exposure is returned.
				pub fn eras_stakers_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::Exposure<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ErasStakers",
						Vec::new(),
						[
							192u8, 50u8, 152u8, 151u8, 92u8, 180u8, 206u8, 15u8, 139u8, 210u8,
							128u8, 65u8, 92u8, 253u8, 43u8, 35u8, 139u8, 171u8, 73u8, 185u8, 32u8,
							78u8, 20u8, 197u8, 154u8, 90u8, 233u8, 231u8, 23u8, 22u8, 187u8, 156u8,
						],
					)
				}
				/// Clipped Exposure of validator at era.
				///
				/// This is similar to [`ErasStakers`] but number of nominators exposed is reduced
				/// to the `T::MaxNominatorRewardedPerValidator` biggest stakers.
				/// (Note: the field `total` and `own` of the exposure remains unchanged).
				/// This is used to limit the i/o cost for the nominator payout.
				///
				/// This is keyed fist by the era index to allow bulk deletion and then the stash
				/// account.
				///
				/// Is it removed after `HISTORY_DEPTH` eras.
				/// If stakers hasn't been set or has been removed then empty exposure is returned.
				pub fn eras_stakers_clipped(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::Exposure<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ErasStakersClipped",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							43u8, 159u8, 113u8, 223u8, 122u8, 169u8, 98u8, 153u8, 26u8, 55u8, 71u8,
							119u8, 174u8, 48u8, 158u8, 45u8, 214u8, 26u8, 136u8, 215u8, 46u8,
							161u8, 185u8, 17u8, 174u8, 204u8, 206u8, 246u8, 49u8, 87u8, 134u8,
							169u8,
						],
					)
				}
				/// Clipped Exposure of validator at era.
				///
				/// This is similar to [`ErasStakers`] but number of nominators exposed is reduced
				/// to the `T::MaxNominatorRewardedPerValidator` biggest stakers.
				/// (Note: the field `total` and `own` of the exposure remains unchanged).
				/// This is used to limit the i/o cost for the nominator payout.
				///
				/// This is keyed fist by the era index to allow bulk deletion and then the stash
				/// account.
				///
				/// Is it removed after `HISTORY_DEPTH` eras.
				/// If stakers hasn't been set or has been removed then empty exposure is returned.
				pub fn eras_stakers_clipped_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::Exposure<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ErasStakersClipped",
						Vec::new(),
						[
							43u8, 159u8, 113u8, 223u8, 122u8, 169u8, 98u8, 153u8, 26u8, 55u8, 71u8,
							119u8, 174u8, 48u8, 158u8, 45u8, 214u8, 26u8, 136u8, 215u8, 46u8,
							161u8, 185u8, 17u8, 174u8, 204u8, 206u8, 246u8, 49u8, 87u8, 134u8,
							169u8,
						],
					)
				}
				/// Similar to `ErasStakers`, this holds the preferences of validators.
				///
				/// This is keyed first by the era index to allow bulk deletion and then the stash
				/// account.
				///
				/// Is it removed after `HISTORY_DEPTH` eras.
				pub fn eras_validator_prefs(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::ValidatorPrefs,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ErasValidatorPrefs",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							6u8, 196u8, 209u8, 138u8, 252u8, 18u8, 203u8, 86u8, 129u8, 62u8, 4u8,
							56u8, 234u8, 114u8, 141u8, 136u8, 127u8, 224u8, 142u8, 89u8, 150u8,
							33u8, 31u8, 50u8, 140u8, 108u8, 124u8, 77u8, 188u8, 102u8, 230u8,
							174u8,
						],
					)
				}
				/// Similar to `ErasStakers`, this holds the preferences of validators.
				///
				/// This is keyed first by the era index to allow bulk deletion and then the stash
				/// account.
				///
				/// Is it removed after `HISTORY_DEPTH` eras.
				pub fn eras_validator_prefs_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::ValidatorPrefs,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ErasValidatorPrefs",
						Vec::new(),
						[
							6u8, 196u8, 209u8, 138u8, 252u8, 18u8, 203u8, 86u8, 129u8, 62u8, 4u8,
							56u8, 234u8, 114u8, 141u8, 136u8, 127u8, 224u8, 142u8, 89u8, 150u8,
							33u8, 31u8, 50u8, 140u8, 108u8, 124u8, 77u8, 188u8, 102u8, 230u8,
							174u8,
						],
					)
				}
				/// The total validator era payout for the last `HISTORY_DEPTH` eras.
				///
				/// Eras that haven't finished yet or has been removed doesn't have reward.
				pub fn eras_validator_reward(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ErasValidatorReward",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							87u8, 80u8, 156u8, 123u8, 107u8, 77u8, 203u8, 37u8, 231u8, 84u8, 124u8,
							155u8, 227u8, 212u8, 212u8, 179u8, 84u8, 161u8, 223u8, 255u8, 254u8,
							107u8, 52u8, 89u8, 98u8, 169u8, 136u8, 241u8, 104u8, 3u8, 244u8, 161u8,
						],
					)
				}
				/// The total validator era payout for the last `HISTORY_DEPTH` eras.
				///
				/// Eras that haven't finished yet or has been removed doesn't have reward.
				pub fn eras_validator_reward_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ErasValidatorReward",
						Vec::new(),
						[
							87u8, 80u8, 156u8, 123u8, 107u8, 77u8, 203u8, 37u8, 231u8, 84u8, 124u8,
							155u8, 227u8, 212u8, 212u8, 179u8, 84u8, 161u8, 223u8, 255u8, 254u8,
							107u8, 52u8, 89u8, 98u8, 169u8, 136u8, 241u8, 104u8, 3u8, 244u8, 161u8,
						],
					)
				}
				/// Rewards for the last `HISTORY_DEPTH` eras.
				/// If reward hasn't been set or has been removed then 0 reward is returned.
				pub fn eras_reward_points(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::EraRewardPoints<::subxt::utils::AccountId32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ErasRewardPoints",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							194u8, 29u8, 20u8, 83u8, 200u8, 47u8, 158u8, 102u8, 88u8, 65u8, 24u8,
							255u8, 120u8, 178u8, 23u8, 232u8, 15u8, 64u8, 206u8, 0u8, 170u8, 40u8,
							18u8, 149u8, 45u8, 90u8, 179u8, 127u8, 52u8, 59u8, 37u8, 192u8,
						],
					)
				}
				/// Rewards for the last `HISTORY_DEPTH` eras.
				/// If reward hasn't been set or has been removed then 0 reward is returned.
				pub fn eras_reward_points_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::EraRewardPoints<::subxt::utils::AccountId32>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ErasRewardPoints",
						Vec::new(),
						[
							194u8, 29u8, 20u8, 83u8, 200u8, 47u8, 158u8, 102u8, 88u8, 65u8, 24u8,
							255u8, 120u8, 178u8, 23u8, 232u8, 15u8, 64u8, 206u8, 0u8, 170u8, 40u8,
							18u8, 149u8, 45u8, 90u8, 179u8, 127u8, 52u8, 59u8, 37u8, 192u8,
						],
					)
				}
				/// The total amount staked for the last `HISTORY_DEPTH` eras.
				/// If total hasn't been set or has been removed then 0 stake is returned.
				pub fn eras_total_stake(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ErasTotalStake",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							224u8, 240u8, 168u8, 69u8, 148u8, 140u8, 249u8, 240u8, 4u8, 46u8, 77u8,
							11u8, 224u8, 65u8, 26u8, 239u8, 1u8, 110u8, 53u8, 11u8, 247u8, 235u8,
							142u8, 234u8, 22u8, 43u8, 24u8, 36u8, 37u8, 43u8, 170u8, 40u8,
						],
					)
				}
				/// The total amount staked for the last `HISTORY_DEPTH` eras.
				/// If total hasn't been set or has been removed then 0 stake is returned.
				pub fn eras_total_stake_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ErasTotalStake",
						Vec::new(),
						[
							224u8, 240u8, 168u8, 69u8, 148u8, 140u8, 249u8, 240u8, 4u8, 46u8, 77u8,
							11u8, 224u8, 65u8, 26u8, 239u8, 1u8, 110u8, 53u8, 11u8, 247u8, 235u8,
							142u8, 234u8, 22u8, 43u8, 24u8, 36u8, 37u8, 43u8, 170u8, 40u8,
						],
					)
				}
				/// Mode of era forcing.
				pub fn force_era(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::Forcing,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ForceEra",
						vec![],
						[
							221u8, 41u8, 71u8, 21u8, 28u8, 193u8, 65u8, 97u8, 103u8, 37u8, 145u8,
							146u8, 183u8, 194u8, 57u8, 131u8, 214u8, 136u8, 68u8, 156u8, 140u8,
							194u8, 69u8, 151u8, 115u8, 177u8, 92u8, 147u8, 29u8, 40u8, 41u8, 31u8,
						],
					)
				}
				/// The percentage of the slash that is distributed to reporters.
				///
				/// The rest of the slashed value is handled by the `Slash`.
				pub fn slash_reward_fraction(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::sp_arithmetic::per_things::Perbill,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"SlashRewardFraction",
						vec![],
						[
							167u8, 79u8, 143u8, 202u8, 199u8, 100u8, 129u8, 162u8, 23u8, 165u8,
							106u8, 170u8, 244u8, 86u8, 144u8, 242u8, 65u8, 207u8, 115u8, 224u8,
							231u8, 155u8, 55u8, 139u8, 101u8, 129u8, 242u8, 196u8, 130u8, 50u8,
							3u8, 117u8,
						],
					)
				}
				/// The amount of currency given to reporters of a slash event which was
				/// canceled by extraordinary circumstances (e.g. governance).
				pub fn canceled_slash_payout(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"CanceledSlashPayout",
						vec![],
						[
							126u8, 218u8, 66u8, 92u8, 82u8, 124u8, 145u8, 161u8, 40u8, 176u8, 14u8,
							211u8, 178u8, 216u8, 8u8, 156u8, 83u8, 14u8, 91u8, 15u8, 200u8, 170u8,
							3u8, 127u8, 141u8, 139u8, 151u8, 98u8, 74u8, 96u8, 238u8, 29u8,
						],
					)
				}
				/// All unapplied slashes that are queued for later.
				pub fn unapplied_slashes(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<
						runtime_types::pallet_staking::UnappliedSlash<
							::subxt::utils::AccountId32,
							::core::primitive::u128,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"UnappliedSlashes",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							130u8, 4u8, 163u8, 163u8, 28u8, 85u8, 34u8, 156u8, 47u8, 125u8, 57u8,
							0u8, 133u8, 176u8, 130u8, 2u8, 175u8, 180u8, 167u8, 203u8, 230u8, 82u8,
							198u8, 183u8, 55u8, 82u8, 221u8, 248u8, 100u8, 173u8, 206u8, 151u8,
						],
					)
				}
				/// All unapplied slashes that are queued for later.
				pub fn unapplied_slashes_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<
						runtime_types::pallet_staking::UnappliedSlash<
							::subxt::utils::AccountId32,
							::core::primitive::u128,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"UnappliedSlashes",
						Vec::new(),
						[
							130u8, 4u8, 163u8, 163u8, 28u8, 85u8, 34u8, 156u8, 47u8, 125u8, 57u8,
							0u8, 133u8, 176u8, 130u8, 2u8, 175u8, 180u8, 167u8, 203u8, 230u8, 82u8,
							198u8, 183u8, 55u8, 82u8, 221u8, 248u8, 100u8, 173u8, 206u8, 151u8,
						],
					)
				}
				/// A mapping from still-bonded eras to the first session index of that era.
				///
				/// Must contains information for eras for the range:
				/// `[active_era - bounding_duration; active_era]`
				pub fn bonded_eras(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"BondedEras",
						vec![],
						[
							243u8, 162u8, 236u8, 198u8, 122u8, 182u8, 37u8, 55u8, 171u8, 156u8,
							235u8, 223u8, 226u8, 129u8, 89u8, 206u8, 2u8, 155u8, 222u8, 154u8,
							116u8, 124u8, 4u8, 119u8, 155u8, 94u8, 248u8, 30u8, 171u8, 51u8, 78u8,
							106u8,
						],
					)
				}
				/// All slashing events on validators, mapped by era to the highest slash proportion
				/// and slash value of the era.
				pub fn validator_slash_in_era(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(runtime_types::sp_arithmetic::per_things::Perbill, ::core::primitive::u128),
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ValidatorSlashInEra",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							237u8, 80u8, 3u8, 237u8, 9u8, 40u8, 212u8, 15u8, 251u8, 196u8, 85u8,
							29u8, 27u8, 151u8, 98u8, 122u8, 189u8, 147u8, 205u8, 40u8, 202u8,
							194u8, 158u8, 96u8, 138u8, 16u8, 116u8, 71u8, 140u8, 163u8, 121u8,
							197u8,
						],
					)
				}
				/// All slashing events on validators, mapped by era to the highest slash proportion
				/// and slash value of the era.
				pub fn validator_slash_in_era_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(runtime_types::sp_arithmetic::per_things::Perbill, ::core::primitive::u128),
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ValidatorSlashInEra",
						Vec::new(),
						[
							237u8, 80u8, 3u8, 237u8, 9u8, 40u8, 212u8, 15u8, 251u8, 196u8, 85u8,
							29u8, 27u8, 151u8, 98u8, 122u8, 189u8, 147u8, 205u8, 40u8, 202u8,
							194u8, 158u8, 96u8, 138u8, 16u8, 116u8, 71u8, 140u8, 163u8, 121u8,
							197u8,
						],
					)
				}
				/// All slashing events on nominators, mapped by era to the highest slash value of
				/// the era.
				pub fn nominator_slash_in_era(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"NominatorSlashInEra",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							249u8, 85u8, 170u8, 41u8, 179u8, 194u8, 180u8, 12u8, 53u8, 101u8, 80u8,
							96u8, 166u8, 71u8, 239u8, 23u8, 153u8, 19u8, 152u8, 38u8, 138u8, 136u8,
							221u8, 200u8, 18u8, 165u8, 26u8, 228u8, 195u8, 199u8, 62u8, 4u8,
						],
					)
				}
				/// All slashing events on nominators, mapped by era to the highest slash value of
				/// the era.
				pub fn nominator_slash_in_era_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"NominatorSlashInEra",
						Vec::new(),
						[
							249u8, 85u8, 170u8, 41u8, 179u8, 194u8, 180u8, 12u8, 53u8, 101u8, 80u8,
							96u8, 166u8, 71u8, 239u8, 23u8, 153u8, 19u8, 152u8, 38u8, 138u8, 136u8,
							221u8, 200u8, 18u8, 165u8, 26u8, 228u8, 195u8, 199u8, 62u8, 4u8,
						],
					)
				}
				/// Slashing spans for stash accounts.
				pub fn slashing_spans(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::slashing::SlashingSpans,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"SlashingSpans",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							106u8, 115u8, 118u8, 52u8, 89u8, 77u8, 246u8, 5u8, 255u8, 204u8, 44u8,
							5u8, 66u8, 36u8, 227u8, 252u8, 86u8, 159u8, 186u8, 152u8, 196u8, 21u8,
							74u8, 201u8, 133u8, 93u8, 142u8, 191u8, 20u8, 27u8, 218u8, 157u8,
						],
					)
				}
				/// Slashing spans for stash accounts.
				pub fn slashing_spans_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::slashing::SlashingSpans,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"SlashingSpans",
						Vec::new(),
						[
							106u8, 115u8, 118u8, 52u8, 89u8, 77u8, 246u8, 5u8, 255u8, 204u8, 44u8,
							5u8, 66u8, 36u8, 227u8, 252u8, 86u8, 159u8, 186u8, 152u8, 196u8, 21u8,
							74u8, 201u8, 133u8, 93u8, 142u8, 191u8, 20u8, 27u8, 218u8, 157u8,
						],
					)
				}
				/// Records information about the maximum slash of a stash within a slashing span,
				/// as well as how much reward has been paid out.
				pub fn span_slash(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::slashing::SpanRecord<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"SpanSlash",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							160u8, 63u8, 115u8, 190u8, 233u8, 148u8, 75u8, 3u8, 11u8, 59u8, 184u8,
							220u8, 205u8, 64u8, 28u8, 190u8, 116u8, 210u8, 225u8, 230u8, 224u8,
							163u8, 103u8, 157u8, 100u8, 29u8, 86u8, 167u8, 84u8, 217u8, 109u8,
							200u8,
						],
					)
				}
				/// Records information about the maximum slash of a stash within a slashing span,
				/// as well as how much reward has been paid out.
				pub fn span_slash_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_staking::slashing::SpanRecord<::core::primitive::u128>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"SpanSlash",
						Vec::new(),
						[
							160u8, 63u8, 115u8, 190u8, 233u8, 148u8, 75u8, 3u8, 11u8, 59u8, 184u8,
							220u8, 205u8, 64u8, 28u8, 190u8, 116u8, 210u8, 225u8, 230u8, 224u8,
							163u8, 103u8, 157u8, 100u8, 29u8, 86u8, 167u8, 84u8, 217u8, 109u8,
							200u8,
						],
					)
				}
				/// The last planned session scheduled by the session pallet.
				///
				/// This is basically in sync with the call to
				/// [`pallet_session::SessionManager::new_session`].
				pub fn current_planned_session(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"CurrentPlannedSession",
						vec![],
						[
							38u8, 22u8, 56u8, 250u8, 17u8, 154u8, 99u8, 37u8, 155u8, 253u8, 100u8,
							117u8, 5u8, 239u8, 31u8, 190u8, 53u8, 241u8, 11u8, 185u8, 163u8, 227u8,
							10u8, 77u8, 210u8, 64u8, 156u8, 218u8, 105u8, 16u8, 1u8, 57u8,
						],
					)
				}
				/// Indices of validators that have offended in the active era and whether they are
				/// currently disabled.
				///
				/// This value should be a superset of disabled validators since not all offences
				/// lead to the validator being disabled (if there was no slash). This is needed to
				/// track the percentage of validators that have offended in the current era,
				/// ensuring a new era is forced if `OffendingValidatorsThreshold` is reached. The
				/// vec is always kept sorted so that we can find whether a given validator has
				/// previously offended using binary search. It gets cleared when the era ends.
				pub fn offending_validators(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<(::core::primitive::u32, ::core::primitive::bool)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"OffendingValidators",
						vec![],
						[
							94u8, 254u8, 0u8, 50u8, 76u8, 232u8, 51u8, 153u8, 118u8, 14u8, 70u8,
							101u8, 112u8, 215u8, 173u8, 82u8, 182u8, 104u8, 167u8, 103u8, 187u8,
							168u8, 86u8, 16u8, 51u8, 235u8, 51u8, 119u8, 38u8, 154u8, 42u8, 113u8,
						],
					)
				}
				/// The threshold for when users can start calling `chill_other` for other
				/// validators / nominators. The threshold is compared to the actual number of
				/// validators / nominators (`CountFor*`) in the system compared to the configured
				/// max (`Max*Count`).
				pub fn chill_threshold(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::sp_arithmetic::per_things::Percent,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Staking",
						"ChillThreshold",
						vec![],
						[
							174u8, 165u8, 249u8, 105u8, 24u8, 151u8, 115u8, 166u8, 199u8, 251u8,
							28u8, 5u8, 50u8, 95u8, 144u8, 110u8, 220u8, 76u8, 14u8, 23u8, 179u8,
							41u8, 11u8, 248u8, 28u8, 154u8, 159u8, 255u8, 156u8, 109u8, 98u8, 92u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// Maximum number of nominations per nominator.
				pub fn max_nominations(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Staking",
						"MaxNominations",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Number of eras to keep in history.
				///
				/// Following information is kept for eras in `[current_era -
				/// HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,
				/// `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,
				/// `ErasTotalStake`, `ErasStartSessionIndex`,
				/// `StakingLedger.claimed_rewards`.
				///
				/// Must be more than the number of eras delayed by session.
				/// I.e. active era must always be in history. I.e. `active_era >
				/// current_era - history_depth` must be guaranteed.
				///
				/// If migrating an existing pallet from storage value to config value,
				/// this should be set to same value or greater as in storage.
				///
				/// Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`
				/// item `StakingLedger.claimed_rewards`. Setting this value lower than
				/// the existing value can lead to inconsistencies in the
				/// `StakingLedger` and will need to be handled properly in a migration.
				/// The test `reducing_history_depth_abrupt` shows this effect.
				pub fn history_depth(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Staking",
						"HistoryDepth",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Number of sessions per era.
				pub fn sessions_per_era(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Staking",
						"SessionsPerEra",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Number of eras that staked funds must remain bonded for.
				pub fn bonding_duration(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Staking",
						"BondingDuration",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Number of eras that slashes are deferred by, after computation.
				///
				/// This should be less than the bonding duration. Set to 0 if slashes
				/// should be applied immediately, without opportunity for intervention.
				pub fn slash_defer_duration(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Staking",
						"SlashDeferDuration",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum number of nominators rewarded for each validator.
				///
				/// For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers
				/// can claim their reward. This used to limit the i/o cost for the nominator
				/// payout.
				pub fn max_nominator_rewarded_per_validator(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Staking",
						"MaxNominatorRewardedPerValidator",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum number of `unlocking` chunks a [`StakingLedger`] can
				/// have. Effectively determines how many unique eras a staker may be
				/// unbonding in.
				///
				/// Note: `MaxUnlockingChunks` is used as the upper bound for the
				/// `BoundedVec` item `StakingLedger.unlocking`. Setting this value
				/// lower than the existing value can lead to inconsistencies in the
				/// `StakingLedger` and will need to be handled properly in a runtime
				/// migration. The test `reducing_max_unlocking_chunks_abrupt` shows
				/// this effect.
				pub fn max_unlocking_chunks(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Staking",
						"MaxUnlockingChunks",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod session {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetKeys {
				pub keys: runtime_types::babe_runtime::SessionKeys,
				pub proof: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct PurgeKeys;
			pub struct TransactionApi;
			impl TransactionApi {
				///Sets the session key(s) of the function caller to `keys`.
				///Allows an account to set its session key prior to becoming a validator.
				///This doesn't take effect until the next session.
				///
				///The dispatch origin of this function must be signed.
				///
				///## Complexity
				/// - `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()`
				///   which is
				///  fixed.
				pub fn set_keys(
					&self,
					keys: runtime_types::babe_runtime::SessionKeys,
					proof: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::Payload<SetKeys> {
					::subxt::tx::Payload::new_static(
						"Session",
						"set_keys",
						SetKeys { keys, proof },
						[
							19u8, 210u8, 111u8, 216u8, 235u8, 1u8, 119u8, 211u8, 79u8, 9u8, 91u8,
							245u8, 109u8, 116u8, 95u8, 223u8, 233u8, 189u8, 185u8, 243u8, 46u8,
							178u8, 10u8, 4u8, 231u8, 159u8, 217u8, 59u8, 45u8, 167u8, 207u8, 137u8,
						],
					)
				}
				///Removes any session key(s) of the function caller.
				///
				///This doesn't take effect until the next session.
				///
				///The dispatch origin of this function must be Signed and the account must be
				/// either be convertible to a validator ID using the chain's typical addressing
				/// system (this usually means being a controller account) or directly convertible
				/// into a validator ID (which usually means being a stash account).
				///
				///## Complexity
				/// - `O(1)` in number of key types. Actual cost depends on the number of length of
				///  `T::Keys::key_ids()` which is fixed.
				pub fn purge_keys(&self) -> ::subxt::tx::Payload<PurgeKeys> {
					::subxt::tx::Payload::new_static(
						"Session",
						"purge_keys",
						PurgeKeys {},
						[
							200u8, 255u8, 4u8, 213u8, 188u8, 92u8, 99u8, 116u8, 163u8, 152u8, 29u8,
							35u8, 133u8, 119u8, 246u8, 44u8, 91u8, 31u8, 145u8, 23u8, 213u8, 64u8,
							71u8, 242u8, 207u8, 239u8, 231u8, 37u8, 61u8, 63u8, 190u8, 35u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_session::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///New session has happened. Note that the argument is the session index, not the
			///block number as the type might suggest.
			pub struct NewSession {
				pub session_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for NewSession {
				const PALLET: &'static str = "Session";
				const EVENT: &'static str = "NewSession";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The current set of validators.
				pub fn validators(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::subxt::utils::AccountId32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"Validators",
						vec![],
						[
							144u8, 235u8, 200u8, 43u8, 151u8, 57u8, 147u8, 172u8, 201u8, 202u8,
							242u8, 96u8, 57u8, 76u8, 124u8, 77u8, 42u8, 113u8, 218u8, 220u8, 230u8,
							32u8, 151u8, 152u8, 172u8, 106u8, 60u8, 227u8, 122u8, 118u8, 137u8,
							68u8,
						],
					)
				}
				/// Current index of the session.
				pub fn current_index(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"CurrentIndex",
						vec![],
						[
							148u8, 179u8, 159u8, 15u8, 197u8, 95u8, 214u8, 30u8, 209u8, 251u8,
							183u8, 231u8, 91u8, 25u8, 181u8, 191u8, 143u8, 252u8, 227u8, 80u8,
							159u8, 66u8, 194u8, 67u8, 113u8, 74u8, 111u8, 91u8, 218u8, 187u8,
							130u8, 40u8,
						],
					)
				}
				/// True if the underlying economic identities or weighting behind the validators
				/// has changed in the queued validator set.
				pub fn queued_changed(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::bool,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"QueuedChanged",
						vec![],
						[
							105u8, 140u8, 235u8, 218u8, 96u8, 100u8, 252u8, 10u8, 58u8, 221u8,
							244u8, 251u8, 67u8, 91u8, 80u8, 202u8, 152u8, 42u8, 50u8, 113u8, 200u8,
							247u8, 59u8, 213u8, 77u8, 195u8, 1u8, 150u8, 220u8, 18u8, 245u8, 46u8,
						],
					)
				}
				/// The queued keys for the next session. When the next session begins, these keys
				/// will be used to determine the validator's session keys.
				pub fn queued_keys(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<(
						::subxt::utils::AccountId32,
						runtime_types::babe_runtime::SessionKeys,
					)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"QueuedKeys",
						vec![],
						[
							57u8, 139u8, 66u8, 116u8, 133u8, 98u8, 66u8, 181u8, 96u8, 190u8, 69u8,
							124u8, 158u8, 124u8, 187u8, 164u8, 223u8, 89u8, 209u8, 84u8, 106u8,
							127u8, 85u8, 202u8, 130u8, 7u8, 250u8, 163u8, 99u8, 209u8, 225u8, 25u8,
						],
					)
				}
				/// Indices of disabled validators.
				///
				/// The vec is always kept sorted so that we can find whether a given validator is
				/// disabled using binary search. It gets cleared when `on_session_ending` returns
				/// a new set of identities.
				pub fn disabled_validators(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"DisabledValidators",
						vec![],
						[
							135u8, 22u8, 22u8, 97u8, 82u8, 217u8, 144u8, 141u8, 121u8, 240u8,
							189u8, 16u8, 176u8, 88u8, 177u8, 31u8, 20u8, 242u8, 73u8, 104u8, 11u8,
							110u8, 214u8, 34u8, 52u8, 217u8, 106u8, 33u8, 174u8, 174u8, 198u8,
							84u8,
						],
					)
				}
				/// The next session keys for a validator.
				pub fn next_keys(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::babe_runtime::SessionKeys,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"NextKeys",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							246u8, 66u8, 207u8, 19u8, 247u8, 26u8, 110u8, 116u8, 209u8, 77u8,
							141u8, 64u8, 128u8, 214u8, 71u8, 104u8, 56u8, 117u8, 10u8, 162u8,
							166u8, 137u8, 33u8, 98u8, 110u8, 31u8, 161u8, 116u8, 207u8, 46u8, 82u8,
							64u8,
						],
					)
				}
				/// The next session keys for a validator.
				pub fn next_keys_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::babe_runtime::SessionKeys,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"NextKeys",
						Vec::new(),
						[
							246u8, 66u8, 207u8, 19u8, 247u8, 26u8, 110u8, 116u8, 209u8, 77u8,
							141u8, 64u8, 128u8, 214u8, 71u8, 104u8, 56u8, 117u8, 10u8, 162u8,
							166u8, 137u8, 33u8, 98u8, 110u8, 31u8, 161u8, 116u8, 207u8, 46u8, 82u8,
							64u8,
						],
					)
				}
				/// The owner of a key. The key is the `KeyTypeId` + the encoded key.
				pub fn key_owner(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::sp_core::crypto::KeyTypeId>,
					_1: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"KeyOwner",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							4u8, 91u8, 25u8, 84u8, 250u8, 201u8, 174u8, 129u8, 201u8, 58u8, 197u8,
							199u8, 137u8, 240u8, 118u8, 33u8, 99u8, 2u8, 195u8, 57u8, 53u8, 172u8,
							0u8, 148u8, 203u8, 144u8, 149u8, 64u8, 135u8, 254u8, 242u8, 215u8,
						],
					)
				}
				/// The owner of a key. The key is the `KeyTypeId` + the encoded key.
				pub fn key_owner_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Session",
						"KeyOwner",
						Vec::new(),
						[
							4u8, 91u8, 25u8, 84u8, 250u8, 201u8, 174u8, 129u8, 201u8, 58u8, 197u8,
							199u8, 137u8, 240u8, 118u8, 33u8, 99u8, 2u8, 195u8, 57u8, 53u8, 172u8,
							0u8, 148u8, 203u8, 144u8, 149u8, 64u8, 135u8, 254u8, 242u8, 215u8,
						],
					)
				}
			}
		}
	}
	pub mod democracy {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Propose {
				pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
					runtime_types::babe_runtime::RuntimeCall,
				>,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Second {
				#[codec(compact)]
				pub proposal: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Vote {
				#[codec(compact)]
				pub ref_index: ::core::primitive::u32,
				pub vote:
					runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct EmergencyCancel {
				pub ref_index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ExternalPropose {
				pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
					runtime_types::babe_runtime::RuntimeCall,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ExternalProposeMajority {
				pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
					runtime_types::babe_runtime::RuntimeCall,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ExternalProposeDefault {
				pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
					runtime_types::babe_runtime::RuntimeCall,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct FastTrack {
				pub proposal_hash: ::subxt::utils::H256,
				pub voting_period: ::core::primitive::u32,
				pub delay: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct VetoExternal {
				pub proposal_hash: ::subxt::utils::H256,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CancelReferendum {
				#[codec(compact)]
				pub ref_index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Delegate {
				pub to: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub conviction: runtime_types::pallet_democracy::conviction::Conviction,
				pub balance: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Undelegate;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClearPublicProposals;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Unlock {
				pub target: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemoveVote {
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemoveOtherVote {
				pub target: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Blacklist {
				pub proposal_hash: ::subxt::utils::H256,
				pub maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CancelProposal {
				#[codec(compact)]
				pub prop_index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetMetadata {
				pub owner: runtime_types::pallet_democracy::types::MetadataOwner,
				pub maybe_hash: ::core::option::Option<::subxt::utils::H256>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Propose a sensitive action to be taken.
				///
				///The dispatch origin of this call must be _Signed_ and the sender must
				///have funds to cover the deposit.
				///
				/// - `proposal_hash`: The hash of the proposal preimage.
				/// - `value`: The amount of deposit (must be at least `MinimumDeposit`).
				///
				///Emits `Proposed`.
				pub fn propose(
					&self,
					proposal: runtime_types::frame_support::traits::preimages::Bounded<
						runtime_types::babe_runtime::RuntimeCall,
					>,
					value: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<Propose> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"propose",
						Propose { proposal, value },
						[
							123u8, 3u8, 204u8, 140u8, 194u8, 195u8, 214u8, 39u8, 167u8, 126u8,
							45u8, 4u8, 219u8, 17u8, 143u8, 185u8, 29u8, 224u8, 230u8, 68u8, 253u8,
							15u8, 170u8, 90u8, 232u8, 123u8, 46u8, 255u8, 168u8, 39u8, 204u8, 63u8,
						],
					)
				}
				///Signals agreement with a particular proposal.
				///
				///The dispatch origin of this call must be _Signed_ and the sender
				///must have funds to cover the deposit, equal to the original deposit.
				///
				/// - `proposal`: The index of the proposal to second.
				pub fn second(
					&self,
					proposal: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Second> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"second",
						Second { proposal },
						[
							59u8, 240u8, 183u8, 218u8, 61u8, 93u8, 184u8, 67u8, 10u8, 4u8, 138u8,
							196u8, 168u8, 49u8, 42u8, 69u8, 154u8, 42u8, 90u8, 112u8, 179u8, 69u8,
							51u8, 148u8, 159u8, 212u8, 221u8, 226u8, 132u8, 228u8, 51u8, 83u8,
						],
					)
				}
				///Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;
				///otherwise it is a vote to keep the status quo.
				///
				///The dispatch origin of this call must be _Signed_.
				///
				/// - `ref_index`: The index of the referendum to vote for.
				/// - `vote`: The vote configuration.
				pub fn vote(
					&self,
					ref_index: ::core::primitive::u32,
					vote: runtime_types::pallet_democracy::vote::AccountVote<
						::core::primitive::u128,
					>,
				) -> ::subxt::tx::Payload<Vote> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"vote",
						Vote { ref_index, vote },
						[
							138u8, 213u8, 229u8, 111u8, 1u8, 191u8, 73u8, 3u8, 145u8, 28u8, 44u8,
							88u8, 163u8, 188u8, 129u8, 188u8, 64u8, 15u8, 64u8, 103u8, 250u8, 97u8,
							234u8, 188u8, 29u8, 205u8, 51u8, 6u8, 116u8, 58u8, 156u8, 201u8,
						],
					)
				}
				///Schedule an emergency cancellation of a referendum. Cannot happen twice to the
				/// same referendum.
				///
				///The dispatch origin of this call must be `CancellationOrigin`.
				///
				///-`ref_index`: The index of the referendum to cancel.
				///
				///Weight: `O(1)`.
				pub fn emergency_cancel(
					&self,
					ref_index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<EmergencyCancel> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"emergency_cancel",
						EmergencyCancel { ref_index },
						[
							139u8, 213u8, 133u8, 75u8, 34u8, 206u8, 124u8, 245u8, 35u8, 237u8,
							132u8, 92u8, 49u8, 167u8, 117u8, 80u8, 188u8, 93u8, 198u8, 237u8,
							132u8, 77u8, 195u8, 65u8, 29u8, 37u8, 86u8, 74u8, 214u8, 119u8, 71u8,
							204u8,
						],
					)
				}
				///Schedule a referendum to be tabled once it is legal to schedule an external
				///referendum.
				///
				///The dispatch origin of this call must be `ExternalOrigin`.
				///
				/// - `proposal_hash`: The preimage hash of the proposal.
				pub fn external_propose(
					&self,
					proposal: runtime_types::frame_support::traits::preimages::Bounded<
						runtime_types::babe_runtime::RuntimeCall,
					>,
				) -> ::subxt::tx::Payload<ExternalPropose> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"external_propose",
						ExternalPropose { proposal },
						[
							164u8, 193u8, 14u8, 122u8, 105u8, 232u8, 20u8, 194u8, 99u8, 227u8,
							36u8, 105u8, 218u8, 146u8, 16u8, 208u8, 56u8, 62u8, 100u8, 65u8, 35u8,
							33u8, 51u8, 208u8, 17u8, 43u8, 223u8, 198u8, 202u8, 16u8, 56u8, 75u8,
						],
					)
				}
				///Schedule a majority-carries referendum to be tabled next once it is legal to
				/// schedule an external referendum.
				///
				///The dispatch of this call must be `ExternalMajorityOrigin`.
				///
				/// - `proposal_hash`: The preimage hash of the proposal.
				///
				///Unlike `external_propose`, blacklisting has no effect on this and it may replace
				/// a pre-scheduled `external_propose` call.
				///
				///Weight: `O(1)`
				pub fn external_propose_majority(
					&self,
					proposal: runtime_types::frame_support::traits::preimages::Bounded<
						runtime_types::babe_runtime::RuntimeCall,
					>,
				) -> ::subxt::tx::Payload<ExternalProposeMajority> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"external_propose_majority",
						ExternalProposeMajority { proposal },
						[
							129u8, 124u8, 147u8, 253u8, 69u8, 115u8, 230u8, 186u8, 155u8, 4u8,
							220u8, 103u8, 28u8, 132u8, 115u8, 153u8, 196u8, 88u8, 9u8, 130u8,
							129u8, 234u8, 75u8, 96u8, 202u8, 216u8, 145u8, 189u8, 231u8, 101u8,
							127u8, 11u8,
						],
					)
				}
				///Schedule a negative-turnout-bias referendum to be tabled next once it is legal
				/// to schedule an external referendum.
				///
				///The dispatch of this call must be `ExternalDefaultOrigin`.
				///
				/// - `proposal_hash`: The preimage hash of the proposal.
				///
				///Unlike `external_propose`, blacklisting has no effect on this and it may replace
				/// a pre-scheduled `external_propose` call.
				///
				///Weight: `O(1)`
				pub fn external_propose_default(
					&self,
					proposal: runtime_types::frame_support::traits::preimages::Bounded<
						runtime_types::babe_runtime::RuntimeCall,
					>,
				) -> ::subxt::tx::Payload<ExternalProposeDefault> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"external_propose_default",
						ExternalProposeDefault { proposal },
						[
							96u8, 15u8, 108u8, 208u8, 141u8, 247u8, 4u8, 73u8, 2u8, 30u8, 231u8,
							40u8, 184u8, 250u8, 42u8, 161u8, 248u8, 45u8, 217u8, 50u8, 53u8, 13u8,
							181u8, 214u8, 136u8, 51u8, 93u8, 95u8, 165u8, 3u8, 83u8, 190u8,
						],
					)
				}
				///Schedule the currently externally-proposed majority-carries referendum to be
				/// tabled immediately. If there is no externally-proposed referendum currently, or
				/// if there is one but it is not a majority-carries referendum then it fails.
				///
				///The dispatch of this call must be `FastTrackOrigin`.
				///
				/// - `proposal_hash`: The hash of the current external proposal.
				/// - `voting_period`: The period that is allowed for voting on this proposal.
				///   Increased to
				///	Must be always greater than zero.
				///	For `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.
				/// - `delay`: The number of block after voting has ended in approval and this
				///   should be
				///  enacted. This doesn't have a minimum amount.
				///
				///Emits `Started`.
				///
				///Weight: `O(1)`
				pub fn fast_track(
					&self,
					proposal_hash: ::subxt::utils::H256,
					voting_period: ::core::primitive::u32,
					delay: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<FastTrack> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"fast_track",
						FastTrack { proposal_hash, voting_period, delay },
						[
							125u8, 209u8, 107u8, 120u8, 93u8, 205u8, 129u8, 147u8, 254u8, 126u8,
							45u8, 126u8, 39u8, 0u8, 56u8, 14u8, 233u8, 49u8, 245u8, 220u8, 156u8,
							10u8, 252u8, 31u8, 102u8, 90u8, 163u8, 236u8, 178u8, 85u8, 13u8, 24u8,
						],
					)
				}
				///Veto and blacklist the external proposal hash.
				///
				///The dispatch origin of this call must be `VetoOrigin`.
				///
				/// - `proposal_hash`: The preimage hash of the proposal to veto and blacklist.
				///
				///Emits `Vetoed`.
				///
				///Weight: `O(V + log(V))` where V is number of `existing vetoers`
				pub fn veto_external(
					&self,
					proposal_hash: ::subxt::utils::H256,
				) -> ::subxt::tx::Payload<VetoExternal> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"veto_external",
						VetoExternal { proposal_hash },
						[
							209u8, 18u8, 18u8, 103u8, 186u8, 160u8, 214u8, 124u8, 150u8, 207u8,
							112u8, 90u8, 84u8, 197u8, 95u8, 157u8, 165u8, 65u8, 109u8, 101u8, 75u8,
							201u8, 41u8, 149u8, 75u8, 154u8, 37u8, 178u8, 239u8, 121u8, 124u8,
							23u8,
						],
					)
				}
				///Remove a referendum.
				///
				///The dispatch origin of this call must be _Root_.
				///
				/// - `ref_index`: The index of the referendum to cancel.
				///
				///# Weight: `O(1)`.
				pub fn cancel_referendum(
					&self,
					ref_index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<CancelReferendum> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"cancel_referendum",
						CancelReferendum { ref_index },
						[
							51u8, 25u8, 25u8, 251u8, 236u8, 115u8, 130u8, 230u8, 72u8, 186u8,
							119u8, 71u8, 165u8, 137u8, 55u8, 167u8, 187u8, 128u8, 55u8, 8u8, 212u8,
							139u8, 245u8, 232u8, 103u8, 136u8, 229u8, 113u8, 125u8, 36u8, 1u8,
							149u8,
						],
					)
				}
				///Delegate the voting power (with some given conviction) of the sending account.
				///
				///The balance delegated is locked for as long as it's delegated, and thereafter
				/// for the time appropriate for the conviction's lock period.
				///
				///The dispatch origin of this call must be _Signed_, and the signing account must
				/// either:
				///  - be delegating already; or
				///  - have no voting activity (if there is, then it will need to be
				///    removed/consolidated through `reap_vote` or `unvote`).
				///
				/// - `to`: The account whose voting the `target` account's voting power will
				///   follow.
				/// - `conviction`: The conviction that will be attached to the delegated votes.
				///   When the
				///  account is undelegated, the funds will be locked for the corresponding period.
				/// - `balance`: The amount of the account's balance to be used in delegating. This
				///   must not
				///  be more than the account's current balance.
				///
				///Emits `Delegated`.
				///
				///Weight: `O(R)` where R is the number of referendums the voter delegating to has
				///  voted on. Weight is charged as if maximum votes.
				pub fn delegate(
					&self,
					to: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					conviction: runtime_types::pallet_democracy::conviction::Conviction,
					balance: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<Delegate> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"delegate",
						Delegate { to, conviction, balance },
						[
							247u8, 226u8, 242u8, 221u8, 47u8, 161u8, 91u8, 223u8, 6u8, 79u8, 238u8,
							205u8, 41u8, 188u8, 140u8, 56u8, 181u8, 248u8, 102u8, 10u8, 127u8,
							166u8, 90u8, 187u8, 13u8, 124u8, 209u8, 117u8, 16u8, 209u8, 74u8, 29u8,
						],
					)
				}
				///Undelegate the voting power of the sending account.
				///
				///Tokens may be unlocked following once an amount of time consistent with the lock
				/// period of the conviction with which the delegation was issued.
				///
				///The dispatch origin of this call must be _Signed_ and the signing account must
				/// be currently delegating.
				///
				///Emits `Undelegated`.
				///
				///Weight: `O(R)` where R is the number of referendums the voter delegating to has
				///  voted on. Weight is charged as if maximum votes.
				pub fn undelegate(&self) -> ::subxt::tx::Payload<Undelegate> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"undelegate",
						Undelegate {},
						[
							165u8, 40u8, 183u8, 209u8, 57u8, 153u8, 111u8, 29u8, 114u8, 109u8,
							107u8, 235u8, 97u8, 61u8, 53u8, 155u8, 44u8, 245u8, 28u8, 220u8, 56u8,
							134u8, 43u8, 122u8, 248u8, 156u8, 191u8, 154u8, 4u8, 121u8, 152u8,
							153u8,
						],
					)
				}
				///Clears all public proposals.
				///
				///The dispatch origin of this call must be _Root_.
				///
				///Weight: `O(1)`.
				pub fn clear_public_proposals(&self) -> ::subxt::tx::Payload<ClearPublicProposals> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"clear_public_proposals",
						ClearPublicProposals {},
						[
							59u8, 126u8, 254u8, 223u8, 252u8, 225u8, 75u8, 185u8, 188u8, 181u8,
							42u8, 179u8, 211u8, 73u8, 12u8, 141u8, 243u8, 197u8, 46u8, 130u8,
							215u8, 196u8, 225u8, 88u8, 48u8, 199u8, 231u8, 249u8, 195u8, 53u8,
							184u8, 204u8,
						],
					)
				}
				///Unlock tokens that have an expired lock.
				///
				///The dispatch origin of this call must be _Signed_.
				///
				/// - `target`: The account to remove the lock on.
				///
				///Weight: `O(R)` with R number of vote of target.
				pub fn unlock(
					&self,
					target: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<Unlock> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"unlock",
						Unlock { target },
						[
							227u8, 6u8, 154u8, 150u8, 253u8, 167u8, 142u8, 6u8, 147u8, 24u8, 124u8,
							51u8, 101u8, 185u8, 184u8, 170u8, 6u8, 223u8, 29u8, 167u8, 73u8, 31u8,
							179u8, 60u8, 156u8, 244u8, 192u8, 233u8, 79u8, 99u8, 248u8, 126u8,
						],
					)
				}
				///Remove a vote for a referendum.
				///
				///If:
				/// - the referendum was cancelled, or
				/// - the referendum is ongoing, or
				/// - the referendum has ended such that
				///  - the vote of the account was in opposition to the result; or
				///  - there was no conviction to the account's vote; or
				///  - the account made a split vote
				///...then the vote is removed cleanly and a following call to `unlock` may result
				/// in more funds being available.
				///
				///If, however, the referendum has ended and:
				/// - it finished corresponding to the vote of the account, and
				/// - the account made a standard vote with conviction, and
				/// - the lock period of the conviction is not over
				///...then the lock will be aggregated into the overall account's lock, which may
				/// involve *overlocking* (where the two locks are combined into a single lock that
				/// is the maximum of both the amount locked and the time is it locked for).
				///
				///The dispatch origin of this call must be _Signed_, and the signer must have a
				/// vote registered for referendum `index`.
				///
				/// - `index`: The index of referendum of the vote to be removed.
				///
				///Weight: `O(R + log R)` where R is the number of referenda that `target` has
				/// voted on.  Weight is calculated for the maximum number of vote.
				pub fn remove_vote(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<RemoveVote> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"remove_vote",
						RemoveVote { index },
						[
							148u8, 120u8, 14u8, 172u8, 81u8, 152u8, 159u8, 178u8, 106u8, 244u8,
							36u8, 98u8, 120u8, 189u8, 213u8, 93u8, 119u8, 156u8, 112u8, 34u8,
							241u8, 72u8, 206u8, 113u8, 212u8, 161u8, 164u8, 126u8, 122u8, 82u8,
							160u8, 74u8,
						],
					)
				}
				///Remove a vote for a referendum.
				///
				///If the `target` is equal to the signer, then this function is exactly equivalent
				/// to `remove_vote`. If not equal to the signer, then the vote must have expired,
				///either because the referendum was cancelled, because the voter lost the
				/// referendum or because the conviction period is over.
				///
				///The dispatch origin of this call must be _Signed_.
				///
				/// - `target`: The account of the vote to be removed; this account must have voted
				///   for
				///  referendum `index`.
				/// - `index`: The index of referendum of the vote to be removed.
				///
				///Weight: `O(R + log R)` where R is the number of referenda that `target` has
				/// voted on.  Weight is calculated for the maximum number of vote.
				pub fn remove_other_vote(
					&self,
					target: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<RemoveOtherVote> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"remove_other_vote",
						RemoveOtherVote { target, index },
						[
							251u8, 245u8, 79u8, 229u8, 3u8, 107u8, 66u8, 202u8, 148u8, 31u8, 6u8,
							236u8, 156u8, 202u8, 197u8, 107u8, 100u8, 60u8, 255u8, 213u8, 222u8,
							209u8, 249u8, 61u8, 209u8, 215u8, 82u8, 73u8, 25u8, 73u8, 161u8, 24u8,
						],
					)
				}
				///Permanently place a proposal into the blacklist. This prevents it from ever
				/// being proposed again.
				///
				///If called on a queued public or external proposal, then this will result in it
				/// being removed. If the `ref_index` supplied is an active referendum with the
				/// proposal hash, then it will be cancelled.
				///
				///The dispatch origin of this call must be `BlacklistOrigin`.
				///
				/// - `proposal_hash`: The proposal hash to blacklist permanently.
				/// - `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will
				///   be
				///cancelled.
				///
				///Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a
				///  reasonable value).
				pub fn blacklist(
					&self,
					proposal_hash: ::subxt::utils::H256,
					maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
				) -> ::subxt::tx::Payload<Blacklist> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"blacklist",
						Blacklist { proposal_hash, maybe_ref_index },
						[
							48u8, 144u8, 81u8, 164u8, 54u8, 111u8, 197u8, 134u8, 6u8, 98u8, 121u8,
							179u8, 254u8, 191u8, 204u8, 212u8, 84u8, 255u8, 86u8, 110u8, 225u8,
							130u8, 26u8, 65u8, 133u8, 56u8, 231u8, 15u8, 245u8, 137u8, 146u8,
							242u8,
						],
					)
				}
				///Remove a proposal.
				///
				///The dispatch origin of this call must be `CancelProposalOrigin`.
				///
				/// - `prop_index`: The index of the proposal to cancel.
				///
				///Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`
				pub fn cancel_proposal(
					&self,
					prop_index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<CancelProposal> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"cancel_proposal",
						CancelProposal { prop_index },
						[
							179u8, 3u8, 198u8, 244u8, 241u8, 124u8, 205u8, 58u8, 100u8, 80u8,
							177u8, 254u8, 98u8, 220u8, 189u8, 63u8, 229u8, 60u8, 157u8, 83u8,
							142u8, 6u8, 236u8, 183u8, 193u8, 235u8, 253u8, 126u8, 153u8, 185u8,
							74u8, 117u8,
						],
					)
				}
				///Set or clear a metadata of a proposal or a referendum.
				///
				///Parameters:
				/// - `origin`: Must correspond to the `MetadataOwner`.
				///    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`
				///      threshold.
				///    - `ExternalDefaultOrigin` for an external proposal with the
				///      `SuperMajorityAgainst` threshold.
				///    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`
				///      threshold.
				///    - `Signed` by a creator for a public proposal.
				///    - `Signed` to clear a metadata for a finished referendum.
				///    - `Root` to set a metadata for an ongoing referendum.
				/// - `owner`: an identifier of a metadata owner.
				/// - `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a
				///   metadata.
				pub fn set_metadata(
					&self,
					owner: runtime_types::pallet_democracy::types::MetadataOwner,
					maybe_hash: ::core::option::Option<::subxt::utils::H256>,
				) -> ::subxt::tx::Payload<SetMetadata> {
					::subxt::tx::Payload::new_static(
						"Democracy",
						"set_metadata",
						SetMetadata { owner, maybe_hash },
						[
							182u8, 2u8, 168u8, 244u8, 247u8, 35u8, 65u8, 9u8, 39u8, 164u8, 30u8,
							141u8, 69u8, 137u8, 75u8, 156u8, 158u8, 107u8, 67u8, 28u8, 145u8, 65u8,
							175u8, 30u8, 254u8, 231u8, 4u8, 77u8, 207u8, 166u8, 157u8, 73u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_democracy::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A motion has been proposed by a public account.
			pub struct Proposed {
				pub proposal_index: ::core::primitive::u32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Proposed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A public proposal has been tabled for referendum vote.
			pub struct Tabled {
				pub proposal_index: ::core::primitive::u32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Tabled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Tabled";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An external proposal has been tabled.
			pub struct ExternalTabled;
			impl ::subxt::events::StaticEvent for ExternalTabled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "ExternalTabled";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A referendum has begun.
			pub struct Started {
				pub ref_index: ::core::primitive::u32,
				pub threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
			}
			impl ::subxt::events::StaticEvent for Started {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Started";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A proposal has been approved by referendum.
			pub struct Passed {
				pub ref_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Passed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Passed";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A proposal has been rejected by referendum.
			pub struct NotPassed {
				pub ref_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for NotPassed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "NotPassed";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A referendum has been cancelled.
			pub struct Cancelled {
				pub ref_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Cancelled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Cancelled";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An account has delegated their vote to another account.
			pub struct Delegated {
				pub who: ::subxt::utils::AccountId32,
				pub target: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Delegated {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Delegated";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An account has cancelled a previous delegation operation.
			pub struct Undelegated {
				pub account: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Undelegated {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Undelegated";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An external proposal has been vetoed.
			pub struct Vetoed {
				pub who: ::subxt::utils::AccountId32,
				pub proposal_hash: ::subxt::utils::H256,
				pub until: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Vetoed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Vetoed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A proposal_hash has been blacklisted permanently.
			pub struct Blacklisted {
				pub proposal_hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for Blacklisted {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Blacklisted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An account has voted in a referendum
			pub struct Voted {
				pub voter: ::subxt::utils::AccountId32,
				pub ref_index: ::core::primitive::u32,
				pub vote:
					runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>,
			}
			impl ::subxt::events::StaticEvent for Voted {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Voted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An account has secconded a proposal
			pub struct Seconded {
				pub seconder: ::subxt::utils::AccountId32,
				pub prop_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Seconded {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Seconded";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A proposal got canceled.
			pub struct ProposalCanceled {
				pub prop_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for ProposalCanceled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "ProposalCanceled";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Metadata for a proposal or a referendum has been set.
			pub struct MetadataSet {
				pub owner: runtime_types::pallet_democracy::types::MetadataOwner,
				pub hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for MetadataSet {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "MetadataSet";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Metadata for a proposal or a referendum has been cleared.
			pub struct MetadataCleared {
				pub owner: runtime_types::pallet_democracy::types::MetadataOwner,
				pub hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for MetadataCleared {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "MetadataCleared";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Metadata has been transferred to new owner.
			pub struct MetadataTransferred {
				pub prev_owner: runtime_types::pallet_democracy::types::MetadataOwner,
				pub owner: runtime_types::pallet_democracy::types::MetadataOwner,
				pub hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for MetadataTransferred {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "MetadataTransferred";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The number of (public) proposals that have been made so far.
				pub fn public_prop_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"PublicPropCount",
						vec![],
						[
							91u8, 14u8, 171u8, 94u8, 37u8, 157u8, 46u8, 157u8, 254u8, 13u8, 68u8,
							144u8, 23u8, 146u8, 128u8, 159u8, 9u8, 174u8, 74u8, 174u8, 218u8,
							197u8, 23u8, 235u8, 152u8, 226u8, 216u8, 4u8, 120u8, 121u8, 27u8,
							138u8,
						],
					)
				}
				/// The public proposals. Unsorted. The second item is the proposal.
				pub fn public_props(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						::core::primitive::u32,
						runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::babe_runtime::RuntimeCall,
						>,
						::subxt::utils::AccountId32,
					)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"PublicProps",
						vec![],
						[
							63u8, 172u8, 211u8, 85u8, 27u8, 14u8, 86u8, 49u8, 133u8, 5u8, 132u8,
							189u8, 138u8, 137u8, 219u8, 37u8, 209u8, 49u8, 172u8, 86u8, 240u8,
							235u8, 42u8, 201u8, 203u8, 12u8, 122u8, 225u8, 0u8, 109u8, 205u8,
							103u8,
						],
					)
				}
				/// Those who have locked a deposit.
				///
				/// TWOX-NOTE: Safe, as increasing integer keys are safe.
				pub fn deposit_of(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::utils::AccountId32,
						>,
						::core::primitive::u128,
					),
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"DepositOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							9u8, 219u8, 11u8, 58u8, 17u8, 194u8, 248u8, 154u8, 135u8, 119u8, 123u8,
							235u8, 252u8, 176u8, 190u8, 162u8, 236u8, 45u8, 237u8, 125u8, 98u8,
							176u8, 184u8, 160u8, 8u8, 181u8, 213u8, 65u8, 14u8, 84u8, 200u8, 64u8,
						],
					)
				}
				/// Those who have locked a deposit.
				///
				/// TWOX-NOTE: Safe, as increasing integer keys are safe.
				pub fn deposit_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::utils::AccountId32,
						>,
						::core::primitive::u128,
					),
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"DepositOf",
						Vec::new(),
						[
							9u8, 219u8, 11u8, 58u8, 17u8, 194u8, 248u8, 154u8, 135u8, 119u8, 123u8,
							235u8, 252u8, 176u8, 190u8, 162u8, 236u8, 45u8, 237u8, 125u8, 98u8,
							176u8, 184u8, 160u8, 8u8, 181u8, 213u8, 65u8, 14u8, 84u8, 200u8, 64u8,
						],
					)
				}
				/// The next free referendum index, aka the number of referenda started so far.
				pub fn referendum_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"ReferendumCount",
						vec![],
						[
							153u8, 210u8, 106u8, 244u8, 156u8, 70u8, 124u8, 251u8, 123u8, 75u8,
							7u8, 189u8, 199u8, 145u8, 95u8, 119u8, 137u8, 11u8, 240u8, 160u8,
							151u8, 248u8, 229u8, 231u8, 89u8, 222u8, 18u8, 237u8, 144u8, 78u8,
							99u8, 58u8,
						],
					)
				}
				/// The lowest referendum index representing an unbaked referendum. Equal to
				/// `ReferendumCount` if there isn't a unbaked referendum.
				pub fn lowest_unbaked(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"LowestUnbaked",
						vec![],
						[
							4u8, 51u8, 108u8, 11u8, 48u8, 165u8, 19u8, 251u8, 182u8, 76u8, 163u8,
							73u8, 227u8, 2u8, 212u8, 74u8, 128u8, 27u8, 165u8, 164u8, 111u8, 22u8,
							209u8, 190u8, 103u8, 7u8, 116u8, 16u8, 160u8, 144u8, 123u8, 64u8,
						],
					)
				}
				/// Information concerning any given referendum.
				///
				/// TWOX-NOTE: SAFE as indexes are not under an attacker’s control.
				pub fn referendum_info_of(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_democracy::types::ReferendumInfo<
						::core::primitive::u32,
						runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::babe_runtime::RuntimeCall,
						>,
						::core::primitive::u128,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"ReferendumInfoOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							167u8, 58u8, 230u8, 197u8, 185u8, 56u8, 181u8, 32u8, 81u8, 150u8, 29u8,
							138u8, 142u8, 38u8, 255u8, 216u8, 139u8, 93u8, 56u8, 148u8, 196u8,
							169u8, 168u8, 144u8, 193u8, 200u8, 187u8, 5u8, 141u8, 201u8, 254u8,
							248u8,
						],
					)
				}
				/// Information concerning any given referendum.
				///
				/// TWOX-NOTE: SAFE as indexes are not under an attacker’s control.
				pub fn referendum_info_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_democracy::types::ReferendumInfo<
						::core::primitive::u32,
						runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::babe_runtime::RuntimeCall,
						>,
						::core::primitive::u128,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"ReferendumInfoOf",
						Vec::new(),
						[
							167u8, 58u8, 230u8, 197u8, 185u8, 56u8, 181u8, 32u8, 81u8, 150u8, 29u8,
							138u8, 142u8, 38u8, 255u8, 216u8, 139u8, 93u8, 56u8, 148u8, 196u8,
							169u8, 168u8, 144u8, 193u8, 200u8, 187u8, 5u8, 141u8, 201u8, 254u8,
							248u8,
						],
					)
				}
				/// All votes for a particular voter. We store the balance for the number of votes
				/// that we have recorded. The second item is the total amount of delegations, that
				/// will be added.
				///
				/// TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway.
				pub fn voting_of(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_democracy::vote::Voting<
						::core::primitive::u128,
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"VotingOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							125u8, 121u8, 167u8, 170u8, 18u8, 194u8, 183u8, 38u8, 176u8, 48u8,
							30u8, 88u8, 233u8, 196u8, 33u8, 119u8, 160u8, 201u8, 29u8, 183u8, 88u8,
							67u8, 219u8, 137u8, 6u8, 195u8, 11u8, 63u8, 162u8, 181u8, 82u8, 243u8,
						],
					)
				}
				/// All votes for a particular voter. We store the balance for the number of votes
				/// that we have recorded. The second item is the total amount of delegations, that
				/// will be added.
				///
				/// TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway.
				pub fn voting_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_democracy::vote::Voting<
						::core::primitive::u128,
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"VotingOf",
						Vec::new(),
						[
							125u8, 121u8, 167u8, 170u8, 18u8, 194u8, 183u8, 38u8, 176u8, 48u8,
							30u8, 88u8, 233u8, 196u8, 33u8, 119u8, 160u8, 201u8, 29u8, 183u8, 88u8,
							67u8, 219u8, 137u8, 6u8, 195u8, 11u8, 63u8, 162u8, 181u8, 82u8, 243u8,
						],
					)
				}
				/// True if the last referendum tabled was submitted externally. False if it was a
				/// public proposal.
				pub fn last_tabled_was_external(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::bool,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"LastTabledWasExternal",
						vec![],
						[
							3u8, 67u8, 106u8, 1u8, 89u8, 204u8, 4u8, 145u8, 121u8, 44u8, 34u8,
							76u8, 18u8, 206u8, 65u8, 214u8, 222u8, 82u8, 31u8, 223u8, 144u8, 169u8,
							17u8, 6u8, 138u8, 36u8, 113u8, 155u8, 241u8, 106u8, 189u8, 218u8,
						],
					)
				}
				/// The referendum to be tabled whenever it would be valid to table an external
				/// proposal. This happens when a referendum needs to be tabled and one of two
				/// conditions are met:
				/// - `LastTabledWasExternal` is `false`; or
				/// - `PublicProps` is empty.
				pub fn next_external(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::babe_runtime::RuntimeCall,
						>,
						runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
					),
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"NextExternal",
						vec![],
						[
							213u8, 36u8, 235u8, 75u8, 153u8, 33u8, 140u8, 121u8, 191u8, 197u8,
							17u8, 57u8, 234u8, 67u8, 81u8, 55u8, 123u8, 179u8, 207u8, 124u8, 238u8,
							147u8, 243u8, 126u8, 200u8, 2u8, 16u8, 143u8, 165u8, 143u8, 159u8,
							93u8,
						],
					)
				}
				/// A record of who vetoed what. Maps proposal hash to a possible existent block
				/// number (until when it may not be resubmitted) and who vetoed it.
				pub fn blacklist(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						::core::primitive::u32,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::utils::AccountId32,
						>,
					),
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"Blacklist",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							8u8, 227u8, 185u8, 179u8, 192u8, 92u8, 171u8, 125u8, 237u8, 224u8,
							109u8, 207u8, 44u8, 181u8, 78u8, 17u8, 254u8, 183u8, 199u8, 241u8,
							49u8, 90u8, 101u8, 168u8, 46u8, 89u8, 253u8, 155u8, 38u8, 183u8, 112u8,
							35u8,
						],
					)
				}
				/// A record of who vetoed what. Maps proposal hash to a possible existent block
				/// number (until when it may not be resubmitted) and who vetoed it.
				pub fn blacklist_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						::core::primitive::u32,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::utils::AccountId32,
						>,
					),
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"Blacklist",
						Vec::new(),
						[
							8u8, 227u8, 185u8, 179u8, 192u8, 92u8, 171u8, 125u8, 237u8, 224u8,
							109u8, 207u8, 44u8, 181u8, 78u8, 17u8, 254u8, 183u8, 199u8, 241u8,
							49u8, 90u8, 101u8, 168u8, 46u8, 89u8, 253u8, 155u8, 38u8, 183u8, 112u8,
							35u8,
						],
					)
				}
				/// Record of all proposals that have been subject to emergency cancellation.
				pub fn cancellations(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::bool,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"Cancellations",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							154u8, 36u8, 172u8, 46u8, 65u8, 218u8, 30u8, 151u8, 173u8, 186u8,
							166u8, 79u8, 35u8, 226u8, 94u8, 200u8, 67u8, 44u8, 47u8, 7u8, 17u8,
							89u8, 169u8, 166u8, 236u8, 101u8, 68u8, 54u8, 114u8, 141u8, 177u8,
							135u8,
						],
					)
				}
				/// Record of all proposals that have been subject to emergency cancellation.
				pub fn cancellations_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::bool,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"Cancellations",
						Vec::new(),
						[
							154u8, 36u8, 172u8, 46u8, 65u8, 218u8, 30u8, 151u8, 173u8, 186u8,
							166u8, 79u8, 35u8, 226u8, 94u8, 200u8, 67u8, 44u8, 47u8, 7u8, 17u8,
							89u8, 169u8, 166u8, 236u8, 101u8, 68u8, 54u8, 114u8, 141u8, 177u8,
							135u8,
						],
					)
				}
				/// General information concerning any proposal or referendum.
				/// The `PreimageHash` refers to the preimage of the `Preimages` provider which can
				/// be a JSON dump or IPFS hash of a JSON file.
				///
				/// Consider a garbage collection for a metadata of finished referendums to
				/// `unrequest` (remove) large preimages.
				pub fn metadata_of(
					&self,
					_0: impl ::std::borrow::Borrow<
						runtime_types::pallet_democracy::types::MetadataOwner,
					>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::H256,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"MetadataOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							157u8, 252u8, 120u8, 151u8, 76u8, 82u8, 189u8, 77u8, 196u8, 65u8,
							113u8, 138u8, 138u8, 57u8, 199u8, 136u8, 22u8, 35u8, 114u8, 144u8,
							172u8, 42u8, 130u8, 19u8, 19u8, 245u8, 76u8, 177u8, 145u8, 146u8,
							107u8, 23u8,
						],
					)
				}
				/// General information concerning any proposal or referendum.
				/// The `PreimageHash` refers to the preimage of the `Preimages` provider which can
				/// be a JSON dump or IPFS hash of a JSON file.
				///
				/// Consider a garbage collection for a metadata of finished referendums to
				/// `unrequest` (remove) large preimages.
				pub fn metadata_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::H256,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Democracy",
						"MetadataOf",
						Vec::new(),
						[
							157u8, 252u8, 120u8, 151u8, 76u8, 82u8, 189u8, 77u8, 196u8, 65u8,
							113u8, 138u8, 138u8, 57u8, 199u8, 136u8, 22u8, 35u8, 114u8, 144u8,
							172u8, 42u8, 130u8, 19u8, 19u8, 245u8, 76u8, 177u8, 145u8, 146u8,
							107u8, 23u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The period between a proposal being approved and enacted.
				///
				/// It should generally be a little more than the unstake period to ensure that
				/// voting stakers have an opportunity to remove themselves from the system in the
				/// case where they are on the losing side of a vote.
				pub fn enactment_period(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"EnactmentPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// How often (in blocks) new public referenda are launched.
				pub fn launch_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"LaunchPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// How often (in blocks) to check for new votes.
				pub fn voting_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"VotingPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The minimum period of vote locking.
				///
				/// It should be no shorter than enactment period to ensure that in the case of an
				/// approval, those successful voters are locked into the consequences that their
				/// votes entail.
				pub fn vote_locking_period(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"VoteLockingPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The minimum amount to be used as a deposit for a public referendum proposal.
				pub fn minimum_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"MinimumDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// Indicator for whether an emergency origin is even allowed to happen. Some chains
				/// may want to set this permanently to `false`, others may want to condition it on
				/// things such as an upgrade having happened recently.
				pub fn instant_allowed(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::bool> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"InstantAllowed",
						[
							165u8, 28u8, 112u8, 190u8, 18u8, 129u8, 182u8, 206u8, 237u8, 1u8, 68u8,
							252u8, 125u8, 234u8, 185u8, 50u8, 149u8, 164u8, 47u8, 126u8, 134u8,
							100u8, 14u8, 86u8, 209u8, 39u8, 20u8, 4u8, 233u8, 115u8, 102u8, 131u8,
						],
					)
				}
				/// Minimum voting period allowed for a fast-track referendum.
				pub fn fast_track_voting_period(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"FastTrackVotingPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Period in blocks where an external proposal may not be re-submitted after being
				/// vetoed.
				pub fn cooloff_period(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"CooloffPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum number of votes for an account.
				///
				/// Also used to compute weight, an overly big value can
				/// lead to extrinsic with very big weight: see `delegate` for instance.
				pub fn max_votes(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"MaxVotes",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum number of public proposals that can exist at any time.
				pub fn max_proposals(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"MaxProposals",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum number of deposits a public proposal may have at any time.
				pub fn max_deposits(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"MaxDeposits",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum number of items which can be blacklisted.
				pub fn max_blacklisted(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Democracy",
						"MaxBlacklisted",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod council {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetMembers {
				pub new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
				pub prime: ::core::option::Option<::subxt::utils::AccountId32>,
				pub old_count: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Execute {
				pub proposal: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Propose {
				#[codec(compact)]
				pub threshold: ::core::primitive::u32,
				pub proposal: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Vote {
				pub proposal: ::subxt::utils::H256,
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				pub approve: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CloseOldWeight {
				pub proposal_hash: ::subxt::utils::H256,
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				#[codec(compact)]
				pub proposal_weight_bound: runtime_types::sp_weights::OldWeight,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DisapproveProposal {
				pub proposal_hash: ::subxt::utils::H256,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Close {
				pub proposal_hash: ::subxt::utils::H256,
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				pub proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Set the collective's membership.
				///
				/// - `new_members`: The new member list. Be nice to the chain and provide it
				///   sorted.
				/// - `prime`: The prime member whose vote sets the default.
				/// - `old_count`: The upper bound for the previous number of members in storage.
				///   Used for
				///  weight estimation.
				///
				///The dispatch of this call must be `SetMembersOrigin`.
				///
				///NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members,
				/// but      the weight estimations rely on it to estimate dispatchable weight.
				///
				///# WARNING:
				///
				///The `pallet-collective` can also be managed by logic outside of the pallet
				/// through the implementation of the trait [`ChangeMembers`].
				///Any call to `set_members` must be careful that the member set doesn't get out of
				/// sync with other logic managing the member set.
				///
				///## Complexity:
				/// - `O(MP + N)` where:
				///  - `M` old-members-count (code- and governance-bounded)
				///  - `N` new-members-count (code- and governance-bounded)
				///  - `P` proposals-count (code-bounded)
				pub fn set_members(
					&self,
					new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
					prime: ::core::option::Option<::subxt::utils::AccountId32>,
					old_count: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<SetMembers> {
					::subxt::tx::Payload::new_static(
						"Council",
						"set_members",
						SetMembers { new_members, prime, old_count },
						[
							196u8, 103u8, 123u8, 125u8, 226u8, 177u8, 126u8, 37u8, 160u8, 114u8,
							34u8, 136u8, 219u8, 84u8, 199u8, 94u8, 242u8, 20u8, 126u8, 126u8,
							166u8, 190u8, 198u8, 33u8, 162u8, 113u8, 237u8, 222u8, 90u8, 1u8, 2u8,
							234u8,
						],
					)
				}
				///Dispatch a proposal from a member using the `Member` origin.
				///
				///Origin must be a member of the collective.
				///
				///## Complexity:
				/// - `O(B + M + P)` where:
				/// - `B` is `proposal` size in bytes (length-fee-bounded)
				/// - `M` members-count (code-bounded)
				/// - `P` complexity of dispatching `proposal`
				pub fn execute(
					&self,
					proposal: runtime_types::babe_runtime::RuntimeCall,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Execute> {
					::subxt::tx::Payload::new_static(
						"Council",
						"execute",
						Execute { proposal: ::std::boxed::Box::new(proposal), length_bound },
						[
							74u8, 171u8, 194u8, 100u8, 116u8, 71u8, 159u8, 221u8, 82u8, 177u8,
							120u8, 254u8, 142u8, 86u8, 22u8, 196u8, 78u8, 154u8, 197u8, 203u8,
							74u8, 195u8, 220u8, 239u8, 246u8, 217u8, 131u8, 58u8, 51u8, 17u8,
							123u8, 173u8,
						],
					)
				}
				///Add a new proposal to either be voted on or executed directly.
				///
				///Requires the sender to be member.
				///
				///`threshold` determines whether `proposal` is executed directly (`threshold < 2`)
				///or put up for voting.
				///
				///## Complexity
				/// - `O(B + M + P1)` or `O(B + M + P2)` where:
				///  - `B` is `proposal` size in bytes (length-fee-bounded)
				///  - `M` is members-count (code- and governance-bounded)
				///  - branching is influenced by `threshold` where:
				///    - `P1` is proposal execution complexity (`threshold < 2`)
				///    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)
				pub fn propose(
					&self,
					threshold: ::core::primitive::u32,
					proposal: runtime_types::babe_runtime::RuntimeCall,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Propose> {
					::subxt::tx::Payload::new_static(
						"Council",
						"propose",
						Propose {
							threshold,
							proposal: ::std::boxed::Box::new(proposal),
							length_bound,
						},
						[
							136u8, 74u8, 108u8, 147u8, 25u8, 10u8, 77u8, 9u8, 252u8, 0u8, 42u8,
							60u8, 77u8, 234u8, 201u8, 135u8, 170u8, 246u8, 48u8, 35u8, 212u8,
							206u8, 119u8, 217u8, 32u8, 194u8, 121u8, 96u8, 57u8, 122u8, 62u8, 21u8,
						],
					)
				}
				///Add an aye or nay vote for the sender to the given proposal.
				///
				///Requires the sender to be a member.
				///
				///Transaction fees will be waived if the member is voting on any particular
				/// proposal for the first time and the call is successful. Subsequent vote changes
				/// will charge a fee.
				///## Complexity
				/// - `O(M)` where `M` is members-count (code- and governance-bounded)
				pub fn vote(
					&self,
					proposal: ::subxt::utils::H256,
					index: ::core::primitive::u32,
					approve: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<Vote> {
					::subxt::tx::Payload::new_static(
						"Council",
						"vote",
						Vote { proposal, index, approve },
						[
							108u8, 46u8, 180u8, 148u8, 145u8, 24u8, 173u8, 56u8, 36u8, 100u8,
							216u8, 43u8, 178u8, 202u8, 26u8, 136u8, 93u8, 84u8, 80u8, 134u8, 14u8,
							42u8, 248u8, 205u8, 68u8, 92u8, 79u8, 11u8, 113u8, 115u8, 157u8, 100u8,
						],
					)
				}
				///Close a vote that is either approved, disapproved or whose voting period has
				/// ended.
				///
				///May be called by any signed account in order to finish voting and close the
				/// proposal.
				///
				///If called before the end of the voting period it will only close the vote if it
				/// is has enough votes to be approved or disapproved.
				///
				///If called after the end of the voting period abstentions are counted as
				/// rejections unless there is a prime member set and the prime member cast an
				/// approval.
				///
				///If the close operation completes successfully with disapproval, the transaction
				/// fee will be waived. Otherwise execution of the approved operation will be
				/// charged to the caller.
				///
				///+ `proposal_weight_bound`: The maximum amount of weight consumed by executing
				/// the closed proposal.
				///+ `length_bound`: The upper bound for the length of the proposal in storage.
				/// Checked via `storage::read` so it is `size_of::<u32>() == 4` larger than the
				/// pure length.
				///
				///## Complexity
				/// - `O(B + M + P1 + P2)` where:
				///  - `B` is `proposal` size in bytes (length-fee-bounded)
				///  - `M` is members-count (code- and governance-bounded)
				///  - `P1` is the complexity of `proposal` preimage.
				///  - `P2` is proposal-count (code-bounded)
				pub fn close_old_weight(
					&self,
					proposal_hash: ::subxt::utils::H256,
					index: ::core::primitive::u32,
					proposal_weight_bound: runtime_types::sp_weights::OldWeight,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<CloseOldWeight> {
					::subxt::tx::Payload::new_static(
						"Council",
						"close_old_weight",
						CloseOldWeight {
							proposal_hash,
							index,
							proposal_weight_bound,
							length_bound,
						},
						[
							133u8, 219u8, 90u8, 40u8, 102u8, 95u8, 4u8, 199u8, 45u8, 234u8, 109u8,
							17u8, 162u8, 63u8, 102u8, 186u8, 95u8, 182u8, 13u8, 123u8, 227u8, 20u8,
							186u8, 207u8, 12u8, 47u8, 87u8, 252u8, 244u8, 172u8, 60u8, 206u8,
						],
					)
				}
				///Disapprove a proposal, close, and remove it from the system, regardless of its
				/// current state.
				///
				///Must be called by the Root origin.
				///
				///Parameters:
				/// * `proposal_hash`: The hash of the proposal that should be disapproved.
				///
				///## Complexity
				///O(P) where P is the number of max proposals
				pub fn disapprove_proposal(
					&self,
					proposal_hash: ::subxt::utils::H256,
				) -> ::subxt::tx::Payload<DisapproveProposal> {
					::subxt::tx::Payload::new_static(
						"Council",
						"disapprove_proposal",
						DisapproveProposal { proposal_hash },
						[
							25u8, 123u8, 1u8, 8u8, 74u8, 37u8, 3u8, 40u8, 97u8, 37u8, 175u8, 224u8,
							72u8, 155u8, 123u8, 109u8, 104u8, 43u8, 91u8, 125u8, 199u8, 51u8, 17u8,
							225u8, 133u8, 38u8, 120u8, 76u8, 164u8, 5u8, 194u8, 201u8,
						],
					)
				}
				///Close a vote that is either approved, disapproved or whose voting period has
				/// ended.
				///
				///May be called by any signed account in order to finish voting and close the
				/// proposal.
				///
				///If called before the end of the voting period it will only close the vote if it
				/// is has enough votes to be approved or disapproved.
				///
				///If called after the end of the voting period abstentions are counted as
				/// rejections unless there is a prime member set and the prime member cast an
				/// approval.
				///
				///If the close operation completes successfully with disapproval, the transaction
				/// fee will be waived. Otherwise execution of the approved operation will be
				/// charged to the caller.
				///
				///+ `proposal_weight_bound`: The maximum amount of weight consumed by executing
				/// the closed proposal.
				///+ `length_bound`: The upper bound for the length of the proposal in storage.
				/// Checked via `storage::read` so it is `size_of::<u32>() == 4` larger than the
				/// pure length.
				///
				///## Complexity
				/// - `O(B + M + P1 + P2)` where:
				///  - `B` is `proposal` size in bytes (length-fee-bounded)
				///  - `M` is members-count (code- and governance-bounded)
				///  - `P1` is the complexity of `proposal` preimage.
				///  - `P2` is proposal-count (code-bounded)
				pub fn close(
					&self,
					proposal_hash: ::subxt::utils::H256,
					index: ::core::primitive::u32,
					proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Close> {
					::subxt::tx::Payload::new_static(
						"Council",
						"close",
						Close { proposal_hash, index, proposal_weight_bound, length_bound },
						[
							191u8, 138u8, 89u8, 247u8, 97u8, 51u8, 45u8, 193u8, 76u8, 16u8, 80u8,
							225u8, 197u8, 83u8, 204u8, 133u8, 169u8, 16u8, 86u8, 32u8, 125u8, 16u8,
							116u8, 185u8, 45u8, 20u8, 76u8, 148u8, 206u8, 163u8, 154u8, 30u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_collective::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A motion (given hash) has been proposed (by given account) with a threshold (given
			///`MemberCount`).
			pub struct Proposed {
				pub account: ::subxt::utils::AccountId32,
				pub proposal_index: ::core::primitive::u32,
				pub proposal_hash: ::subxt::utils::H256,
				pub threshold: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Proposed {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A motion (given hash) has been voted on by given account, leaving
			///a tally (yes votes and no votes given respectively as `MemberCount`).
			pub struct Voted {
				pub account: ::subxt::utils::AccountId32,
				pub proposal_hash: ::subxt::utils::H256,
				pub voted: ::core::primitive::bool,
				pub yes: ::core::primitive::u32,
				pub no: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Voted {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Voted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A motion was approved by the required threshold.
			pub struct Approved {
				pub proposal_hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for Approved {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Approved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A motion was not approved by the required threshold.
			pub struct Disapproved {
				pub proposal_hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for Disapproved {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Disapproved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A motion was executed; result will be `Ok` if it returned without error.
			pub struct Executed {
				pub proposal_hash: ::subxt::utils::H256,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for Executed {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Executed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A single member did some action; result will be `Ok` if it returned without error.
			pub struct MemberExecuted {
				pub proposal_hash: ::subxt::utils::H256,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for MemberExecuted {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "MemberExecuted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A proposal was closed because its threshold was reached or after its duration was
			/// up.
			pub struct Closed {
				pub proposal_hash: ::subxt::utils::H256,
				pub yes: ::core::primitive::u32,
				pub no: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Closed {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Closed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The hashes of the active proposals.
				pub fn proposals(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::subxt::utils::H256,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Council",
						"Proposals",
						vec![],
						[
							10u8, 133u8, 82u8, 54u8, 193u8, 41u8, 253u8, 159u8, 56u8, 96u8, 249u8,
							148u8, 43u8, 57u8, 116u8, 43u8, 222u8, 243u8, 237u8, 231u8, 238u8,
							60u8, 26u8, 225u8, 19u8, 203u8, 213u8, 220u8, 114u8, 217u8, 100u8,
							27u8,
						],
					)
				}
				/// Actual proposal for a given hash, if it's current.
				pub fn proposal_of(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::babe_runtime::RuntimeCall,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Council",
						"ProposalOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							31u8, 10u8, 39u8, 204u8, 31u8, 195u8, 16u8, 183u8, 154u8, 247u8, 219u8,
							168u8, 115u8, 186u8, 23u8, 140u8, 194u8, 247u8, 79u8, 212u8, 43u8,
							197u8, 16u8, 203u8, 212u8, 133u8, 88u8, 9u8, 156u8, 5u8, 10u8, 156u8,
						],
					)
				}
				/// Actual proposal for a given hash, if it's current.
				pub fn proposal_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::babe_runtime::RuntimeCall,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Council",
						"ProposalOf",
						Vec::new(),
						[
							31u8, 10u8, 39u8, 204u8, 31u8, 195u8, 16u8, 183u8, 154u8, 247u8, 219u8,
							168u8, 115u8, 186u8, 23u8, 140u8, 194u8, 247u8, 79u8, 212u8, 43u8,
							197u8, 16u8, 203u8, 212u8, 133u8, 88u8, 9u8, 156u8, 5u8, 10u8, 156u8,
						],
					)
				}
				/// Votes on a given proposal, if it is ongoing.
				pub fn voting(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_collective::Votes<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Council",
						"Voting",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							89u8, 108u8, 65u8, 58u8, 60u8, 116u8, 54u8, 68u8, 179u8, 73u8, 161u8,
							168u8, 78u8, 213u8, 208u8, 54u8, 244u8, 58u8, 70u8, 209u8, 170u8,
							136u8, 215u8, 3u8, 2u8, 105u8, 229u8, 217u8, 240u8, 230u8, 107u8,
							221u8,
						],
					)
				}
				/// Votes on a given proposal, if it is ongoing.
				pub fn voting_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_collective::Votes<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Council",
						"Voting",
						Vec::new(),
						[
							89u8, 108u8, 65u8, 58u8, 60u8, 116u8, 54u8, 68u8, 179u8, 73u8, 161u8,
							168u8, 78u8, 213u8, 208u8, 54u8, 244u8, 58u8, 70u8, 209u8, 170u8,
							136u8, 215u8, 3u8, 2u8, 105u8, 229u8, 217u8, 240u8, 230u8, 107u8,
							221u8,
						],
					)
				}
				/// Proposals so far.
				pub fn proposal_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Council",
						"ProposalCount",
						vec![],
						[
							132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8, 172u8, 143u8, 33u8,
							140u8, 99u8, 124u8, 208u8, 57u8, 232u8, 154u8, 110u8, 32u8, 142u8,
							24u8, 149u8, 109u8, 105u8, 30u8, 83u8, 39u8, 177u8, 127u8, 160u8, 34u8,
							70u8,
						],
					)
				}
				/// The current members of the collective. This is stored sorted (just by value).
				pub fn members(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::subxt::utils::AccountId32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Council",
						"Members",
						vec![],
						[
							162u8, 72u8, 174u8, 204u8, 140u8, 105u8, 205u8, 176u8, 197u8, 117u8,
							206u8, 134u8, 157u8, 110u8, 139u8, 54u8, 43u8, 233u8, 25u8, 51u8, 36u8,
							238u8, 94u8, 124u8, 221u8, 52u8, 237u8, 71u8, 125u8, 56u8, 129u8,
							222u8,
						],
					)
				}
				/// The prime member that helps determine the default vote behavior in case of
				/// absentations.
				pub fn prime(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Council",
						"Prime",
						vec![],
						[
							108u8, 118u8, 54u8, 193u8, 207u8, 227u8, 119u8, 97u8, 23u8, 239u8,
							157u8, 69u8, 56u8, 142u8, 106u8, 17u8, 215u8, 159u8, 48u8, 42u8, 185u8,
							209u8, 49u8, 159u8, 32u8, 168u8, 111u8, 158u8, 159u8, 217u8, 244u8,
							158u8,
						],
					)
				}
			}
		}
	}
	pub mod technical_committee {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetMembers {
				pub new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
				pub prime: ::core::option::Option<::subxt::utils::AccountId32>,
				pub old_count: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Execute {
				pub proposal: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Propose {
				#[codec(compact)]
				pub threshold: ::core::primitive::u32,
				pub proposal: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Vote {
				pub proposal: ::subxt::utils::H256,
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				pub approve: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CloseOldWeight {
				pub proposal_hash: ::subxt::utils::H256,
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				#[codec(compact)]
				pub proposal_weight_bound: runtime_types::sp_weights::OldWeight,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DisapproveProposal {
				pub proposal_hash: ::subxt::utils::H256,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Close {
				pub proposal_hash: ::subxt::utils::H256,
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				pub proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Set the collective's membership.
				///
				/// - `new_members`: The new member list. Be nice to the chain and provide it
				///   sorted.
				/// - `prime`: The prime member whose vote sets the default.
				/// - `old_count`: The upper bound for the previous number of members in storage.
				///   Used for
				///  weight estimation.
				///
				///The dispatch of this call must be `SetMembersOrigin`.
				///
				///NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members,
				/// but      the weight estimations rely on it to estimate dispatchable weight.
				///
				///# WARNING:
				///
				///The `pallet-collective` can also be managed by logic outside of the pallet
				/// through the implementation of the trait [`ChangeMembers`].
				///Any call to `set_members` must be careful that the member set doesn't get out of
				/// sync with other logic managing the member set.
				///
				///## Complexity:
				/// - `O(MP + N)` where:
				///  - `M` old-members-count (code- and governance-bounded)
				///  - `N` new-members-count (code- and governance-bounded)
				///  - `P` proposals-count (code-bounded)
				pub fn set_members(
					&self,
					new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
					prime: ::core::option::Option<::subxt::utils::AccountId32>,
					old_count: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<SetMembers> {
					::subxt::tx::Payload::new_static(
						"TechnicalCommittee",
						"set_members",
						SetMembers { new_members, prime, old_count },
						[
							196u8, 103u8, 123u8, 125u8, 226u8, 177u8, 126u8, 37u8, 160u8, 114u8,
							34u8, 136u8, 219u8, 84u8, 199u8, 94u8, 242u8, 20u8, 126u8, 126u8,
							166u8, 190u8, 198u8, 33u8, 162u8, 113u8, 237u8, 222u8, 90u8, 1u8, 2u8,
							234u8,
						],
					)
				}
				///Dispatch a proposal from a member using the `Member` origin.
				///
				///Origin must be a member of the collective.
				///
				///## Complexity:
				/// - `O(B + M + P)` where:
				/// - `B` is `proposal` size in bytes (length-fee-bounded)
				/// - `M` members-count (code-bounded)
				/// - `P` complexity of dispatching `proposal`
				pub fn execute(
					&self,
					proposal: runtime_types::babe_runtime::RuntimeCall,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Execute> {
					::subxt::tx::Payload::new_static(
						"TechnicalCommittee",
						"execute",
						Execute { proposal: ::std::boxed::Box::new(proposal), length_bound },
						[
							74u8, 171u8, 194u8, 100u8, 116u8, 71u8, 159u8, 221u8, 82u8, 177u8,
							120u8, 254u8, 142u8, 86u8, 22u8, 196u8, 78u8, 154u8, 197u8, 203u8,
							74u8, 195u8, 220u8, 239u8, 246u8, 217u8, 131u8, 58u8, 51u8, 17u8,
							123u8, 173u8,
						],
					)
				}
				///Add a new proposal to either be voted on or executed directly.
				///
				///Requires the sender to be member.
				///
				///`threshold` determines whether `proposal` is executed directly (`threshold < 2`)
				///or put up for voting.
				///
				///## Complexity
				/// - `O(B + M + P1)` or `O(B + M + P2)` where:
				///  - `B` is `proposal` size in bytes (length-fee-bounded)
				///  - `M` is members-count (code- and governance-bounded)
				///  - branching is influenced by `threshold` where:
				///    - `P1` is proposal execution complexity (`threshold < 2`)
				///    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)
				pub fn propose(
					&self,
					threshold: ::core::primitive::u32,
					proposal: runtime_types::babe_runtime::RuntimeCall,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Propose> {
					::subxt::tx::Payload::new_static(
						"TechnicalCommittee",
						"propose",
						Propose {
							threshold,
							proposal: ::std::boxed::Box::new(proposal),
							length_bound,
						},
						[
							136u8, 74u8, 108u8, 147u8, 25u8, 10u8, 77u8, 9u8, 252u8, 0u8, 42u8,
							60u8, 77u8, 234u8, 201u8, 135u8, 170u8, 246u8, 48u8, 35u8, 212u8,
							206u8, 119u8, 217u8, 32u8, 194u8, 121u8, 96u8, 57u8, 122u8, 62u8, 21u8,
						],
					)
				}
				///Add an aye or nay vote for the sender to the given proposal.
				///
				///Requires the sender to be a member.
				///
				///Transaction fees will be waived if the member is voting on any particular
				/// proposal for the first time and the call is successful. Subsequent vote changes
				/// will charge a fee.
				///## Complexity
				/// - `O(M)` where `M` is members-count (code- and governance-bounded)
				pub fn vote(
					&self,
					proposal: ::subxt::utils::H256,
					index: ::core::primitive::u32,
					approve: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<Vote> {
					::subxt::tx::Payload::new_static(
						"TechnicalCommittee",
						"vote",
						Vote { proposal, index, approve },
						[
							108u8, 46u8, 180u8, 148u8, 145u8, 24u8, 173u8, 56u8, 36u8, 100u8,
							216u8, 43u8, 178u8, 202u8, 26u8, 136u8, 93u8, 84u8, 80u8, 134u8, 14u8,
							42u8, 248u8, 205u8, 68u8, 92u8, 79u8, 11u8, 113u8, 115u8, 157u8, 100u8,
						],
					)
				}
				///Close a vote that is either approved, disapproved or whose voting period has
				/// ended.
				///
				///May be called by any signed account in order to finish voting and close the
				/// proposal.
				///
				///If called before the end of the voting period it will only close the vote if it
				/// is has enough votes to be approved or disapproved.
				///
				///If called after the end of the voting period abstentions are counted as
				/// rejections unless there is a prime member set and the prime member cast an
				/// approval.
				///
				///If the close operation completes successfully with disapproval, the transaction
				/// fee will be waived. Otherwise execution of the approved operation will be
				/// charged to the caller.
				///
				///+ `proposal_weight_bound`: The maximum amount of weight consumed by executing
				/// the closed proposal.
				///+ `length_bound`: The upper bound for the length of the proposal in storage.
				/// Checked via `storage::read` so it is `size_of::<u32>() == 4` larger than the
				/// pure length.
				///
				///## Complexity
				/// - `O(B + M + P1 + P2)` where:
				///  - `B` is `proposal` size in bytes (length-fee-bounded)
				///  - `M` is members-count (code- and governance-bounded)
				///  - `P1` is the complexity of `proposal` preimage.
				///  - `P2` is proposal-count (code-bounded)
				pub fn close_old_weight(
					&self,
					proposal_hash: ::subxt::utils::H256,
					index: ::core::primitive::u32,
					proposal_weight_bound: runtime_types::sp_weights::OldWeight,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<CloseOldWeight> {
					::subxt::tx::Payload::new_static(
						"TechnicalCommittee",
						"close_old_weight",
						CloseOldWeight {
							proposal_hash,
							index,
							proposal_weight_bound,
							length_bound,
						},
						[
							133u8, 219u8, 90u8, 40u8, 102u8, 95u8, 4u8, 199u8, 45u8, 234u8, 109u8,
							17u8, 162u8, 63u8, 102u8, 186u8, 95u8, 182u8, 13u8, 123u8, 227u8, 20u8,
							186u8, 207u8, 12u8, 47u8, 87u8, 252u8, 244u8, 172u8, 60u8, 206u8,
						],
					)
				}
				///Disapprove a proposal, close, and remove it from the system, regardless of its
				/// current state.
				///
				///Must be called by the Root origin.
				///
				///Parameters:
				/// * `proposal_hash`: The hash of the proposal that should be disapproved.
				///
				///## Complexity
				///O(P) where P is the number of max proposals
				pub fn disapprove_proposal(
					&self,
					proposal_hash: ::subxt::utils::H256,
				) -> ::subxt::tx::Payload<DisapproveProposal> {
					::subxt::tx::Payload::new_static(
						"TechnicalCommittee",
						"disapprove_proposal",
						DisapproveProposal { proposal_hash },
						[
							25u8, 123u8, 1u8, 8u8, 74u8, 37u8, 3u8, 40u8, 97u8, 37u8, 175u8, 224u8,
							72u8, 155u8, 123u8, 109u8, 104u8, 43u8, 91u8, 125u8, 199u8, 51u8, 17u8,
							225u8, 133u8, 38u8, 120u8, 76u8, 164u8, 5u8, 194u8, 201u8,
						],
					)
				}
				///Close a vote that is either approved, disapproved or whose voting period has
				/// ended.
				///
				///May be called by any signed account in order to finish voting and close the
				/// proposal.
				///
				///If called before the end of the voting period it will only close the vote if it
				/// is has enough votes to be approved or disapproved.
				///
				///If called after the end of the voting period abstentions are counted as
				/// rejections unless there is a prime member set and the prime member cast an
				/// approval.
				///
				///If the close operation completes successfully with disapproval, the transaction
				/// fee will be waived. Otherwise execution of the approved operation will be
				/// charged to the caller.
				///
				///+ `proposal_weight_bound`: The maximum amount of weight consumed by executing
				/// the closed proposal.
				///+ `length_bound`: The upper bound for the length of the proposal in storage.
				/// Checked via `storage::read` so it is `size_of::<u32>() == 4` larger than the
				/// pure length.
				///
				///## Complexity
				/// - `O(B + M + P1 + P2)` where:
				///  - `B` is `proposal` size in bytes (length-fee-bounded)
				///  - `M` is members-count (code- and governance-bounded)
				///  - `P1` is the complexity of `proposal` preimage.
				///  - `P2` is proposal-count (code-bounded)
				pub fn close(
					&self,
					proposal_hash: ::subxt::utils::H256,
					index: ::core::primitive::u32,
					proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Close> {
					::subxt::tx::Payload::new_static(
						"TechnicalCommittee",
						"close",
						Close { proposal_hash, index, proposal_weight_bound, length_bound },
						[
							191u8, 138u8, 89u8, 247u8, 97u8, 51u8, 45u8, 193u8, 76u8, 16u8, 80u8,
							225u8, 197u8, 83u8, 204u8, 133u8, 169u8, 16u8, 86u8, 32u8, 125u8, 16u8,
							116u8, 185u8, 45u8, 20u8, 76u8, 148u8, 206u8, 163u8, 154u8, 30u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_collective::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A motion (given hash) has been proposed (by given account) with a threshold (given
			///`MemberCount`).
			pub struct Proposed {
				pub account: ::subxt::utils::AccountId32,
				pub proposal_index: ::core::primitive::u32,
				pub proposal_hash: ::subxt::utils::H256,
				pub threshold: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Proposed {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A motion (given hash) has been voted on by given account, leaving
			///a tally (yes votes and no votes given respectively as `MemberCount`).
			pub struct Voted {
				pub account: ::subxt::utils::AccountId32,
				pub proposal_hash: ::subxt::utils::H256,
				pub voted: ::core::primitive::bool,
				pub yes: ::core::primitive::u32,
				pub no: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Voted {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Voted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A motion was approved by the required threshold.
			pub struct Approved {
				pub proposal_hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for Approved {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Approved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A motion was not approved by the required threshold.
			pub struct Disapproved {
				pub proposal_hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for Disapproved {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Disapproved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A motion was executed; result will be `Ok` if it returned without error.
			pub struct Executed {
				pub proposal_hash: ::subxt::utils::H256,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for Executed {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Executed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A single member did some action; result will be `Ok` if it returned without error.
			pub struct MemberExecuted {
				pub proposal_hash: ::subxt::utils::H256,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for MemberExecuted {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "MemberExecuted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A proposal was closed because its threshold was reached or after its duration was
			/// up.
			pub struct Closed {
				pub proposal_hash: ::subxt::utils::H256,
				pub yes: ::core::primitive::u32,
				pub no: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Closed {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Closed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The hashes of the active proposals.
				pub fn proposals(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::subxt::utils::H256,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalCommittee",
						"Proposals",
						vec![],
						[
							10u8, 133u8, 82u8, 54u8, 193u8, 41u8, 253u8, 159u8, 56u8, 96u8, 249u8,
							148u8, 43u8, 57u8, 116u8, 43u8, 222u8, 243u8, 237u8, 231u8, 238u8,
							60u8, 26u8, 225u8, 19u8, 203u8, 213u8, 220u8, 114u8, 217u8, 100u8,
							27u8,
						],
					)
				}
				/// Actual proposal for a given hash, if it's current.
				pub fn proposal_of(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::babe_runtime::RuntimeCall,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalCommittee",
						"ProposalOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							31u8, 10u8, 39u8, 204u8, 31u8, 195u8, 16u8, 183u8, 154u8, 247u8, 219u8,
							168u8, 115u8, 186u8, 23u8, 140u8, 194u8, 247u8, 79u8, 212u8, 43u8,
							197u8, 16u8, 203u8, 212u8, 133u8, 88u8, 9u8, 156u8, 5u8, 10u8, 156u8,
						],
					)
				}
				/// Actual proposal for a given hash, if it's current.
				pub fn proposal_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::babe_runtime::RuntimeCall,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalCommittee",
						"ProposalOf",
						Vec::new(),
						[
							31u8, 10u8, 39u8, 204u8, 31u8, 195u8, 16u8, 183u8, 154u8, 247u8, 219u8,
							168u8, 115u8, 186u8, 23u8, 140u8, 194u8, 247u8, 79u8, 212u8, 43u8,
							197u8, 16u8, 203u8, 212u8, 133u8, 88u8, 9u8, 156u8, 5u8, 10u8, 156u8,
						],
					)
				}
				/// Votes on a given proposal, if it is ongoing.
				pub fn voting(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_collective::Votes<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalCommittee",
						"Voting",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							89u8, 108u8, 65u8, 58u8, 60u8, 116u8, 54u8, 68u8, 179u8, 73u8, 161u8,
							168u8, 78u8, 213u8, 208u8, 54u8, 244u8, 58u8, 70u8, 209u8, 170u8,
							136u8, 215u8, 3u8, 2u8, 105u8, 229u8, 217u8, 240u8, 230u8, 107u8,
							221u8,
						],
					)
				}
				/// Votes on a given proposal, if it is ongoing.
				pub fn voting_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_collective::Votes<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalCommittee",
						"Voting",
						Vec::new(),
						[
							89u8, 108u8, 65u8, 58u8, 60u8, 116u8, 54u8, 68u8, 179u8, 73u8, 161u8,
							168u8, 78u8, 213u8, 208u8, 54u8, 244u8, 58u8, 70u8, 209u8, 170u8,
							136u8, 215u8, 3u8, 2u8, 105u8, 229u8, 217u8, 240u8, 230u8, 107u8,
							221u8,
						],
					)
				}
				/// Proposals so far.
				pub fn proposal_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalCommittee",
						"ProposalCount",
						vec![],
						[
							132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8, 172u8, 143u8, 33u8,
							140u8, 99u8, 124u8, 208u8, 57u8, 232u8, 154u8, 110u8, 32u8, 142u8,
							24u8, 149u8, 109u8, 105u8, 30u8, 83u8, 39u8, 177u8, 127u8, 160u8, 34u8,
							70u8,
						],
					)
				}
				/// The current members of the collective. This is stored sorted (just by value).
				pub fn members(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::subxt::utils::AccountId32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalCommittee",
						"Members",
						vec![],
						[
							162u8, 72u8, 174u8, 204u8, 140u8, 105u8, 205u8, 176u8, 197u8, 117u8,
							206u8, 134u8, 157u8, 110u8, 139u8, 54u8, 43u8, 233u8, 25u8, 51u8, 36u8,
							238u8, 94u8, 124u8, 221u8, 52u8, 237u8, 71u8, 125u8, 56u8, 129u8,
							222u8,
						],
					)
				}
				/// The prime member that helps determine the default vote behavior in case of
				/// absentations.
				pub fn prime(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalCommittee",
						"Prime",
						vec![],
						[
							108u8, 118u8, 54u8, 193u8, 207u8, 227u8, 119u8, 97u8, 23u8, 239u8,
							157u8, 69u8, 56u8, 142u8, 106u8, 17u8, 215u8, 159u8, 48u8, 42u8, 185u8,
							209u8, 49u8, 159u8, 32u8, 168u8, 111u8, 158u8, 159u8, 217u8, 244u8,
							158u8,
						],
					)
				}
			}
		}
	}
	pub mod elections {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Vote {
				pub votes: ::std::vec::Vec<::subxt::utils::AccountId32>,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemoveVoter;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SubmitCandidacy {
				#[codec(compact)]
				pub candidate_count: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RenounceCandidacy {
				pub renouncing: runtime_types::pallet_elections_phragmen::Renouncing,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemoveMember {
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub slash_bond: ::core::primitive::bool,
				pub rerun_election: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CleanDefunctVoters {
				pub num_voters: ::core::primitive::u32,
				pub num_defunct: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Vote for a set of candidates for the upcoming round of election. This can be
				/// called to set the initial votes, or update already existing votes.
				///
				///Upon initial voting, `value` units of `who`'s balance is locked and a deposit
				/// amount is reserved. The deposit is based on the number of votes and can be
				/// updated over time.
				///
				///The `votes` should:
				///  - not be empty.
				///  - be less than the number of possible candidates. Note that all current members
				///    and runners-up are also automatically candidates for the next round.
				///
				///If `value` is more than `who`'s free balance, then the maximum of the two is
				/// used.
				///
				///The dispatch origin of this call must be signed.
				///
				///### Warning
				///
				///It is the responsibility of the caller to **NOT** place all of their balance
				/// into the lock and keep some for further operations.
				pub fn vote(
					&self,
					votes: ::std::vec::Vec<::subxt::utils::AccountId32>,
					value: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<Vote> {
					::subxt::tx::Payload::new_static(
						"Elections",
						"vote",
						Vote { votes, value },
						[
							71u8, 90u8, 175u8, 225u8, 51u8, 202u8, 197u8, 252u8, 183u8, 92u8,
							239u8, 83u8, 112u8, 144u8, 128u8, 211u8, 109u8, 33u8, 252u8, 6u8,
							156u8, 15u8, 91u8, 88u8, 70u8, 19u8, 32u8, 29u8, 224u8, 255u8, 26u8,
							145u8,
						],
					)
				}
				///Remove `origin` as a voter.
				///
				///This removes the lock and returns the deposit.
				///
				///The dispatch origin of this call must be signed and be a voter.
				pub fn remove_voter(&self) -> ::subxt::tx::Payload<RemoveVoter> {
					::subxt::tx::Payload::new_static(
						"Elections",
						"remove_voter",
						RemoveVoter {},
						[
							254u8, 46u8, 140u8, 4u8, 218u8, 45u8, 150u8, 72u8, 67u8, 131u8, 108u8,
							201u8, 46u8, 157u8, 104u8, 161u8, 53u8, 155u8, 130u8, 50u8, 88u8,
							149u8, 255u8, 12u8, 17u8, 85u8, 95u8, 69u8, 153u8, 130u8, 221u8, 1u8,
						],
					)
				}
				///Submit oneself for candidacy. A fixed amount of deposit is recorded.
				///
				///All candidates are wiped at the end of the term. They either become a
				/// member/runner-up, or leave the system while their deposit is slashed.
				///
				///The dispatch origin of this call must be signed.
				///
				///### Warning
				///
				///Even if a candidate ends up being a member, they must call
				/// [`Call::renounce_candidacy`] to get their deposit back. Losing the spot in an
				/// election will always lead to a slash.
				///
				///The number of current candidates must be provided as witness data.
				///## Complexity
				///O(C + log(C)) where C is candidate_count.
				pub fn submit_candidacy(
					&self,
					candidate_count: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<SubmitCandidacy> {
					::subxt::tx::Payload::new_static(
						"Elections",
						"submit_candidacy",
						SubmitCandidacy { candidate_count },
						[
							228u8, 63u8, 217u8, 99u8, 128u8, 104u8, 175u8, 10u8, 30u8, 35u8, 47u8,
							14u8, 254u8, 122u8, 146u8, 239u8, 61u8, 145u8, 82u8, 7u8, 181u8, 98u8,
							238u8, 208u8, 23u8, 84u8, 48u8, 255u8, 177u8, 255u8, 84u8, 83u8,
						],
					)
				}
				///Renounce one's intention to be a candidate for the next election round. 3
				/// potential outcomes exist:
				///
				/// - `origin` is a candidate and not elected in any set. In this case, the deposit
				///   is
				///  unreserved, returned and origin is removed as a candidate.
				/// - `origin` is a current runner-up. In this case, the deposit is unreserved,
				///   returned and
				///  origin is removed as a runner-up.
				/// - `origin` is a current member. In this case, the deposit is unreserved and
				///   origin is
				///  removed as a member, consequently not being a candidate for the next round
				/// anymore.  Similar to [`remove_member`](Self::remove_member), if replacement
				/// runners exists, they  are immediately used. If the prime is renouncing, then no
				/// prime will exist until the  next round.
				///
				///The dispatch origin of this call must be signed, and have one of the above
				/// roles. The type of renouncing must be provided as witness data.
				///
				///## Complexity
				///  - Renouncing::Candidate(count): O(count + log(count))
				///  - Renouncing::Member: O(1)
				///  - Renouncing::RunnerUp: O(1)
				pub fn renounce_candidacy(
					&self,
					renouncing: runtime_types::pallet_elections_phragmen::Renouncing,
				) -> ::subxt::tx::Payload<RenounceCandidacy> {
					::subxt::tx::Payload::new_static(
						"Elections",
						"renounce_candidacy",
						RenounceCandidacy { renouncing },
						[
							70u8, 72u8, 208u8, 36u8, 80u8, 245u8, 224u8, 75u8, 60u8, 142u8, 19u8,
							49u8, 142u8, 90u8, 14u8, 69u8, 15u8, 61u8, 170u8, 235u8, 16u8, 252u8,
							86u8, 200u8, 120u8, 127u8, 36u8, 42u8, 143u8, 130u8, 217u8, 128u8,
						],
					)
				}
				///Remove a particular member from the set. This is effective immediately and the
				/// bond of the outgoing member is slashed.
				///
				///If a runner-up is available, then the best runner-up will be removed and
				/// replaces the outgoing member. Otherwise, if `rerun_election` is `true`, a new
				/// phragmen election is started, else, nothing happens.
				///
				///If `slash_bond` is set to true, the bond of the member being removed is slashed.
				/// Else, it is returned.
				///
				///The dispatch origin of this call must be root.
				///
				///Note that this does not affect the designated block number of the next election.
				///
				///## Complexity
				/// - Check details of remove_and_replace_member() and do_phragmen().
				pub fn remove_member(
					&self,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					slash_bond: ::core::primitive::bool,
					rerun_election: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<RemoveMember> {
					::subxt::tx::Payload::new_static(
						"Elections",
						"remove_member",
						RemoveMember { who, slash_bond, rerun_election },
						[
							178u8, 90u8, 236u8, 184u8, 2u8, 67u8, 51u8, 162u8, 83u8, 131u8, 242u8,
							137u8, 17u8, 243u8, 209u8, 110u8, 26u8, 238u8, 178u8, 136u8, 84u8,
							74u8, 216u8, 173u8, 221u8, 82u8, 179u8, 218u8, 162u8, 159u8, 185u8,
							59u8,
						],
					)
				}
				///Clean all voters who are defunct (i.e. they do not serve any purpose at all).
				/// The deposit of the removed voters are returned.
				///
				///This is an root function to be used only for cleaning the state.
				///
				///The dispatch origin of this call must be root.
				///
				///## Complexity
				/// - Check is_defunct_voter() details.
				pub fn clean_defunct_voters(
					&self,
					num_voters: ::core::primitive::u32,
					num_defunct: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<CleanDefunctVoters> {
					::subxt::tx::Payload::new_static(
						"Elections",
						"clean_defunct_voters",
						CleanDefunctVoters { num_voters, num_defunct },
						[
							198u8, 162u8, 30u8, 249u8, 191u8, 38u8, 141u8, 123u8, 230u8, 90u8,
							213u8, 103u8, 168u8, 28u8, 5u8, 215u8, 213u8, 152u8, 46u8, 189u8,
							238u8, 209u8, 209u8, 142u8, 159u8, 222u8, 161u8, 26u8, 161u8, 250u8,
							9u8, 100u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_elections_phragmen::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A new term with new_members. This indicates that enough candidates existed to run
			///the election, not that enough have has been elected. The inner value must be
			/// examined for this purpose. A `NewTerm(\[\])` indicates that some candidates got
			/// their bond slashed and none were elected, whilst `EmptyTerm` means that no
			/// candidates existed to begin with.
			pub struct NewTerm {
				pub new_members:
					::std::vec::Vec<(::subxt::utils::AccountId32, ::core::primitive::u128)>,
			}
			impl ::subxt::events::StaticEvent for NewTerm {
				const PALLET: &'static str = "Elections";
				const EVENT: &'static str = "NewTerm";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///No (or not enough) candidates existed for this round. This is different from
			///`NewTerm(\[\])`. See the description of `NewTerm`.
			pub struct EmptyTerm;
			impl ::subxt::events::StaticEvent for EmptyTerm {
				const PALLET: &'static str = "Elections";
				const EVENT: &'static str = "EmptyTerm";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Internal error happened while trying to perform election.
			pub struct ElectionError;
			impl ::subxt::events::StaticEvent for ElectionError {
				const PALLET: &'static str = "Elections";
				const EVENT: &'static str = "ElectionError";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A member has been removed. This should always be followed by either `NewTerm` or
			///`EmptyTerm`.
			pub struct MemberKicked {
				pub member: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for MemberKicked {
				const PALLET: &'static str = "Elections";
				const EVENT: &'static str = "MemberKicked";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Someone has renounced their candidacy.
			pub struct Renounced {
				pub candidate: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Renounced {
				const PALLET: &'static str = "Elections";
				const EVENT: &'static str = "Renounced";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A candidate was slashed by amount due to failing to obtain a seat as member or
			///runner-up.
			///
			///Note that old members and runners-up are also candidates.
			pub struct CandidateSlashed {
				pub candidate: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for CandidateSlashed {
				const PALLET: &'static str = "Elections";
				const EVENT: &'static str = "CandidateSlashed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A seat holder was slashed by amount by being forcefully removed from the set.
			pub struct SeatHolderSlashed {
				pub seat_holder: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for SeatHolderSlashed {
				const PALLET: &'static str = "Elections";
				const EVENT: &'static str = "SeatHolderSlashed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The current elected members.
				///
				/// Invariant: Always sorted based on account id.
				pub fn members(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<
						runtime_types::pallet_elections_phragmen::SeatHolder<
							::subxt::utils::AccountId32,
							::core::primitive::u128,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Elections",
						"Members",
						vec![],
						[
							2u8, 182u8, 43u8, 180u8, 87u8, 185u8, 26u8, 79u8, 196u8, 55u8, 28u8,
							26u8, 174u8, 133u8, 158u8, 221u8, 101u8, 161u8, 83u8, 9u8, 221u8,
							175u8, 221u8, 220u8, 81u8, 80u8, 1u8, 236u8, 74u8, 121u8, 10u8, 82u8,
						],
					)
				}
				/// The current reserved runners-up.
				///
				/// Invariant: Always sorted based on rank (worse to best). Upon removal of a
				/// member, the last (i.e. _best_) runner-up will be replaced.
				pub fn runners_up(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<
						runtime_types::pallet_elections_phragmen::SeatHolder<
							::subxt::utils::AccountId32,
							::core::primitive::u128,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Elections",
						"RunnersUp",
						vec![],
						[
							248u8, 81u8, 190u8, 53u8, 121u8, 49u8, 55u8, 69u8, 116u8, 177u8, 46u8,
							30u8, 131u8, 14u8, 32u8, 198u8, 10u8, 132u8, 73u8, 117u8, 2u8, 146u8,
							188u8, 146u8, 214u8, 227u8, 97u8, 77u8, 7u8, 131u8, 208u8, 209u8,
						],
					)
				}
				/// The present candidate list. A current member or runner-up can never enter this
				/// vector and is always implicitly assumed to be a candidate.
				///
				/// Second element is the deposit.
				///
				/// Invariant: Always sorted based on account id.
				pub fn candidates(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<(::subxt::utils::AccountId32, ::core::primitive::u128)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Elections",
						"Candidates",
						vec![],
						[
							224u8, 107u8, 141u8, 11u8, 54u8, 86u8, 117u8, 45u8, 195u8, 252u8,
							152u8, 21u8, 165u8, 23u8, 198u8, 117u8, 5u8, 216u8, 183u8, 163u8,
							243u8, 56u8, 11u8, 102u8, 85u8, 107u8, 219u8, 250u8, 45u8, 80u8, 108u8,
							127u8,
						],
					)
				}
				/// The total number of vote rounds that have happened, excluding the upcoming one.
				pub fn election_rounds(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Elections",
						"ElectionRounds",
						vec![],
						[
							144u8, 146u8, 10u8, 32u8, 149u8, 147u8, 59u8, 205u8, 61u8, 246u8, 28u8,
							169u8, 130u8, 136u8, 143u8, 104u8, 253u8, 86u8, 228u8, 68u8, 19u8,
							184u8, 166u8, 214u8, 58u8, 103u8, 176u8, 160u8, 240u8, 249u8, 117u8,
							115u8,
						],
					)
				}
				/// Votes and locked stake of a particular voter.
				///
				/// TWOX-NOTE: SAFE as `AccountId` is a crypto hash.
				pub fn voting(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_elections_phragmen::Voter<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Elections",
						"Voting",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							9u8, 135u8, 76u8, 194u8, 240u8, 182u8, 111u8, 207u8, 102u8, 37u8,
							126u8, 36u8, 84u8, 112u8, 26u8, 216u8, 175u8, 5u8, 14u8, 189u8, 83u8,
							185u8, 136u8, 39u8, 171u8, 221u8, 147u8, 20u8, 168u8, 126u8, 111u8,
							137u8,
						],
					)
				}
				/// Votes and locked stake of a particular voter.
				///
				/// TWOX-NOTE: SAFE as `AccountId` is a crypto hash.
				pub fn voting_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_elections_phragmen::Voter<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Elections",
						"Voting",
						Vec::new(),
						[
							9u8, 135u8, 76u8, 194u8, 240u8, 182u8, 111u8, 207u8, 102u8, 37u8,
							126u8, 36u8, 84u8, 112u8, 26u8, 216u8, 175u8, 5u8, 14u8, 189u8, 83u8,
							185u8, 136u8, 39u8, 171u8, 221u8, 147u8, 20u8, 168u8, 126u8, 111u8,
							137u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// Identifier for the elections-phragmen pallet's lock
				pub fn pallet_id(
					&self,
				) -> ::subxt::constants::Address<[::core::primitive::u8; 8usize]> {
					::subxt::constants::Address::new_static(
						"Elections",
						"PalletId",
						[
							224u8, 197u8, 247u8, 125u8, 62u8, 180u8, 69u8, 91u8, 226u8, 36u8, 82u8,
							148u8, 70u8, 147u8, 209u8, 40u8, 210u8, 229u8, 181u8, 191u8, 170u8,
							205u8, 138u8, 97u8, 127u8, 59u8, 124u8, 244u8, 252u8, 30u8, 213u8,
							179u8,
						],
					)
				}
				/// How much should be locked up in order to submit one's candidacy.
				pub fn candidacy_bond(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Elections",
						"CandidacyBond",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// Base deposit associated with voting.
				///
				/// This should be sensibly high to economically ensure the pallet cannot be
				/// attacked by creating a gigantic number of votes.
				pub fn voting_bond_base(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Elections",
						"VotingBondBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The amount of bond that need to be locked for each vote (32 bytes).
				pub fn voting_bond_factor(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Elections",
						"VotingBondFactor",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// Number of members to elect.
				pub fn desired_members(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Elections",
						"DesiredMembers",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Number of runners_up to keep.
				pub fn desired_runners_up(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Elections",
						"DesiredRunnersUp",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// How long each seat is kept. This defines the next block number at which an
				/// election round will happen. If set to zero, no elections are ever triggered and
				/// the module will be in passive mode.
				pub fn term_duration(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Elections",
						"TermDuration",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum number of candidates in a phragmen election.
				///
				/// Warning: This impacts the size of the election which is run onchain. Chose
				/// wisely, and consider how it will impact `T::WeightInfo::election_phragmen`.
				///
				/// When this limit is reached no more candidates are accepted in the election.
				pub fn max_candidates(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Elections",
						"MaxCandidates",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum number of voters to allow in a phragmen election.
				///
				/// Warning: This impacts the size of the election which is run onchain. Chose
				/// wisely, and consider how it will impact `T::WeightInfo::election_phragmen`.
				///
				/// When the limit is reached the new voters are ignored.
				pub fn max_voters(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Elections",
						"MaxVoters",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Maximum numbers of votes per voter.
				///
				/// Warning: This impacts the size of the election which is run onchain. Chose
				/// wisely, and consider how it will impact `T::WeightInfo::election_phragmen`.
				pub fn max_votes_per_voter(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Elections",
						"MaxVotesPerVoter",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod technical_membership {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AddMember {
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemoveMember {
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SwapMember {
				pub remove: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub add: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ResetMembers {
				pub members: ::std::vec::Vec<::subxt::utils::AccountId32>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ChangeKey {
				pub new: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetPrime {
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClearPrime;
			pub struct TransactionApi;
			impl TransactionApi {
				///Add a member `who` to the set.
				///
				///May only be called from `T::AddOrigin`.
				pub fn add_member(
					&self,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<AddMember> {
					::subxt::tx::Payload::new_static(
						"TechnicalMembership",
						"add_member",
						AddMember { who },
						[
							168u8, 166u8, 6u8, 167u8, 12u8, 109u8, 99u8, 96u8, 240u8, 57u8, 60u8,
							174u8, 57u8, 52u8, 131u8, 16u8, 230u8, 172u8, 23u8, 140u8, 48u8, 131u8,
							73u8, 131u8, 133u8, 217u8, 137u8, 50u8, 165u8, 149u8, 174u8, 188u8,
						],
					)
				}
				///Remove a member `who` from the set.
				///
				///May only be called from `T::RemoveOrigin`.
				pub fn remove_member(
					&self,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<RemoveMember> {
					::subxt::tx::Payload::new_static(
						"TechnicalMembership",
						"remove_member",
						RemoveMember { who },
						[
							33u8, 178u8, 96u8, 158u8, 126u8, 172u8, 0u8, 207u8, 143u8, 144u8,
							219u8, 28u8, 205u8, 197u8, 192u8, 195u8, 141u8, 26u8, 39u8, 101u8,
							140u8, 88u8, 212u8, 26u8, 221u8, 29u8, 187u8, 160u8, 119u8, 101u8,
							45u8, 162u8,
						],
					)
				}
				///Swap out one member `remove` for another `add`.
				///
				///May only be called from `T::SwapOrigin`.
				///
				///Prime membership is *not* passed from `remove` to `add`, if extant.
				pub fn swap_member(
					&self,
					remove: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					add: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<SwapMember> {
					::subxt::tx::Payload::new_static(
						"TechnicalMembership",
						"swap_member",
						SwapMember { remove, add },
						[
							52u8, 10u8, 13u8, 175u8, 35u8, 141u8, 159u8, 135u8, 34u8, 235u8, 117u8,
							146u8, 134u8, 49u8, 76u8, 116u8, 93u8, 209u8, 24u8, 242u8, 123u8, 82u8,
							34u8, 192u8, 147u8, 237u8, 163u8, 167u8, 18u8, 64u8, 196u8, 132u8,
						],
					)
				}
				///Change the membership to a new set, disregarding the existing membership. Be
				/// nice and pass `members` pre-sorted.
				///
				///May only be called from `T::ResetOrigin`.
				pub fn reset_members(
					&self,
					members: ::std::vec::Vec<::subxt::utils::AccountId32>,
				) -> ::subxt::tx::Payload<ResetMembers> {
					::subxt::tx::Payload::new_static(
						"TechnicalMembership",
						"reset_members",
						ResetMembers { members },
						[
							9u8, 35u8, 28u8, 59u8, 158u8, 232u8, 89u8, 78u8, 101u8, 53u8, 240u8,
							98u8, 13u8, 104u8, 235u8, 161u8, 201u8, 150u8, 117u8, 32u8, 75u8,
							209u8, 166u8, 252u8, 57u8, 131u8, 96u8, 215u8, 51u8, 81u8, 42u8, 123u8,
						],
					)
				}
				///Swap out the sending member for some other key `new`.
				///
				///May only be called from `Signed` origin of a current member.
				///
				///Prime membership is passed from the origin account to `new`, if extant.
				pub fn change_key(
					&self,
					new: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<ChangeKey> {
					::subxt::tx::Payload::new_static(
						"TechnicalMembership",
						"change_key",
						ChangeKey { new },
						[
							202u8, 114u8, 208u8, 33u8, 254u8, 51u8, 31u8, 220u8, 229u8, 251u8,
							167u8, 149u8, 139u8, 131u8, 252u8, 100u8, 32u8, 20u8, 72u8, 97u8, 5u8,
							8u8, 25u8, 198u8, 95u8, 154u8, 73u8, 220u8, 46u8, 85u8, 162u8, 40u8,
						],
					)
				}
				///Set the prime member. Must be a current member.
				///
				///May only be called from `T::PrimeOrigin`.
				pub fn set_prime(
					&self,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<SetPrime> {
					::subxt::tx::Payload::new_static(
						"TechnicalMembership",
						"set_prime",
						SetPrime { who },
						[
							109u8, 16u8, 35u8, 72u8, 169u8, 141u8, 101u8, 209u8, 241u8, 218u8,
							170u8, 180u8, 37u8, 223u8, 249u8, 37u8, 168u8, 20u8, 130u8, 30u8,
							191u8, 157u8, 230u8, 156u8, 135u8, 73u8, 96u8, 98u8, 193u8, 44u8, 38u8,
							247u8,
						],
					)
				}
				///Remove the prime member if it exists.
				///
				///May only be called from `T::PrimeOrigin`.
				pub fn clear_prime(&self) -> ::subxt::tx::Payload<ClearPrime> {
					::subxt::tx::Payload::new_static(
						"TechnicalMembership",
						"clear_prime",
						ClearPrime {},
						[
							186u8, 182u8, 225u8, 90u8, 71u8, 124u8, 69u8, 100u8, 234u8, 25u8, 53u8,
							23u8, 182u8, 32u8, 176u8, 81u8, 54u8, 140u8, 235u8, 126u8, 247u8, 7u8,
							155u8, 62u8, 35u8, 135u8, 48u8, 61u8, 88u8, 160u8, 183u8, 72u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_membership::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The given member was added; see the transaction for who.
			pub struct MemberAdded;
			impl ::subxt::events::StaticEvent for MemberAdded {
				const PALLET: &'static str = "TechnicalMembership";
				const EVENT: &'static str = "MemberAdded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The given member was removed; see the transaction for who.
			pub struct MemberRemoved;
			impl ::subxt::events::StaticEvent for MemberRemoved {
				const PALLET: &'static str = "TechnicalMembership";
				const EVENT: &'static str = "MemberRemoved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Two members were swapped; see the transaction for who.
			pub struct MembersSwapped;
			impl ::subxt::events::StaticEvent for MembersSwapped {
				const PALLET: &'static str = "TechnicalMembership";
				const EVENT: &'static str = "MembersSwapped";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The membership was reset; see the transaction for who the new set is.
			pub struct MembersReset;
			impl ::subxt::events::StaticEvent for MembersReset {
				const PALLET: &'static str = "TechnicalMembership";
				const EVENT: &'static str = "MembersReset";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///One of the members' keys changed.
			pub struct KeyChanged;
			impl ::subxt::events::StaticEvent for KeyChanged {
				const PALLET: &'static str = "TechnicalMembership";
				const EVENT: &'static str = "KeyChanged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Phantom member, never used.
			pub struct Dummy;
			impl ::subxt::events::StaticEvent for Dummy {
				const PALLET: &'static str = "TechnicalMembership";
				const EVENT: &'static str = "Dummy";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The current membership, stored as an ordered Vec.
				pub fn members(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::subxt::utils::AccountId32,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalMembership",
						"Members",
						vec![],
						[
							56u8, 56u8, 29u8, 90u8, 26u8, 115u8, 252u8, 185u8, 37u8, 108u8, 16u8,
							46u8, 136u8, 139u8, 30u8, 19u8, 235u8, 78u8, 176u8, 129u8, 180u8, 57u8,
							178u8, 239u8, 211u8, 6u8, 64u8, 129u8, 195u8, 46u8, 178u8, 157u8,
						],
					)
				}
				/// The current prime member, if one exists.
				pub fn prime(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TechnicalMembership",
						"Prime",
						vec![],
						[
							108u8, 118u8, 54u8, 193u8, 207u8, 227u8, 119u8, 97u8, 23u8, 239u8,
							157u8, 69u8, 56u8, 142u8, 106u8, 17u8, 215u8, 159u8, 48u8, 42u8, 185u8,
							209u8, 49u8, 159u8, 32u8, 168u8, 111u8, 158u8, 159u8, 217u8, 244u8,
							158u8,
						],
					)
				}
			}
		}
	}
	pub mod grandpa {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ReportEquivocation {
				pub equivocation_proof: ::std::boxed::Box<
					runtime_types::sp_consensus_grandpa::EquivocationProof<
						::subxt::utils::H256,
						::core::primitive::u32,
					>,
				>,
				pub key_owner_proof: runtime_types::sp_session::MembershipProof,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ReportEquivocationUnsigned {
				pub equivocation_proof: ::std::boxed::Box<
					runtime_types::sp_consensus_grandpa::EquivocationProof<
						::subxt::utils::H256,
						::core::primitive::u32,
					>,
				>,
				pub key_owner_proof: runtime_types::sp_session::MembershipProof,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct NoteStalled {
				pub delay: ::core::primitive::u32,
				pub best_finalized_block_number: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Report voter equivocation/misbehavior. This method will verify the
				///equivocation proof and validate the given key ownership proof
				///against the extracted offender. If both are valid, the offence
				///will be reported.
				pub fn report_equivocation(
					&self,
					equivocation_proof: runtime_types::sp_consensus_grandpa::EquivocationProof<
						::subxt::utils::H256,
						::core::primitive::u32,
					>,
					key_owner_proof: runtime_types::sp_session::MembershipProof,
				) -> ::subxt::tx::Payload<ReportEquivocation> {
					::subxt::tx::Payload::new_static(
						"Grandpa",
						"report_equivocation",
						ReportEquivocation {
							equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
							key_owner_proof,
						},
						[
							156u8, 162u8, 189u8, 89u8, 60u8, 156u8, 129u8, 176u8, 62u8, 35u8,
							214u8, 7u8, 68u8, 245u8, 130u8, 117u8, 30u8, 3u8, 73u8, 218u8, 142u8,
							82u8, 13u8, 141u8, 124u8, 19u8, 53u8, 138u8, 70u8, 4u8, 40u8, 32u8,
						],
					)
				}
				///Report voter equivocation/misbehavior. This method will verify the
				///equivocation proof and validate the given key ownership proof
				///against the extracted offender. If both are valid, the offence
				///will be reported.
				///
				///This extrinsic must be called unsigned and it is expected that only
				///block authors will call it (validated in `ValidateUnsigned`), as such
				///if the block author is defined it will be defined as the equivocation
				///reporter.
				pub fn report_equivocation_unsigned(
					&self,
					equivocation_proof: runtime_types::sp_consensus_grandpa::EquivocationProof<
						::subxt::utils::H256,
						::core::primitive::u32,
					>,
					key_owner_proof: runtime_types::sp_session::MembershipProof,
				) -> ::subxt::tx::Payload<ReportEquivocationUnsigned> {
					::subxt::tx::Payload::new_static(
						"Grandpa",
						"report_equivocation_unsigned",
						ReportEquivocationUnsigned {
							equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
							key_owner_proof,
						},
						[
							166u8, 26u8, 217u8, 185u8, 215u8, 37u8, 174u8, 170u8, 137u8, 160u8,
							151u8, 43u8, 246u8, 86u8, 58u8, 18u8, 248u8, 73u8, 99u8, 161u8, 158u8,
							93u8, 212u8, 186u8, 224u8, 253u8, 234u8, 18u8, 151u8, 111u8, 227u8,
							249u8,
						],
					)
				}
				///Note that the current authority set of the GRANDPA finality gadget has stalled.
				///
				///This will trigger a forced authority set change at the beginning of the next
				/// session, to be enacted `delay` blocks after that. The `delay` should be high
				/// enough to safely assume that the block signalling the forced change will not be
				/// re-orged e.g. 1000 blocks. The block production rate (which may be slowed down
				/// because of finality lagging) should be taken into account when choosing the
				/// `delay`. The GRANDPA voters based on the new authority will start voting on top
				/// of `best_finalized_block_number` for new finalized
				/// blocks. `best_finalized_block_number` should be the highest of the latest
				/// finalized block of all validators of the new authority set.
				///
				///Only callable by root.
				pub fn note_stalled(
					&self,
					delay: ::core::primitive::u32,
					best_finalized_block_number: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<NoteStalled> {
					::subxt::tx::Payload::new_static(
						"Grandpa",
						"note_stalled",
						NoteStalled { delay, best_finalized_block_number },
						[
							197u8, 236u8, 137u8, 32u8, 46u8, 200u8, 144u8, 13u8, 89u8, 181u8,
							235u8, 73u8, 167u8, 131u8, 174u8, 93u8, 42u8, 136u8, 238u8, 59u8,
							129u8, 60u8, 83u8, 100u8, 5u8, 182u8, 99u8, 250u8, 145u8, 180u8, 1u8,
							199u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_grandpa::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///New authority set has been applied.
			pub struct NewAuthorities {
				pub authority_set: ::std::vec::Vec<(
					runtime_types::sp_consensus_grandpa::app::Public,
					::core::primitive::u64,
				)>,
			}
			impl ::subxt::events::StaticEvent for NewAuthorities {
				const PALLET: &'static str = "Grandpa";
				const EVENT: &'static str = "NewAuthorities";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Current authority set has been paused.
			pub struct Paused;
			impl ::subxt::events::StaticEvent for Paused {
				const PALLET: &'static str = "Grandpa";
				const EVENT: &'static str = "Paused";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Current authority set has been resumed.
			pub struct Resumed;
			impl ::subxt::events::StaticEvent for Resumed {
				const PALLET: &'static str = "Grandpa";
				const EVENT: &'static str = "Resumed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// State of the current authority set.
				pub fn state(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_grandpa::StoredState<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Grandpa",
						"State",
						vec![],
						[
							211u8, 149u8, 114u8, 217u8, 206u8, 194u8, 115u8, 67u8, 12u8, 218u8,
							246u8, 213u8, 208u8, 29u8, 216u8, 104u8, 2u8, 39u8, 123u8, 172u8,
							252u8, 210u8, 52u8, 129u8, 147u8, 237u8, 244u8, 68u8, 252u8, 169u8,
							97u8, 148u8,
						],
					)
				}
				/// Pending change: (signaled at, scheduled change).
				pub fn pending_change(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_grandpa::StoredPendingChange<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Grandpa",
						"PendingChange",
						vec![],
						[
							178u8, 24u8, 140u8, 7u8, 8u8, 196u8, 18u8, 58u8, 3u8, 226u8, 181u8,
							47u8, 155u8, 160u8, 70u8, 12u8, 75u8, 189u8, 38u8, 255u8, 104u8, 141u8,
							64u8, 34u8, 134u8, 201u8, 102u8, 21u8, 75u8, 81u8, 218u8, 60u8,
						],
					)
				}
				/// next block number where we can force a change.
				pub fn next_forced(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Grandpa",
						"NextForced",
						vec![],
						[
							99u8, 43u8, 245u8, 201u8, 60u8, 9u8, 122u8, 99u8, 188u8, 29u8, 67u8,
							6u8, 193u8, 133u8, 179u8, 67u8, 202u8, 208u8, 62u8, 179u8, 19u8, 169u8,
							196u8, 119u8, 107u8, 75u8, 100u8, 3u8, 121u8, 18u8, 80u8, 156u8,
						],
					)
				}
				/// `true` if we are currently stalled.
				pub fn stalled(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(::core::primitive::u32, ::core::primitive::u32),
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Grandpa",
						"Stalled",
						vec![],
						[
							219u8, 8u8, 37u8, 78u8, 150u8, 55u8, 0u8, 57u8, 201u8, 170u8, 186u8,
							189u8, 56u8, 161u8, 44u8, 15u8, 53u8, 178u8, 224u8, 208u8, 231u8,
							109u8, 14u8, 209u8, 57u8, 205u8, 237u8, 153u8, 231u8, 156u8, 24u8,
							185u8,
						],
					)
				}
				/// The number of changes (both in terms of keys and underlying economic
				/// responsibilities) in the "set" of Grandpa validators from genesis.
				pub fn current_set_id(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u64,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Grandpa",
						"CurrentSetId",
						vec![],
						[
							129u8, 7u8, 62u8, 101u8, 199u8, 60u8, 56u8, 33u8, 54u8, 158u8, 20u8,
							178u8, 244u8, 145u8, 189u8, 197u8, 157u8, 163u8, 116u8, 36u8, 105u8,
							52u8, 149u8, 244u8, 108u8, 94u8, 109u8, 111u8, 244u8, 137u8, 7u8,
							108u8,
						],
					)
				}
				/// A mapping from grandpa set ID to the index of the *most recent* session for
				/// which its members were responsible.
				///
				/// This is only used for validating equivocation proofs. An equivocation proof must
				/// contains a key-ownership proof for a given session, therefore we need a way to
				/// tie together sessions and GRANDPA set ids, i.e. we need to validate that a
				/// validator was the owner of a given key on a given session, and what the active
				/// set ID was during that session.
				///
				/// TWOX-NOTE: `SetId` is not under user control.
				pub fn set_id_session(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u64>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Grandpa",
						"SetIdSession",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							91u8, 175u8, 145u8, 127u8, 242u8, 81u8, 13u8, 231u8, 110u8, 11u8,
							166u8, 169u8, 103u8, 146u8, 123u8, 133u8, 157u8, 15u8, 33u8, 234u8,
							108u8, 13u8, 88u8, 115u8, 254u8, 9u8, 145u8, 199u8, 102u8, 47u8, 53u8,
							134u8,
						],
					)
				}
				/// A mapping from grandpa set ID to the index of the *most recent* session for
				/// which its members were responsible.
				///
				/// This is only used for validating equivocation proofs. An equivocation proof must
				/// contains a key-ownership proof for a given session, therefore we need a way to
				/// tie together sessions and GRANDPA set ids, i.e. we need to validate that a
				/// validator was the owner of a given key on a given session, and what the active
				/// set ID was during that session.
				///
				/// TWOX-NOTE: `SetId` is not under user control.
				pub fn set_id_session_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Grandpa",
						"SetIdSession",
						Vec::new(),
						[
							91u8, 175u8, 145u8, 127u8, 242u8, 81u8, 13u8, 231u8, 110u8, 11u8,
							166u8, 169u8, 103u8, 146u8, 123u8, 133u8, 157u8, 15u8, 33u8, 234u8,
							108u8, 13u8, 88u8, 115u8, 254u8, 9u8, 145u8, 199u8, 102u8, 47u8, 53u8,
							134u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// Max Authorities in use
				pub fn max_authorities(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Grandpa",
						"MaxAuthorities",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum number of entries to keep in the set id to session index mapping.
				///
				/// Since the `SetIdSession` map is only used for validating equivocations this
				/// value should relate to the bonding duration of whatever staking system is
				/// being used (if any). If equivocation handling is not enabled then this value
				/// can be zero.
				pub fn max_set_id_session_entries(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u64> {
					::subxt::constants::Address::new_static(
						"Grandpa",
						"MaxSetIdSessionEntries",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
			}
		}
	}
	pub mod treasury {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ProposeSpend {
				#[codec(compact)]
				pub value: ::core::primitive::u128,
				pub beneficiary: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RejectProposal {
				#[codec(compact)]
				pub proposal_id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ApproveProposal {
				#[codec(compact)]
				pub proposal_id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Spend {
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
				pub beneficiary: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemoveApproval {
				#[codec(compact)]
				pub proposal_id: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Put forward a suggestion for spending. A deposit proportional to the value
				///is reserved and slashed if the proposal is rejected. It is returned once the
				///proposal is awarded.
				///
				///## Complexity
				/// - O(1)
				pub fn propose_spend(
					&self,
					value: ::core::primitive::u128,
					beneficiary: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<ProposeSpend> {
					::subxt::tx::Payload::new_static(
						"Treasury",
						"propose_spend",
						ProposeSpend { value, beneficiary },
						[
							124u8, 32u8, 83u8, 127u8, 240u8, 169u8, 3u8, 190u8, 235u8, 163u8, 23u8,
							29u8, 88u8, 242u8, 238u8, 187u8, 136u8, 75u8, 193u8, 192u8, 239u8, 2u8,
							54u8, 238u8, 147u8, 42u8, 91u8, 14u8, 244u8, 175u8, 41u8, 14u8,
						],
					)
				}
				///Reject a proposed spend. The original deposit will be slashed.
				///
				///May only be called from `T::RejectOrigin`.
				///
				///## Complexity
				/// - O(1)
				pub fn reject_proposal(
					&self,
					proposal_id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<RejectProposal> {
					::subxt::tx::Payload::new_static(
						"Treasury",
						"reject_proposal",
						RejectProposal { proposal_id },
						[
							106u8, 223u8, 97u8, 22u8, 111u8, 208u8, 128u8, 26u8, 198u8, 140u8,
							118u8, 126u8, 187u8, 51u8, 193u8, 50u8, 193u8, 68u8, 143u8, 144u8,
							34u8, 132u8, 44u8, 244u8, 105u8, 186u8, 223u8, 234u8, 17u8, 145u8,
							209u8, 145u8,
						],
					)
				}
				///Approve a proposal. At a later time, the proposal will be allocated to the
				/// beneficiary and the original deposit will be returned.
				///
				///May only be called from `T::ApproveOrigin`.
				///
				///## Complexity
				/// - O(1).
				pub fn approve_proposal(
					&self,
					proposal_id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<ApproveProposal> {
					::subxt::tx::Payload::new_static(
						"Treasury",
						"approve_proposal",
						ApproveProposal { proposal_id },
						[
							164u8, 229u8, 172u8, 98u8, 129u8, 62u8, 84u8, 128u8, 47u8, 108u8, 33u8,
							120u8, 89u8, 79u8, 57u8, 121u8, 4u8, 197u8, 170u8, 153u8, 156u8, 17u8,
							59u8, 164u8, 123u8, 227u8, 175u8, 195u8, 220u8, 160u8, 60u8, 186u8,
						],
					)
				}
				///Propose and approve a spend of treasury funds.
				///
				/// - `origin`: Must be `SpendOrigin` with the `Success` value being at least
				///   `amount`.
				/// - `amount`: The amount to be transferred from the treasury to the `beneficiary`.
				/// - `beneficiary`: The destination account for the transfer.
				///
				///NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to
				/// the beneficiary.
				pub fn spend(
					&self,
					amount: ::core::primitive::u128,
					beneficiary: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<Spend> {
					::subxt::tx::Payload::new_static(
						"Treasury",
						"spend",
						Spend { amount, beneficiary },
						[
							208u8, 79u8, 96u8, 218u8, 205u8, 209u8, 165u8, 119u8, 92u8, 208u8,
							54u8, 168u8, 83u8, 190u8, 98u8, 97u8, 6u8, 2u8, 35u8, 249u8, 18u8,
							88u8, 193u8, 51u8, 130u8, 33u8, 28u8, 99u8, 49u8, 194u8, 34u8, 77u8,
						],
					)
				}
				///Force a previously approved proposal to be removed from the approval queue.
				///The original deposit will no longer be returned.
				///
				///May only be called from `T::RejectOrigin`.
				/// - `proposal_id`: The index of a proposal
				///
				///## Complexity
				/// - O(A) where `A` is the number of approvals
				///
				///Errors:
				/// - `ProposalNotApproved`: The `proposal_id` supplied was not found in the
				///   approval queue,
				///i.e., the proposal has not been approved. This could also mean the proposal does
				/// not exist altogether, thus there is no way it would have been approved in the
				/// first place.
				pub fn remove_approval(
					&self,
					proposal_id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<RemoveApproval> {
					::subxt::tx::Payload::new_static(
						"Treasury",
						"remove_approval",
						RemoveApproval { proposal_id },
						[
							133u8, 126u8, 181u8, 47u8, 196u8, 243u8, 7u8, 46u8, 25u8, 251u8, 154u8,
							125u8, 217u8, 77u8, 54u8, 245u8, 240u8, 180u8, 97u8, 34u8, 186u8, 53u8,
							225u8, 144u8, 155u8, 107u8, 172u8, 54u8, 250u8, 184u8, 178u8, 86u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_treasury::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///New proposal.
			pub struct Proposed {
				pub proposal_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Proposed {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///We have ended a spend period and will now allocate funds.
			pub struct Spending {
				pub budget_remaining: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Spending {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Spending";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some funds have been allocated.
			pub struct Awarded {
				pub proposal_index: ::core::primitive::u32,
				pub award: ::core::primitive::u128,
				pub account: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Awarded {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Awarded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A proposal was rejected; funds were slashed.
			pub struct Rejected {
				pub proposal_index: ::core::primitive::u32,
				pub slashed: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Rejected {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Rejected";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some of our funds have been burnt.
			pub struct Burnt {
				pub burnt_funds: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Burnt {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Burnt";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Spending has finished; this is the amount that rolls over until next spend.
			pub struct Rollover {
				pub rollover_balance: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Rollover {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Rollover";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some funds have been deposited.
			pub struct Deposit {
				pub value: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Deposit {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Deposit";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A new spend proposal has been approved.
			pub struct SpendApproved {
				pub proposal_index: ::core::primitive::u32,
				pub amount: ::core::primitive::u128,
				pub beneficiary: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for SpendApproved {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "SpendApproved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The inactive funds of the pallet have been updated.
			pub struct UpdatedInactive {
				pub reactivated: ::core::primitive::u128,
				pub deactivated: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for UpdatedInactive {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "UpdatedInactive";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// Number of proposals that have been made.
				pub fn proposal_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Treasury",
						"ProposalCount",
						vec![],
						[
							132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8, 172u8, 143u8, 33u8,
							140u8, 99u8, 124u8, 208u8, 57u8, 232u8, 154u8, 110u8, 32u8, 142u8,
							24u8, 149u8, 109u8, 105u8, 30u8, 83u8, 39u8, 177u8, 127u8, 160u8, 34u8,
							70u8,
						],
					)
				}
				/// Proposals that have been made.
				pub fn proposals(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_treasury::Proposal<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Treasury",
						"Proposals",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							62u8, 223u8, 55u8, 209u8, 151u8, 134u8, 122u8, 65u8, 207u8, 38u8,
							113u8, 213u8, 237u8, 48u8, 129u8, 32u8, 91u8, 228u8, 108u8, 91u8, 37u8,
							49u8, 94u8, 4u8, 75u8, 122u8, 25u8, 34u8, 198u8, 224u8, 246u8, 160u8,
						],
					)
				}
				/// Proposals that have been made.
				pub fn proposals_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_treasury::Proposal<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Treasury",
						"Proposals",
						Vec::new(),
						[
							62u8, 223u8, 55u8, 209u8, 151u8, 134u8, 122u8, 65u8, 207u8, 38u8,
							113u8, 213u8, 237u8, 48u8, 129u8, 32u8, 91u8, 228u8, 108u8, 91u8, 37u8,
							49u8, 94u8, 4u8, 75u8, 122u8, 25u8, 34u8, 198u8, 224u8, 246u8, 160u8,
						],
					)
				}
				/// The amount which has been reported as inactive to Currency.
				pub fn deactivated(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Treasury",
						"Deactivated",
						vec![],
						[
							159u8, 57u8, 5u8, 85u8, 136u8, 128u8, 70u8, 43u8, 67u8, 76u8, 123u8,
							206u8, 48u8, 253u8, 51u8, 40u8, 14u8, 35u8, 162u8, 173u8, 127u8, 79u8,
							38u8, 235u8, 9u8, 141u8, 201u8, 37u8, 211u8, 176u8, 119u8, 106u8,
						],
					)
				}
				/// Proposal indices that have been approved but not yet awarded.
				pub fn approvals(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u32,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Treasury",
						"Approvals",
						vec![],
						[
							202u8, 106u8, 189u8, 40u8, 127u8, 172u8, 108u8, 50u8, 193u8, 4u8,
							248u8, 226u8, 176u8, 101u8, 212u8, 222u8, 64u8, 206u8, 244u8, 175u8,
							111u8, 106u8, 86u8, 96u8, 19u8, 109u8, 218u8, 152u8, 30u8, 59u8, 96u8,
							1u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// Fraction of a proposal's value that should be bonded in order to place the
				/// proposal. An accepted proposal gets these back. A rejected proposal does not.
				pub fn proposal_bond(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Permill>
				{
					::subxt::constants::Address::new_static(
						"Treasury",
						"ProposalBond",
						[
							225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8, 192u8, 254u8, 19u8, 87u8,
							80u8, 16u8, 62u8, 42u8, 204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
							177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8, 86u8, 227u8,
						],
					)
				}
				/// Minimum amount of funds that should be placed in a deposit for making a
				/// proposal.
				pub fn proposal_bond_minimum(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Treasury",
						"ProposalBondMinimum",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// Maximum amount of funds that should be placed in a deposit for making a
				/// proposal.
				pub fn proposal_bond_maximum(
					&self,
				) -> ::subxt::constants::Address<::core::option::Option<::core::primitive::u128>> {
					::subxt::constants::Address::new_static(
						"Treasury",
						"ProposalBondMaximum",
						[
							84u8, 154u8, 218u8, 83u8, 84u8, 189u8, 32u8, 20u8, 120u8, 194u8, 88u8,
							205u8, 109u8, 216u8, 114u8, 193u8, 120u8, 198u8, 154u8, 237u8, 134u8,
							204u8, 102u8, 247u8, 52u8, 103u8, 231u8, 43u8, 243u8, 122u8, 60u8,
							216u8,
						],
					)
				}
				/// Period between successive spends.
				pub fn spend_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Treasury",
						"SpendPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Percentage of spare funds (if any) that are burnt per spend period.
				pub fn burn(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Permill>
				{
					::subxt::constants::Address::new_static(
						"Treasury",
						"Burn",
						[
							225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8, 192u8, 254u8, 19u8, 87u8,
							80u8, 16u8, 62u8, 42u8, 204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
							177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8, 86u8, 227u8,
						],
					)
				}
				/// The treasury's pallet id, used for deriving its sovereign account ID.
				pub fn pallet_id(
					&self,
				) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId> {
					::subxt::constants::Address::new_static(
						"Treasury",
						"PalletId",
						[
							139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
							174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
							9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
						],
					)
				}
				/// The maximum number of approvals that can wait in the spending queue.
				///
				/// NOTE: This parameter is also used within the Bounties Pallet extension if
				/// enabled.
				pub fn max_approvals(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Treasury",
						"MaxApprovals",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod sudo {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Sudo {
				pub call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SudoUncheckedWeight {
				pub call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
				pub weight: runtime_types::sp_weights::weight_v2::Weight,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetKey {
				pub new: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SudoAs {
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Authenticates the sudo key and dispatches a function call with `Root` origin.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				///## Complexity
				/// - O(1).
				pub fn sudo(
					&self,
					call: runtime_types::babe_runtime::RuntimeCall,
				) -> ::subxt::tx::Payload<Sudo> {
					::subxt::tx::Payload::new_static(
						"Sudo",
						"sudo",
						Sudo { call: ::std::boxed::Box::new(call) },
						[
							91u8, 102u8, 54u8, 29u8, 215u8, 69u8, 1u8, 43u8, 236u8, 218u8, 50u8,
							154u8, 143u8, 51u8, 17u8, 41u8, 252u8, 170u8, 9u8, 122u8, 199u8, 242u8,
							241u8, 104u8, 71u8, 56u8, 93u8, 83u8, 156u8, 152u8, 40u8, 162u8,
						],
					)
				}
				///Authenticates the sudo key and dispatches a function call with `Root` origin.
				///This function does not check the weight of the call, and instead allows the
				///Sudo user to specify the weight of the call.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				///## Complexity
				/// - O(1).
				pub fn sudo_unchecked_weight(
					&self,
					call: runtime_types::babe_runtime::RuntimeCall,
					weight: runtime_types::sp_weights::weight_v2::Weight,
				) -> ::subxt::tx::Payload<SudoUncheckedWeight> {
					::subxt::tx::Payload::new_static(
						"Sudo",
						"sudo_unchecked_weight",
						SudoUncheckedWeight { call: ::std::boxed::Box::new(call), weight },
						[
							55u8, 82u8, 89u8, 72u8, 246u8, 239u8, 162u8, 125u8, 191u8, 165u8,
							172u8, 201u8, 134u8, 155u8, 67u8, 204u8, 188u8, 29u8, 251u8, 255u8,
							159u8, 62u8, 53u8, 173u8, 94u8, 100u8, 130u8, 241u8, 96u8, 104u8, 46u8,
							42u8,
						],
					)
				}
				///Authenticates the current sudo key and sets the given AccountId (`new`) as the
				/// new sudo key.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				///## Complexity
				/// - O(1).
				pub fn set_key(
					&self,
					new: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<SetKey> {
					::subxt::tx::Payload::new_static(
						"Sudo",
						"set_key",
						SetKey { new },
						[
							34u8, 116u8, 170u8, 18u8, 106u8, 17u8, 231u8, 159u8, 110u8, 246u8, 2u8,
							27u8, 161u8, 155u8, 163u8, 41u8, 138u8, 7u8, 81u8, 98u8, 230u8, 182u8,
							23u8, 222u8, 240u8, 117u8, 173u8, 232u8, 192u8, 55u8, 92u8, 208u8,
						],
					)
				}
				///Authenticates the sudo key and dispatches a function call with `Signed` origin
				/// from a given account.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				///## Complexity
				/// - O(1).
				pub fn sudo_as(
					&self,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					call: runtime_types::babe_runtime::RuntimeCall,
				) -> ::subxt::tx::Payload<SudoAs> {
					::subxt::tx::Payload::new_static(
						"Sudo",
						"sudo_as",
						SudoAs { who, call: ::std::boxed::Box::new(call) },
						[
							125u8, 85u8, 141u8, 22u8, 109u8, 74u8, 132u8, 87u8, 249u8, 170u8,
							120u8, 126u8, 216u8, 60u8, 177u8, 153u8, 126u8, 101u8, 205u8, 244u8,
							172u8, 46u8, 211u8, 74u8, 209u8, 159u8, 202u8, 86u8, 49u8, 11u8, 136u8,
							25u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_sudo::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A sudo just took place. \[result\]
			pub struct Sudid {
				pub sudo_result:
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for Sudid {
				const PALLET: &'static str = "Sudo";
				const EVENT: &'static str = "Sudid";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The \[sudoer\] just switched identity; the old key is supplied if one existed.
			pub struct KeyChanged {
				pub old_sudoer: ::core::option::Option<::subxt::utils::AccountId32>,
			}
			impl ::subxt::events::StaticEvent for KeyChanged {
				const PALLET: &'static str = "Sudo";
				const EVENT: &'static str = "KeyChanged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A sudo just took place. \[result\]
			pub struct SudoAsDone {
				pub sudo_result:
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for SudoAsDone {
				const PALLET: &'static str = "Sudo";
				const EVENT: &'static str = "SudoAsDone";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The `AccountId` of the sudo key.
				pub fn key(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Sudo",
						"Key",
						vec![],
						[
							244u8, 73u8, 188u8, 136u8, 218u8, 163u8, 68u8, 179u8, 122u8, 173u8,
							34u8, 108u8, 137u8, 28u8, 182u8, 16u8, 196u8, 92u8, 138u8, 34u8, 102u8,
							80u8, 199u8, 88u8, 107u8, 207u8, 36u8, 22u8, 168u8, 167u8, 20u8, 142u8,
						],
					)
				}
			}
		}
	}
	pub mod im_online {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Heartbeat {
				pub heartbeat: runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
				pub signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///## Complexity:
				/// - `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is
				///   length of
				///  `heartbeat.network_state.external_address`
				///  - `O(K)`: decoding of length `K`
				///  - `O(E)`: decoding/encoding of length `E`
				pub fn heartbeat(
					&self,
					heartbeat: runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
					signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
				) -> ::subxt::tx::Payload<Heartbeat> {
					::subxt::tx::Payload::new_static(
						"ImOnline",
						"heartbeat",
						Heartbeat { heartbeat, signature },
						[
							212u8, 23u8, 174u8, 246u8, 60u8, 220u8, 178u8, 137u8, 53u8, 146u8,
							165u8, 225u8, 179u8, 209u8, 233u8, 152u8, 129u8, 210u8, 126u8, 32u8,
							216u8, 22u8, 76u8, 196u8, 255u8, 128u8, 246u8, 161u8, 30u8, 186u8,
							249u8, 34u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_im_online::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A new heartbeat was received from `AuthorityId`.
			pub struct HeartbeatReceived {
				pub authority_id: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
			}
			impl ::subxt::events::StaticEvent for HeartbeatReceived {
				const PALLET: &'static str = "ImOnline";
				const EVENT: &'static str = "HeartbeatReceived";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///At the end of the session, no offence was committed.
			pub struct AllGood;
			impl ::subxt::events::StaticEvent for AllGood {
				const PALLET: &'static str = "ImOnline";
				const EVENT: &'static str = "AllGood";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///At the end of the session, at least one validator was found to be offline.
			pub struct SomeOffline {
				pub offline: ::std::vec::Vec<(
					::subxt::utils::AccountId32,
					runtime_types::pallet_staking::Exposure<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
				)>,
			}
			impl ::subxt::events::StaticEvent for SomeOffline {
				const PALLET: &'static str = "ImOnline";
				const EVENT: &'static str = "SomeOffline";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The block number after which it's ok to send heartbeats in the current
				/// session.
				///
				/// At the beginning of each session we set this to a value that should fall
				/// roughly in the middle of the session duration. The idea is to first wait for
				/// the validators to produce a block in the current session, so that the
				/// heartbeat later on will not be necessary.
				///
				/// This value will only be used as a fallback if we fail to get a proper session
				/// progress estimate from `NextSessionRotation`, as those estimates should be
				/// more accurate then the value we calculate for `HeartbeatAfter`.
				pub fn heartbeat_after(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ImOnline",
						"HeartbeatAfter",
						vec![],
						[
							108u8, 100u8, 85u8, 198u8, 226u8, 122u8, 94u8, 225u8, 97u8, 154u8,
							135u8, 95u8, 106u8, 28u8, 185u8, 78u8, 192u8, 196u8, 35u8, 191u8, 12u8,
							19u8, 163u8, 46u8, 232u8, 235u8, 193u8, 81u8, 126u8, 204u8, 25u8,
							228u8,
						],
					)
				}
				/// The current set of keys that may issue a heartbeat.
				pub fn keys(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
						runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ImOnline",
						"Keys",
						vec![],
						[
							6u8, 198u8, 221u8, 58u8, 14u8, 166u8, 245u8, 103u8, 191u8, 20u8, 69u8,
							233u8, 147u8, 245u8, 24u8, 64u8, 207u8, 180u8, 39u8, 208u8, 252u8,
							236u8, 247u8, 112u8, 187u8, 97u8, 70u8, 11u8, 248u8, 148u8, 208u8,
							106u8,
						],
					)
				}
				/// For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to
				/// `WrapperOpaque<BoundedOpaqueNetworkState>`.
				pub fn received_heartbeats(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::frame_support::traits::misc::WrapperOpaque<
						runtime_types::pallet_im_online::BoundedOpaqueNetworkState,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ImOnline",
						"ReceivedHeartbeats",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							233u8, 128u8, 140u8, 233u8, 55u8, 146u8, 172u8, 54u8, 54u8, 57u8,
							141u8, 106u8, 168u8, 59u8, 147u8, 253u8, 119u8, 48u8, 50u8, 251u8,
							242u8, 109u8, 251u8, 2u8, 136u8, 80u8, 146u8, 121u8, 180u8, 219u8,
							245u8, 37u8,
						],
					)
				}
				/// For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to
				/// `WrapperOpaque<BoundedOpaqueNetworkState>`.
				pub fn received_heartbeats_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::frame_support::traits::misc::WrapperOpaque<
						runtime_types::pallet_im_online::BoundedOpaqueNetworkState,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ImOnline",
						"ReceivedHeartbeats",
						Vec::new(),
						[
							233u8, 128u8, 140u8, 233u8, 55u8, 146u8, 172u8, 54u8, 54u8, 57u8,
							141u8, 106u8, 168u8, 59u8, 147u8, 253u8, 119u8, 48u8, 50u8, 251u8,
							242u8, 109u8, 251u8, 2u8, 136u8, 80u8, 146u8, 121u8, 180u8, 219u8,
							245u8, 37u8,
						],
					)
				}
				/// For each session index, we keep a mapping of `ValidatorId<T>` to the
				/// number of blocks authored by the given authority.
				pub fn authored_blocks(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ImOnline",
						"AuthoredBlocks",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							50u8, 4u8, 242u8, 240u8, 247u8, 184u8, 114u8, 245u8, 233u8, 170u8,
							24u8, 197u8, 18u8, 245u8, 8u8, 28u8, 33u8, 115u8, 166u8, 245u8, 221u8,
							223u8, 56u8, 144u8, 33u8, 139u8, 10u8, 227u8, 228u8, 223u8, 103u8,
							151u8,
						],
					)
				}
				/// For each session index, we keep a mapping of `ValidatorId<T>` to the
				/// number of blocks authored by the given authority.
				pub fn authored_blocks_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ImOnline",
						"AuthoredBlocks",
						Vec::new(),
						[
							50u8, 4u8, 242u8, 240u8, 247u8, 184u8, 114u8, 245u8, 233u8, 170u8,
							24u8, 197u8, 18u8, 245u8, 8u8, 28u8, 33u8, 115u8, 166u8, 245u8, 221u8,
							223u8, 56u8, 144u8, 33u8, 139u8, 10u8, 227u8, 228u8, 223u8, 103u8,
							151u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// A configuration for base priority of unsigned transactions.
				///
				/// This is exposed so that it can be tuned for particular runtime, when
				/// multiple pallets send unsigned transactions.
				pub fn unsigned_priority(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u64> {
					::subxt::constants::Address::new_static(
						"ImOnline",
						"UnsignedPriority",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
			}
		}
	}
	pub mod authority_discovery {
		use super::{root_mod, runtime_types};
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// Keys of the current authority set.
				pub fn keys(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
						runtime_types::sp_authority_discovery::app::Public,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"AuthorityDiscovery",
						"Keys",
						vec![],
						[
							6u8, 198u8, 221u8, 58u8, 14u8, 166u8, 245u8, 103u8, 191u8, 20u8, 69u8,
							233u8, 147u8, 245u8, 24u8, 64u8, 207u8, 180u8, 39u8, 208u8, 252u8,
							236u8, 247u8, 112u8, 187u8, 97u8, 70u8, 11u8, 248u8, 148u8, 208u8,
							106u8,
						],
					)
				}
				/// Keys of the next authority set.
				pub fn next_keys(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
						runtime_types::sp_authority_discovery::app::Public,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"AuthorityDiscovery",
						"NextKeys",
						vec![],
						[
							213u8, 94u8, 49u8, 159u8, 135u8, 1u8, 13u8, 150u8, 28u8, 15u8, 105u8,
							130u8, 90u8, 15u8, 130u8, 138u8, 186u8, 118u8, 10u8, 238u8, 173u8,
							229u8, 8u8, 144u8, 206u8, 121u8, 90u8, 203u8, 125u8, 106u8, 145u8,
							144u8,
						],
					)
				}
			}
		}
	}
	pub mod offences {
		use super::{root_mod, runtime_types};
		///Events type.
		pub type Event = runtime_types::pallet_offences::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///There is an offence reported of the given `kind` happened at the `session_index` and
			///(kind-specific) time slot. This event is not deposited for duplicate slashes.
			///\[kind, timeslot\].
			pub struct Offence {
				pub kind: [::core::primitive::u8; 16usize],
				pub timeslot: ::std::vec::Vec<::core::primitive::u8>,
			}
			impl ::subxt::events::StaticEvent for Offence {
				const PALLET: &'static str = "Offences";
				const EVENT: &'static str = "Offence";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The primary structure that holds all offence records keyed by report
				/// identifiers.
				pub fn reports(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::sp_staking::offence::OffenceDetails<
						::subxt::utils::AccountId32,
						(
							::subxt::utils::AccountId32,
							runtime_types::pallet_staking::Exposure<
								::subxt::utils::AccountId32,
								::core::primitive::u128,
							>,
						),
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Offences",
						"Reports",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							144u8, 30u8, 66u8, 199u8, 102u8, 236u8, 175u8, 201u8, 206u8, 170u8,
							55u8, 162u8, 137u8, 120u8, 220u8, 213u8, 57u8, 252u8, 0u8, 88u8, 210u8,
							68u8, 5u8, 25u8, 77u8, 114u8, 204u8, 23u8, 190u8, 32u8, 211u8, 30u8,
						],
					)
				}
				/// The primary structure that holds all offence records keyed by report
				/// identifiers.
				pub fn reports_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::sp_staking::offence::OffenceDetails<
						::subxt::utils::AccountId32,
						(
							::subxt::utils::AccountId32,
							runtime_types::pallet_staking::Exposure<
								::subxt::utils::AccountId32,
								::core::primitive::u128,
							>,
						),
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Offences",
						"Reports",
						Vec::new(),
						[
							144u8, 30u8, 66u8, 199u8, 102u8, 236u8, 175u8, 201u8, 206u8, 170u8,
							55u8, 162u8, 137u8, 120u8, 220u8, 213u8, 57u8, 252u8, 0u8, 88u8, 210u8,
							68u8, 5u8, 25u8, 77u8, 114u8, 204u8, 23u8, 190u8, 32u8, 211u8, 30u8,
						],
					)
				}
				/// A vector of reports of the same kind that happened at the same time slot.
				pub fn concurrent_reports_index(
					&self,
					_0: impl ::std::borrow::Borrow<[::core::primitive::u8; 16usize]>,
					_1: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::subxt::utils::H256>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Offences",
						"ConcurrentReportsIndex",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							106u8, 21u8, 104u8, 5u8, 4u8, 66u8, 28u8, 70u8, 161u8, 195u8, 238u8,
							28u8, 69u8, 241u8, 221u8, 113u8, 140u8, 103u8, 181u8, 143u8, 60u8,
							177u8, 13u8, 129u8, 224u8, 149u8, 77u8, 32u8, 75u8, 74u8, 101u8, 65u8,
						],
					)
				}
				/// A vector of reports of the same kind that happened at the same time slot.
				pub fn concurrent_reports_index_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::subxt::utils::H256>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Offences",
						"ConcurrentReportsIndex",
						Vec::new(),
						[
							106u8, 21u8, 104u8, 5u8, 4u8, 66u8, 28u8, 70u8, 161u8, 195u8, 238u8,
							28u8, 69u8, 241u8, 221u8, 113u8, 140u8, 103u8, 181u8, 143u8, 60u8,
							177u8, 13u8, 129u8, 224u8, 149u8, 77u8, 32u8, 75u8, 74u8, 101u8, 65u8,
						],
					)
				}
				/// Enumerates all reports of a kind along with the time they happened.
				///
				/// All reports are sorted by the time of offence.
				///
				/// Note that the actual type of this mapping is `Vec<u8>`, this is because values
				/// of different types are not supported at the moment so we are doing the manual
				/// serialization.
				pub fn reports_by_kind_index(
					&self,
					_0: impl ::std::borrow::Borrow<[::core::primitive::u8; 16usize]>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::core::primitive::u8>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Offences",
						"ReportsByKindIndex",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							162u8, 66u8, 131u8, 48u8, 250u8, 237u8, 179u8, 214u8, 36u8, 137u8,
							226u8, 136u8, 120u8, 61u8, 215u8, 43u8, 164u8, 50u8, 91u8, 164u8, 20u8,
							96u8, 189u8, 100u8, 242u8, 106u8, 21u8, 136u8, 98u8, 215u8, 180u8,
							145u8,
						],
					)
				}
				/// Enumerates all reports of a kind along with the time they happened.
				///
				/// All reports are sorted by the time of offence.
				///
				/// Note that the actual type of this mapping is `Vec<u8>`, this is because values
				/// of different types are not supported at the moment so we are doing the manual
				/// serialization.
				pub fn reports_by_kind_index_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::core::primitive::u8>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Offences",
						"ReportsByKindIndex",
						Vec::new(),
						[
							162u8, 66u8, 131u8, 48u8, 250u8, 237u8, 179u8, 214u8, 36u8, 137u8,
							226u8, 136u8, 120u8, 61u8, 215u8, 43u8, 164u8, 50u8, 91u8, 164u8, 20u8,
							96u8, 189u8, 100u8, 242u8, 106u8, 21u8, 136u8, 98u8, 215u8, 180u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod historical {
		use super::{root_mod, runtime_types};
	}
	pub mod randomness_collective_flip {
		use super::{root_mod, runtime_types};
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// Series of block headers from the last 81 blocks that acts as random seed
				/// material. This is arranged as a ring buffer with `block_number % 81` being the
				/// index into the `Vec` of the oldest hash.
				pub fn random_material(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::subxt::utils::H256,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"RandomnessCollectiveFlip",
						"RandomMaterial",
						vec![],
						[
							152u8, 126u8, 73u8, 88u8, 54u8, 147u8, 6u8, 19u8, 214u8, 40u8, 159u8,
							30u8, 236u8, 61u8, 240u8, 65u8, 178u8, 94u8, 146u8, 152u8, 135u8,
							252u8, 160u8, 86u8, 123u8, 114u8, 251u8, 140u8, 98u8, 143u8, 217u8,
							242u8,
						],
					)
				}
			}
		}
	}
	pub mod identity {
		use super::{root_mod, runtime_types};
		///Identity pallet declaration.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AddRegistrar {
				pub account: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetIdentity {
				pub info: ::std::boxed::Box<runtime_types::pallet_identity::types::IdentityInfo>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetSubs {
				pub subs: ::std::vec::Vec<(
					::subxt::utils::AccountId32,
					runtime_types::pallet_identity::types::Data,
				)>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClearIdentity;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RequestJudgement {
				#[codec(compact)]
				pub reg_index: ::core::primitive::u32,
				#[codec(compact)]
				pub max_fee: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CancelRequest {
				pub reg_index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetFee {
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				#[codec(compact)]
				pub fee: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetAccountId {
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				pub new: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetFields {
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				pub fields: runtime_types::pallet_identity::types::BitFlags<
					runtime_types::pallet_identity::types::IdentityField,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ProvideJudgement {
				#[codec(compact)]
				pub reg_index: ::core::primitive::u32,
				pub target: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub judgement:
					runtime_types::pallet_identity::types::Judgement<::core::primitive::u128>,
				pub identity: ::subxt::utils::H256,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct KillIdentity {
				pub target: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AddSub {
				pub sub: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub data: runtime_types::pallet_identity::types::Data,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RenameSub {
				pub sub: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub data: runtime_types::pallet_identity::types::Data,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemoveSub {
				pub sub: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct QuitSub;
			pub struct TransactionApi;
			impl TransactionApi {
				///Add a registrar to the system.
				///
				///The dispatch origin for this call must be `T::RegistrarOrigin`.
				///
				/// - `account`: the account of the registrar.
				///
				///Emits `RegistrarAdded` if successful.
				///
				///## Complexity
				/// - `O(R)` where `R` registrar-count (governance-bounded and code-bounded).
				pub fn add_registrar(
					&self,
					account: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<AddRegistrar> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"add_registrar",
						AddRegistrar { account },
						[
							96u8, 200u8, 92u8, 23u8, 3u8, 144u8, 56u8, 53u8, 245u8, 210u8, 33u8,
							36u8, 183u8, 233u8, 41u8, 1u8, 127u8, 2u8, 25u8, 5u8, 15u8, 133u8, 4u8,
							107u8, 206u8, 155u8, 114u8, 39u8, 14u8, 235u8, 115u8, 172u8,
						],
					)
				}
				///Set an account's identity information and reserve the appropriate deposit.
				///
				///If the account already has identity information, the deposit is taken as part
				/// payment for the new deposit.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				/// - `info`: The identity information.
				///
				///Emits `IdentitySet` if successful.
				///
				///## Complexity
				/// - `O(X + X' + R)`
				///  - where `X` additional-field-count (deposit-bounded and code-bounded)
				///  - where `R` judgements-count (registrar-count-bounded)
				pub fn set_identity(
					&self,
					info: runtime_types::pallet_identity::types::IdentityInfo,
				) -> ::subxt::tx::Payload<SetIdentity> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"set_identity",
						SetIdentity { info: ::std::boxed::Box::new(info) },
						[
							130u8, 89u8, 118u8, 6u8, 134u8, 166u8, 35u8, 192u8, 73u8, 6u8, 171u8,
							20u8, 225u8, 255u8, 152u8, 142u8, 111u8, 8u8, 206u8, 200u8, 64u8, 52u8,
							110u8, 123u8, 42u8, 101u8, 191u8, 242u8, 133u8, 139u8, 154u8, 205u8,
						],
					)
				}
				///Set the sub-accounts of the sender.
				///
				///Payment: Any aggregate balance reserved by previous `set_subs` calls will be
				/// returned and an amount `SubAccountDeposit` will be reserved for each item in
				/// `subs`.
				///
				///The dispatch origin for this call must be _Signed_ and the sender must have a
				/// registered identity.
				///
				/// - `subs`: The identity's (new) sub-accounts.
				///
				///## Complexity
				/// - `O(P + S)`
				///  - where `P` old-subs-count (hard- and deposit-bounded).
				///  - where `S` subs-count (hard- and deposit-bounded).
				pub fn set_subs(
					&self,
					subs: ::std::vec::Vec<(
						::subxt::utils::AccountId32,
						runtime_types::pallet_identity::types::Data,
					)>,
				) -> ::subxt::tx::Payload<SetSubs> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"set_subs",
						SetSubs { subs },
						[
							177u8, 219u8, 84u8, 183u8, 5u8, 32u8, 192u8, 82u8, 174u8, 68u8, 198u8,
							224u8, 56u8, 85u8, 134u8, 171u8, 30u8, 132u8, 140u8, 236u8, 117u8,
							24u8, 150u8, 218u8, 146u8, 194u8, 144u8, 92u8, 103u8, 206u8, 46u8,
							90u8,
						],
					)
				}
				///Clear an account's identity info and all sub-accounts and return all deposits.
				///
				///Payment: All reserved balances on the account are returned.
				///
				///The dispatch origin for this call must be _Signed_ and the sender must have a
				/// registered identity.
				///
				///Emits `IdentityCleared` if successful.
				///
				///## Complexity
				/// - `O(R + S + X)`
				///  - where `R` registrar-count (governance-bounded).
				///  - where `S` subs-count (hard- and deposit-bounded).
				///  - where `X` additional-field-count (deposit-bounded and code-bounded).
				pub fn clear_identity(&self) -> ::subxt::tx::Payload<ClearIdentity> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"clear_identity",
						ClearIdentity {},
						[
							75u8, 44u8, 74u8, 122u8, 149u8, 202u8, 114u8, 230u8, 0u8, 255u8, 140u8,
							122u8, 14u8, 196u8, 205u8, 249u8, 220u8, 94u8, 216u8, 34u8, 63u8, 14u8,
							8u8, 205u8, 74u8, 23u8, 181u8, 129u8, 252u8, 110u8, 231u8, 114u8,
						],
					)
				}
				///Request a judgement from a registrar.
				///
				///Payment: At most `max_fee` will be reserved for payment to the registrar if
				/// judgement given.
				///
				///The dispatch origin for this call must be _Signed_ and the sender must have a
				///registered identity.
				///
				/// - `reg_index`: The index of the registrar whose judgement is requested.
				/// - `max_fee`: The maximum fee that may be paid. This should just be
				///   auto-populated as:
				///
				///```nocompile
				/// Self::registrars().get(reg_index).unwrap().fee
				/// ```
				///
				///Emits `JudgementRequested` if successful.
				///
				///## Complexity
				/// - `O(R + X)`.
				///  - where `R` registrar-count (governance-bounded).
				///  - where `X` additional-field-count (deposit-bounded and code-bounded).
				pub fn request_judgement(
					&self,
					reg_index: ::core::primitive::u32,
					max_fee: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<RequestJudgement> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"request_judgement",
						RequestJudgement { reg_index, max_fee },
						[
							186u8, 149u8, 61u8, 54u8, 159u8, 194u8, 77u8, 161u8, 220u8, 157u8, 3u8,
							216u8, 23u8, 105u8, 119u8, 76u8, 144u8, 198u8, 157u8, 45u8, 235u8,
							139u8, 87u8, 82u8, 81u8, 12u8, 25u8, 134u8, 225u8, 92u8, 182u8, 101u8,
						],
					)
				}
				///Cancel a previous request.
				///
				///Payment: A previously reserved deposit is returned on success.
				///
				///The dispatch origin for this call must be _Signed_ and the sender must have a
				///registered identity.
				///
				/// - `reg_index`: The index of the registrar whose judgement is no longer
				///   requested.
				///
				///Emits `JudgementUnrequested` if successful.
				///
				///## Complexity
				/// - `O(R + X)`.
				///  - where `R` registrar-count (governance-bounded).
				///  - where `X` additional-field-count (deposit-bounded and code-bounded).
				pub fn cancel_request(
					&self,
					reg_index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<CancelRequest> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"cancel_request",
						CancelRequest { reg_index },
						[
							83u8, 180u8, 239u8, 126u8, 32u8, 51u8, 17u8, 20u8, 180u8, 3u8, 59u8,
							96u8, 24u8, 32u8, 136u8, 92u8, 58u8, 254u8, 68u8, 70u8, 50u8, 11u8,
							51u8, 91u8, 180u8, 79u8, 81u8, 84u8, 216u8, 138u8, 6u8, 215u8,
						],
					)
				}
				///Set the fee required for a judgement to be requested from a registrar.
				///
				///The dispatch origin for this call must be _Signed_ and the sender must be the
				/// account of the registrar whose index is `index`.
				///
				/// - `index`: the index of the registrar whose fee is to be set.
				/// - `fee`: the new fee.
				///
				///## Complexity
				/// - `O(R)`.
				///  - where `R` registrar-count (governance-bounded).
				pub fn set_fee(
					&self,
					index: ::core::primitive::u32,
					fee: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<SetFee> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"set_fee",
						SetFee { index, fee },
						[
							21u8, 157u8, 123u8, 182u8, 160u8, 190u8, 117u8, 37u8, 136u8, 133u8,
							104u8, 234u8, 31u8, 145u8, 115u8, 154u8, 125u8, 40u8, 2u8, 87u8, 118u8,
							56u8, 247u8, 73u8, 89u8, 0u8, 251u8, 3u8, 58u8, 105u8, 239u8, 211u8,
						],
					)
				}
				///Change the account associated with a registrar.
				///
				///The dispatch origin for this call must be _Signed_ and the sender must be the
				/// account of the registrar whose index is `index`.
				///
				/// - `index`: the index of the registrar whose fee is to be set.
				/// - `new`: the new account ID.
				///
				///## Complexity
				/// - `O(R)`.
				///  - where `R` registrar-count (governance-bounded).
				pub fn set_account_id(
					&self,
					index: ::core::primitive::u32,
					new: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<SetAccountId> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"set_account_id",
						SetAccountId { index, new },
						[
							14u8, 154u8, 84u8, 48u8, 59u8, 133u8, 45u8, 204u8, 255u8, 85u8, 157u8,
							88u8, 56u8, 207u8, 113u8, 184u8, 233u8, 139u8, 129u8, 118u8, 59u8, 9u8,
							211u8, 184u8, 32u8, 141u8, 126u8, 208u8, 179u8, 4u8, 2u8, 95u8,
						],
					)
				}
				///Set the field information for a registrar.
				///
				///The dispatch origin for this call must be _Signed_ and the sender must be the
				/// account of the registrar whose index is `index`.
				///
				/// - `index`: the index of the registrar whose fee is to be set.
				/// - `fields`: the fields that the registrar concerns themselves with.
				///
				///## Complexity
				/// - `O(R)`.
				///  - where `R` registrar-count (governance-bounded).
				pub fn set_fields(
					&self,
					index: ::core::primitive::u32,
					fields: runtime_types::pallet_identity::types::BitFlags<
						runtime_types::pallet_identity::types::IdentityField,
					>,
				) -> ::subxt::tx::Payload<SetFields> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"set_fields",
						SetFields { index, fields },
						[
							50u8, 196u8, 179u8, 71u8, 66u8, 65u8, 235u8, 7u8, 51u8, 14u8, 81u8,
							173u8, 201u8, 58u8, 6u8, 151u8, 174u8, 245u8, 102u8, 184u8, 28u8, 84u8,
							125u8, 93u8, 126u8, 134u8, 92u8, 203u8, 200u8, 129u8, 240u8, 252u8,
						],
					)
				}
				///Provide a judgement for an account's identity.
				///
				///The dispatch origin for this call must be _Signed_ and the sender must be the
				/// account of the registrar whose index is `reg_index`.
				///
				/// - `reg_index`: the index of the registrar whose judgement is being made.
				/// - `target`: the account whose identity the judgement is upon. This must be an
				///   account
				///  with a registered identity.
				/// - `judgement`: the judgement of the registrar of index `reg_index` about
				///   `target`.
				/// - `identity`: The hash of the [`IdentityInfo`] for that the judgement is
				///   provided.
				///
				///Emits `JudgementGiven` if successful.
				///
				///## Complexity
				/// - `O(R + X)`.
				///  - where `R` registrar-count (governance-bounded).
				///  - where `X` additional-field-count (deposit-bounded and code-bounded).
				pub fn provide_judgement(
					&self,
					reg_index: ::core::primitive::u32,
					target: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					judgement: runtime_types::pallet_identity::types::Judgement<
						::core::primitive::u128,
					>,
					identity: ::subxt::utils::H256,
				) -> ::subxt::tx::Payload<ProvideJudgement> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"provide_judgement",
						ProvideJudgement { reg_index, target, judgement, identity },
						[
							83u8, 253u8, 77u8, 208u8, 198u8, 25u8, 202u8, 213u8, 223u8, 184u8,
							231u8, 185u8, 186u8, 216u8, 54u8, 62u8, 3u8, 7u8, 107u8, 152u8, 126u8,
							195u8, 175u8, 221u8, 134u8, 169u8, 199u8, 124u8, 232u8, 157u8, 67u8,
							75u8,
						],
					)
				}
				///Remove an account's identity and sub-account information and slash the deposits.
				///
				///Payment: Reserved balances from `set_subs` and `set_identity` are slashed and
				/// handled by `Slash`. Verification request deposits are not returned; they should
				/// be cancelled manually using `cancel_request`.
				///
				///The dispatch origin for this call must match `T::ForceOrigin`.
				///
				/// - `target`: the account whose identity the judgement is upon. This must be an
				///   account
				///  with a registered identity.
				///
				///Emits `IdentityKilled` if successful.
				///
				///## Complexity
				/// - `O(R + S + X)`
				///  - where `R` registrar-count (governance-bounded).
				///  - where `S` subs-count (hard- and deposit-bounded).
				///  - where `X` additional-field-count (deposit-bounded and code-bounded).
				pub fn kill_identity(
					&self,
					target: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<KillIdentity> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"kill_identity",
						KillIdentity { target },
						[
							65u8, 106u8, 116u8, 209u8, 219u8, 181u8, 185u8, 75u8, 146u8, 194u8,
							187u8, 170u8, 7u8, 34u8, 140u8, 87u8, 107u8, 112u8, 229u8, 34u8, 65u8,
							71u8, 58u8, 152u8, 74u8, 253u8, 137u8, 69u8, 149u8, 214u8, 158u8, 19u8,
						],
					)
				}
				///Add the given account to the sender's subs.
				///
				///Payment: Balance reserved by a previous `set_subs` call for one sub will be
				/// repatriated to the sender.
				///
				///The dispatch origin for this call must be _Signed_ and the sender must have a
				/// registered sub identity of `sub`.
				pub fn add_sub(
					&self,
					sub: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					data: runtime_types::pallet_identity::types::Data,
				) -> ::subxt::tx::Payload<AddSub> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"add_sub",
						AddSub { sub, data },
						[
							206u8, 112u8, 143u8, 96u8, 152u8, 12u8, 174u8, 226u8, 23u8, 27u8,
							154u8, 188u8, 195u8, 233u8, 185u8, 180u8, 246u8, 218u8, 154u8, 129u8,
							138u8, 52u8, 212u8, 109u8, 54u8, 211u8, 219u8, 255u8, 39u8, 79u8,
							154u8, 123u8,
						],
					)
				}
				///Alter the associated name of the given sub-account.
				///
				///The dispatch origin for this call must be _Signed_ and the sender must have a
				/// registered sub identity of `sub`.
				pub fn rename_sub(
					&self,
					sub: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					data: runtime_types::pallet_identity::types::Data,
				) -> ::subxt::tx::Payload<RenameSub> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"rename_sub",
						RenameSub { sub, data },
						[
							110u8, 28u8, 134u8, 225u8, 44u8, 242u8, 20u8, 22u8, 197u8, 49u8, 173u8,
							178u8, 106u8, 181u8, 103u8, 90u8, 27u8, 73u8, 102u8, 130u8, 2u8, 216u8,
							172u8, 186u8, 124u8, 244u8, 128u8, 6u8, 112u8, 128u8, 25u8, 245u8,
						],
					)
				}
				///Remove the given account from the sender's subs.
				///
				///Payment: Balance reserved by a previous `set_subs` call for one sub will be
				/// repatriated to the sender.
				///
				///The dispatch origin for this call must be _Signed_ and the sender must have a
				/// registered sub identity of `sub`.
				pub fn remove_sub(
					&self,
					sub: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<RemoveSub> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"remove_sub",
						RemoveSub { sub },
						[
							92u8, 201u8, 70u8, 170u8, 248u8, 110u8, 179u8, 186u8, 213u8, 197u8,
							150u8, 156u8, 156u8, 50u8, 19u8, 158u8, 186u8, 61u8, 106u8, 64u8, 84u8,
							38u8, 73u8, 134u8, 132u8, 233u8, 50u8, 152u8, 40u8, 18u8, 212u8, 121u8,
						],
					)
				}
				///Remove the sender as a sub-account.
				///
				///Payment: Balance reserved by a previous `set_subs` call for one sub will be
				/// repatriated to the sender (*not* the original depositor).
				///
				///The dispatch origin for this call must be _Signed_ and the sender must have a
				/// registered super-identity.
				///
				///NOTE: This should not normally be used, but is provided in the case that the
				/// non- controller of an account is maliciously registered as a sub-account.
				pub fn quit_sub(&self) -> ::subxt::tx::Payload<QuitSub> {
					::subxt::tx::Payload::new_static(
						"Identity",
						"quit_sub",
						QuitSub {},
						[
							62u8, 57u8, 73u8, 72u8, 119u8, 216u8, 250u8, 155u8, 57u8, 169u8, 157u8,
							44u8, 87u8, 51u8, 63u8, 231u8, 77u8, 7u8, 0u8, 119u8, 244u8, 42u8,
							179u8, 51u8, 254u8, 240u8, 55u8, 25u8, 142u8, 38u8, 87u8, 44u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_identity::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A name was set or reset (which will remove all judgements).
			pub struct IdentitySet {
				pub who: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for IdentitySet {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "IdentitySet";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A name was cleared, and the given balance returned.
			pub struct IdentityCleared {
				pub who: ::subxt::utils::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for IdentityCleared {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "IdentityCleared";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A name was removed and the given balance slashed.
			pub struct IdentityKilled {
				pub who: ::subxt::utils::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for IdentityKilled {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "IdentityKilled";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A judgement was asked from a registrar.
			pub struct JudgementRequested {
				pub who: ::subxt::utils::AccountId32,
				pub registrar_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for JudgementRequested {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "JudgementRequested";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A judgement request was retracted.
			pub struct JudgementUnrequested {
				pub who: ::subxt::utils::AccountId32,
				pub registrar_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for JudgementUnrequested {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "JudgementUnrequested";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A judgement was given by a registrar.
			pub struct JudgementGiven {
				pub target: ::subxt::utils::AccountId32,
				pub registrar_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for JudgementGiven {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "JudgementGiven";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A registrar was added.
			pub struct RegistrarAdded {
				pub registrar_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for RegistrarAdded {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "RegistrarAdded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A sub-identity was added to an identity and the deposit paid.
			pub struct SubIdentityAdded {
				pub sub: ::subxt::utils::AccountId32,
				pub main: ::subxt::utils::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for SubIdentityAdded {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "SubIdentityAdded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A sub-identity was removed from an identity and the deposit freed.
			pub struct SubIdentityRemoved {
				pub sub: ::subxt::utils::AccountId32,
				pub main: ::subxt::utils::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for SubIdentityRemoved {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "SubIdentityRemoved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A sub-identity was cleared, and the given deposit repatriated from the
			///main identity account to the sub-identity account.
			pub struct SubIdentityRevoked {
				pub sub: ::subxt::utils::AccountId32,
				pub main: ::subxt::utils::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for SubIdentityRevoked {
				const PALLET: &'static str = "Identity";
				const EVENT: &'static str = "SubIdentityRevoked";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// Information that is pertinent to identify the entity behind an account.
				///
				/// TWOX-NOTE: OK ― `AccountId` is a secure hash.
				pub fn identity_of(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_identity::types::Registration<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Identity",
						"IdentityOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							193u8, 195u8, 180u8, 188u8, 129u8, 250u8, 180u8, 219u8, 22u8, 95u8,
							175u8, 170u8, 143u8, 188u8, 80u8, 124u8, 234u8, 228u8, 245u8, 39u8,
							72u8, 153u8, 107u8, 199u8, 23u8, 75u8, 47u8, 247u8, 104u8, 208u8,
							171u8, 82u8,
						],
					)
				}
				/// Information that is pertinent to identify the entity behind an account.
				///
				/// TWOX-NOTE: OK ― `AccountId` is a secure hash.
				pub fn identity_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_identity::types::Registration<::core::primitive::u128>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Identity",
						"IdentityOf",
						Vec::new(),
						[
							193u8, 195u8, 180u8, 188u8, 129u8, 250u8, 180u8, 219u8, 22u8, 95u8,
							175u8, 170u8, 143u8, 188u8, 80u8, 124u8, 234u8, 228u8, 245u8, 39u8,
							72u8, 153u8, 107u8, 199u8, 23u8, 75u8, 47u8, 247u8, 104u8, 208u8,
							171u8, 82u8,
						],
					)
				}
				/// The super-identity of an alternative "sub" identity together with its name,
				/// within that context. If the account is not some other account's sub-identity,
				/// then just `None`.
				pub fn super_of(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(::subxt::utils::AccountId32, runtime_types::pallet_identity::types::Data),
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Identity",
						"SuperOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							170u8, 249u8, 112u8, 249u8, 75u8, 176u8, 21u8, 29u8, 152u8, 149u8,
							69u8, 113u8, 20u8, 92u8, 113u8, 130u8, 135u8, 62u8, 18u8, 204u8, 166u8,
							193u8, 133u8, 167u8, 248u8, 117u8, 80u8, 137u8, 158u8, 111u8, 100u8,
							137u8,
						],
					)
				}
				/// The super-identity of an alternative "sub" identity together with its name,
				/// within that context. If the account is not some other account's sub-identity,
				/// then just `None`.
				pub fn super_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(::subxt::utils::AccountId32, runtime_types::pallet_identity::types::Data),
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Identity",
						"SuperOf",
						Vec::new(),
						[
							170u8, 249u8, 112u8, 249u8, 75u8, 176u8, 21u8, 29u8, 152u8, 149u8,
							69u8, 113u8, 20u8, 92u8, 113u8, 130u8, 135u8, 62u8, 18u8, 204u8, 166u8,
							193u8, 133u8, 167u8, 248u8, 117u8, 80u8, 137u8, 158u8, 111u8, 100u8,
							137u8,
						],
					)
				}
				/// Alternative "sub" identities of this account.
				///
				/// The first item is the deposit, the second is a vector of the accounts.
				///
				/// TWOX-NOTE: OK ― `AccountId` is a secure hash.
				pub fn subs_of(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						::core::primitive::u128,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::utils::AccountId32,
						>,
					),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Identity",
						"SubsOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							128u8, 15u8, 175u8, 155u8, 216u8, 225u8, 200u8, 169u8, 215u8, 206u8,
							110u8, 22u8, 204u8, 89u8, 212u8, 210u8, 159u8, 169u8, 53u8, 7u8, 44u8,
							164u8, 91u8, 151u8, 7u8, 227u8, 38u8, 230u8, 175u8, 84u8, 6u8, 4u8,
						],
					)
				}
				/// Alternative "sub" identities of this account.
				///
				/// The first item is the deposit, the second is a vector of the accounts.
				///
				/// TWOX-NOTE: OK ― `AccountId` is a secure hash.
				pub fn subs_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						::core::primitive::u128,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::utils::AccountId32,
						>,
					),
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Identity",
						"SubsOf",
						Vec::new(),
						[
							128u8, 15u8, 175u8, 155u8, 216u8, 225u8, 200u8, 169u8, 215u8, 206u8,
							110u8, 22u8, 204u8, 89u8, 212u8, 210u8, 159u8, 169u8, 53u8, 7u8, 44u8,
							164u8, 91u8, 151u8, 7u8, 227u8, 38u8, 230u8, 175u8, 84u8, 6u8, 4u8,
						],
					)
				}
				/// The set of registrars. Not expected to get very big as can only be added through
				/// a special origin (likely a council motion).
				///
				/// The index into this can be cast to `RegistrarIndex` to get a valid value.
				pub fn registrars(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::option::Option<
							runtime_types::pallet_identity::types::RegistrarInfo<
								::core::primitive::u128,
								::subxt::utils::AccountId32,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Identity",
						"Registrars",
						vec![],
						[
							157u8, 87u8, 39u8, 240u8, 154u8, 54u8, 241u8, 229u8, 76u8, 9u8, 62u8,
							252u8, 40u8, 143u8, 186u8, 182u8, 233u8, 187u8, 251u8, 61u8, 236u8,
							229u8, 19u8, 55u8, 42u8, 36u8, 82u8, 173u8, 215u8, 155u8, 229u8, 111u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The amount held on deposit for a registered identity
				pub fn basic_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Identity",
						"BasicDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The amount held on deposit per additional field for a registered identity.
				pub fn field_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Identity",
						"FieldDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The amount held on deposit for a registered subaccount. This should account for
				/// the fact that one storage item's value will increase by the size of an account
				/// ID, and there will be another trie item whose value is the size of an account ID
				/// plus 32 bytes.
				pub fn sub_account_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Identity",
						"SubAccountDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The maximum number of sub-accounts allowed per identified account.
				pub fn max_sub_accounts(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Identity",
						"MaxSubAccounts",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Maximum number of additional fields that may be stored in an ID. Needed to bound
				/// the I/O required to access an identity, but can be pretty high.
				pub fn max_additional_fields(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Identity",
						"MaxAdditionalFields",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Maxmimum number of registrars allowed in the system. Needed to bound the
				/// complexity of, e.g., updating judgements.
				pub fn max_registrars(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Identity",
						"MaxRegistrars",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod society {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Bid {
				pub value: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Unbid {
				pub pos: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Vouch {
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub value: ::core::primitive::u128,
				pub tip: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Unvouch {
				pub pos: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Vote {
				pub candidate: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub approve: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DefenderVote {
				pub approve: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Payout;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Found {
				pub founder: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub max_members: ::core::primitive::u32,
				pub rules: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Unfound;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct JudgeSuspendedMember {
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub forgive: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct JudgeSuspendedCandidate {
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub judgement: runtime_types::pallet_society::Judgement,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetMaxMembers {
				pub max: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///A user outside of the society can make a bid for entry.
				///
				///Payment: `CandidateDeposit` will be reserved for making a bid. It is returned
				///when the bid becomes a member, or if the bid calls `unbid`.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				///Parameters:
				/// - `value`: A one time payment the bid would like to receive when joining the
				///   society.
				///
				///## Complexity
				/// - O(M + B + C + logM + logB + X)
				/// 	  - B (len of bids)
				///  - C (len of candidates)
				///  - M (len of members)
				///  - X (balance reserve)
				pub fn bid(&self, value: ::core::primitive::u128) -> ::subxt::tx::Payload<Bid> {
					::subxt::tx::Payload::new_static(
						"Society",
						"bid",
						Bid { value },
						[
							101u8, 242u8, 48u8, 240u8, 74u8, 51u8, 49u8, 61u8, 6u8, 7u8, 47u8,
							200u8, 185u8, 217u8, 176u8, 139u8, 44u8, 167u8, 131u8, 23u8, 219u8,
							69u8, 216u8, 213u8, 177u8, 50u8, 8u8, 213u8, 130u8, 90u8, 81u8, 4u8,
						],
					)
				}
				///A bidder can remove their bid for entry into society.
				///By doing so, they will have their candidate deposit returned or
				///they will unvouch their voucher.
				///
				///Payment: The bid deposit is unreserved if the user made a bid.
				///
				///The dispatch origin for this call must be _Signed_ and a bidder.
				///
				///Parameters:
				/// - `pos`: Position in the `Bids` vector of the bid who wants to unbid.
				///
				///## Complexity
				/// - O(B + X)
				///  - B (len of bids)
				///  - X (balance unreserve)
				pub fn unbid(&self, pos: ::core::primitive::u32) -> ::subxt::tx::Payload<Unbid> {
					::subxt::tx::Payload::new_static(
						"Society",
						"unbid",
						Unbid { pos },
						[
							255u8, 165u8, 200u8, 241u8, 93u8, 213u8, 155u8, 12u8, 178u8, 108u8,
							222u8, 14u8, 26u8, 226u8, 107u8, 129u8, 162u8, 151u8, 81u8, 83u8, 39u8,
							106u8, 151u8, 149u8, 19u8, 85u8, 28u8, 222u8, 227u8, 9u8, 189u8, 39u8,
						],
					)
				}
				///As a member, vouch for someone to join society by placing a bid on their behalf.
				///
				///There is no deposit required to vouch for a new bid, but a member can only vouch
				/// for one bid at a time. If the bid becomes a suspended candidate and ultimately
				/// rejected by the suspension judgement origin, the member will be banned from
				/// vouching again.
				///
				///As a vouching member, you can claim a tip if the candidate is accepted. This tip
				/// will be paid as a portion of the reward the member will receive for joining the
				/// society.
				///
				///The dispatch origin for this call must be _Signed_ and a member.
				///
				///Parameters:
				/// - `who`: The user who you would like to vouch for.
				/// - `value`: The total reward to be paid between you and the candidate if they
				///   become
				///a member in the society.
				/// - `tip`: Your cut of the total `value` payout when the candidate is inducted
				///   into
				///the society. Tips larger than `value` will be saturated upon payout.
				///
				///## Complexity
				/// - O(M + B + C + logM + logB + X)
				///  - B (len of bids)
				///  - C (len of candidates)
				///  - M (len of members)
				///  - X (balance reserve)
				pub fn vouch(
					&self,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					value: ::core::primitive::u128,
					tip: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<Vouch> {
					::subxt::tx::Payload::new_static(
						"Society",
						"vouch",
						Vouch { who, value, tip },
						[
							237u8, 190u8, 123u8, 221u8, 175u8, 83u8, 96u8, 83u8, 152u8, 207u8,
							134u8, 176u8, 124u8, 32u8, 23u8, 249u8, 153u8, 220u8, 79u8, 164u8,
							214u8, 231u8, 82u8, 204u8, 185u8, 245u8, 164u8, 163u8, 59u8, 254u8,
							184u8, 105u8,
						],
					)
				}
				///As a vouching member, unvouch a bid. This only works while vouched user is
				///only a bidder (and not a candidate).
				///
				///The dispatch origin for this call must be _Signed_ and a vouching member.
				///
				///Parameters:
				/// - `pos`: Position in the `Bids` vector of the bid who should be unvouched.
				///
				///## Complexity
				/// - O(B)
				///  - B (len of bids)
				pub fn unvouch(
					&self,
					pos: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Unvouch> {
					::subxt::tx::Payload::new_static(
						"Society",
						"unvouch",
						Unvouch { pos },
						[
							242u8, 181u8, 109u8, 170u8, 197u8, 53u8, 8u8, 241u8, 47u8, 28u8, 1u8,
							209u8, 142u8, 106u8, 136u8, 163u8, 42u8, 169u8, 7u8, 1u8, 202u8, 38u8,
							199u8, 232u8, 13u8, 111u8, 92u8, 69u8, 237u8, 90u8, 134u8, 84u8,
						],
					)
				}
				///As a member, vote on a candidate.
				///
				///The dispatch origin for this call must be _Signed_ and a member.
				///
				///Parameters:
				/// - `candidate`: The candidate that the member would like to bid on.
				/// - `approve`: A boolean which says if the candidate should be approved (`true`)
				///   or
				///  rejected (`false`).
				///
				///## Complexity
				/// - O(M + logM + C)
				///  - C (len of candidates)
				///  - M (len of members)
				pub fn vote(
					&self,
					candidate: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					approve: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<Vote> {
					::subxt::tx::Payload::new_static(
						"Society",
						"vote",
						Vote { candidate, approve },
						[
							92u8, 101u8, 248u8, 64u8, 78u8, 158u8, 63u8, 91u8, 0u8, 8u8, 182u8,
							117u8, 209u8, 190u8, 92u8, 35u8, 131u8, 121u8, 123u8, 129u8, 36u8,
							188u8, 65u8, 104u8, 229u8, 77u8, 159u8, 24u8, 216u8, 77u8, 117u8, 29u8,
						],
					)
				}
				///As a member, vote on the defender.
				///
				///The dispatch origin for this call must be _Signed_ and a member.
				///
				///Parameters:
				/// - `approve`: A boolean which says if the candidate should be
				///approved (`true`) or rejected (`false`).
				///
				///## Complexity
				/// - O(M + logM)
				///  - M (len of members)
				pub fn defender_vote(
					&self,
					approve: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<DefenderVote> {
					::subxt::tx::Payload::new_static(
						"Society",
						"defender_vote",
						DefenderVote { approve },
						[
							248u8, 232u8, 243u8, 44u8, 252u8, 68u8, 118u8, 143u8, 57u8, 34u8,
							196u8, 4u8, 71u8, 14u8, 28u8, 164u8, 139u8, 184u8, 20u8, 71u8, 86u8,
							227u8, 172u8, 84u8, 213u8, 221u8, 155u8, 198u8, 56u8, 93u8, 209u8,
							211u8,
						],
					)
				}
				///Transfer the first matured payout for the sender and remove it from the records.
				///
				///NOTE: This extrinsic needs to be called multiple times to claim multiple matured
				///payouts.
				///
				///Payment: The member will receive a payment equal to their first matured
				///payout to their free balance.
				///
				///The dispatch origin for this call must be _Signed_ and a member with
				///payouts remaining.
				///
				///## Complexity
				/// - O(M + logM + P + X)
				///  - M (len of members)
				///  - P (number of payouts for a particular member)
				///  - X (currency transfer call)
				pub fn payout(&self) -> ::subxt::tx::Payload<Payout> {
					::subxt::tx::Payload::new_static(
						"Society",
						"payout",
						Payout {},
						[
							255u8, 171u8, 227u8, 58u8, 244u8, 95u8, 239u8, 127u8, 129u8, 211u8,
							131u8, 191u8, 154u8, 234u8, 85u8, 69u8, 173u8, 135u8, 179u8, 83u8,
							17u8, 41u8, 34u8, 137u8, 174u8, 251u8, 127u8, 62u8, 74u8, 255u8, 19u8,
							234u8,
						],
					)
				}
				///Found the society.
				///
				///This is done as a discrete action in order to allow for the
				///pallet to be included into a running chain and can only be done once.
				///
				///The dispatch origin for this call must be from the _FounderSetOrigin_.
				///
				///Parameters:
				/// - `founder` - The first member and head of the newly founded society.
				/// - `max_members` - The initial max number of members for the society.
				/// - `rules` - The rules of this society concerning membership.
				///
				///## Complexity
				/// - O(1)
				pub fn found(
					&self,
					founder: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					max_members: ::core::primitive::u32,
					rules: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::Payload<Found> {
					::subxt::tx::Payload::new_static(
						"Society",
						"found",
						Found { founder, max_members, rules },
						[
							68u8, 18u8, 181u8, 102u8, 113u8, 16u8, 129u8, 67u8, 101u8, 164u8, 35u8,
							3u8, 182u8, 214u8, 181u8, 73u8, 42u8, 163u8, 224u8, 110u8, 132u8,
							185u8, 233u8, 239u8, 247u8, 143u8, 67u8, 112u8, 116u8, 201u8, 236u8,
							6u8,
						],
					)
				}
				///Annul the founding of the society.
				///
				///The dispatch origin for this call must be Signed, and the signing account must
				/// be both the `Founder` and the `Head`. This implies that it may only be done when
				/// there is one member.
				///
				///## Complexity
				/// - O(1)
				pub fn unfound(&self) -> ::subxt::tx::Payload<Unfound> {
					::subxt::tx::Payload::new_static(
						"Society",
						"unfound",
						Unfound {},
						[
							30u8, 120u8, 137u8, 175u8, 237u8, 121u8, 90u8, 9u8, 111u8, 75u8, 51u8,
							85u8, 86u8, 182u8, 6u8, 249u8, 62u8, 246u8, 21u8, 150u8, 70u8, 148u8,
							39u8, 14u8, 168u8, 250u8, 164u8, 235u8, 23u8, 18u8, 164u8, 97u8,
						],
					)
				}
				///Allow suspension judgement origin to make judgement on a suspended member.
				///
				///If a suspended member is forgiven, we simply add them back as a member, not
				/// affecting any of the existing storage items for that member.
				///
				///If a suspended member is rejected, remove all associated storage items,
				/// including their payouts, and remove any vouched bids they currently have.
				///
				///The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.
				///
				///Parameters:
				/// - `who` - The suspended member to be judged.
				/// - `forgive` - A boolean representing whether the suspension judgement origin
				///   forgives
				///  (`true`) or rejects (`false`) a suspended member.
				///
				///## Complexity
				/// - O(M + logM + B)
				///  - B (len of bids)
				///  - M (len of members)
				pub fn judge_suspended_member(
					&self,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					forgive: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<JudgeSuspendedMember> {
					::subxt::tx::Payload::new_static(
						"Society",
						"judge_suspended_member",
						JudgeSuspendedMember { who, forgive },
						[
							230u8, 85u8, 37u8, 61u8, 138u8, 230u8, 105u8, 230u8, 248u8, 209u8,
							167u8, 1u8, 176u8, 226u8, 83u8, 166u8, 141u8, 232u8, 186u8, 86u8,
							222u8, 227u8, 229u8, 84u8, 113u8, 58u8, 13u8, 45u8, 246u8, 132u8, 60u8,
							82u8,
						],
					)
				}
				///Allow suspended judgement origin to make judgement on a suspended candidate.
				///
				///If the judgement is `Approve`, we add them to society as a member with the
				/// appropriate payment for joining society.
				///
				///If the judgement is `Reject`, we either slash the deposit of the bid, giving it
				/// back to the society treasury, or we ban the voucher from vouching again.
				///
				///If the judgement is `Rebid`, we put the candidate back in the bid pool and let
				/// them go through the induction process again.
				///
				///The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.
				///
				///Parameters:
				/// - `who` - The suspended candidate to be judged.
				/// - `judgement` - `Approve`, `Reject`, or `Rebid`.
				///
				///## Complexity
				/// - O(M + logM + B + X)
				///  - B (len of bids)
				///  - M (len of members)
				///  - X (balance action)
				pub fn judge_suspended_candidate(
					&self,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					judgement: runtime_types::pallet_society::Judgement,
				) -> ::subxt::tx::Payload<JudgeSuspendedCandidate> {
					::subxt::tx::Payload::new_static(
						"Society",
						"judge_suspended_candidate",
						JudgeSuspendedCandidate { who, judgement },
						[
							233u8, 241u8, 151u8, 219u8, 217u8, 131u8, 112u8, 172u8, 227u8, 93u8,
							244u8, 214u8, 14u8, 183u8, 133u8, 74u8, 174u8, 141u8, 235u8, 189u8,
							52u8, 146u8, 62u8, 254u8, 248u8, 60u8, 129u8, 109u8, 164u8, 54u8, 37u8,
							237u8,
						],
					)
				}
				///Allows root origin to change the maximum number of members in society.
				///Max membership count must be greater than 1.
				///
				///The dispatch origin for this call must be from _ROOT_.
				///
				///Parameters:
				/// - `max` - The maximum number of members for the society.
				///
				///## Complexity
				/// - O(1)
				pub fn set_max_members(
					&self,
					max: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<SetMaxMembers> {
					::subxt::tx::Payload::new_static(
						"Society",
						"set_max_members",
						SetMaxMembers { max },
						[
							4u8, 120u8, 194u8, 207u8, 5u8, 93u8, 40u8, 12u8, 1u8, 151u8, 127u8,
							162u8, 218u8, 228u8, 1u8, 249u8, 148u8, 139u8, 124u8, 171u8, 94u8,
							151u8, 40u8, 164u8, 171u8, 122u8, 65u8, 233u8, 27u8, 82u8, 74u8, 67u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_society::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The society is founded by the given identity.
			pub struct Founded {
				pub founder: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Founded {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Founded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A membership bid just happened. The given account is the candidate's ID and their
			/// offer is the second.
			pub struct Bid {
				pub candidate_id: ::subxt::utils::AccountId32,
				pub offer: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Bid {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Bid";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A membership bid just happened by vouching. The given account is the candidate's ID
			/// and their offer is the second. The vouching party is the third.
			pub struct Vouch {
				pub candidate_id: ::subxt::utils::AccountId32,
				pub offer: ::core::primitive::u128,
				pub vouching: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Vouch {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Vouch";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A candidate was dropped (due to an excess of bids in the system).
			pub struct AutoUnbid {
				pub candidate: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for AutoUnbid {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "AutoUnbid";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A candidate was dropped (by their request).
			pub struct Unbid {
				pub candidate: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Unbid {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Unbid";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A candidate was dropped (by request of who vouched for them).
			pub struct Unvouch {
				pub candidate: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Unvouch {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Unvouch";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A group of candidates have been inducted. The batch's primary is the first value,
			/// the batch in full is the second.
			pub struct Inducted {
				pub primary: ::subxt::utils::AccountId32,
				pub candidates: ::std::vec::Vec<::subxt::utils::AccountId32>,
			}
			impl ::subxt::events::StaticEvent for Inducted {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Inducted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A suspended member has been judged.
			pub struct SuspendedMemberJudgement {
				pub who: ::subxt::utils::AccountId32,
				pub judged: ::core::primitive::bool,
			}
			impl ::subxt::events::StaticEvent for SuspendedMemberJudgement {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "SuspendedMemberJudgement";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A candidate has been suspended
			pub struct CandidateSuspended {
				pub candidate: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for CandidateSuspended {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "CandidateSuspended";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A member has been suspended
			pub struct MemberSuspended {
				pub member: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for MemberSuspended {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "MemberSuspended";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A member has been challenged
			pub struct Challenged {
				pub member: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Challenged {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Challenged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A vote has been placed
			pub struct Vote {
				pub candidate: ::subxt::utils::AccountId32,
				pub voter: ::subxt::utils::AccountId32,
				pub vote: ::core::primitive::bool,
			}
			impl ::subxt::events::StaticEvent for Vote {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Vote";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A vote has been placed for a defending member
			pub struct DefenderVote {
				pub voter: ::subxt::utils::AccountId32,
				pub vote: ::core::primitive::bool,
			}
			impl ::subxt::events::StaticEvent for DefenderVote {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "DefenderVote";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A new \[max\] member count has been set
			pub struct NewMaxMembers {
				pub max: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for NewMaxMembers {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "NewMaxMembers";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Society is unfounded.
			pub struct Unfounded {
				pub founder: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Unfounded {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Unfounded";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some funds were deposited into the society account.
			pub struct Deposit {
				pub value: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Deposit {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "Deposit";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A group of members has been choosen as Skeptics
			pub struct SkepticsChosen {
				pub skeptics: ::std::vec::Vec<::subxt::utils::AccountId32>,
			}
			impl ::subxt::events::StaticEvent for SkepticsChosen {
				const PALLET: &'static str = "Society";
				const EVENT: &'static str = "SkepticsChosen";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The first member.
				pub fn founder(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"Founder",
						vec![],
						[
							50u8, 222u8, 149u8, 14u8, 31u8, 163u8, 129u8, 123u8, 150u8, 220u8,
							16u8, 136u8, 150u8, 245u8, 171u8, 231u8, 75u8, 203u8, 249u8, 123u8,
							86u8, 43u8, 208u8, 65u8, 41u8, 111u8, 114u8, 254u8, 131u8, 13u8, 26u8,
							43u8,
						],
					)
				}
				/// A hash of the rules of this society concerning membership. Can only be set once
				/// and only by the founder.
				pub fn rules(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::H256,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"Rules",
						vec![],
						[
							10u8, 206u8, 100u8, 24u8, 227u8, 138u8, 82u8, 125u8, 247u8, 160u8,
							124u8, 121u8, 148u8, 98u8, 252u8, 214u8, 215u8, 232u8, 160u8, 204u8,
							23u8, 95u8, 240u8, 16u8, 201u8, 245u8, 13u8, 178u8, 99u8, 61u8, 247u8,
							137u8,
						],
					)
				}
				/// The current set of candidates; bidders that are attempting to become members.
				pub fn candidates(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<
						runtime_types::pallet_society::Bid<
							::subxt::utils::AccountId32,
							::core::primitive::u128,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"Candidates",
						vec![],
						[
							88u8, 231u8, 247u8, 115u8, 122u8, 18u8, 106u8, 195u8, 238u8, 219u8,
							174u8, 23u8, 179u8, 228u8, 82u8, 26u8, 141u8, 190u8, 206u8, 46u8,
							177u8, 218u8, 123u8, 152u8, 208u8, 79u8, 57u8, 68u8, 3u8, 208u8, 174u8,
							193u8,
						],
					)
				}
				/// The set of suspended candidates.
				pub fn suspended_candidates(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						::core::primitive::u128,
						runtime_types::pallet_society::BidKind<
							::subxt::utils::AccountId32,
							::core::primitive::u128,
						>,
					),
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"SuspendedCandidates",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							35u8, 46u8, 78u8, 1u8, 132u8, 103u8, 152u8, 33u8, 86u8, 137u8, 125u8,
							122u8, 63u8, 175u8, 197u8, 39u8, 255u8, 0u8, 49u8, 53u8, 154u8, 40u8,
							196u8, 158u8, 133u8, 113u8, 159u8, 168u8, 148u8, 154u8, 57u8, 70u8,
						],
					)
				}
				/// The set of suspended candidates.
				pub fn suspended_candidates_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						::core::primitive::u128,
						runtime_types::pallet_society::BidKind<
							::subxt::utils::AccountId32,
							::core::primitive::u128,
						>,
					),
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"SuspendedCandidates",
						Vec::new(),
						[
							35u8, 46u8, 78u8, 1u8, 132u8, 103u8, 152u8, 33u8, 86u8, 137u8, 125u8,
							122u8, 63u8, 175u8, 197u8, 39u8, 255u8, 0u8, 49u8, 53u8, 154u8, 40u8,
							196u8, 158u8, 133u8, 113u8, 159u8, 168u8, 148u8, 154u8, 57u8, 70u8,
						],
					)
				}
				/// Amount of our account balance that is specifically for the next round's bid(s).
				pub fn pot(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"Pot",
						vec![],
						[
							242u8, 124u8, 22u8, 252u8, 4u8, 178u8, 161u8, 120u8, 8u8, 185u8, 182u8,
							177u8, 205u8, 205u8, 192u8, 248u8, 42u8, 8u8, 216u8, 92u8, 194u8,
							219u8, 74u8, 248u8, 135u8, 105u8, 210u8, 207u8, 159u8, 24u8, 149u8,
							190u8,
						],
					)
				}
				/// The most primary from the most recently approved members.
				pub fn head(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"Head",
						vec![],
						[
							162u8, 185u8, 82u8, 237u8, 221u8, 60u8, 77u8, 96u8, 89u8, 41u8, 162u8,
							7u8, 174u8, 251u8, 121u8, 247u8, 196u8, 118u8, 57u8, 24u8, 142u8,
							129u8, 142u8, 106u8, 166u8, 7u8, 86u8, 54u8, 108u8, 110u8, 118u8, 75u8,
						],
					)
				}
				/// The current set of members, ordered.
				pub fn members(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::subxt::utils::AccountId32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"Members",
						vec![],
						[
							162u8, 72u8, 174u8, 204u8, 140u8, 105u8, 205u8, 176u8, 197u8, 117u8,
							206u8, 134u8, 157u8, 110u8, 139u8, 54u8, 43u8, 233u8, 25u8, 51u8, 36u8,
							238u8, 94u8, 124u8, 221u8, 52u8, 237u8, 71u8, 125u8, 56u8, 129u8,
							222u8,
						],
					)
				}
				/// The set of suspended members.
				pub fn suspended_members(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::bool,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"SuspendedMembers",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							158u8, 26u8, 34u8, 152u8, 137u8, 151u8, 205u8, 19u8, 12u8, 138u8,
							107u8, 21u8, 14u8, 162u8, 103u8, 25u8, 181u8, 13u8, 59u8, 3u8, 225u8,
							23u8, 242u8, 184u8, 225u8, 122u8, 55u8, 53u8, 79u8, 163u8, 65u8, 57u8,
						],
					)
				}
				/// The set of suspended members.
				pub fn suspended_members_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::bool,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"SuspendedMembers",
						Vec::new(),
						[
							158u8, 26u8, 34u8, 152u8, 137u8, 151u8, 205u8, 19u8, 12u8, 138u8,
							107u8, 21u8, 14u8, 162u8, 103u8, 25u8, 181u8, 13u8, 59u8, 3u8, 225u8,
							23u8, 242u8, 184u8, 225u8, 122u8, 55u8, 53u8, 79u8, 163u8, 65u8, 57u8,
						],
					)
				}
				/// The current bids, stored ordered by the value of the bid.
				pub fn bids(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<
						runtime_types::pallet_society::Bid<
							::subxt::utils::AccountId32,
							::core::primitive::u128,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"Bids",
						vec![],
						[
							8u8, 152u8, 107u8, 47u8, 7u8, 45u8, 86u8, 149u8, 230u8, 81u8, 253u8,
							110u8, 255u8, 83u8, 16u8, 168u8, 169u8, 70u8, 196u8, 167u8, 168u8,
							98u8, 36u8, 122u8, 124u8, 77u8, 61u8, 245u8, 248u8, 48u8, 224u8, 125u8,
						],
					)
				}
				/// Members currently vouching or banned from vouching again
				pub fn vouching(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_society::VouchingStatus,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"Vouching",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							189u8, 212u8, 60u8, 171u8, 135u8, 82u8, 34u8, 93u8, 206u8, 206u8, 31u8,
							99u8, 197u8, 0u8, 97u8, 228u8, 118u8, 200u8, 123u8, 81u8, 242u8, 93u8,
							31u8, 1u8, 9u8, 121u8, 215u8, 223u8, 15u8, 56u8, 223u8, 96u8,
						],
					)
				}
				/// Members currently vouching or banned from vouching again
				pub fn vouching_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_society::VouchingStatus,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"Vouching",
						Vec::new(),
						[
							189u8, 212u8, 60u8, 171u8, 135u8, 82u8, 34u8, 93u8, 206u8, 206u8, 31u8,
							99u8, 197u8, 0u8, 97u8, 228u8, 118u8, 200u8, 123u8, 81u8, 242u8, 93u8,
							31u8, 1u8, 9u8, 121u8, 215u8, 223u8, 15u8, 56u8, 223u8, 96u8,
						],
					)
				}
				/// Pending payouts; ordered by block number, with the amount that should be paid
				/// out.
				pub fn payouts(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u128)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"Payouts",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							88u8, 208u8, 72u8, 186u8, 175u8, 77u8, 18u8, 108u8, 69u8, 117u8, 227u8,
							73u8, 126u8, 56u8, 32u8, 1u8, 198u8, 6u8, 231u8, 172u8, 3u8, 155u8,
							72u8, 152u8, 68u8, 222u8, 19u8, 229u8, 69u8, 181u8, 196u8, 202u8,
						],
					)
				}
				/// Pending payouts; ordered by block number, with the amount that should be paid
				/// out.
				pub fn payouts_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u128)>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"Payouts",
						Vec::new(),
						[
							88u8, 208u8, 72u8, 186u8, 175u8, 77u8, 18u8, 108u8, 69u8, 117u8, 227u8,
							73u8, 126u8, 56u8, 32u8, 1u8, 198u8, 6u8, 231u8, 172u8, 3u8, 155u8,
							72u8, 152u8, 68u8, 222u8, 19u8, 229u8, 69u8, 181u8, 196u8, 202u8,
						],
					)
				}
				/// The ongoing number of losing votes cast by the member.
				pub fn strikes(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"Strikes",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							120u8, 174u8, 185u8, 72u8, 167u8, 85u8, 204u8, 187u8, 139u8, 103u8,
							124u8, 14u8, 65u8, 243u8, 40u8, 114u8, 231u8, 200u8, 174u8, 56u8,
							159u8, 242u8, 102u8, 221u8, 26u8, 153u8, 154u8, 238u8, 109u8, 255u8,
							64u8, 135u8,
						],
					)
				}
				/// The ongoing number of losing votes cast by the member.
				pub fn strikes_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"Strikes",
						Vec::new(),
						[
							120u8, 174u8, 185u8, 72u8, 167u8, 85u8, 204u8, 187u8, 139u8, 103u8,
							124u8, 14u8, 65u8, 243u8, 40u8, 114u8, 231u8, 200u8, 174u8, 56u8,
							159u8, 242u8, 102u8, 221u8, 26u8, 153u8, 154u8, 238u8, 109u8, 255u8,
							64u8, 135u8,
						],
					)
				}
				/// Double map from Candidate -> Voter -> (Maybe) Vote.
				pub fn votes(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
					_1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_society::Vote,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"Votes",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							82u8, 0u8, 111u8, 217u8, 223u8, 52u8, 99u8, 140u8, 145u8, 35u8, 207u8,
							54u8, 69u8, 86u8, 133u8, 103u8, 122u8, 3u8, 153u8, 68u8, 233u8, 71u8,
							62u8, 132u8, 218u8, 2u8, 126u8, 136u8, 245u8, 150u8, 102u8, 77u8,
						],
					)
				}
				/// Double map from Candidate -> Voter -> (Maybe) Vote.
				pub fn votes_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_society::Vote,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"Votes",
						Vec::new(),
						[
							82u8, 0u8, 111u8, 217u8, 223u8, 52u8, 99u8, 140u8, 145u8, 35u8, 207u8,
							54u8, 69u8, 86u8, 133u8, 103u8, 122u8, 3u8, 153u8, 68u8, 233u8, 71u8,
							62u8, 132u8, 218u8, 2u8, 126u8, 136u8, 245u8, 150u8, 102u8, 77u8,
						],
					)
				}
				/// The defending member currently being challenged.
				pub fn defender(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"Defender",
						vec![],
						[
							116u8, 251u8, 243u8, 93u8, 242u8, 69u8, 62u8, 163u8, 154u8, 55u8,
							243u8, 204u8, 205u8, 210u8, 205u8, 5u8, 202u8, 177u8, 153u8, 199u8,
							126u8, 142u8, 248u8, 65u8, 88u8, 226u8, 101u8, 116u8, 74u8, 170u8,
							93u8, 146u8,
						],
					)
				}
				/// Votes for the defender.
				pub fn defender_votes(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_society::Vote,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"DefenderVotes",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							90u8, 131u8, 201u8, 228u8, 138u8, 115u8, 75u8, 188u8, 29u8, 229u8,
							221u8, 218u8, 154u8, 78u8, 152u8, 166u8, 184u8, 93u8, 156u8, 0u8,
							110u8, 58u8, 135u8, 124u8, 179u8, 98u8, 5u8, 218u8, 47u8, 145u8, 163u8,
							245u8,
						],
					)
				}
				/// Votes for the defender.
				pub fn defender_votes_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_society::Vote,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"DefenderVotes",
						Vec::new(),
						[
							90u8, 131u8, 201u8, 228u8, 138u8, 115u8, 75u8, 188u8, 29u8, 229u8,
							221u8, 218u8, 154u8, 78u8, 152u8, 166u8, 184u8, 93u8, 156u8, 0u8,
							110u8, 58u8, 135u8, 124u8, 179u8, 98u8, 5u8, 218u8, 47u8, 145u8, 163u8,
							245u8,
						],
					)
				}
				/// The max number of members for the society at one time.
				pub fn max_members(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Society",
						"MaxMembers",
						vec![],
						[
							54u8, 113u8, 4u8, 248u8, 5u8, 42u8, 67u8, 237u8, 91u8, 159u8, 63u8,
							239u8, 3u8, 196u8, 202u8, 135u8, 182u8, 137u8, 204u8, 58u8, 39u8, 11u8,
							42u8, 79u8, 129u8, 85u8, 37u8, 154u8, 178u8, 189u8, 123u8, 184u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The societies's pallet id
				pub fn pallet_id(
					&self,
				) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId> {
					::subxt::constants::Address::new_static(
						"Society",
						"PalletId",
						[
							139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
							174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
							9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
						],
					)
				}
				/// The minimum amount of a deposit required for a bid to be made.
				pub fn candidate_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Society",
						"CandidateDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The amount of the unpaid reward that gets deducted in the case that either a
				/// skeptic doesn't vote or someone votes in the wrong way.
				pub fn wrong_side_deduction(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Society",
						"WrongSideDeduction",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The number of times a member may vote the wrong way (or not at all, when they
				/// are a skeptic) before they become suspended.
				pub fn max_strikes(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Society",
						"MaxStrikes",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The amount of incentive paid within each period. Doesn't include VoterTip.
				pub fn period_spend(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Society",
						"PeriodSpend",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The number of blocks between candidate/membership rotation periods.
				pub fn rotation_period(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Society",
						"RotationPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum duration of the payout lock.
				pub fn max_lock_duration(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Society",
						"MaxLockDuration",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The number of blocks between membership challenges.
				pub fn challenge_period(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Society",
						"ChallengePeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum number of candidates that we accept per round.
				pub fn max_candidate_intake(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Society",
						"MaxCandidateIntake",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod recovery {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AsRecovered {
				pub account: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetRecovered {
				pub lost: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub rescuer: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CreateRecovery {
				pub friends: ::std::vec::Vec<::subxt::utils::AccountId32>,
				pub threshold: ::core::primitive::u16,
				pub delay_period: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct InitiateRecovery {
				pub account: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct VouchRecovery {
				pub lost: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub rescuer: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClaimRecovery {
				pub account: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CloseRecovery {
				pub rescuer: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemoveRecovery;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CancelRecovered {
				pub account: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Send a call through a recovered account.
				///
				///The dispatch origin for this call must be _Signed_ and registered to
				///be able to make calls on behalf of the recovered account.
				///
				///Parameters:
				/// - `account`: The recovered account you want to make a call on-behalf-of.
				/// - `call`: The call you want to make with the recovered account.
				pub fn as_recovered(
					&self,
					account: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					call: runtime_types::babe_runtime::RuntimeCall,
				) -> ::subxt::tx::Payload<AsRecovered> {
					::subxt::tx::Payload::new_static(
						"Recovery",
						"as_recovered",
						AsRecovered { account, call: ::std::boxed::Box::new(call) },
						[
							243u8, 233u8, 90u8, 124u8, 48u8, 209u8, 177u8, 194u8, 21u8, 101u8,
							219u8, 12u8, 190u8, 116u8, 120u8, 243u8, 249u8, 87u8, 223u8, 126u8,
							6u8, 132u8, 158u8, 38u8, 78u8, 254u8, 140u8, 196u8, 127u8, 140u8, 96u8,
							86u8,
						],
					)
				}
				///Allow ROOT to bypass the recovery process and set an a rescuer account
				///for a lost account directly.
				///
				///The dispatch origin for this call must be _ROOT_.
				///
				///Parameters:
				/// - `lost`: The "lost account" to be recovered.
				/// - `rescuer`: The "rescuer account" which can call as the lost account.
				pub fn set_recovered(
					&self,
					lost: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					rescuer: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<SetRecovered> {
					::subxt::tx::Payload::new_static(
						"Recovery",
						"set_recovered",
						SetRecovered { lost, rescuer },
						[
							149u8, 123u8, 98u8, 179u8, 7u8, 149u8, 38u8, 221u8, 25u8, 244u8, 176u8,
							243u8, 202u8, 6u8, 228u8, 39u8, 248u8, 32u8, 146u8, 140u8, 235u8, 21u8,
							181u8, 18u8, 105u8, 44u8, 15u8, 221u8, 82u8, 233u8, 133u8, 51u8,
						],
					)
				}
				///Create a recovery configuration for your account. This makes your account
				/// recoverable.
				///
				///Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance
				///will be reserved for storing the recovery configuration. This deposit is
				/// returned in full when the user calls `remove_recovery`.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				///Parameters:
				/// - `friends`: A list of friends you trust to vouch for recovery attempts. Should
				///   be
				///  ordered and contain no duplicate values.
				/// - `threshold`: The number of friends that must vouch for a recovery attempt
				///   before the
				///  account can be recovered. Should be less than or equal to the length of the
				/// list of  friends.
				/// - `delay_period`: The number of blocks after a recovery attempt is initialized
				///   that
				///  needs to pass before the account can be recovered.
				pub fn create_recovery(
					&self,
					friends: ::std::vec::Vec<::subxt::utils::AccountId32>,
					threshold: ::core::primitive::u16,
					delay_period: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<CreateRecovery> {
					::subxt::tx::Payload::new_static(
						"Recovery",
						"create_recovery",
						CreateRecovery { friends, threshold, delay_period },
						[
							80u8, 233u8, 68u8, 224u8, 181u8, 127u8, 8u8, 35u8, 135u8, 121u8, 73u8,
							25u8, 255u8, 192u8, 177u8, 140u8, 67u8, 113u8, 112u8, 35u8, 63u8, 96u8,
							1u8, 138u8, 93u8, 27u8, 219u8, 52u8, 74u8, 251u8, 65u8, 96u8,
						],
					)
				}
				///Initiate the process for recovering a recoverable account.
				///
				///Payment: `RecoveryDeposit` balance will be reserved for initiating the
				///recovery process. This deposit will always be repatriated to the account
				///trying to be recovered. See `close_recovery`.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				///Parameters:
				/// - `account`: The lost account that you want to recover. This account needs to be
				///  recoverable (i.e. have a recovery configuration).
				pub fn initiate_recovery(
					&self,
					account: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<InitiateRecovery> {
					::subxt::tx::Payload::new_static(
						"Recovery",
						"initiate_recovery",
						InitiateRecovery { account },
						[
							140u8, 244u8, 135u8, 122u8, 61u8, 107u8, 212u8, 100u8, 212u8, 11u8,
							216u8, 47u8, 113u8, 155u8, 121u8, 232u8, 158u8, 26u8, 229u8, 82u8,
							231u8, 193u8, 225u8, 2u8, 112u8, 220u8, 40u8, 104u8, 36u8, 17u8, 164u8,
							124u8,
						],
					)
				}
				///Allow a "friend" of a recoverable account to vouch for an active recovery
				///process for that account.
				///
				///The dispatch origin for this call must be _Signed_ and must be a "friend"
				///for the recoverable account.
				///
				///Parameters:
				/// - `lost`: The lost account that you want to recover.
				/// - `rescuer`: The account trying to rescue the lost account that you want to
				///   vouch for.
				///
				///The combination of these two parameters must point to an active recovery
				///process.
				pub fn vouch_recovery(
					&self,
					lost: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					rescuer: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<VouchRecovery> {
					::subxt::tx::Payload::new_static(
						"Recovery",
						"vouch_recovery",
						VouchRecovery { lost, rescuer },
						[
							188u8, 113u8, 2u8, 31u8, 149u8, 123u8, 248u8, 46u8, 211u8, 88u8, 121u8,
							207u8, 227u8, 92u8, 198u8, 199u8, 29u8, 216u8, 84u8, 140u8, 169u8,
							154u8, 240u8, 183u8, 140u8, 203u8, 223u8, 82u8, 222u8, 187u8, 20u8,
							21u8,
						],
					)
				}
				///Allow a successful rescuer to claim their recovered account.
				///
				///The dispatch origin for this call must be _Signed_ and must be a "rescuer"
				///who has successfully completed the account recovery process: collected
				///`threshold` or more vouches, waited `delay_period` blocks since initiation.
				///
				///Parameters:
				/// - `account`: The lost account that you want to claim has been successfully
				///   recovered by
				///  you.
				pub fn claim_recovery(
					&self,
					account: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<ClaimRecovery> {
					::subxt::tx::Payload::new_static(
						"Recovery",
						"claim_recovery",
						ClaimRecovery { account },
						[
							60u8, 49u8, 116u8, 129u8, 138u8, 95u8, 243u8, 120u8, 231u8, 20u8,
							149u8, 37u8, 56u8, 209u8, 196u8, 177u8, 186u8, 175u8, 58u8, 203u8,
							226u8, 89u8, 80u8, 212u8, 12u8, 17u8, 119u8, 163u8, 74u8, 164u8, 180u8,
							187u8,
						],
					)
				}
				///As the controller of a recoverable account, close an active recovery
				///process for your account.
				///
				///Payment: By calling this function, the recoverable account will receive
				///the recovery deposit `RecoveryDeposit` placed by the rescuer.
				///
				///The dispatch origin for this call must be _Signed_ and must be a
				///recoverable account with an active recovery process for it.
				///
				///Parameters:
				/// - `rescuer`: The account trying to rescue this recoverable account.
				pub fn close_recovery(
					&self,
					rescuer: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<CloseRecovery> {
					::subxt::tx::Payload::new_static(
						"Recovery",
						"close_recovery",
						CloseRecovery { rescuer },
						[
							61u8, 242u8, 216u8, 157u8, 103u8, 149u8, 121u8, 151u8, 132u8, 247u8,
							95u8, 157u8, 178u8, 27u8, 100u8, 222u8, 72u8, 188u8, 168u8, 64u8, 63u8,
							135u8, 248u8, 133u8, 177u8, 15u8, 205u8, 146u8, 98u8, 79u8, 135u8,
							157u8,
						],
					)
				}
				///Remove the recovery process for your account. Recovered accounts are still
				/// accessible.
				///
				///NOTE: The user must make sure to call `close_recovery` on all active
				///recovery attempts before calling this function else it will fail.
				///
				///Payment: By calling this function the recoverable account will unreserve
				///their recovery configuration deposit.
				///(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)
				///
				///The dispatch origin for this call must be _Signed_ and must be a
				///recoverable account (i.e. has a recovery configuration).
				pub fn remove_recovery(&self) -> ::subxt::tx::Payload<RemoveRecovery> {
					::subxt::tx::Payload::new_static(
						"Recovery",
						"remove_recovery",
						RemoveRecovery {},
						[
							14u8, 1u8, 44u8, 24u8, 242u8, 16u8, 67u8, 192u8, 79u8, 206u8, 104u8,
							233u8, 91u8, 202u8, 253u8, 100u8, 48u8, 78u8, 233u8, 24u8, 124u8,
							176u8, 211u8, 87u8, 63u8, 110u8, 2u8, 7u8, 231u8, 53u8, 177u8, 196u8,
						],
					)
				}
				///Cancel the ability to use `as_recovered` for `account`.
				///
				///The dispatch origin for this call must be _Signed_ and registered to
				///be able to make calls on behalf of the recovered account.
				///
				///Parameters:
				/// - `account`: The recovered account you are able to call on-behalf-of.
				pub fn cancel_recovered(
					&self,
					account: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<CancelRecovered> {
					::subxt::tx::Payload::new_static(
						"Recovery",
						"cancel_recovered",
						CancelRecovered { account },
						[
							153u8, 253u8, 13u8, 12u8, 200u8, 69u8, 113u8, 49u8, 75u8, 61u8, 10u8,
							209u8, 18u8, 192u8, 233u8, 158u8, 241u8, 24u8, 243u8, 0u8, 136u8, 55u8,
							43u8, 179u8, 43u8, 113u8, 130u8, 99u8, 146u8, 132u8, 193u8, 251u8,
						],
					)
				}
			}
		}
		///Events type.
		pub type Event = runtime_types::pallet_recovery::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A recovery process has been set up for an account.
			pub struct RecoveryCreated {
				pub account: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for RecoveryCreated {
				const PALLET: &'static str = "Recovery";
				const EVENT: &'static str = "RecoveryCreated";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A recovery process has been initiated for lost account by rescuer account.
			pub struct RecoveryInitiated {
				pub lost_account: ::subxt::utils::AccountId32,
				pub rescuer_account: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for RecoveryInitiated {
				const PALLET: &'static str = "Recovery";
				const EVENT: &'static str = "RecoveryInitiated";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A recovery process for lost account by rescuer account has been vouched for by
			/// sender.
			pub struct RecoveryVouched {
				pub lost_account: ::subxt::utils::AccountId32,
				pub rescuer_account: ::subxt::utils::AccountId32,
				pub sender: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for RecoveryVouched {
				const PALLET: &'static str = "Recovery";
				const EVENT: &'static str = "RecoveryVouched";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A recovery process for lost account by rescuer account has been closed.
			pub struct RecoveryClosed {
				pub lost_account: ::subxt::utils::AccountId32,
				pub rescuer_account: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for RecoveryClosed {
				const PALLET: &'static str = "Recovery";
				const EVENT: &'static str = "RecoveryClosed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Lost account has been successfully recovered by rescuer account.
			pub struct AccountRecovered {
				pub lost_account: ::subxt::utils::AccountId32,
				pub rescuer_account: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for AccountRecovered {
				const PALLET: &'static str = "Recovery";
				const EVENT: &'static str = "AccountRecovered";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A recovery process has been removed for an account.
			pub struct RecoveryRemoved {
				pub lost_account: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for RecoveryRemoved {
				const PALLET: &'static str = "Recovery";
				const EVENT: &'static str = "RecoveryRemoved";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The set of recoverable accounts and their recovery configuration.
				pub fn recoverable(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_recovery::RecoveryConfig<
						::core::primitive::u32,
						::core::primitive::u128,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::utils::AccountId32,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Recovery",
						"Recoverable",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							77u8, 165u8, 1u8, 120u8, 139u8, 195u8, 113u8, 101u8, 31u8, 182u8,
							235u8, 20u8, 225u8, 108u8, 173u8, 70u8, 96u8, 14u8, 95u8, 36u8, 146u8,
							171u8, 61u8, 209u8, 37u8, 154u8, 6u8, 197u8, 212u8, 20u8, 167u8, 142u8,
						],
					)
				}
				/// The set of recoverable accounts and their recovery configuration.
				pub fn recoverable_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_recovery::RecoveryConfig<
						::core::primitive::u32,
						::core::primitive::u128,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::utils::AccountId32,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Recovery",
						"Recoverable",
						Vec::new(),
						[
							77u8, 165u8, 1u8, 120u8, 139u8, 195u8, 113u8, 101u8, 31u8, 182u8,
							235u8, 20u8, 225u8, 108u8, 173u8, 70u8, 96u8, 14u8, 95u8, 36u8, 146u8,
							171u8, 61u8, 209u8, 37u8, 154u8, 6u8, 197u8, 212u8, 20u8, 167u8, 142u8,
						],
					)
				}
				/// Active recovery attempts.
				///
				/// First account is the account to be recovered, and the second account
				/// is the user trying to recover the account.
				pub fn active_recoveries(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
					_1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_recovery::ActiveRecovery<
						::core::primitive::u32,
						::core::primitive::u128,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::utils::AccountId32,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Recovery",
						"ActiveRecoveries",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							105u8, 72u8, 0u8, 48u8, 187u8, 107u8, 42u8, 95u8, 221u8, 206u8, 105u8,
							207u8, 228u8, 150u8, 103u8, 62u8, 195u8, 177u8, 233u8, 97u8, 12u8,
							17u8, 76u8, 204u8, 236u8, 29u8, 225u8, 60u8, 228u8, 44u8, 103u8, 39u8,
						],
					)
				}
				/// Active recovery attempts.
				///
				/// First account is the account to be recovered, and the second account
				/// is the user trying to recover the account.
				pub fn active_recoveries_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_recovery::ActiveRecovery<
						::core::primitive::u32,
						::core::primitive::u128,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::utils::AccountId32,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Recovery",
						"ActiveRecoveries",
						Vec::new(),
						[
							105u8, 72u8, 0u8, 48u8, 187u8, 107u8, 42u8, 95u8, 221u8, 206u8, 105u8,
							207u8, 228u8, 150u8, 103u8, 62u8, 195u8, 177u8, 233u8, 97u8, 12u8,
							17u8, 76u8, 204u8, 236u8, 29u8, 225u8, 60u8, 228u8, 44u8, 103u8, 39u8,
						],
					)
				}
				/// The list of allowed proxy accounts.
				///
				/// Map from the user who can access it to the recovered account.
				pub fn proxy(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Recovery",
						"Proxy",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							100u8, 137u8, 55u8, 32u8, 228u8, 27u8, 3u8, 84u8, 255u8, 68u8, 45u8,
							4u8, 215u8, 84u8, 189u8, 81u8, 175u8, 61u8, 252u8, 254u8, 68u8, 179u8,
							57u8, 134u8, 223u8, 49u8, 158u8, 165u8, 108u8, 172u8, 70u8, 108u8,
						],
					)
				}
				/// The list of allowed proxy accounts.
				///
				/// Map from the user who can access it to the recovered account.
				pub fn proxy_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Recovery",
						"Proxy",
						Vec::new(),
						[
							100u8, 137u8, 55u8, 32u8, 228u8, 27u8, 3u8, 84u8, 255u8, 68u8, 45u8,
							4u8, 215u8, 84u8, 189u8, 81u8, 175u8, 61u8, 252u8, 254u8, 68u8, 179u8,
							57u8, 134u8, 223u8, 49u8, 158u8, 165u8, 108u8, 172u8, 70u8, 108u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The base amount of currency needed to reserve for creating a recovery
				/// configuration.
				///
				/// This is held for an additional storage item whose value size is
				/// `2 + sizeof(BlockNumber, Balance)` bytes.
				pub fn config_deposit_base(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Recovery",
						"ConfigDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The amount of currency needed per additional user when creating a recovery
				/// configuration.
				///
				/// This is held for adding `sizeof(AccountId)` bytes more into a pre-existing
				/// storage value.
				pub fn friend_deposit_factor(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Recovery",
						"FriendDepositFactor",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The maximum amount of friends allowed in a recovery configuration.
				///
				/// NOTE: The threshold programmed in this Pallet uses u16, so it does
				/// not really make sense to have a limit here greater than u16::MAX.
				/// But also, that is a lot more than you should probably set this value
				/// to anyway...
				pub fn max_friends(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Recovery",
						"MaxFriends",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The base amount of currency needed to reserve for starting a recovery.
				///
				/// This is primarily held for deterring malicious recovery attempts, and should
				/// have a value large enough that a bad actor would choose not to place this
				/// deposit. It also acts to fund additional storage item whose value size is
				/// `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable
				/// threshold.
				pub fn recovery_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Recovery",
						"RecoveryDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
			}
		}
	}
	pub mod vesting {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Vest;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct VestOther {
				pub target: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct VestedTransfer {
				pub target: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
					::core::primitive::u128,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceVestedTransfer {
				pub source: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub target: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
					::core::primitive::u128,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct MergeSchedules {
				pub schedule1_index: ::core::primitive::u32,
				pub schedule2_index: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Unlock any vested funds of the sender account.
				///
				///The dispatch origin for this call must be _Signed_ and the sender must have
				/// funds still locked under this pallet.
				///
				///Emits either `VestingCompleted` or `VestingUpdated`.
				///
				///## Complexity
				/// - `O(1)`.
				pub fn vest(&self) -> ::subxt::tx::Payload<Vest> {
					::subxt::tx::Payload::new_static(
						"Vesting",
						"vest",
						Vest {},
						[
							123u8, 54u8, 10u8, 208u8, 154u8, 24u8, 39u8, 166u8, 64u8, 27u8, 74u8,
							29u8, 243u8, 97u8, 155u8, 5u8, 130u8, 155u8, 65u8, 181u8, 196u8, 125u8,
							45u8, 133u8, 25u8, 33u8, 3u8, 34u8, 21u8, 167u8, 172u8, 54u8,
						],
					)
				}
				///Unlock any vested funds of a `target` account.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				/// - `target`: The account whose vested funds should be unlocked. Must have funds
				///   still
				///locked under this pallet.
				///
				///Emits either `VestingCompleted` or `VestingUpdated`.
				///
				///## Complexity
				/// - `O(1)`.
				pub fn vest_other(
					&self,
					target: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<VestOther> {
					::subxt::tx::Payload::new_static(
						"Vesting",
						"vest_other",
						VestOther { target },
						[
							243u8, 97u8, 222u8, 101u8, 143u8, 17u8, 184u8, 191u8, 208u8, 162u8,
							31u8, 121u8, 22u8, 88u8, 2u8, 36u8, 9u8, 22u8, 27u8, 117u8, 236u8,
							82u8, 83u8, 218u8, 166u8, 154u8, 49u8, 141u8, 95u8, 127u8, 63u8, 13u8,
						],
					)
				}
				///Create a vested transfer.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				/// - `target`: The account receiving the vested funds.
				/// - `schedule`: The vesting schedule attached to the transfer.
				///
				///Emits `VestingCreated`.
				///
				///NOTE: This will unlock all schedules through the current block.
				///
				///## Complexity
				/// - `O(1)`.
				pub fn vested_transfer(
					&self,
					target: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
						::core::primitive::u128,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<VestedTransfer> {
					::subxt::tx::Payload::new_static(
						"Vesting",
						"vested_transfer",
						VestedTransfer { target, schedule },
						[
							157u8, 78u8, 209u8, 131u8, 29u8, 102u8, 180u8, 61u8, 212u8, 154u8,
							28u8, 3u8, 150u8, 236u8, 22u8, 116u8, 8u8, 142u8, 174u8, 35u8, 37u8,
							167u8, 5u8, 200u8, 189u8, 227u8, 122u8, 55u8, 188u8, 213u8, 59u8,
							206u8,
						],
					)
				}
				///Force a vested transfer.
				///
				///The dispatch origin for this call must be _Root_.
				///
				/// - `source`: The account whose funds should be transferred.
				/// - `target`: The account that should be transferred the vested funds.
				/// - `schedule`: The vesting schedule attached to the transfer.
				///
				///Emits `VestingCreated`.
				///
				///NOTE: This will unlock all schedules through the current block.
				///
				///## Complexity
				/// - `O(1)`.
				pub fn force_vested_transfer(
					&self,
					source: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					target: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
						::core::primitive::u128,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<ForceVestedTransfer> {
					::subxt::tx::Payload::new_static(
						"Vesting",
						"force_vested_transfer",
						ForceVestedTransfer { source, target, schedule },
						[
							181u8, 47u8, 44u8, 166u8, 243u8, 122u8, 51u8, 81u8, 136u8, 192u8,
							248u8, 150u8, 149u8, 49u8, 208u8, 203u8, 156u8, 100u8, 56u8, 133u8,
							22u8, 53u8, 241u8, 237u8, 145u8, 210u8, 25u8, 48u8, 61u8, 184u8, 112u8,
							253u8,
						],
					)
				}
				///Merge two vesting schedules together, creating a new vesting schedule that
				/// unlocks over the highest possible start and end blocks. If both schedules have
				/// already started the current block will be used as the schedule start; with the
				/// caveat that if one schedule is finished by the current block, the other will be
				/// treated as the new merged schedule, unmodified.
				///
				///NOTE: If `schedule1_index == schedule2_index` this is a no-op.
				///NOTE: This will unlock all schedules through the current block prior to merging.
				///NOTE: If both schedules have ended by the current block, no new schedule will be
				/// created and both will be removed.
				///
				///Merged schedule attributes:
				/// - `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,
				///  current_block)`.
				/// - `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.
				/// - `locked`: `schedule1.locked_at(current_block) +
				///   schedule2.locked_at(current_block)`.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				/// - `schedule1_index`: index of the first schedule to merge.
				/// - `schedule2_index`: index of the second schedule to merge.
				pub fn merge_schedules(
					&self,
					schedule1_index: ::core::primitive::u32,
					schedule2_index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<MergeSchedules> {
					::subxt::tx::Payload::new_static(
						"Vesting",
						"merge_schedules",
						MergeSchedules { schedule1_index, schedule2_index },
						[
							95u8, 255u8, 147u8, 12u8, 49u8, 25u8, 70u8, 112u8, 55u8, 154u8, 183u8,
							97u8, 56u8, 244u8, 148u8, 61u8, 107u8, 163u8, 220u8, 31u8, 153u8, 25u8,
							193u8, 251u8, 131u8, 26u8, 166u8, 157u8, 75u8, 4u8, 110u8, 125u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_vesting::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The amount vested has been updated. This could indicate a change in funds available.
			///The balance given is the amount which is left unvested (and thus locked).
			pub struct VestingUpdated {
				pub account: ::subxt::utils::AccountId32,
				pub unvested: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for VestingUpdated {
				const PALLET: &'static str = "Vesting";
				const EVENT: &'static str = "VestingUpdated";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An \[account\] has become fully vested.
			pub struct VestingCompleted {
				pub account: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for VestingCompleted {
				const PALLET: &'static str = "Vesting";
				const EVENT: &'static str = "VestingCompleted";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// Information regarding the vesting of a given account.
				pub fn vesting(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_vesting::vesting_info::VestingInfo<
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Vesting",
						"Vesting",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							23u8, 209u8, 233u8, 126u8, 89u8, 156u8, 193u8, 204u8, 100u8, 90u8,
							14u8, 120u8, 36u8, 167u8, 148u8, 239u8, 179u8, 74u8, 207u8, 83u8, 54u8,
							77u8, 27u8, 135u8, 74u8, 31u8, 33u8, 11u8, 168u8, 239u8, 212u8, 36u8,
						],
					)
				}
				/// Information regarding the vesting of a given account.
				pub fn vesting_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_vesting::vesting_info::VestingInfo<
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Vesting",
						"Vesting",
						Vec::new(),
						[
							23u8, 209u8, 233u8, 126u8, 89u8, 156u8, 193u8, 204u8, 100u8, 90u8,
							14u8, 120u8, 36u8, 167u8, 148u8, 239u8, 179u8, 74u8, 207u8, 83u8, 54u8,
							77u8, 27u8, 135u8, 74u8, 31u8, 33u8, 11u8, 168u8, 239u8, 212u8, 36u8,
						],
					)
				}
				/// Storage version of the pallet.
				///
				/// New networks start with latest version, as determined by the genesis build.
				pub fn storage_version(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_vesting::Releases,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Vesting",
						"StorageVersion",
						vec![],
						[
							50u8, 143u8, 26u8, 88u8, 129u8, 31u8, 61u8, 118u8, 19u8, 202u8, 119u8,
							160u8, 34u8, 219u8, 60u8, 57u8, 189u8, 66u8, 93u8, 239u8, 121u8, 114u8,
							241u8, 116u8, 0u8, 122u8, 232u8, 94u8, 189u8, 23u8, 45u8, 191u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The minimum amount transferred to call `vested_transfer`.
				pub fn min_vested_transfer(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Vesting",
						"MinVestedTransfer",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				pub fn max_vesting_schedules(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Vesting",
						"MaxVestingSchedules",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod scheduler {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Schedule {
				pub when: ::core::primitive::u32,
				pub maybe_periodic:
					::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
				pub priority: ::core::primitive::u8,
				pub call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Cancel {
				pub when: ::core::primitive::u32,
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ScheduleNamed {
				pub id: [::core::primitive::u8; 32usize],
				pub when: ::core::primitive::u32,
				pub maybe_periodic:
					::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
				pub priority: ::core::primitive::u8,
				pub call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CancelNamed {
				pub id: [::core::primitive::u8; 32usize],
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ScheduleAfter {
				pub after: ::core::primitive::u32,
				pub maybe_periodic:
					::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
				pub priority: ::core::primitive::u8,
				pub call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ScheduleNamedAfter {
				pub id: [::core::primitive::u8; 32usize],
				pub after: ::core::primitive::u32,
				pub maybe_periodic:
					::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
				pub priority: ::core::primitive::u8,
				pub call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Anonymously schedule a task.
				pub fn schedule(
					&self,
					when: ::core::primitive::u32,
					maybe_periodic: ::core::option::Option<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					priority: ::core::primitive::u8,
					call: runtime_types::babe_runtime::RuntimeCall,
				) -> ::subxt::tx::Payload<Schedule> {
					::subxt::tx::Payload::new_static(
						"Scheduler",
						"schedule",
						Schedule {
							when,
							maybe_periodic,
							priority,
							call: ::std::boxed::Box::new(call),
						},
						[
							209u8, 34u8, 201u8, 208u8, 181u8, 57u8, 97u8, 19u8, 187u8, 243u8,
							228u8, 77u8, 220u8, 25u8, 145u8, 227u8, 27u8, 183u8, 60u8, 170u8,
							152u8, 80u8, 107u8, 18u8, 183u8, 131u8, 48u8, 143u8, 173u8, 197u8,
							140u8, 113u8,
						],
					)
				}
				///Cancel an anonymously scheduled task.
				pub fn cancel(
					&self,
					when: ::core::primitive::u32,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Cancel> {
					::subxt::tx::Payload::new_static(
						"Scheduler",
						"cancel",
						Cancel { when, index },
						[
							81u8, 251u8, 234u8, 17u8, 214u8, 75u8, 19u8, 59u8, 19u8, 30u8, 89u8,
							74u8, 6u8, 216u8, 238u8, 165u8, 7u8, 19u8, 153u8, 253u8, 161u8, 103u8,
							178u8, 227u8, 152u8, 180u8, 80u8, 156u8, 82u8, 126u8, 132u8, 120u8,
						],
					)
				}
				///Schedule a named task.
				pub fn schedule_named(
					&self,
					id: [::core::primitive::u8; 32usize],
					when: ::core::primitive::u32,
					maybe_periodic: ::core::option::Option<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					priority: ::core::primitive::u8,
					call: runtime_types::babe_runtime::RuntimeCall,
				) -> ::subxt::tx::Payload<ScheduleNamed> {
					::subxt::tx::Payload::new_static(
						"Scheduler",
						"schedule_named",
						ScheduleNamed {
							id,
							when,
							maybe_periodic,
							priority,
							call: ::std::boxed::Box::new(call),
						},
						[
							31u8, 85u8, 4u8, 41u8, 195u8, 90u8, 6u8, 78u8, 213u8, 40u8, 197u8,
							171u8, 31u8, 234u8, 135u8, 178u8, 158u8, 40u8, 39u8, 37u8, 199u8,
							210u8, 119u8, 64u8, 160u8, 254u8, 243u8, 113u8, 194u8, 17u8, 29u8,
							230u8,
						],
					)
				}
				///Cancel a named scheduled task.
				pub fn cancel_named(
					&self,
					id: [::core::primitive::u8; 32usize],
				) -> ::subxt::tx::Payload<CancelNamed> {
					::subxt::tx::Payload::new_static(
						"Scheduler",
						"cancel_named",
						CancelNamed { id },
						[
							51u8, 3u8, 140u8, 50u8, 214u8, 211u8, 50u8, 4u8, 19u8, 43u8, 230u8,
							114u8, 18u8, 108u8, 138u8, 67u8, 99u8, 24u8, 255u8, 11u8, 246u8, 37u8,
							192u8, 207u8, 90u8, 157u8, 171u8, 93u8, 233u8, 189u8, 64u8, 180u8,
						],
					)
				}
				///Anonymously schedule a task after a delay.
				pub fn schedule_after(
					&self,
					after: ::core::primitive::u32,
					maybe_periodic: ::core::option::Option<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					priority: ::core::primitive::u8,
					call: runtime_types::babe_runtime::RuntimeCall,
				) -> ::subxt::tx::Payload<ScheduleAfter> {
					::subxt::tx::Payload::new_static(
						"Scheduler",
						"schedule_after",
						ScheduleAfter {
							after,
							maybe_periodic,
							priority,
							call: ::std::boxed::Box::new(call),
						},
						[
							131u8, 238u8, 105u8, 251u8, 50u8, 187u8, 207u8, 79u8, 128u8, 116u8,
							17u8, 228u8, 9u8, 31u8, 79u8, 121u8, 38u8, 16u8, 154u8, 227u8, 147u8,
							189u8, 6u8, 170u8, 217u8, 18u8, 116u8, 194u8, 163u8, 171u8, 64u8,
							203u8,
						],
					)
				}
				///Schedule a named task after a delay.
				pub fn schedule_named_after(
					&self,
					id: [::core::primitive::u8; 32usize],
					after: ::core::primitive::u32,
					maybe_periodic: ::core::option::Option<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					priority: ::core::primitive::u8,
					call: runtime_types::babe_runtime::RuntimeCall,
				) -> ::subxt::tx::Payload<ScheduleNamedAfter> {
					::subxt::tx::Payload::new_static(
						"Scheduler",
						"schedule_named_after",
						ScheduleNamedAfter {
							id,
							after,
							maybe_periodic,
							priority,
							call: ::std::boxed::Box::new(call),
						},
						[
							59u8, 44u8, 112u8, 206u8, 17u8, 95u8, 190u8, 102u8, 227u8, 54u8, 129u8,
							0u8, 146u8, 46u8, 84u8, 16u8, 121u8, 224u8, 235u8, 219u8, 13u8, 144u8,
							48u8, 43u8, 111u8, 0u8, 48u8, 41u8, 173u8, 249u8, 124u8, 126u8,
						],
					)
				}
			}
		}
		///Events type.
		pub type Event = runtime_types::pallet_scheduler::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Scheduled some task.
			pub struct Scheduled {
				pub when: ::core::primitive::u32,
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Scheduled {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "Scheduled";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Canceled some task.
			pub struct Canceled {
				pub when: ::core::primitive::u32,
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Canceled {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "Canceled";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Dispatched some task.
			pub struct Dispatched {
				pub task: (::core::primitive::u32, ::core::primitive::u32),
				pub id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for Dispatched {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "Dispatched";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The call for the provided hash was not found so the task has been aborted.
			pub struct CallUnavailable {
				pub task: (::core::primitive::u32, ::core::primitive::u32),
				pub id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
			}
			impl ::subxt::events::StaticEvent for CallUnavailable {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "CallUnavailable";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The given task was unable to be renewed since the agenda is full at that block.
			pub struct PeriodicFailed {
				pub task: (::core::primitive::u32, ::core::primitive::u32),
				pub id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
			}
			impl ::subxt::events::StaticEvent for PeriodicFailed {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "PeriodicFailed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The given task can never be executed since it is overweight.
			pub struct PermanentlyOverweight {
				pub task: (::core::primitive::u32, ::core::primitive::u32),
				pub id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
			}
			impl ::subxt::events::StaticEvent for PermanentlyOverweight {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "PermanentlyOverweight";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				pub fn incomplete_since(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Scheduler",
						"IncompleteSince",
						vec![],
						[
							149u8, 66u8, 239u8, 67u8, 235u8, 219u8, 101u8, 182u8, 145u8, 56u8,
							252u8, 150u8, 253u8, 221u8, 125u8, 57u8, 38u8, 152u8, 153u8, 31u8,
							92u8, 238u8, 66u8, 246u8, 104u8, 163u8, 94u8, 73u8, 222u8, 168u8,
							193u8, 227u8,
						],
					)
				}
				/// Items to be executed, indexed by the block number that they should be executed
				/// on.
				pub fn agenda(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::option::Option<
							runtime_types::pallet_scheduler::Scheduled<
								[::core::primitive::u8; 32usize],
								runtime_types::frame_support::traits::preimages::Bounded<
									runtime_types::babe_runtime::RuntimeCall,
								>,
								::core::primitive::u32,
								runtime_types::babe_runtime::OriginCaller,
								::subxt::utils::AccountId32,
							>,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Scheduler",
						"Agenda",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							19u8, 214u8, 72u8, 97u8, 75u8, 249u8, 252u8, 10u8, 144u8, 74u8, 36u8,
							2u8, 196u8, 58u8, 48u8, 240u8, 117u8, 231u8, 111u8, 26u8, 254u8, 81u8,
							151u8, 131u8, 242u8, 194u8, 55u8, 158u8, 218u8, 90u8, 183u8, 109u8,
						],
					)
				}
				/// Items to be executed, indexed by the block number that they should be executed
				/// on.
				pub fn agenda_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::option::Option<
							runtime_types::pallet_scheduler::Scheduled<
								[::core::primitive::u8; 32usize],
								runtime_types::frame_support::traits::preimages::Bounded<
									runtime_types::babe_runtime::RuntimeCall,
								>,
								::core::primitive::u32,
								runtime_types::babe_runtime::OriginCaller,
								::subxt::utils::AccountId32,
							>,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Scheduler",
						"Agenda",
						Vec::new(),
						[
							19u8, 214u8, 72u8, 97u8, 75u8, 249u8, 252u8, 10u8, 144u8, 74u8, 36u8,
							2u8, 196u8, 58u8, 48u8, 240u8, 117u8, 231u8, 111u8, 26u8, 254u8, 81u8,
							151u8, 131u8, 242u8, 194u8, 55u8, 158u8, 218u8, 90u8, 183u8, 109u8,
						],
					)
				}
				/// Lookup from a name to the block number and index of the task.
				///
				/// For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form
				/// the v4 identities.
				pub fn lookup(
					&self,
					_0: impl ::std::borrow::Borrow<[::core::primitive::u8; 32usize]>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(::core::primitive::u32, ::core::primitive::u32),
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Scheduler",
						"Lookup",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							82u8, 20u8, 178u8, 101u8, 108u8, 198u8, 71u8, 99u8, 16u8, 175u8, 15u8,
							187u8, 229u8, 243u8, 140u8, 200u8, 99u8, 77u8, 248u8, 178u8, 45u8,
							121u8, 193u8, 67u8, 165u8, 43u8, 234u8, 211u8, 158u8, 250u8, 103u8,
							243u8,
						],
					)
				}
				/// Lookup from a name to the block number and index of the task.
				///
				/// For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form
				/// the v4 identities.
				pub fn lookup_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(::core::primitive::u32, ::core::primitive::u32),
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Scheduler",
						"Lookup",
						Vec::new(),
						[
							82u8, 20u8, 178u8, 101u8, 108u8, 198u8, 71u8, 99u8, 16u8, 175u8, 15u8,
							187u8, 229u8, 243u8, 140u8, 200u8, 99u8, 77u8, 248u8, 178u8, 45u8,
							121u8, 193u8, 67u8, 165u8, 43u8, 234u8, 211u8, 158u8, 250u8, 103u8,
							243u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The maximum weight that may be scheduled per block for any dispatchables.
				pub fn maximum_weight(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight> {
					::subxt::constants::Address::new_static(
						"Scheduler",
						"MaximumWeight",
						[
							206u8, 61u8, 253u8, 247u8, 163u8, 40u8, 161u8, 52u8, 134u8, 140u8,
							206u8, 83u8, 44u8, 166u8, 226u8, 115u8, 181u8, 14u8, 227u8, 130u8,
							210u8, 32u8, 85u8, 29u8, 230u8, 97u8, 130u8, 165u8, 147u8, 134u8,
							106u8, 76u8,
						],
					)
				}
				/// The maximum number of scheduled calls in the queue for a single block.
				pub fn max_scheduled_per_block(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Scheduler",
						"MaxScheduledPerBlock",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod glutton {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct InitializePallet {
				pub new_count: ::core::primitive::u32,
				pub witness_count: ::core::option::Option<::core::primitive::u32>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetCompute {
				pub compute: runtime_types::sp_arithmetic::per_things::Perbill,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetStorage {
				pub storage: runtime_types::sp_arithmetic::per_things::Perbill,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Initializes the pallet by writing into `TrashData`.
				///
				///Only callable by Root. A good default for `trash_count` is `5_000`.
				pub fn initialize_pallet(
					&self,
					new_count: ::core::primitive::u32,
					witness_count: ::core::option::Option<::core::primitive::u32>,
				) -> ::subxt::tx::Payload<InitializePallet> {
					::subxt::tx::Payload::new_static(
						"Glutton",
						"initialize_pallet",
						InitializePallet { new_count, witness_count },
						[
							171u8, 225u8, 26u8, 166u8, 202u8, 244u8, 98u8, 37u8, 99u8, 24u8, 118u8,
							36u8, 218u8, 93u8, 190u8, 225u8, 48u8, 179u8, 92u8, 70u8, 130u8, 121u8,
							126u8, 90u8, 80u8, 228u8, 184u8, 149u8, 55u8, 18u8, 101u8, 80u8,
						],
					)
				}
				///Set the `Compute` storage value that determines how much of the
				///block's weight `ref_time` to use during `on_idle`.
				///
				///Only callable by Root.
				pub fn set_compute(
					&self,
					compute: runtime_types::sp_arithmetic::per_things::Perbill,
				) -> ::subxt::tx::Payload<SetCompute> {
					::subxt::tx::Payload::new_static(
						"Glutton",
						"set_compute",
						SetCompute { compute },
						[
							253u8, 152u8, 20u8, 211u8, 203u8, 122u8, 234u8, 229u8, 24u8, 81u8,
							57u8, 175u8, 97u8, 96u8, 3u8, 124u8, 73u8, 116u8, 17u8, 18u8, 223u8,
							134u8, 146u8, 194u8, 162u8, 34u8, 175u8, 43u8, 19u8, 176u8, 40u8,
							198u8,
						],
					)
				}
				///Set the `Storage` storage value that determines the PoV size usage
				///for each block.
				///
				///Only callable by Root.
				pub fn set_storage(
					&self,
					storage: runtime_types::sp_arithmetic::per_things::Perbill,
				) -> ::subxt::tx::Payload<SetStorage> {
					::subxt::tx::Payload::new_static(
						"Glutton",
						"set_storage",
						SetStorage { storage },
						[
							224u8, 55u8, 30u8, 252u8, 37u8, 189u8, 131u8, 24u8, 147u8, 68u8, 187u8,
							93u8, 181u8, 203u8, 242u8, 227u8, 177u8, 73u8, 116u8, 78u8, 246u8,
							199u8, 184u8, 243u8, 39u8, 124u8, 0u8, 241u8, 4u8, 44u8, 123u8, 45u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_glutton::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The pallet has been (re)initialized by root.
			pub struct PalletInitialized {
				pub reinit: ::core::primitive::bool,
			}
			impl ::subxt::events::StaticEvent for PalletInitialized {
				const PALLET: &'static str = "Glutton";
				const EVENT: &'static str = "PalletInitialized";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The computation limit has been updated by root.
			pub struct ComputationLimitSet {
				pub compute: runtime_types::sp_arithmetic::per_things::Perbill,
			}
			impl ::subxt::events::StaticEvent for ComputationLimitSet {
				const PALLET: &'static str = "Glutton";
				const EVENT: &'static str = "ComputationLimitSet";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The storage limit has been updated by root.
			pub struct StorageLimitSet {
				pub storage: runtime_types::sp_arithmetic::per_things::Perbill,
			}
			impl ::subxt::events::StaticEvent for StorageLimitSet {
				const PALLET: &'static str = "Glutton";
				const EVENT: &'static str = "StorageLimitSet";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// Storage value used to specify what percentage of the left over `ref_time`
				/// to consume during `on_idle`.
				pub fn compute(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::sp_arithmetic::per_things::Perbill,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Glutton",
						"Compute",
						vec![],
						[
							172u8, 147u8, 191u8, 212u8, 73u8, 106u8, 150u8, 52u8, 247u8, 254u8,
							24u8, 202u8, 232u8, 204u8, 5u8, 195u8, 155u8, 178u8, 154u8, 0u8, 245u8,
							213u8, 72u8, 38u8, 145u8, 253u8, 49u8, 159u8, 114u8, 60u8, 70u8, 152u8,
						],
					)
				}
				/// Storage value used the specify what percentage of left over `proof_size`
				/// to consume during `on_idle`.
				pub fn storage(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::sp_arithmetic::per_things::Perbill,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Glutton",
						"Storage",
						vec![],
						[
							240u8, 82u8, 208u8, 98u8, 40u8, 101u8, 61u8, 137u8, 3u8, 76u8, 240u8,
							96u8, 151u8, 94u8, 159u8, 34u8, 37u8, 240u8, 144u8, 126u8, 92u8, 240u8,
							143u8, 52u8, 97u8, 89u8, 53u8, 143u8, 241u8, 15u8, 106u8, 136u8,
						],
					)
				}
				/// Storage map used for wasting proof size.
				///
				/// It contains no meaningful data - hence the name "Trash". The maximal number of
				/// entries is set to 65k, which is just below the next jump at 16^4. This is
				/// important to reduce the proof size benchmarking overestimate. The assumption
				/// here is that we won't have more than 65k * 1KiB = 65MiB of proof size wasting in
				/// practice. However, this limit is not enforced, so the pallet would also work out
				/// of the box with more entries, but its benchmarked proof weight would possibly be
				/// underestimated in that case.
				pub fn trash_data(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					[::core::primitive::u8; 1024usize],
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Glutton",
						"TrashData",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							46u8, 220u8, 97u8, 49u8, 23u8, 146u8, 185u8, 74u8, 77u8, 36u8, 178u8,
							232u8, 203u8, 208u8, 78u8, 170u8, 155u8, 39u8, 174u8, 205u8, 41u8,
							54u8, 145u8, 36u8, 183u8, 1u8, 167u8, 105u8, 165u8, 101u8, 254u8,
							102u8,
						],
					)
				}
				/// Storage map used for wasting proof size.
				///
				/// It contains no meaningful data - hence the name "Trash". The maximal number of
				/// entries is set to 65k, which is just below the next jump at 16^4. This is
				/// important to reduce the proof size benchmarking overestimate. The assumption
				/// here is that we won't have more than 65k * 1KiB = 65MiB of proof size wasting in
				/// practice. However, this limit is not enforced, so the pallet would also work out
				/// of the box with more entries, but its benchmarked proof weight would possibly be
				/// underestimated in that case.
				pub fn trash_data_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					[::core::primitive::u8; 1024usize],
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Glutton",
						"TrashData",
						Vec::new(),
						[
							46u8, 220u8, 97u8, 49u8, 23u8, 146u8, 185u8, 74u8, 77u8, 36u8, 178u8,
							232u8, 203u8, 208u8, 78u8, 170u8, 155u8, 39u8, 174u8, 205u8, 41u8,
							54u8, 145u8, 36u8, 183u8, 1u8, 167u8, 105u8, 165u8, 101u8, 254u8,
							102u8,
						],
					)
				}
				/// The current number of entries in `TrashData`.
				pub fn trash_data_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Glutton",
						"TrashDataCount",
						vec![],
						[
							64u8, 206u8, 156u8, 154u8, 111u8, 124u8, 159u8, 244u8, 34u8, 102u8,
							195u8, 220u8, 141u8, 31u8, 254u8, 153u8, 125u8, 32u8, 196u8, 41u8,
							231u8, 28u8, 33u8, 97u8, 157u8, 109u8, 123u8, 162u8, 68u8, 116u8,
							123u8, 182u8,
						],
					)
				}
			}
		}
	}
	pub mod preimage {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct NotePreimage {
				pub bytes: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct UnnotePreimage {
				pub hash: ::subxt::utils::H256,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RequestPreimage {
				pub hash: ::subxt::utils::H256,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct UnrequestPreimage {
				pub hash: ::subxt::utils::H256,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Register a preimage on-chain.
				///
				///If the preimage was previously requested, no fees or deposits are taken for
				/// providing the preimage. Otherwise, a deposit is taken proportional to the size
				/// of the preimage.
				pub fn note_preimage(
					&self,
					bytes: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::Payload<NotePreimage> {
					::subxt::tx::Payload::new_static(
						"Preimage",
						"note_preimage",
						NotePreimage { bytes },
						[
							77u8, 48u8, 104u8, 3u8, 254u8, 65u8, 106u8, 95u8, 204u8, 89u8, 149u8,
							29u8, 144u8, 188u8, 99u8, 23u8, 146u8, 142u8, 35u8, 17u8, 125u8, 130u8,
							31u8, 206u8, 106u8, 83u8, 163u8, 192u8, 81u8, 23u8, 232u8, 230u8,
						],
					)
				}
				///Clear an unrequested preimage from the runtime storage.
				///
				///If `len` is provided, then it will be a much cheaper operation.
				///
				/// - `hash`: The hash of the preimage to be removed from the store.
				/// - `len`: The length of the preimage of `hash`.
				pub fn unnote_preimage(
					&self,
					hash: ::subxt::utils::H256,
				) -> ::subxt::tx::Payload<UnnotePreimage> {
					::subxt::tx::Payload::new_static(
						"Preimage",
						"unnote_preimage",
						UnnotePreimage { hash },
						[
							211u8, 204u8, 205u8, 58u8, 33u8, 179u8, 68u8, 74u8, 149u8, 138u8,
							213u8, 45u8, 140u8, 27u8, 106u8, 81u8, 68u8, 212u8, 147u8, 116u8, 27u8,
							130u8, 84u8, 34u8, 231u8, 197u8, 135u8, 8u8, 19u8, 242u8, 207u8, 17u8,
						],
					)
				}
				///Request a preimage be uploaded to the chain without paying any fees or deposits.
				///
				///If the preimage requests has already been provided on-chain, we unreserve any
				/// deposit a user may have paid, and take the control of the preimage out of their
				/// hands.
				pub fn request_preimage(
					&self,
					hash: ::subxt::utils::H256,
				) -> ::subxt::tx::Payload<RequestPreimage> {
					::subxt::tx::Payload::new_static(
						"Preimage",
						"request_preimage",
						RequestPreimage { hash },
						[
							195u8, 26u8, 146u8, 255u8, 79u8, 43u8, 73u8, 60u8, 115u8, 78u8, 99u8,
							197u8, 137u8, 95u8, 139u8, 141u8, 79u8, 213u8, 170u8, 169u8, 127u8,
							30u8, 236u8, 65u8, 38u8, 16u8, 118u8, 228u8, 141u8, 83u8, 162u8, 233u8,
						],
					)
				}
				///Clear a previously made request for a preimage.
				///
				///NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`.
				pub fn unrequest_preimage(
					&self,
					hash: ::subxt::utils::H256,
				) -> ::subxt::tx::Payload<UnrequestPreimage> {
					::subxt::tx::Payload::new_static(
						"Preimage",
						"unrequest_preimage",
						UnrequestPreimage { hash },
						[
							143u8, 225u8, 239u8, 44u8, 237u8, 83u8, 18u8, 105u8, 101u8, 68u8,
							111u8, 116u8, 66u8, 212u8, 63u8, 190u8, 38u8, 32u8, 105u8, 152u8, 69u8,
							177u8, 193u8, 15u8, 60u8, 26u8, 95u8, 130u8, 11u8, 113u8, 187u8, 108u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_preimage::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A preimage has been noted.
			pub struct Noted {
				pub hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for Noted {
				const PALLET: &'static str = "Preimage";
				const EVENT: &'static str = "Noted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A preimage has been requested.
			pub struct Requested {
				pub hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for Requested {
				const PALLET: &'static str = "Preimage";
				const EVENT: &'static str = "Requested";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A preimage has ben cleared.
			pub struct Cleared {
				pub hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for Cleared {
				const PALLET: &'static str = "Preimage";
				const EVENT: &'static str = "Cleared";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The request status of a given hash.
				pub fn status_for(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_preimage::RequestStatus<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Preimage",
						"StatusFor",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							103u8, 208u8, 88u8, 167u8, 244u8, 198u8, 129u8, 134u8, 182u8, 80u8,
							71u8, 192u8, 73u8, 92u8, 190u8, 15u8, 20u8, 132u8, 37u8, 108u8, 88u8,
							233u8, 18u8, 145u8, 9u8, 235u8, 5u8, 132u8, 42u8, 17u8, 227u8, 56u8,
						],
					)
				}
				/// The request status of a given hash.
				pub fn status_for_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_preimage::RequestStatus<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Preimage",
						"StatusFor",
						Vec::new(),
						[
							103u8, 208u8, 88u8, 167u8, 244u8, 198u8, 129u8, 134u8, 182u8, 80u8,
							71u8, 192u8, 73u8, 92u8, 190u8, 15u8, 20u8, 132u8, 37u8, 108u8, 88u8,
							233u8, 18u8, 145u8, 9u8, 235u8, 5u8, 132u8, 42u8, 17u8, 227u8, 56u8,
						],
					)
				}
				pub fn preimage_for(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Preimage",
						"PreimageFor",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							96u8, 74u8, 30u8, 112u8, 120u8, 41u8, 52u8, 187u8, 252u8, 68u8, 42u8,
							5u8, 61u8, 228u8, 250u8, 192u8, 224u8, 61u8, 53u8, 222u8, 95u8, 148u8,
							6u8, 53u8, 43u8, 152u8, 88u8, 58u8, 185u8, 234u8, 131u8, 124u8,
						],
					)
				}
				pub fn preimage_for_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Preimage",
						"PreimageFor",
						Vec::new(),
						[
							96u8, 74u8, 30u8, 112u8, 120u8, 41u8, 52u8, 187u8, 252u8, 68u8, 42u8,
							5u8, 61u8, 228u8, 250u8, 192u8, 224u8, 61u8, 53u8, 222u8, 95u8, 148u8,
							6u8, 53u8, 43u8, 152u8, 88u8, 58u8, 185u8, 234u8, 131u8, 124u8,
						],
					)
				}
			}
		}
	}
	pub mod proxy {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Proxy {
				pub real: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub force_proxy_type:
					::core::option::Option<runtime_types::babe_runtime::ProxyType>,
				pub call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AddProxy {
				pub delegate: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub proxy_type: runtime_types::babe_runtime::ProxyType,
				pub delay: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemoveProxy {
				pub delegate: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub proxy_type: runtime_types::babe_runtime::ProxyType,
				pub delay: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemoveProxies;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CreatePure {
				pub proxy_type: runtime_types::babe_runtime::ProxyType,
				pub delay: ::core::primitive::u32,
				pub index: ::core::primitive::u16,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct KillPure {
				pub spawner: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub proxy_type: runtime_types::babe_runtime::ProxyType,
				pub index: ::core::primitive::u16,
				#[codec(compact)]
				pub height: ::core::primitive::u32,
				#[codec(compact)]
				pub ext_index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Announce {
				pub real: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub call_hash: ::subxt::utils::H256,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemoveAnnouncement {
				pub real: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub call_hash: ::subxt::utils::H256,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RejectAnnouncement {
				pub delegate: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub call_hash: ::subxt::utils::H256,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ProxyAnnounced {
				pub delegate: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub real: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub force_proxy_type:
					::core::option::Option<runtime_types::babe_runtime::ProxyType>,
				pub call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Dispatch the given `call` from an account that the sender is authorised for
				/// through `add_proxy`.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				///Parameters:
				/// - `real`: The account that the proxy will make a call on behalf of.
				/// - `force_proxy_type`: Specify the exact proxy type to be used and checked for
				///   this call.
				/// - `call`: The call to be made by the `real` account.
				pub fn proxy(
					&self,
					real: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					force_proxy_type: ::core::option::Option<
						runtime_types::babe_runtime::ProxyType,
					>,
					call: runtime_types::babe_runtime::RuntimeCall,
				) -> ::subxt::tx::Payload<Proxy> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"proxy",
						Proxy { real, force_proxy_type, call: ::std::boxed::Box::new(call) },
						[
							169u8, 173u8, 33u8, 208u8, 54u8, 90u8, 43u8, 106u8, 222u8, 230u8,
							151u8, 63u8, 29u8, 138u8, 144u8, 59u8, 245u8, 245u8, 48u8, 98u8, 174u8,
							15u8, 153u8, 185u8, 134u8, 225u8, 36u8, 149u8, 5u8, 215u8, 125u8,
							159u8,
						],
					)
				}
				///Register a proxy account for the sender that is able to make calls on its
				/// behalf.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				///Parameters:
				/// - `proxy`: The account that the `caller` would like to make a proxy.
				/// - `proxy_type`: The permissions allowed for this proxy account.
				/// - `delay`: The announcement period required of the initial proxy. Will generally
				///   be
				///zero.
				pub fn add_proxy(
					&self,
					delegate: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					proxy_type: runtime_types::babe_runtime::ProxyType,
					delay: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<AddProxy> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"add_proxy",
						AddProxy { delegate, proxy_type, delay },
						[
							179u8, 225u8, 244u8, 52u8, 43u8, 253u8, 204u8, 37u8, 236u8, 61u8,
							140u8, 160u8, 140u8, 4u8, 198u8, 186u8, 91u8, 113u8, 204u8, 15u8,
							167u8, 9u8, 232u8, 208u8, 130u8, 202u8, 67u8, 44u8, 30u8, 35u8, 113u8,
							152u8,
						],
					)
				}
				///Unregister a proxy account for the sender.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				///Parameters:
				/// - `proxy`: The account that the `caller` would like to remove as a proxy.
				/// - `proxy_type`: The permissions currently enabled for the removed proxy account.
				pub fn remove_proxy(
					&self,
					delegate: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					proxy_type: runtime_types::babe_runtime::ProxyType,
					delay: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<RemoveProxy> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"remove_proxy",
						RemoveProxy { delegate, proxy_type, delay },
						[
							207u8, 163u8, 188u8, 238u8, 61u8, 133u8, 145u8, 118u8, 223u8, 169u8,
							11u8, 101u8, 38u8, 135u8, 194u8, 141u8, 84u8, 194u8, 65u8, 159u8,
							215u8, 210u8, 109u8, 7u8, 46u8, 31u8, 92u8, 233u8, 50u8, 224u8, 57u8,
							8u8,
						],
					)
				}
				///Unregister all proxy accounts for the sender.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				///WARNING: This may be called on accounts created by `pure`, however if done, then
				///the unreserved fees will be inaccessible. **All access to this account will be
				/// lost.**
				pub fn remove_proxies(&self) -> ::subxt::tx::Payload<RemoveProxies> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"remove_proxies",
						RemoveProxies {},
						[
							15u8, 237u8, 27u8, 166u8, 254u8, 218u8, 92u8, 5u8, 213u8, 239u8, 99u8,
							59u8, 1u8, 26u8, 73u8, 252u8, 81u8, 94u8, 214u8, 227u8, 169u8, 58u8,
							40u8, 253u8, 187u8, 225u8, 192u8, 26u8, 19u8, 23u8, 121u8, 129u8,
						],
					)
				}
				///Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
				///initialize it with a proxy of `proxy_type` for `origin` sender.
				///
				///Requires a `Signed` origin.
				///
				/// - `proxy_type`: The type of the proxy that the sender will be registered as over
				///   the
				///new account. This will almost always be the most permissive `ProxyType` possible
				/// to allow for maximum flexibility.
				/// - `index`: A disambiguation index, in case this is called multiple times in the
				///   same
				///transaction (e.g. with `utility::batch`). Unless you're using `batch` you
				/// probably just want to use `0`.
				/// - `delay`: The announcement period required of the initial proxy. Will generally
				///   be
				///zero.
				///
				///Fails with `Duplicate` if this has already been called in this transaction, from
				/// the same sender, with the same parameters.
				///
				///Fails if there are insufficient funds to pay for deposit.
				pub fn create_pure(
					&self,
					proxy_type: runtime_types::babe_runtime::ProxyType,
					delay: ::core::primitive::u32,
					index: ::core::primitive::u16,
				) -> ::subxt::tx::Payload<CreatePure> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"create_pure",
						CreatePure { proxy_type, delay, index },
						[
							46u8, 194u8, 136u8, 133u8, 111u8, 12u8, 51u8, 219u8, 148u8, 227u8,
							22u8, 236u8, 91u8, 15u8, 73u8, 48u8, 222u8, 219u8, 133u8, 157u8, 65u8,
							136u8, 119u8, 76u8, 116u8, 13u8, 33u8, 215u8, 138u8, 211u8, 195u8,
							157u8,
						],
					)
				}
				///Removes a previously spawned pure proxy.
				///
				///WARNING: **All access to this account will be lost.** Any funds held in it will
				/// be inaccessible.
				///
				///Requires a `Signed` origin, and the sender account must have been created by a
				/// call to `pure` with corresponding parameters.
				///
				/// - `spawner`: The account that originally called `pure` to create this account.
				/// - `index`: The disambiguation index originally passed to `pure`. Probably `0`.
				/// - `proxy_type`: The proxy type originally passed to `pure`.
				/// - `height`: The height of the chain when the call to `pure` was processed.
				/// - `ext_index`: The extrinsic index in which the call to `pure` was processed.
				///
				///Fails with `NoPermission` in case the caller is not a previously created pure
				///account whose `pure` call has corresponding parameters.
				pub fn kill_pure(
					&self,
					spawner: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					proxy_type: runtime_types::babe_runtime::ProxyType,
					index: ::core::primitive::u16,
					height: ::core::primitive::u32,
					ext_index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<KillPure> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"kill_pure",
						KillPure { spawner, proxy_type, index, height, ext_index },
						[
							76u8, 246u8, 203u8, 222u8, 54u8, 155u8, 53u8, 188u8, 243u8, 178u8,
							173u8, 59u8, 31u8, 188u8, 152u8, 209u8, 211u8, 139u8, 65u8, 150u8,
							18u8, 5u8, 75u8, 223u8, 112u8, 196u8, 45u8, 157u8, 111u8, 92u8, 106u8,
							255u8,
						],
					)
				}
				///Publish the hash of a proxy-call that will be made in the future.
				///
				///This must be called some number of blocks before the corresponding `proxy` is
				/// attempted if the delay associated with the proxy relationship is greater than
				/// zero.
				///
				///No more than `MaxPending` announcements may be made at any one time.
				///
				///This will take a deposit of `AnnouncementDepositFactor` as well as
				///`AnnouncementDepositBase` if there are no other pending announcements.
				///
				///The dispatch origin for this call must be _Signed_ and a proxy of `real`.
				///
				///Parameters:
				/// - `real`: The account that the proxy will make a call on behalf of.
				/// - `call_hash`: The hash of the call to be made by the `real` account.
				pub fn announce(
					&self,
					real: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					call_hash: ::subxt::utils::H256,
				) -> ::subxt::tx::Payload<Announce> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"announce",
						Announce { real, call_hash },
						[
							226u8, 252u8, 69u8, 50u8, 248u8, 212u8, 209u8, 225u8, 201u8, 236u8,
							51u8, 136u8, 56u8, 85u8, 36u8, 130u8, 233u8, 84u8, 44u8, 192u8, 174u8,
							119u8, 245u8, 62u8, 150u8, 78u8, 217u8, 90u8, 167u8, 154u8, 228u8,
							141u8,
						],
					)
				}
				///Remove a given announcement.
				///
				///May be called by a proxy account to remove a call they previously announced and
				/// return the deposit.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				///Parameters:
				/// - `real`: The account that the proxy will make a call on behalf of.
				/// - `call_hash`: The hash of the call to be made by the `real` account.
				pub fn remove_announcement(
					&self,
					real: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					call_hash: ::subxt::utils::H256,
				) -> ::subxt::tx::Payload<RemoveAnnouncement> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"remove_announcement",
						RemoveAnnouncement { real, call_hash },
						[
							251u8, 236u8, 113u8, 182u8, 125u8, 244u8, 31u8, 144u8, 66u8, 28u8,
							65u8, 97u8, 67u8, 94u8, 225u8, 210u8, 46u8, 143u8, 242u8, 124u8, 120u8,
							93u8, 23u8, 165u8, 83u8, 177u8, 250u8, 171u8, 58u8, 66u8, 70u8, 64u8,
						],
					)
				}
				///Remove the given announcement of a delegate.
				///
				///May be called by a target (proxied) account to remove a call that one of their
				/// delegates (`delegate`) has announced they want to execute. The deposit is
				/// returned.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				///Parameters:
				/// - `delegate`: The account that previously announced the call.
				/// - `call_hash`: The hash of the call to be made.
				pub fn reject_announcement(
					&self,
					delegate: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					call_hash: ::subxt::utils::H256,
				) -> ::subxt::tx::Payload<RejectAnnouncement> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"reject_announcement",
						RejectAnnouncement { delegate, call_hash },
						[
							122u8, 165u8, 114u8, 85u8, 209u8, 197u8, 11u8, 96u8, 211u8, 93u8,
							201u8, 42u8, 1u8, 131u8, 254u8, 177u8, 191u8, 212u8, 229u8, 13u8, 28u8,
							163u8, 133u8, 200u8, 113u8, 28u8, 132u8, 45u8, 105u8, 177u8, 82u8,
							206u8,
						],
					)
				}
				///Dispatch the given `call` from an account that the sender is authorized for
				/// through `add_proxy`.
				///
				///Removes any corresponding announcement(s).
				///
				///The dispatch origin for this call must be _Signed_.
				///
				///Parameters:
				/// - `real`: The account that the proxy will make a call on behalf of.
				/// - `force_proxy_type`: Specify the exact proxy type to be used and checked for
				///   this call.
				/// - `call`: The call to be made by the `real` account.
				pub fn proxy_announced(
					&self,
					delegate: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					real: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					force_proxy_type: ::core::option::Option<
						runtime_types::babe_runtime::ProxyType,
					>,
					call: runtime_types::babe_runtime::RuntimeCall,
				) -> ::subxt::tx::Payload<ProxyAnnounced> {
					::subxt::tx::Payload::new_static(
						"Proxy",
						"proxy_announced",
						ProxyAnnounced {
							delegate,
							real,
							force_proxy_type,
							call: ::std::boxed::Box::new(call),
						},
						[
							218u8, 91u8, 26u8, 1u8, 146u8, 168u8, 213u8, 62u8, 249u8, 121u8, 60u8,
							212u8, 141u8, 141u8, 175u8, 251u8, 201u8, 164u8, 180u8, 230u8, 9u8,
							77u8, 98u8, 174u8, 225u8, 247u8, 110u8, 240u8, 219u8, 164u8, 82u8,
							174u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_proxy::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A proxy was executed correctly, with the given.
			pub struct ProxyExecuted {
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for ProxyExecuted {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "ProxyExecuted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A pure account has been created by new proxy with given
			///disambiguation index and proxy type.
			pub struct PureCreated {
				pub pure: ::subxt::utils::AccountId32,
				pub who: ::subxt::utils::AccountId32,
				pub proxy_type: runtime_types::babe_runtime::ProxyType,
				pub disambiguation_index: ::core::primitive::u16,
			}
			impl ::subxt::events::StaticEvent for PureCreated {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "PureCreated";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An announcement was placed to make a call in the future.
			pub struct Announced {
				pub real: ::subxt::utils::AccountId32,
				pub proxy: ::subxt::utils::AccountId32,
				pub call_hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for Announced {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "Announced";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A proxy was added.
			pub struct ProxyAdded {
				pub delegator: ::subxt::utils::AccountId32,
				pub delegatee: ::subxt::utils::AccountId32,
				pub proxy_type: runtime_types::babe_runtime::ProxyType,
				pub delay: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for ProxyAdded {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "ProxyAdded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A proxy was removed.
			pub struct ProxyRemoved {
				pub delegator: ::subxt::utils::AccountId32,
				pub delegatee: ::subxt::utils::AccountId32,
				pub proxy_type: runtime_types::babe_runtime::ProxyType,
				pub delay: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for ProxyRemoved {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "ProxyRemoved";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The set of account proxies. Maps the account which has delegated to the accounts
				/// which are being delegated to, together with the amount held on deposit.
				pub fn proxies(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::pallet_proxy::ProxyDefinition<
								::subxt::utils::AccountId32,
								runtime_types::babe_runtime::ProxyType,
								::core::primitive::u32,
							>,
						>,
						::core::primitive::u128,
					),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Proxy",
						"Proxies",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							35u8, 140u8, 42u8, 184u8, 125u8, 223u8, 255u8, 143u8, 55u8, 148u8,
							168u8, 246u8, 208u8, 160u8, 176u8, 177u8, 174u8, 162u8, 90u8, 65u8,
							156u8, 91u8, 110u8, 131u8, 24u8, 8u8, 18u8, 89u8, 96u8, 108u8, 55u8,
							47u8,
						],
					)
				}
				/// The set of account proxies. Maps the account which has delegated to the accounts
				/// which are being delegated to, together with the amount held on deposit.
				pub fn proxies_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::pallet_proxy::ProxyDefinition<
								::subxt::utils::AccountId32,
								runtime_types::babe_runtime::ProxyType,
								::core::primitive::u32,
							>,
						>,
						::core::primitive::u128,
					),
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Proxy",
						"Proxies",
						Vec::new(),
						[
							35u8, 140u8, 42u8, 184u8, 125u8, 223u8, 255u8, 143u8, 55u8, 148u8,
							168u8, 246u8, 208u8, 160u8, 176u8, 177u8, 174u8, 162u8, 90u8, 65u8,
							156u8, 91u8, 110u8, 131u8, 24u8, 8u8, 18u8, 89u8, 96u8, 108u8, 55u8,
							47u8,
						],
					)
				}
				/// The announcements made by the proxy (key).
				pub fn announcements(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::pallet_proxy::Announcement<
								::subxt::utils::AccountId32,
								::subxt::utils::H256,
								::core::primitive::u32,
							>,
						>,
						::core::primitive::u128,
					),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Proxy",
						"Announcements",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							233u8, 38u8, 249u8, 89u8, 103u8, 87u8, 64u8, 52u8, 140u8, 228u8, 110u8,
							37u8, 8u8, 92u8, 48u8, 7u8, 46u8, 99u8, 179u8, 83u8, 232u8, 171u8,
							160u8, 45u8, 37u8, 23u8, 151u8, 198u8, 237u8, 103u8, 217u8, 53u8,
						],
					)
				}
				/// The announcements made by the proxy (key).
				pub fn announcements_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::pallet_proxy::Announcement<
								::subxt::utils::AccountId32,
								::subxt::utils::H256,
								::core::primitive::u32,
							>,
						>,
						::core::primitive::u128,
					),
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Proxy",
						"Announcements",
						Vec::new(),
						[
							233u8, 38u8, 249u8, 89u8, 103u8, 87u8, 64u8, 52u8, 140u8, 228u8, 110u8,
							37u8, 8u8, 92u8, 48u8, 7u8, 46u8, 99u8, 179u8, 83u8, 232u8, 171u8,
							160u8, 45u8, 37u8, 23u8, 151u8, 198u8, 237u8, 103u8, 217u8, 53u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The base amount of currency needed to reserve for creating a proxy.
				///
				/// This is held for an additional storage item whose value size is
				/// `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes.
				pub fn proxy_deposit_base(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Proxy",
						"ProxyDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The amount of currency needed per proxy added.
				///
				/// This is held for adding 32 bytes plus an instance of `ProxyType` more into a
				/// pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one
				/// should take into account `32 + proxy_type.encode().len()` bytes of data.
				pub fn proxy_deposit_factor(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Proxy",
						"ProxyDepositFactor",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The maximum amount of proxies allowed for a single account.
				pub fn max_proxies(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Proxy",
						"MaxProxies",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum amount of time-delayed announcements that are allowed to be pending.
				pub fn max_pending(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Proxy",
						"MaxPending",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The base amount of currency needed to reserve for creating an announcement.
				///
				/// This is held when a new storage item holding a `Balance` is created (typically
				/// 16 bytes).
				pub fn announcement_deposit_base(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Proxy",
						"AnnouncementDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The amount of currency needed per announcement made.
				///
				/// This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68
				/// bytes) into a pre-existing storage value.
				pub fn announcement_deposit_factor(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Proxy",
						"AnnouncementDepositFactor",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
			}
		}
	}
	pub mod multisig {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AsMultiThreshold1 {
				pub other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
				pub call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AsMulti {
				pub threshold: ::core::primitive::u16,
				pub other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
				pub maybe_timepoint: ::core::option::Option<
					runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
				>,
				pub call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
				pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ApproveAsMulti {
				pub threshold: ::core::primitive::u16,
				pub other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
				pub maybe_timepoint: ::core::option::Option<
					runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
				>,
				pub call_hash: [::core::primitive::u8; 32usize],
				pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CancelAsMulti {
				pub threshold: ::core::primitive::u16,
				pub other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
				pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
				pub call_hash: [::core::primitive::u8; 32usize],
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Immediately dispatch a multi-signature call using a single approval from the
				/// caller.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				/// - `other_signatories`: The accounts (other than the sender) who are part of the
				///multi-signature, but do not participate in the approval process.
				/// - `call`: The call to be executed.
				///
				///Result is equivalent to the dispatched result.
				///
				///## Complexity
				///O(Z + C) where Z is the length of the call and C its execution weight.
				pub fn as_multi_threshold_1(
					&self,
					other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
					call: runtime_types::babe_runtime::RuntimeCall,
				) -> ::subxt::tx::Payload<AsMultiThreshold1> {
					::subxt::tx::Payload::new_static(
						"Multisig",
						"as_multi_threshold_1",
						AsMultiThreshold1 { other_signatories, call: ::std::boxed::Box::new(call) },
						[
							87u8, 152u8, 247u8, 52u8, 241u8, 177u8, 28u8, 182u8, 114u8, 86u8, 34u8,
							125u8, 31u8, 97u8, 55u8, 51u8, 56u8, 56u8, 108u8, 122u8, 54u8, 78u8,
							231u8, 97u8, 241u8, 24u8, 183u8, 140u8, 209u8, 130u8, 171u8, 128u8,
						],
					)
				}
				///Register approval for a dispatch to be made from a deterministic composite
				/// account if approved by a total of `threshold - 1` of `other_signatories`.
				///
				///If there are enough, then dispatch the call.
				///
				///Payment: `DepositBase` will be reserved if this is the first approval, plus
				///`threshold` times `DepositFactor`. It is returned once this dispatch happens or
				///is cancelled.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				/// - `threshold`: The total number of approvals for this dispatch before it is
				///   executed.
				/// - `other_signatories`: The accounts (other than the sender) who can approve this
				///dispatch. May not be empty.
				/// - `maybe_timepoint`: If this is the first approval, then this must be `None`. If
				///   it is
				///not the first approval, then it must be `Some`, with the timepoint (block number
				/// and transaction index) of the first approval transaction.
				/// - `call`: The call to be executed.
				///
				///NOTE: Unless this is the final approval, you will generally want to use
				///`approve_as_multi` instead, since it only requires a hash of the call.
				///
				///Result is equivalent to the dispatched result if `threshold` is exactly `1`.
				/// Otherwise on success, result is `Ok` and the result from the interior call, if
				/// it was executed, may be found in the deposited `MultisigExecuted` event.
				///
				///## Complexity
				/// - `O(S + Z + Call)`.
				/// - Up to one balance-reserve or unreserve operation.
				/// - One passthrough operation, one insert, both `O(S)` where `S` is the number of
				///  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
				/// - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
				/// - One encode & hash, both of complexity `O(S)`.
				/// - Up to one binary search and insert (`O(logS + S)`).
				/// - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
				/// - One event.
				/// - The weight of the `call`.
				/// - Storage: inserts one item, value size bounded by `MaxSignatories`, with a
				///   deposit
				///  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
				pub fn as_multi(
					&self,
					threshold: ::core::primitive::u16,
					other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
					maybe_timepoint: ::core::option::Option<
						runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
					>,
					call: runtime_types::babe_runtime::RuntimeCall,
					max_weight: runtime_types::sp_weights::weight_v2::Weight,
				) -> ::subxt::tx::Payload<AsMulti> {
					::subxt::tx::Payload::new_static(
						"Multisig",
						"as_multi",
						AsMulti {
							threshold,
							other_signatories,
							maybe_timepoint,
							call: ::std::boxed::Box::new(call),
							max_weight,
						},
						[
							166u8, 175u8, 115u8, 60u8, 132u8, 120u8, 194u8, 7u8, 139u8, 207u8,
							197u8, 77u8, 194u8, 48u8, 180u8, 114u8, 136u8, 89u8, 200u8, 14u8,
							149u8, 189u8, 255u8, 182u8, 8u8, 215u8, 13u8, 0u8, 222u8, 219u8, 86u8,
							176u8,
						],
					)
				}
				///Register approval for a dispatch to be made from a deterministic composite
				/// account if approved by a total of `threshold - 1` of `other_signatories`.
				///
				///Payment: `DepositBase` will be reserved if this is the first approval, plus
				///`threshold` times `DepositFactor`. It is returned once this dispatch happens or
				///is cancelled.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				/// - `threshold`: The total number of approvals for this dispatch before it is
				///   executed.
				/// - `other_signatories`: The accounts (other than the sender) who can approve this
				///dispatch. May not be empty.
				/// - `maybe_timepoint`: If this is the first approval, then this must be `None`. If
				///   it is
				///not the first approval, then it must be `Some`, with the timepoint (block number
				/// and transaction index) of the first approval transaction.
				/// - `call_hash`: The hash of the call to be executed.
				///
				///NOTE: If this is the final approval, you will want to use `as_multi` instead.
				///
				///## Complexity
				/// - `O(S)`.
				/// - Up to one balance-reserve or unreserve operation.
				/// - One passthrough operation, one insert, both `O(S)` where `S` is the number of
				///  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
				/// - One encode & hash, both of complexity `O(S)`.
				/// - Up to one binary search and insert (`O(logS + S)`).
				/// - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
				/// - One event.
				/// - Storage: inserts one item, value size bounded by `MaxSignatories`, with a
				///   deposit
				///  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
				pub fn approve_as_multi(
					&self,
					threshold: ::core::primitive::u16,
					other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
					maybe_timepoint: ::core::option::Option<
						runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
					>,
					call_hash: [::core::primitive::u8; 32usize],
					max_weight: runtime_types::sp_weights::weight_v2::Weight,
				) -> ::subxt::tx::Payload<ApproveAsMulti> {
					::subxt::tx::Payload::new_static(
						"Multisig",
						"approve_as_multi",
						ApproveAsMulti {
							threshold,
							other_signatories,
							maybe_timepoint,
							call_hash,
							max_weight,
						},
						[
							133u8, 113u8, 121u8, 66u8, 218u8, 219u8, 48u8, 64u8, 211u8, 114u8,
							163u8, 193u8, 164u8, 21u8, 140u8, 218u8, 253u8, 237u8, 240u8, 126u8,
							200u8, 213u8, 184u8, 50u8, 187u8, 182u8, 30u8, 52u8, 142u8, 72u8,
							210u8, 101u8,
						],
					)
				}
				///Cancel a pre-existing, on-going multisig transaction. Any deposit reserved
				/// previously for this operation will be unreserved on success.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				/// - `threshold`: The total number of approvals for this dispatch before it is
				///   executed.
				/// - `other_signatories`: The accounts (other than the sender) who can approve this
				///dispatch. May not be empty.
				/// - `timepoint`: The timepoint (block number and transaction index) of the first
				///   approval
				///transaction for this dispatch.
				/// - `call_hash`: The hash of the call to be executed.
				///
				///## Complexity
				/// - `O(S)`.
				/// - Up to one balance-reserve or unreserve operation.
				/// - One passthrough operation, one insert, both `O(S)` where `S` is the number of
				///  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
				/// - One encode & hash, both of complexity `O(S)`.
				/// - One event.
				/// - I/O: 1 read `O(S)`, one remove.
				/// - Storage: removes one item.
				pub fn cancel_as_multi(
					&self,
					threshold: ::core::primitive::u16,
					other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
					timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
					call_hash: [::core::primitive::u8; 32usize],
				) -> ::subxt::tx::Payload<CancelAsMulti> {
					::subxt::tx::Payload::new_static(
						"Multisig",
						"cancel_as_multi",
						CancelAsMulti { threshold, other_signatories, timepoint, call_hash },
						[
							30u8, 25u8, 186u8, 142u8, 168u8, 81u8, 235u8, 164u8, 82u8, 209u8, 66u8,
							129u8, 209u8, 78u8, 172u8, 9u8, 163u8, 222u8, 125u8, 57u8, 2u8, 43u8,
							169u8, 174u8, 159u8, 167u8, 25u8, 226u8, 254u8, 110u8, 80u8, 216u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_multisig::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A new multisig operation has begun.
			pub struct NewMultisig {
				pub approving: ::subxt::utils::AccountId32,
				pub multisig: ::subxt::utils::AccountId32,
				pub call_hash: [::core::primitive::u8; 32usize],
			}
			impl ::subxt::events::StaticEvent for NewMultisig {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "NewMultisig";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A multisig operation has been approved by someone.
			pub struct MultisigApproval {
				pub approving: ::subxt::utils::AccountId32,
				pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
				pub multisig: ::subxt::utils::AccountId32,
				pub call_hash: [::core::primitive::u8; 32usize],
			}
			impl ::subxt::events::StaticEvent for MultisigApproval {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "MultisigApproval";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A multisig operation has been executed.
			pub struct MultisigExecuted {
				pub approving: ::subxt::utils::AccountId32,
				pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
				pub multisig: ::subxt::utils::AccountId32,
				pub call_hash: [::core::primitive::u8; 32usize],
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for MultisigExecuted {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "MultisigExecuted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A multisig operation has been cancelled.
			pub struct MultisigCancelled {
				pub cancelling: ::subxt::utils::AccountId32,
				pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
				pub multisig: ::subxt::utils::AccountId32,
				pub call_hash: [::core::primitive::u8; 32usize],
			}
			impl ::subxt::events::StaticEvent for MultisigCancelled {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "MultisigCancelled";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The set of open multisig operations.
				pub fn multisigs(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
					_1: impl ::std::borrow::Borrow<[::core::primitive::u8; 32usize]>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_multisig::Multisig<
						::core::primitive::u32,
						::core::primitive::u128,
						::subxt::utils::AccountId32,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Multisig",
						"Multisigs",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							69u8, 153u8, 186u8, 204u8, 117u8, 95u8, 119u8, 182u8, 220u8, 87u8, 8u8,
							15u8, 123u8, 83u8, 5u8, 188u8, 115u8, 121u8, 163u8, 96u8, 218u8, 3u8,
							106u8, 44u8, 44u8, 187u8, 46u8, 238u8, 80u8, 203u8, 175u8, 155u8,
						],
					)
				}
				/// The set of open multisig operations.
				pub fn multisigs_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_multisig::Multisig<
						::core::primitive::u32,
						::core::primitive::u128,
						::subxt::utils::AccountId32,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Multisig",
						"Multisigs",
						Vec::new(),
						[
							69u8, 153u8, 186u8, 204u8, 117u8, 95u8, 119u8, 182u8, 220u8, 87u8, 8u8,
							15u8, 123u8, 83u8, 5u8, 188u8, 115u8, 121u8, 163u8, 96u8, 218u8, 3u8,
							106u8, 44u8, 44u8, 187u8, 46u8, 238u8, 80u8, 203u8, 175u8, 155u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The base amount of currency needed to reserve for creating a multisig execution
				/// or to store a dispatch call for later.
				///
				/// This is held for an additional storage item whose value size is
				/// `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is
				/// `32 + sizeof(AccountId)` bytes.
				pub fn deposit_base(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Multisig",
						"DepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The amount of currency needed per unit threshold when creating a multisig
				/// execution.
				///
				/// This is held for adding 32 bytes more into a pre-existing storage value.
				pub fn deposit_factor(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Multisig",
						"DepositFactor",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The maximum amount of signatories allowed in the multisig.
				pub fn max_signatories(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Multisig",
						"MaxSignatories",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod bounties {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ProposeBounty {
				#[codec(compact)]
				pub value: ::core::primitive::u128,
				pub description: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ApproveBounty {
				#[codec(compact)]
				pub bounty_id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ProposeCurator {
				#[codec(compact)]
				pub bounty_id: ::core::primitive::u32,
				pub curator: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub fee: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct UnassignCurator {
				#[codec(compact)]
				pub bounty_id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AcceptCurator {
				#[codec(compact)]
				pub bounty_id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AwardBounty {
				#[codec(compact)]
				pub bounty_id: ::core::primitive::u32,
				pub beneficiary: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClaimBounty {
				#[codec(compact)]
				pub bounty_id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CloseBounty {
				#[codec(compact)]
				pub bounty_id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ExtendBountyExpiry {
				#[codec(compact)]
				pub bounty_id: ::core::primitive::u32,
				pub remark: ::std::vec::Vec<::core::primitive::u8>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Propose a new bounty.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				///Payment: `TipReportDepositBase` will be reserved from the origin account, as
				/// well as `DataDepositPerByte` for each byte in `reason`. It will be unreserved
				/// upon approval, or slashed when rejected.
				///
				/// - `curator`: The curator account whom will manage this bounty.
				/// - `fee`: The curator fee.
				/// - `value`: The total payment amount of this bounty, curator fee included.
				/// - `description`: The description of this bounty.
				pub fn propose_bounty(
					&self,
					value: ::core::primitive::u128,
					description: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::Payload<ProposeBounty> {
					::subxt::tx::Payload::new_static(
						"Bounties",
						"propose_bounty",
						ProposeBounty { value, description },
						[
							99u8, 160u8, 94u8, 74u8, 105u8, 161u8, 123u8, 239u8, 241u8, 117u8,
							97u8, 99u8, 84u8, 101u8, 87u8, 3u8, 88u8, 175u8, 75u8, 59u8, 114u8,
							87u8, 18u8, 113u8, 126u8, 26u8, 42u8, 104u8, 201u8, 128u8, 102u8,
							219u8,
						],
					)
				}
				///Approve a bounty proposal. At a later time, the bounty will be funded and become
				/// active and the original deposit will be returned.
				///
				///May only be called from `T::SpendOrigin`.
				///
				///## Complexity
				/// - O(1).
				pub fn approve_bounty(
					&self,
					bounty_id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<ApproveBounty> {
					::subxt::tx::Payload::new_static(
						"Bounties",
						"approve_bounty",
						ApproveBounty { bounty_id },
						[
							82u8, 228u8, 232u8, 103u8, 198u8, 173u8, 190u8, 148u8, 159u8, 86u8,
							48u8, 4u8, 32u8, 169u8, 1u8, 129u8, 96u8, 145u8, 235u8, 68u8, 48u8,
							34u8, 5u8, 1u8, 76u8, 26u8, 100u8, 228u8, 92u8, 198u8, 183u8, 173u8,
						],
					)
				}
				///Assign a curator to a funded bounty.
				///
				///May only be called from `T::SpendOrigin`.
				///
				///## Complexity
				/// - O(1).
				pub fn propose_curator(
					&self,
					bounty_id: ::core::primitive::u32,
					curator: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					fee: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<ProposeCurator> {
					::subxt::tx::Payload::new_static(
						"Bounties",
						"propose_curator",
						ProposeCurator { bounty_id, curator, fee },
						[
							85u8, 186u8, 206u8, 137u8, 98u8, 87u8, 202u8, 71u8, 89u8, 241u8, 56u8,
							212u8, 89u8, 215u8, 65u8, 97u8, 202u8, 139u8, 78u8, 66u8, 92u8, 177u8,
							163u8, 111u8, 212u8, 244u8, 41u8, 153u8, 104u8, 129u8, 112u8, 237u8,
						],
					)
				}
				///Unassign curator from a bounty.
				///
				///This function can only be called by the `RejectOrigin` a signed origin.
				///
				///If this function is called by the `RejectOrigin`, we assume that the curator is
				///malicious or inactive. As a result, we will slash the curator when possible.
				///
				///If the origin is the curator, we take this as a sign they are unable to do their
				/// job and they willingly give up. We could slash them, but for now we allow them
				/// to recover their deposit and exit without issue. (We may want to change this if
				/// it is abused.)
				///
				///Finally, the origin can be anyone if and only if the curator is "inactive". This
				/// allows anyone in the community to call out that a curator is not doing their due
				/// diligence, and we should pick a new curator. In this case the curator should
				/// also be slashed.
				///
				///## Complexity
				/// - O(1).
				pub fn unassign_curator(
					&self,
					bounty_id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<UnassignCurator> {
					::subxt::tx::Payload::new_static(
						"Bounties",
						"unassign_curator",
						UnassignCurator { bounty_id },
						[
							218u8, 241u8, 247u8, 89u8, 95u8, 120u8, 93u8, 18u8, 85u8, 114u8, 158u8,
							254u8, 68u8, 77u8, 230u8, 186u8, 230u8, 201u8, 63u8, 223u8, 28u8,
							173u8, 244u8, 82u8, 113u8, 177u8, 99u8, 27u8, 207u8, 247u8, 207u8,
							213u8,
						],
					)
				}
				///Accept the curator role for a bounty.
				///A deposit will be reserved from curator and refund upon successful payout.
				///
				///May only be called from the curator.
				///
				///## Complexity
				/// - O(1).
				pub fn accept_curator(
					&self,
					bounty_id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<AcceptCurator> {
					::subxt::tx::Payload::new_static(
						"Bounties",
						"accept_curator",
						AcceptCurator { bounty_id },
						[
							106u8, 96u8, 22u8, 67u8, 52u8, 109u8, 180u8, 225u8, 122u8, 253u8,
							209u8, 214u8, 132u8, 131u8, 247u8, 131u8, 162u8, 51u8, 144u8, 30u8,
							12u8, 126u8, 50u8, 152u8, 229u8, 119u8, 54u8, 116u8, 112u8, 235u8,
							34u8, 166u8,
						],
					)
				}
				///Award bounty to a beneficiary account. The beneficiary will be able to claim the
				/// funds after a delay.
				///
				///The dispatch origin for this call must be the curator of this bounty.
				///
				/// - `bounty_id`: Bounty ID to award.
				/// - `beneficiary`: The beneficiary account whom will receive the payout.
				///
				///## Complexity
				/// - O(1).
				pub fn award_bounty(
					&self,
					bounty_id: ::core::primitive::u32,
					beneficiary: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<AwardBounty> {
					::subxt::tx::Payload::new_static(
						"Bounties",
						"award_bounty",
						AwardBounty { bounty_id, beneficiary },
						[
							7u8, 205u8, 73u8, 45u8, 57u8, 8u8, 24u8, 135u8, 89u8, 157u8, 35u8,
							176u8, 224u8, 106u8, 167u8, 232u8, 230u8, 153u8, 239u8, 45u8, 210u8,
							61u8, 17u8, 106u8, 220u8, 131u8, 105u8, 136u8, 232u8, 194u8, 243u8,
							48u8,
						],
					)
				}
				///Claim the payout from an awarded bounty after payout delay.
				///
				///The dispatch origin for this call must be the beneficiary of this bounty.
				///
				/// - `bounty_id`: Bounty ID to claim.
				///
				///## Complexity
				/// - O(1).
				pub fn claim_bounty(
					&self,
					bounty_id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<ClaimBounty> {
					::subxt::tx::Payload::new_static(
						"Bounties",
						"claim_bounty",
						ClaimBounty { bounty_id },
						[
							102u8, 95u8, 8u8, 89u8, 4u8, 126u8, 189u8, 28u8, 241u8, 16u8, 125u8,
							218u8, 42u8, 92u8, 177u8, 91u8, 8u8, 235u8, 33u8, 48u8, 64u8, 115u8,
							177u8, 95u8, 242u8, 97u8, 181u8, 50u8, 68u8, 37u8, 59u8, 85u8,
						],
					)
				}
				///Cancel a proposed or active bounty. All the funds will be sent to treasury and
				///the curator deposit will be unreserved if possible.
				///
				///Only `T::RejectOrigin` is able to cancel a bounty.
				///
				/// - `bounty_id`: Bounty ID to cancel.
				///
				///## Complexity
				/// - O(1).
				pub fn close_bounty(
					&self,
					bounty_id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<CloseBounty> {
					::subxt::tx::Payload::new_static(
						"Bounties",
						"close_bounty",
						CloseBounty { bounty_id },
						[
							64u8, 113u8, 151u8, 228u8, 90u8, 55u8, 251u8, 63u8, 27u8, 211u8, 119u8,
							229u8, 137u8, 137u8, 183u8, 240u8, 241u8, 146u8, 69u8, 169u8, 124u8,
							220u8, 236u8, 111u8, 98u8, 188u8, 100u8, 52u8, 127u8, 245u8, 244u8,
							92u8,
						],
					)
				}
				///Extend the expiry time of an active bounty.
				///
				///The dispatch origin for this call must be the curator of this bounty.
				///
				/// - `bounty_id`: Bounty ID to extend.
				/// - `remark`: additional information.
				///
				///## Complexity
				/// - O(1).
				pub fn extend_bounty_expiry(
					&self,
					bounty_id: ::core::primitive::u32,
					remark: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::Payload<ExtendBountyExpiry> {
					::subxt::tx::Payload::new_static(
						"Bounties",
						"extend_bounty_expiry",
						ExtendBountyExpiry { bounty_id, remark },
						[
							97u8, 69u8, 157u8, 39u8, 59u8, 72u8, 79u8, 88u8, 104u8, 119u8, 91u8,
							26u8, 73u8, 216u8, 174u8, 95u8, 254u8, 214u8, 63u8, 138u8, 100u8,
							112u8, 185u8, 81u8, 159u8, 247u8, 221u8, 60u8, 87u8, 40u8, 80u8, 202u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_bounties::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///New bounty proposal.
			pub struct BountyProposed {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for BountyProposed {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyProposed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A bounty proposal was rejected; funds were slashed.
			pub struct BountyRejected {
				pub index: ::core::primitive::u32,
				pub bond: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for BountyRejected {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyRejected";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A bounty proposal is funded and became active.
			pub struct BountyBecameActive {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for BountyBecameActive {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyBecameActive";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A bounty is awarded to a beneficiary.
			pub struct BountyAwarded {
				pub index: ::core::primitive::u32,
				pub beneficiary: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for BountyAwarded {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyAwarded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A bounty is claimed by beneficiary.
			pub struct BountyClaimed {
				pub index: ::core::primitive::u32,
				pub payout: ::core::primitive::u128,
				pub beneficiary: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for BountyClaimed {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyClaimed";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A bounty is cancelled.
			pub struct BountyCanceled {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for BountyCanceled {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyCanceled";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A bounty expiry is extended.
			pub struct BountyExtended {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for BountyExtended {
				const PALLET: &'static str = "Bounties";
				const EVENT: &'static str = "BountyExtended";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// Number of bounty proposals that have been made.
				pub fn bounty_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Bounties",
						"BountyCount",
						vec![],
						[
							5u8, 188u8, 134u8, 220u8, 64u8, 49u8, 188u8, 98u8, 185u8, 186u8, 230u8,
							65u8, 247u8, 199u8, 28u8, 178u8, 202u8, 193u8, 41u8, 83u8, 115u8,
							253u8, 182u8, 123u8, 92u8, 138u8, 12u8, 31u8, 31u8, 213u8, 23u8, 118u8,
						],
					)
				}
				/// Bounties that have been made.
				pub fn bounties(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_bounties::Bounty<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
						::core::primitive::u32,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Bounties",
						"Bounties",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							111u8, 149u8, 33u8, 54u8, 172u8, 143u8, 41u8, 231u8, 184u8, 255u8,
							238u8, 206u8, 87u8, 142u8, 84u8, 10u8, 236u8, 141u8, 190u8, 193u8,
							72u8, 170u8, 19u8, 110u8, 135u8, 136u8, 220u8, 11u8, 99u8, 126u8,
							225u8, 208u8,
						],
					)
				}
				/// Bounties that have been made.
				pub fn bounties_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_bounties::Bounty<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
						::core::primitive::u32,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Bounties",
						"Bounties",
						Vec::new(),
						[
							111u8, 149u8, 33u8, 54u8, 172u8, 143u8, 41u8, 231u8, 184u8, 255u8,
							238u8, 206u8, 87u8, 142u8, 84u8, 10u8, 236u8, 141u8, 190u8, 193u8,
							72u8, 170u8, 19u8, 110u8, 135u8, 136u8, 220u8, 11u8, 99u8, 126u8,
							225u8, 208u8,
						],
					)
				}
				/// The description of each bounty.
				pub fn bounty_descriptions(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Bounties",
						"BountyDescriptions",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							252u8, 0u8, 9u8, 225u8, 13u8, 135u8, 7u8, 121u8, 154u8, 155u8, 116u8,
							83u8, 160u8, 37u8, 72u8, 11u8, 72u8, 0u8, 248u8, 73u8, 158u8, 84u8,
							125u8, 221u8, 176u8, 231u8, 100u8, 239u8, 111u8, 22u8, 29u8, 13u8,
						],
					)
				}
				/// The description of each bounty.
				pub fn bounty_descriptions_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Bounties",
						"BountyDescriptions",
						Vec::new(),
						[
							252u8, 0u8, 9u8, 225u8, 13u8, 135u8, 7u8, 121u8, 154u8, 155u8, 116u8,
							83u8, 160u8, 37u8, 72u8, 11u8, 72u8, 0u8, 248u8, 73u8, 158u8, 84u8,
							125u8, 221u8, 176u8, 231u8, 100u8, 239u8, 111u8, 22u8, 29u8, 13u8,
						],
					)
				}
				/// Bounty indices that have been approved but not yet funded.
				pub fn bounty_approvals(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u32,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Bounties",
						"BountyApprovals",
						vec![],
						[
							64u8, 93u8, 54u8, 94u8, 122u8, 9u8, 246u8, 86u8, 234u8, 30u8, 125u8,
							132u8, 49u8, 128u8, 1u8, 219u8, 241u8, 13u8, 217u8, 186u8, 48u8, 21u8,
							5u8, 227u8, 71u8, 157u8, 128u8, 226u8, 214u8, 49u8, 249u8, 183u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The amount held on deposit for placing a bounty proposal.
				pub fn bounty_deposit_base(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Bounties",
						"BountyDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The delay period for which a bounty beneficiary need to wait before claim the
				/// payout.
				pub fn bounty_deposit_payout_delay(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Bounties",
						"BountyDepositPayoutDelay",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Bounty duration in blocks.
				pub fn bounty_update_period(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Bounties",
						"BountyUpdatePeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The curator deposit is calculated as a percentage of the curator fee.
				///
				/// This deposit has optional upper and lower bounds with `CuratorDepositMax` and
				/// `CuratorDepositMin`.
				pub fn curator_deposit_multiplier(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Permill>
				{
					::subxt::constants::Address::new_static(
						"Bounties",
						"CuratorDepositMultiplier",
						[
							225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8, 192u8, 254u8, 19u8, 87u8,
							80u8, 16u8, 62u8, 42u8, 204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
							177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8, 86u8, 227u8,
						],
					)
				}
				/// Maximum amount of funds that should be placed in a deposit for making a
				/// proposal.
				pub fn curator_deposit_max(
					&self,
				) -> ::subxt::constants::Address<::core::option::Option<::core::primitive::u128>> {
					::subxt::constants::Address::new_static(
						"Bounties",
						"CuratorDepositMax",
						[
							84u8, 154u8, 218u8, 83u8, 84u8, 189u8, 32u8, 20u8, 120u8, 194u8, 88u8,
							205u8, 109u8, 216u8, 114u8, 193u8, 120u8, 198u8, 154u8, 237u8, 134u8,
							204u8, 102u8, 247u8, 52u8, 103u8, 231u8, 43u8, 243u8, 122u8, 60u8,
							216u8,
						],
					)
				}
				/// Minimum amount of funds that should be placed in a deposit for making a
				/// proposal.
				pub fn curator_deposit_min(
					&self,
				) -> ::subxt::constants::Address<::core::option::Option<::core::primitive::u128>> {
					::subxt::constants::Address::new_static(
						"Bounties",
						"CuratorDepositMin",
						[
							84u8, 154u8, 218u8, 83u8, 84u8, 189u8, 32u8, 20u8, 120u8, 194u8, 88u8,
							205u8, 109u8, 216u8, 114u8, 193u8, 120u8, 198u8, 154u8, 237u8, 134u8,
							204u8, 102u8, 247u8, 52u8, 103u8, 231u8, 43u8, 243u8, 122u8, 60u8,
							216u8,
						],
					)
				}
				/// Minimum value for a bounty.
				pub fn bounty_value_minimum(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Bounties",
						"BountyValueMinimum",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The amount held on deposit per byte within the tip report reason or bounty
				/// description.
				pub fn data_deposit_per_byte(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Bounties",
						"DataDepositPerByte",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// Maximum acceptable reason length.
				///
				/// Benchmarks depend on this value, be sure to update weights file when changing
				/// this value
				pub fn maximum_reason_length(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Bounties",
						"MaximumReasonLength",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod tips {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ReportAwesome {
				pub reason: ::std::vec::Vec<::core::primitive::u8>,
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RetractTip {
				pub hash: ::subxt::utils::H256,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TipNew {
				pub reason: ::std::vec::Vec<::core::primitive::u8>,
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub tip_value: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Tip {
				pub hash: ::subxt::utils::H256,
				#[codec(compact)]
				pub tip_value: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CloseTip {
				pub hash: ::subxt::utils::H256,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SlashTip {
				pub hash: ::subxt::utils::H256,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Report something `reason` that deserves a tip and claim any eventual the
				/// finder's fee.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				///Payment: `TipReportDepositBase` will be reserved from the origin account, as
				/// well as `DataDepositPerByte` for each byte in `reason`.
				///
				/// - `reason`: The reason for, or the thing that deserves, the tip; generally this
				///   will be
				///  a UTF-8-encoded URL.
				/// - `who`: The account which should be credited for the tip.
				///
				///Emits `NewTip` if successful.
				///
				///## Complexity
				/// - `O(R)` where `R` length of `reason`.
				///  - encoding and hashing of 'reason'
				pub fn report_awesome(
					&self,
					reason: ::std::vec::Vec<::core::primitive::u8>,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<ReportAwesome> {
					::subxt::tx::Payload::new_static(
						"Tips",
						"report_awesome",
						ReportAwesome { reason, who },
						[
							234u8, 199u8, 253u8, 109u8, 105u8, 252u8, 249u8, 138u8, 197u8, 187u8,
							226u8, 67u8, 195u8, 51u8, 197u8, 85u8, 110u8, 173u8, 85u8, 176u8, 27u8,
							147u8, 221u8, 85u8, 177u8, 55u8, 2u8, 218u8, 4u8, 115u8, 67u8, 121u8,
						],
					)
				}
				///Retract a prior tip-report from `report_awesome`, and cancel the process of
				/// tipping.
				///
				///If successful, the original deposit will be unreserved.
				///
				///The dispatch origin for this call must be _Signed_ and the tip identified by
				/// `hash` must have been reported by the signing account through `report_awesome`
				/// (and not through `tip_new`).
				///
				/// - `hash`: The identity of the open tip for which a tip value is declared. This
				///   is formed
				///  as the hash of the tuple of the original tip `reason` and the beneficiary
				/// account ID.
				///
				///Emits `TipRetracted` if successful.
				///
				///## Complexity
				/// - `O(1)`
				///  - Depends on the length of `T::Hash` which is fixed.
				pub fn retract_tip(
					&self,
					hash: ::subxt::utils::H256,
				) -> ::subxt::tx::Payload<RetractTip> {
					::subxt::tx::Payload::new_static(
						"Tips",
						"retract_tip",
						RetractTip { hash },
						[
							137u8, 42u8, 229u8, 188u8, 157u8, 195u8, 184u8, 176u8, 64u8, 142u8,
							67u8, 175u8, 185u8, 207u8, 214u8, 71u8, 165u8, 29u8, 137u8, 227u8,
							132u8, 195u8, 255u8, 66u8, 186u8, 57u8, 34u8, 184u8, 187u8, 65u8,
							129u8, 131u8,
						],
					)
				}
				///Give a tip for something new; no finder's fee will be taken.
				///
				///The dispatch origin for this call must be _Signed_ and the signing account must
				/// be a member of the `Tippers` set.
				///
				/// - `reason`: The reason for, or the thing that deserves, the tip; generally this
				///   will be
				///  a UTF-8-encoded URL.
				/// - `who`: The account which should be credited for the tip.
				/// - `tip_value`: The amount of tip that the sender would like to give. The median
				///   tip
				///  value of active tippers will be given to the `who`.
				///
				///Emits `NewTip` if successful.
				///
				///## Complexity
				/// - `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.
				///  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound
				///    given by `ContainsLengthBound`. The actual cost depends on the implementation
				///    of `T::Tippers`.
				///  - `O(R)`: hashing and encoding of reason of length `R`
				pub fn tip_new(
					&self,
					reason: ::std::vec::Vec<::core::primitive::u8>,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					tip_value: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<TipNew> {
					::subxt::tx::Payload::new_static(
						"Tips",
						"tip_new",
						TipNew { reason, who, tip_value },
						[
							166u8, 19u8, 234u8, 170u8, 180u8, 74u8, 235u8, 156u8, 58u8, 125u8,
							199u8, 215u8, 15u8, 96u8, 240u8, 71u8, 205u8, 61u8, 60u8, 204u8, 12u8,
							35u8, 252u8, 233u8, 31u8, 86u8, 204u8, 230u8, 40u8, 247u8, 47u8, 135u8,
						],
					)
				}
				///Declare a tip value for an already-open tip.
				///
				///The dispatch origin for this call must be _Signed_ and the signing account must
				/// be a member of the `Tippers` set.
				///
				/// - `hash`: The identity of the open tip for which a tip value is declared. This
				///   is formed
				///  as the hash of the tuple of the hash of the original tip `reason` and the
				/// beneficiary  account ID.
				/// - `tip_value`: The amount of tip that the sender would like to give. The median
				///   tip
				///  value of active tippers will be given to the `who`.
				///
				///Emits `TipClosing` if the threshold of tippers has been reached and the
				/// countdown period has started.
				///
				///## Complexity
				/// - `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length
				///   `T`, insert
				///  tip and check closing, `T` is charged as upper bound given by
				/// `ContainsLengthBound`.  The actual cost depends on the implementation of
				/// `T::Tippers`.
				///
				///  Actually weight could be lower as it depends on how many tips are in `OpenTip`
				/// but it  is weighted as if almost full i.e of length `T-1`.
				pub fn tip(
					&self,
					hash: ::subxt::utils::H256,
					tip_value: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<Tip> {
					::subxt::tx::Payload::new_static(
						"Tips",
						"tip",
						Tip { hash, tip_value },
						[
							133u8, 52u8, 131u8, 14u8, 71u8, 232u8, 254u8, 31u8, 33u8, 206u8, 50u8,
							76u8, 56u8, 167u8, 228u8, 202u8, 195u8, 0u8, 164u8, 107u8, 170u8, 98u8,
							192u8, 37u8, 209u8, 199u8, 130u8, 15u8, 168u8, 63u8, 181u8, 134u8,
						],
					)
				}
				///Close and payout a tip.
				///
				///The dispatch origin for this call must be _Signed_.
				///
				///The tip identified by `hash` must have finished its countdown period.
				///
				/// - `hash`: The identity of the open tip for which a tip value is declared. This
				///   is formed
				///  as the hash of the tuple of the original tip `reason` and the beneficiary
				/// account ID.
				///
				///## Complexity
				/// - : `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length
				///   `T`. `T`
				///  is charged as upper bound given by `ContainsLengthBound`. The actual cost
				/// depends on  the implementation of `T::Tippers`.
				pub fn close_tip(
					&self,
					hash: ::subxt::utils::H256,
				) -> ::subxt::tx::Payload<CloseTip> {
					::subxt::tx::Payload::new_static(
						"Tips",
						"close_tip",
						CloseTip { hash },
						[
							32u8, 53u8, 0u8, 222u8, 45u8, 157u8, 107u8, 174u8, 203u8, 50u8, 81u8,
							230u8, 6u8, 111u8, 79u8, 55u8, 49u8, 151u8, 107u8, 114u8, 81u8, 200u8,
							144u8, 175u8, 29u8, 142u8, 115u8, 184u8, 102u8, 116u8, 156u8, 173u8,
						],
					)
				}
				///Remove and slash an already-open tip.
				///
				///May only be called from `T::RejectOrigin`.
				///
				///As a result, the finder is slashed and the deposits are lost.
				///
				///Emits `TipSlashed` if successful.
				///
				///## Complexity
				/// - O(1).
				pub fn slash_tip(
					&self,
					hash: ::subxt::utils::H256,
				) -> ::subxt::tx::Payload<SlashTip> {
					::subxt::tx::Payload::new_static(
						"Tips",
						"slash_tip",
						SlashTip { hash },
						[
							222u8, 209u8, 22u8, 47u8, 114u8, 230u8, 81u8, 200u8, 131u8, 0u8, 209u8,
							54u8, 17u8, 200u8, 175u8, 125u8, 100u8, 254u8, 41u8, 178u8, 20u8, 27u8,
							9u8, 184u8, 79u8, 93u8, 208u8, 148u8, 27u8, 190u8, 176u8, 169u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_tips::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A new tip suggestion has been opened.
			pub struct NewTip {
				pub tip_hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for NewTip {
				const PALLET: &'static str = "Tips";
				const EVENT: &'static str = "NewTip";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A tip suggestion has reached threshold and is closing.
			pub struct TipClosing {
				pub tip_hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for TipClosing {
				const PALLET: &'static str = "Tips";
				const EVENT: &'static str = "TipClosing";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A tip suggestion has been closed.
			pub struct TipClosed {
				pub tip_hash: ::subxt::utils::H256,
				pub who: ::subxt::utils::AccountId32,
				pub payout: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for TipClosed {
				const PALLET: &'static str = "Tips";
				const EVENT: &'static str = "TipClosed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A tip suggestion has been retracted.
			pub struct TipRetracted {
				pub tip_hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for TipRetracted {
				const PALLET: &'static str = "Tips";
				const EVENT: &'static str = "TipRetracted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A tip suggestion has been slashed.
			pub struct TipSlashed {
				pub tip_hash: ::subxt::utils::H256,
				pub finder: ::subxt::utils::AccountId32,
				pub deposit: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for TipSlashed {
				const PALLET: &'static str = "Tips";
				const EVENT: &'static str = "TipSlashed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from
				/// the value. This has the insecure enumerable hash function since the key itself
				/// is already guaranteed to be a secure hash.
				pub fn tips(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_tips::OpenTip<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
						::core::primitive::u32,
						::subxt::utils::H256,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Tips",
						"Tips",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							241u8, 196u8, 105u8, 248u8, 29u8, 66u8, 86u8, 98u8, 6u8, 159u8, 191u8,
							0u8, 227u8, 232u8, 147u8, 248u8, 173u8, 20u8, 225u8, 12u8, 232u8, 5u8,
							93u8, 78u8, 18u8, 154u8, 130u8, 38u8, 142u8, 36u8, 66u8, 0u8,
						],
					)
				}
				/// TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from
				/// the value. This has the insecure enumerable hash function since the key itself
				/// is already guaranteed to be a secure hash.
				pub fn tips_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_tips::OpenTip<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
						::core::primitive::u32,
						::subxt::utils::H256,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Tips",
						"Tips",
						Vec::new(),
						[
							241u8, 196u8, 105u8, 248u8, 29u8, 66u8, 86u8, 98u8, 6u8, 159u8, 191u8,
							0u8, 227u8, 232u8, 147u8, 248u8, 173u8, 20u8, 225u8, 12u8, 232u8, 5u8,
							93u8, 78u8, 18u8, 154u8, 130u8, 38u8, 142u8, 36u8, 66u8, 0u8,
						],
					)
				}
				/// Simple preimage lookup from the reason's hash to the original data. Again, has
				/// an insecure enumerable hash since the key is guaranteed to be the result of a
				/// secure hash.
				pub fn reasons(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::core::primitive::u8>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Tips",
						"Reasons",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							202u8, 191u8, 36u8, 162u8, 156u8, 102u8, 115u8, 10u8, 203u8, 35u8,
							201u8, 70u8, 195u8, 151u8, 89u8, 82u8, 202u8, 35u8, 210u8, 176u8, 82u8,
							1u8, 77u8, 94u8, 31u8, 70u8, 252u8, 194u8, 166u8, 91u8, 189u8, 134u8,
						],
					)
				}
				/// Simple preimage lookup from the reason's hash to the original data. Again, has
				/// an insecure enumerable hash since the key is guaranteed to be the result of a
				/// secure hash.
				pub fn reasons_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::core::primitive::u8>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Tips",
						"Reasons",
						Vec::new(),
						[
							202u8, 191u8, 36u8, 162u8, 156u8, 102u8, 115u8, 10u8, 203u8, 35u8,
							201u8, 70u8, 195u8, 151u8, 89u8, 82u8, 202u8, 35u8, 210u8, 176u8, 82u8,
							1u8, 77u8, 94u8, 31u8, 70u8, 252u8, 194u8, 166u8, 91u8, 189u8, 134u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// Maximum acceptable reason length.
				///
				/// Benchmarks depend on this value, be sure to update weights file when changing
				/// this value
				pub fn maximum_reason_length(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Tips",
						"MaximumReasonLength",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The amount held on deposit per byte within the tip report reason or bounty
				/// description.
				pub fn data_deposit_per_byte(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Tips",
						"DataDepositPerByte",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The period for which a tip remains open after is has achieved threshold tippers.
				pub fn tip_countdown(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Tips",
						"TipCountdown",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The percent of the final tip which goes to the original reporter of the tip.
				pub fn tip_finders_fee(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Percent>
				{
					::subxt::constants::Address::new_static(
						"Tips",
						"TipFindersFee",
						[
							99u8, 121u8, 176u8, 172u8, 235u8, 159u8, 116u8, 114u8, 179u8, 91u8,
							129u8, 117u8, 204u8, 135u8, 53u8, 7u8, 151u8, 26u8, 124u8, 151u8,
							202u8, 171u8, 171u8, 207u8, 183u8, 177u8, 24u8, 53u8, 109u8, 185u8,
							71u8, 183u8,
						],
					)
				}
				/// The amount held on deposit for placing a tip report.
				pub fn tip_report_deposit_base(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Tips",
						"TipReportDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
			}
		}
	}
	pub mod assets {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Create {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub admin: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub min_balance: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceCreate {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub owner: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub is_sufficient: ::core::primitive::bool,
				#[codec(compact)]
				pub min_balance: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct StartDestroy {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DestroyAccounts {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DestroyApprovals {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct FinishDestroy {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Mint {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub beneficiary: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Burn {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Transfer {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub target: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TransferKeepAlive {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub target: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceTransfer {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub source: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub dest: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Freeze {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Thaw {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct FreezeAsset {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ThawAsset {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TransferOwnership {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub owner: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetTeam {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub issuer: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub admin: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub freezer: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetMetadata {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub name: ::std::vec::Vec<::core::primitive::u8>,
				pub symbol: ::std::vec::Vec<::core::primitive::u8>,
				pub decimals: ::core::primitive::u8,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClearMetadata {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceSetMetadata {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub name: ::std::vec::Vec<::core::primitive::u8>,
				pub symbol: ::std::vec::Vec<::core::primitive::u8>,
				pub decimals: ::core::primitive::u8,
				pub is_frozen: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceClearMetadata {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceAssetStatus {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub owner: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub issuer: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub admin: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub freezer: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub min_balance: ::core::primitive::u128,
				pub is_sufficient: ::core::primitive::bool,
				pub is_frozen: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ApproveTransfer {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub delegate: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CancelApproval {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub delegate: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceCancelApproval {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub owner: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub delegate: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TransferApproved {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub owner: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub destination: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Touch {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Refund {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub allow_burn: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetMinBalance {
				#[codec(compact)]
				pub id: ::core::primitive::u32,
				pub min_balance: ::core::primitive::u128,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Issue a new class of fungible assets from a public origin.
				///
				///This new asset class has no assets initially and its owner is the origin.
				///
				///The origin must conform to the configured `CreateOrigin` and have sufficient
				/// funds free.
				///
				///Funds of sender are reserved by `AssetDeposit`.
				///
				///Parameters:
				/// - `id`: The identifier of the new asset. This must not be currently in use to
				///   identify
				///an existing asset.
				/// - `admin`: The admin of this class of assets. The admin is the initial address
				///   of each
				///member of the asset class's admin team.
				/// - `min_balance`: The minimum balance of this new asset that any single account
				///   must
				///have. If an account's balance is reduced below this, then it collapses to zero.
				///
				///Emits `Created` event when successful.
				///
				///Weight: `O(1)`
				pub fn create(
					&self,
					id: ::core::primitive::u32,
					admin: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					min_balance: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<Create> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"create",
						Create { id, admin, min_balance },
						[
							197u8, 86u8, 72u8, 4u8, 104u8, 55u8, 113u8, 73u8, 86u8, 21u8, 128u8,
							40u8, 25u8, 91u8, 18u8, 246u8, 157u8, 168u8, 160u8, 65u8, 101u8, 193u8,
							120u8, 217u8, 245u8, 26u8, 194u8, 186u8, 126u8, 231u8, 118u8, 176u8,
						],
					)
				}
				///Issue a new class of fungible assets from a privileged origin.
				///
				///This new asset class has no assets initially.
				///
				///The origin must conform to `ForceOrigin`.
				///
				///Unlike `create`, no funds are reserved.
				///
				/// - `id`: The identifier of the new asset. This must not be currently in use to
				///   identify
				///an existing asset.
				/// - `owner`: The owner of this class of assets. The owner has full superuser
				///   permissions
				///over this asset, but may later change and configure the permissions using
				///`transfer_ownership` and `set_team`.
				/// - `min_balance`: The minimum balance of this new asset that any single account
				///   must
				///have. If an account's balance is reduced below this, then it collapses to zero.
				///
				///Emits `ForceCreated` event when successful.
				///
				///Weight: `O(1)`
				pub fn force_create(
					&self,
					id: ::core::primitive::u32,
					owner: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					is_sufficient: ::core::primitive::bool,
					min_balance: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<ForceCreate> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"force_create",
						ForceCreate { id, owner, is_sufficient, min_balance },
						[
							152u8, 24u8, 39u8, 126u8, 101u8, 61u8, 147u8, 180u8, 121u8, 52u8, 45u8,
							205u8, 87u8, 32u8, 87u8, 7u8, 134u8, 168u8, 1u8, 159u8, 191u8, 246u8,
							90u8, 245u8, 80u8, 172u8, 185u8, 254u8, 59u8, 37u8, 204u8, 162u8,
						],
					)
				}
				///Start the process of destroying a fungible asset class.
				///
				///`start_destroy` is the first in a series of extrinsics that should be called, to
				/// allow destruction of an asset class.
				///
				///The origin must conform to `ForceOrigin` or must be `Signed` by the asset's
				/// `owner`.
				///
				/// - `id`: The identifier of the asset to be destroyed. This must identify an
				///   existing
				///  asset.
				///
				///The asset class must be frozen before calling `start_destroy`.
				pub fn start_destroy(
					&self,
					id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<StartDestroy> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"start_destroy",
						StartDestroy { id },
						[
							83u8, 116u8, 245u8, 108u8, 180u8, 253u8, 0u8, 109u8, 9u8, 206u8, 70u8,
							95u8, 36u8, 80u8, 86u8, 186u8, 191u8, 161u8, 227u8, 156u8, 162u8,
							102u8, 82u8, 239u8, 124u8, 162u8, 128u8, 121u8, 183u8, 120u8, 214u8,
							136u8,
						],
					)
				}
				///Destroy all accounts associated with a given asset.
				///
				///`destroy_accounts` should only be called after `start_destroy` has been called,
				/// and the asset is in a `Destroying` state.
				///
				///Due to weight restrictions, this function may need to be called multiple times
				/// to fully destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a
				/// time.
				///
				/// - `id`: The identifier of the asset to be destroyed. This must identify an
				///   existing
				///  asset.
				///
				///Each call emits the `Event::DestroyedAccounts` event.
				pub fn destroy_accounts(
					&self,
					id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<DestroyAccounts> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"destroy_accounts",
						DestroyAccounts { id },
						[
							35u8, 134u8, 147u8, 165u8, 201u8, 250u8, 221u8, 158u8, 216u8, 147u8,
							218u8, 79u8, 235u8, 188u8, 10u8, 101u8, 22u8, 48u8, 1u8, 192u8, 176u8,
							84u8, 111u8, 244u8, 99u8, 92u8, 254u8, 49u8, 156u8, 24u8, 209u8, 180u8,
						],
					)
				}
				///Destroy all approvals associated with a given asset up to the max
				/// (T::RemoveItemsLimit).
				///
				///`destroy_approvals` should only be called after `start_destroy` has been called,
				/// and the asset is in a `Destroying` state.
				///
				///Due to weight restrictions, this function may need to be called multiple times
				/// to fully destroy all approvals. It will destroy `RemoveItemsLimit` approvals at
				/// a time.
				///
				/// - `id`: The identifier of the asset to be destroyed. This must identify an
				///   existing
				///  asset.
				///
				///Each call emits the `Event::DestroyedApprovals` event.
				pub fn destroy_approvals(
					&self,
					id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<DestroyApprovals> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"destroy_approvals",
						DestroyApprovals { id },
						[
							138u8, 31u8, 250u8, 93u8, 156u8, 239u8, 19u8, 43u8, 244u8, 208u8,
							159u8, 223u8, 143u8, 253u8, 235u8, 130u8, 159u8, 117u8, 15u8, 79u8,
							1u8, 205u8, 153u8, 36u8, 38u8, 23u8, 38u8, 0u8, 193u8, 104u8, 140u8,
							225u8,
						],
					)
				}
				///Complete destroying asset and unreserve currency.
				///
				///`finish_destroy` should only be called after `start_destroy` has been called,
				/// and the asset is in a `Destroying` state. All accounts or approvals should be
				/// destroyed before hand.
				///
				/// - `id`: The identifier of the asset to be destroyed. This must identify an
				///   existing
				///  asset.
				///
				///Each successful call emits the `Event::Destroyed` event.
				pub fn finish_destroy(
					&self,
					id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<FinishDestroy> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"finish_destroy",
						FinishDestroy { id },
						[
							215u8, 16u8, 107u8, 60u8, 181u8, 1u8, 238u8, 172u8, 36u8, 54u8, 187u8,
							26u8, 159u8, 224u8, 161u8, 8u8, 115u8, 183u8, 132u8, 121u8, 42u8,
							165u8, 7u8, 193u8, 208u8, 124u8, 45u8, 158u8, 100u8, 57u8, 117u8,
							209u8,
						],
					)
				}
				///Mint assets of a particular class.
				///
				///The origin must be Signed and the sender must be the Issuer of the asset `id`.
				///
				/// - `id`: The identifier of the asset to have some amount minted.
				/// - `beneficiary`: The account to be credited with the minted assets.
				/// - `amount`: The amount of the asset to be minted.
				///
				///Emits `Issued` event when successful.
				///
				///Weight: `O(1)`
				///Modes: Pre-existing balance of `beneficiary`; Account pre-existence of
				/// `beneficiary`.
				pub fn mint(
					&self,
					id: ::core::primitive::u32,
					beneficiary: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					amount: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<Mint> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"mint",
						Mint { id, beneficiary, amount },
						[
							21u8, 30u8, 124u8, 32u8, 105u8, 231u8, 137u8, 139u8, 28u8, 252u8,
							232u8, 138u8, 197u8, 0u8, 109u8, 156u8, 102u8, 83u8, 51u8, 128u8,
							246u8, 186u8, 249u8, 144u8, 133u8, 127u8, 241u8, 152u8, 201u8, 50u8,
							41u8, 105u8,
						],
					)
				}
				///Reduce the balance of `who` by as much as possible up to `amount` assets of
				/// `id`.
				///
				///Origin must be Signed and the sender should be the Manager of the asset `id`.
				///
				///Bails with `NoAccount` if the `who` is already dead.
				///
				/// - `id`: The identifier of the asset to have some amount burned.
				/// - `who`: The account to be debited from.
				/// - `amount`: The maximum amount by which `who`'s balance should be reduced.
				///
				///Emits `Burned` with the actual amount burned. If this takes the balance to below
				/// the minimum for the asset, then the amount burned is increased to take it to
				/// zero.
				///
				///Weight: `O(1)`
				///Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
				pub fn burn(
					&self,
					id: ::core::primitive::u32,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					amount: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<Burn> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"burn",
						Burn { id, who, amount },
						[
							104u8, 94u8, 68u8, 117u8, 145u8, 209u8, 149u8, 156u8, 131u8, 137u8,
							137u8, 93u8, 114u8, 237u8, 75u8, 56u8, 77u8, 65u8, 18u8, 71u8, 19u8,
							187u8, 76u8, 145u8, 24u8, 128u8, 62u8, 234u8, 200u8, 247u8, 196u8,
							45u8,
						],
					)
				}
				///Move some assets from the sender account to another.
				///
				///Origin must be Signed.
				///
				/// - `id`: The identifier of the asset to have some amount transferred.
				/// - `target`: The account to be credited.
				/// - `amount`: The amount by which the sender's balance of assets should be reduced
				///   and
				///`target`'s balance increased. The amount actually transferred may be slightly
				/// greater in the case that the transfer would otherwise take the sender balance
				/// above zero but below the minimum balance. Must be greater than zero.
				///
				///Emits `Transferred` with the actual amount transferred. If this takes the source
				/// balance to below the minimum for the asset, then the amount transferred is
				/// increased to take it to zero.
				///
				///Weight: `O(1)`
				///Modes: Pre-existence of `target`; Post-existence of sender; Account
				/// pre-existence of `target`.
				pub fn transfer(
					&self,
					id: ::core::primitive::u32,
					target: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					amount: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<Transfer> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"transfer",
						Transfer { id, target, amount },
						[
							132u8, 120u8, 134u8, 8u8, 238u8, 66u8, 45u8, 83u8, 151u8, 8u8, 118u8,
							62u8, 2u8, 163u8, 213u8, 255u8, 42u8, 211u8, 125u8, 21u8, 150u8, 117u8,
							177u8, 21u8, 105u8, 61u8, 3u8, 2u8, 30u8, 70u8, 65u8, 145u8,
						],
					)
				}
				///Move some assets from the sender account to another, keeping the sender account
				/// alive.
				///
				///Origin must be Signed.
				///
				/// - `id`: The identifier of the asset to have some amount transferred.
				/// - `target`: The account to be credited.
				/// - `amount`: The amount by which the sender's balance of assets should be reduced
				///   and
				///`target`'s balance increased. The amount actually transferred may be slightly
				/// greater in the case that the transfer would otherwise take the sender balance
				/// above zero but below the minimum balance. Must be greater than zero.
				///
				///Emits `Transferred` with the actual amount transferred. If this takes the source
				/// balance to below the minimum for the asset, then the amount transferred is
				/// increased to take it to zero.
				///
				///Weight: `O(1)`
				///Modes: Pre-existence of `target`; Post-existence of sender; Account
				/// pre-existence of `target`.
				pub fn transfer_keep_alive(
					&self,
					id: ::core::primitive::u32,
					target: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					amount: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<TransferKeepAlive> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"transfer_keep_alive",
						TransferKeepAlive { id, target, amount },
						[
							9u8, 46u8, 251u8, 191u8, 91u8, 192u8, 119u8, 203u8, 147u8, 84u8, 76u8,
							27u8, 237u8, 174u8, 67u8, 249u8, 185u8, 199u8, 240u8, 122u8, 160u8,
							111u8, 245u8, 247u8, 241u8, 197u8, 238u8, 253u8, 75u8, 216u8, 41u8,
							148u8,
						],
					)
				}
				///Move some assets from one account to another.
				///
				///Origin must be Signed and the sender should be the Admin of the asset `id`.
				///
				/// - `id`: The identifier of the asset to have some amount transferred.
				/// - `source`: The account to be debited.
				/// - `dest`: The account to be credited.
				/// - `amount`: The amount by which the `source`'s balance of assets should be
				///   reduced and
				///`dest`'s balance increased. The amount actually transferred may be slightly
				/// greater in the case that the transfer would otherwise take the `source` balance
				/// above zero but below the minimum balance. Must be greater than zero.
				///
				///Emits `Transferred` with the actual amount transferred. If this takes the source
				/// balance to below the minimum for the asset, then the amount transferred is
				/// increased to take it to zero.
				///
				///Weight: `O(1)`
				///Modes: Pre-existence of `dest`; Post-existence of `source`; Account
				/// pre-existence of `dest`.
				pub fn force_transfer(
					&self,
					id: ::core::primitive::u32,
					source: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					dest: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					amount: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<ForceTransfer> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"force_transfer",
						ForceTransfer { id, source, dest, amount },
						[
							253u8, 100u8, 109u8, 66u8, 153u8, 140u8, 39u8, 85u8, 19u8, 199u8, 68u8,
							6u8, 124u8, 200u8, 250u8, 142u8, 104u8, 55u8, 190u8, 25u8, 117u8,
							180u8, 201u8, 245u8, 153u8, 192u8, 240u8, 5u8, 176u8, 142u8, 106u8,
							92u8,
						],
					)
				}
				///Disallow further unprivileged transfers from an account.
				///
				///Origin must be Signed and the sender should be the Freezer of the asset `id`.
				///
				/// - `id`: The identifier of the asset to be frozen.
				/// - `who`: The account to be frozen.
				///
				///Emits `Frozen`.
				///
				///Weight: `O(1)`
				pub fn freeze(
					&self,
					id: ::core::primitive::u32,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<Freeze> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"freeze",
						Freeze { id, who },
						[
							191u8, 155u8, 214u8, 95u8, 125u8, 58u8, 207u8, 76u8, 99u8, 15u8, 102u8,
							189u8, 26u8, 232u8, 9u8, 73u8, 231u8, 114u8, 199u8, 129u8, 110u8, 84u8,
							22u8, 114u8, 108u8, 57u8, 83u8, 246u8, 92u8, 0u8, 127u8, 53u8,
						],
					)
				}
				///Allow unprivileged transfers from an account again.
				///
				///Origin must be Signed and the sender should be the Admin of the asset `id`.
				///
				/// - `id`: The identifier of the asset to be frozen.
				/// - `who`: The account to be unfrozen.
				///
				///Emits `Thawed`.
				///
				///Weight: `O(1)`
				pub fn thaw(
					&self,
					id: ::core::primitive::u32,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<Thaw> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"thaw",
						Thaw { id, who },
						[
							52u8, 37u8, 227u8, 9u8, 177u8, 120u8, 93u8, 129u8, 81u8, 35u8, 107u8,
							22u8, 80u8, 58u8, 3u8, 98u8, 211u8, 65u8, 49u8, 107u8, 184u8, 102u8,
							185u8, 84u8, 160u8, 73u8, 12u8, 242u8, 203u8, 233u8, 79u8, 117u8,
						],
					)
				}
				///Disallow further unprivileged transfers for the asset class.
				///
				///Origin must be Signed and the sender should be the Freezer of the asset `id`.
				///
				/// - `id`: The identifier of the asset to be frozen.
				///
				///Emits `Frozen`.
				///
				///Weight: `O(1)`
				pub fn freeze_asset(
					&self,
					id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<FreezeAsset> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"freeze_asset",
						FreezeAsset { id },
						[
							208u8, 101u8, 0u8, 73u8, 41u8, 192u8, 227u8, 44u8, 189u8, 231u8, 40u8,
							124u8, 189u8, 147u8, 136u8, 210u8, 76u8, 32u8, 249u8, 183u8, 68u8,
							58u8, 150u8, 136u8, 192u8, 47u8, 173u8, 178u8, 225u8, 84u8, 110u8, 1u8,
						],
					)
				}
				///Allow unprivileged transfers for the asset again.
				///
				///Origin must be Signed and the sender should be the Admin of the asset `id`.
				///
				/// - `id`: The identifier of the asset to be thawed.
				///
				///Emits `Thawed`.
				///
				///Weight: `O(1)`
				pub fn thaw_asset(
					&self,
					id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<ThawAsset> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"thaw_asset",
						ThawAsset { id },
						[
							18u8, 198u8, 141u8, 158u8, 182u8, 167u8, 160u8, 227u8, 20u8, 74u8,
							80u8, 164u8, 89u8, 46u8, 168u8, 139u8, 251u8, 83u8, 155u8, 91u8, 91u8,
							46u8, 205u8, 55u8, 171u8, 175u8, 167u8, 188u8, 116u8, 155u8, 79u8,
							117u8,
						],
					)
				}
				///Change the Owner of an asset.
				///
				///Origin must be Signed and the sender should be the Owner of the asset `id`.
				///
				/// - `id`: The identifier of the asset.
				/// - `owner`: The new Owner of this asset.
				///
				///Emits `OwnerChanged`.
				///
				///Weight: `O(1)`
				pub fn transfer_ownership(
					&self,
					id: ::core::primitive::u32,
					owner: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<TransferOwnership> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"transfer_ownership",
						TransferOwnership { id, owner },
						[
							170u8, 94u8, 202u8, 42u8, 41u8, 156u8, 250u8, 63u8, 113u8, 110u8,
							166u8, 129u8, 90u8, 233u8, 35u8, 87u8, 123u8, 172u8, 65u8, 108u8,
							170u8, 237u8, 252u8, 70u8, 186u8, 12u8, 58u8, 6u8, 173u8, 87u8, 161u8,
							211u8,
						],
					)
				}
				///Change the Issuer, Admin and Freezer of an asset.
				///
				///Origin must be Signed and the sender should be the Owner of the asset `id`.
				///
				/// - `id`: The identifier of the asset to be frozen.
				/// - `issuer`: The new Issuer of this asset.
				/// - `admin`: The new Admin of this asset.
				/// - `freezer`: The new Freezer of this asset.
				///
				///Emits `TeamChanged`.
				///
				///Weight: `O(1)`
				pub fn set_team(
					&self,
					id: ::core::primitive::u32,
					issuer: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					admin: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					freezer: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<SetTeam> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"set_team",
						SetTeam { id, issuer, admin, freezer },
						[
							30u8, 60u8, 182u8, 252u8, 64u8, 97u8, 6u8, 80u8, 159u8, 204u8, 14u8,
							227u8, 54u8, 20u8, 172u8, 100u8, 77u8, 59u8, 164u8, 247u8, 122u8, 39u8,
							129u8, 106u8, 87u8, 82u8, 77u8, 165u8, 215u8, 232u8, 159u8, 29u8,
						],
					)
				}
				///Set the metadata for an asset.
				///
				///Origin must be Signed and the sender should be the Owner of the asset `id`.
				///
				///Funds of sender are reserved according to the formula:
				///`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking
				/// into account any already reserved funds.
				///
				/// - `id`: The identifier of the asset to update.
				/// - `name`: The user friendly name of this asset. Limited in length by
				///   `StringLimit`.
				/// - `symbol`: The exchange symbol for this asset. Limited in length by
				///   `StringLimit`.
				/// - `decimals`: The number of decimals this asset uses to represent one unit.
				///
				///Emits `MetadataSet`.
				///
				///Weight: `O(1)`
				pub fn set_metadata(
					&self,
					id: ::core::primitive::u32,
					name: ::std::vec::Vec<::core::primitive::u8>,
					symbol: ::std::vec::Vec<::core::primitive::u8>,
					decimals: ::core::primitive::u8,
				) -> ::subxt::tx::Payload<SetMetadata> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"set_metadata",
						SetMetadata { id, name, symbol, decimals },
						[
							15u8, 184u8, 50u8, 46u8, 164u8, 27u8, 105u8, 186u8, 35u8, 115u8, 194u8,
							247u8, 74u8, 252u8, 139u8, 242u8, 108u8, 221u8, 122u8, 15u8, 139u8,
							74u8, 123u8, 17u8, 192u8, 138u8, 182u8, 163u8, 77u8, 7u8, 124u8, 18u8,
						],
					)
				}
				///Clear the metadata for an asset.
				///
				///Origin must be Signed and the sender should be the Owner of the asset `id`.
				///
				///Any deposit is freed for the asset owner.
				///
				/// - `id`: The identifier of the asset to clear.
				///
				///Emits `MetadataCleared`.
				///
				///Weight: `O(1)`
				pub fn clear_metadata(
					&self,
					id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<ClearMetadata> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"clear_metadata",
						ClearMetadata { id },
						[
							192u8, 41u8, 71u8, 183u8, 13u8, 128u8, 244u8, 255u8, 175u8, 36u8, 99u8,
							175u8, 15u8, 129u8, 228u8, 76u8, 107u8, 214u8, 166u8, 116u8, 244u8,
							139u8, 60u8, 31u8, 123u8, 61u8, 203u8, 59u8, 213u8, 146u8, 116u8,
							126u8,
						],
					)
				}
				///Force the metadata for an asset to some value.
				///
				///Origin must be ForceOrigin.
				///
				///Any deposit is left alone.
				///
				/// - `id`: The identifier of the asset to update.
				/// - `name`: The user friendly name of this asset. Limited in length by
				///   `StringLimit`.
				/// - `symbol`: The exchange symbol for this asset. Limited in length by
				///   `StringLimit`.
				/// - `decimals`: The number of decimals this asset uses to represent one unit.
				///
				///Emits `MetadataSet`.
				///
				///Weight: `O(N + S)` where N and S are the length of the name and symbol
				/// respectively.
				pub fn force_set_metadata(
					&self,
					id: ::core::primitive::u32,
					name: ::std::vec::Vec<::core::primitive::u8>,
					symbol: ::std::vec::Vec<::core::primitive::u8>,
					decimals: ::core::primitive::u8,
					is_frozen: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<ForceSetMetadata> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"force_set_metadata",
						ForceSetMetadata { id, name, symbol, decimals, is_frozen },
						[
							7u8, 30u8, 55u8, 233u8, 217u8, 113u8, 196u8, 21u8, 29u8, 122u8, 168u8,
							225u8, 63u8, 104u8, 57u8, 78u8, 76u8, 145u8, 121u8, 118u8, 91u8, 149u8,
							87u8, 26u8, 26u8, 125u8, 44u8, 241u8, 143u8, 138u8, 144u8, 8u8,
						],
					)
				}
				///Clear the metadata for an asset.
				///
				///Origin must be ForceOrigin.
				///
				///Any deposit is returned.
				///
				/// - `id`: The identifier of the asset to clear.
				///
				///Emits `MetadataCleared`.
				///
				///Weight: `O(1)`
				pub fn force_clear_metadata(
					&self,
					id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<ForceClearMetadata> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"force_clear_metadata",
						ForceClearMetadata { id },
						[
							71u8, 191u8, 101u8, 72u8, 188u8, 223u8, 215u8, 187u8, 200u8, 206u8,
							3u8, 42u8, 4u8, 62u8, 117u8, 106u8, 26u8, 2u8, 68u8, 202u8, 162u8,
							142u8, 172u8, 123u8, 48u8, 196u8, 247u8, 89u8, 147u8, 75u8, 84u8,
							109u8,
						],
					)
				}
				///Alter the attributes of a given asset.
				///
				///Origin must be `ForceOrigin`.
				///
				/// - `id`: The identifier of the asset.
				/// - `owner`: The new Owner of this asset.
				/// - `issuer`: The new Issuer of this asset.
				/// - `admin`: The new Admin of this asset.
				/// - `freezer`: The new Freezer of this asset.
				/// - `min_balance`: The minimum balance of this new asset that any single account
				///   must
				///have. If an account's balance is reduced below this, then it collapses to zero.
				/// - `is_sufficient`: Whether a non-zero balance of this asset is deposit of
				///   sufficient
				///value to account for the state bloat associated with its balance storage. If set
				/// to `true`, then non-zero balances may be stored without a `consumer` reference
				/// (and thus an ED in the Balances pallet or whatever else is used to control
				/// user-account state growth).
				/// - `is_frozen`: Whether this asset class is frozen except for permissioned/admin
				///instructions.
				///
				///Emits `AssetStatusChanged` with the identity of the asset.
				///
				///Weight: `O(1)`
				pub fn force_asset_status(
					&self,
					id: ::core::primitive::u32,
					owner: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					issuer: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					admin: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					freezer: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					min_balance: ::core::primitive::u128,
					is_sufficient: ::core::primitive::bool,
					is_frozen: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<ForceAssetStatus> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"force_asset_status",
						ForceAssetStatus {
							id,
							owner,
							issuer,
							admin,
							freezer,
							min_balance,
							is_sufficient,
							is_frozen,
						},
						[
							46u8, 229u8, 189u8, 83u8, 196u8, 180u8, 79u8, 77u8, 71u8, 147u8, 77u8,
							243u8, 99u8, 3u8, 205u8, 171u8, 129u8, 25u8, 60u8, 10u8, 162u8, 50u8,
							205u8, 231u8, 184u8, 75u8, 42u8, 230u8, 48u8, 194u8, 236u8, 71u8,
						],
					)
				}
				///Approve an amount of asset for transfer by a delegated third-party account.
				///
				///Origin must be Signed.
				///
				///Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing
				/// account for the purpose of holding the approval. If some non-zero amount of
				/// assets is already approved from signing account to `delegate`, then it is topped
				/// up or unreserved to meet the right value.
				///
				///NOTE: The signing account does not need to own `amount` of assets at the point
				/// of making this call.
				///
				/// - `id`: The identifier of the asset.
				/// - `delegate`: The account to delegate permission to transfer asset.
				/// - `amount`: The amount of asset that may be transferred by `delegate`. If there
				///   is
				///already an approval in place, then this acts additively.
				///
				///Emits `ApprovedTransfer` on success.
				///
				///Weight: `O(1)`
				pub fn approve_transfer(
					&self,
					id: ::core::primitive::u32,
					delegate: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					amount: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<ApproveTransfer> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"approve_transfer",
						ApproveTransfer { id, delegate, amount },
						[
							85u8, 79u8, 216u8, 233u8, 163u8, 169u8, 226u8, 111u8, 10u8, 110u8,
							33u8, 239u8, 248u8, 222u8, 84u8, 160u8, 80u8, 164u8, 29u8, 88u8, 164u8,
							252u8, 238u8, 212u8, 9u8, 230u8, 201u8, 166u8, 192u8, 225u8, 94u8,
							13u8,
						],
					)
				}
				///Cancel all of some asset approved for delegated transfer by a third-party
				/// account.
				///
				///Origin must be Signed and there must be an approval in place between signer and
				///`delegate`.
				///
				///Unreserves any deposit previously reserved by `approve_transfer` for the
				/// approval.
				///
				/// - `id`: The identifier of the asset.
				/// - `delegate`: The account delegated permission to transfer asset.
				///
				///Emits `ApprovalCancelled` on success.
				///
				///Weight: `O(1)`
				pub fn cancel_approval(
					&self,
					id: ::core::primitive::u32,
					delegate: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<CancelApproval> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"cancel_approval",
						CancelApproval { id, delegate },
						[
							120u8, 10u8, 77u8, 128u8, 1u8, 232u8, 42u8, 2u8, 87u8, 7u8, 217u8,
							51u8, 172u8, 13u8, 136u8, 176u8, 153u8, 128u8, 196u8, 3u8, 190u8,
							139u8, 219u8, 24u8, 35u8, 51u8, 241u8, 87u8, 67u8, 49u8, 181u8, 203u8,
						],
					)
				}
				///Cancel all of some asset approved for delegated transfer by a third-party
				/// account.
				///
				///Origin must be either ForceOrigin or Signed origin with the signer being the
				/// Admin account of the asset `id`.
				///
				///Unreserves any deposit previously reserved by `approve_transfer` for the
				/// approval.
				///
				/// - `id`: The identifier of the asset.
				/// - `delegate`: The account delegated permission to transfer asset.
				///
				///Emits `ApprovalCancelled` on success.
				///
				///Weight: `O(1)`
				pub fn force_cancel_approval(
					&self,
					id: ::core::primitive::u32,
					owner: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					delegate: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<ForceCancelApproval> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"force_cancel_approval",
						ForceCancelApproval { id, owner, delegate },
						[
							192u8, 196u8, 91u8, 219u8, 20u8, 150u8, 220u8, 79u8, 81u8, 151u8,
							104u8, 109u8, 21u8, 87u8, 158u8, 169u8, 208u8, 4u8, 241u8, 109u8,
							230u8, 166u8, 237u8, 164u8, 90u8, 54u8, 14u8, 51u8, 84u8, 239u8, 178u8,
							202u8,
						],
					)
				}
				///Transfer some asset balance from a previously delegated account to some
				/// third-party account.
				///
				///Origin must be Signed and there must be an approval in place by the `owner` to
				/// the signer.
				///
				///If the entire amount approved for transfer is transferred, then any deposit
				/// previously reserved by `approve_transfer` is unreserved.
				///
				/// - `id`: The identifier of the asset.
				/// - `owner`: The account which previously approved for a transfer of at least
				///   `amount` and
				///from which the asset balance will be withdrawn.
				/// - `destination`: The account to which the asset balance of `amount` will be
				///   transferred.
				/// - `amount`: The amount of assets to transfer.
				///
				///Emits `TransferredApproved` on success.
				///
				///Weight: `O(1)`
				pub fn transfer_approved(
					&self,
					id: ::core::primitive::u32,
					owner: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					destination: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					amount: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<TransferApproved> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"transfer_approved",
						TransferApproved { id, owner, destination, amount },
						[
							151u8, 228u8, 207u8, 182u8, 179u8, 212u8, 208u8, 3u8, 207u8, 181u8,
							193u8, 164u8, 74u8, 160u8, 81u8, 191u8, 42u8, 227u8, 56u8, 238u8, 50u8,
							75u8, 8u8, 50u8, 131u8, 83u8, 152u8, 20u8, 141u8, 39u8, 29u8, 205u8,
						],
					)
				}
				///Create an asset account for non-provider assets.
				///
				///A deposit will be taken from the signer account.
				///
				/// - `origin`: Must be Signed; the signer account must have sufficient funds for a
				///   deposit
				///  to be taken.
				/// - `id`: The identifier of the asset for the account to be created.
				///
				///Emits `Touched` event when successful.
				pub fn touch(&self, id: ::core::primitive::u32) -> ::subxt::tx::Payload<Touch> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"touch",
						Touch { id },
						[
							114u8, 149u8, 179u8, 168u8, 115u8, 117u8, 32u8, 50u8, 39u8, 77u8,
							148u8, 238u8, 123u8, 96u8, 193u8, 174u8, 113u8, 141u8, 34u8, 228u8,
							228u8, 214u8, 71u8, 111u8, 55u8, 126u8, 103u8, 181u8, 133u8, 77u8,
							116u8, 105u8,
						],
					)
				}
				///Return the deposit (if any) of an asset account.
				///
				///The origin must be Signed.
				///
				/// - `id`: The identifier of the asset for the account to be created.
				/// - `allow_burn`: If `true` then assets may be destroyed in order to complete the
				///   refund.
				///
				///Emits `Refunded` event when successful.
				pub fn refund(
					&self,
					id: ::core::primitive::u32,
					allow_burn: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<Refund> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"refund",
						Refund { id, allow_burn },
						[
							20u8, 139u8, 248u8, 67u8, 123u8, 221u8, 7u8, 106u8, 239u8, 156u8, 68u8,
							59u8, 81u8, 184u8, 47u8, 188u8, 195u8, 227u8, 75u8, 168u8, 126u8,
							176u8, 91u8, 187u8, 30u8, 34u8, 24u8, 223u8, 108u8, 101u8, 88u8, 83u8,
						],
					)
				}
				///Sets the minimum balance of an asset.
				///
				///Only works if there aren't any accounts that are holding the asset or if
				///the new value of `min_balance` is less than the old one.
				///
				///Origin must be Signed and the sender has to be the Owner of the
				///asset `id`.
				///
				/// - `id`: The identifier of the asset.
				/// - `min_balance`: The new value of `min_balance`.
				///
				///Emits `AssetMinBalanceChanged` event when successful.
				pub fn set_min_balance(
					&self,
					id: ::core::primitive::u32,
					min_balance: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<SetMinBalance> {
					::subxt::tx::Payload::new_static(
						"Assets",
						"set_min_balance",
						SetMinBalance { id, min_balance },
						[
							154u8, 157u8, 254u8, 93u8, 221u8, 114u8, 127u8, 150u8, 117u8, 216u8,
							73u8, 204u8, 4u8, 56u8, 71u8, 236u8, 177u8, 237u8, 236u8, 70u8, 171u8,
							169u8, 70u8, 148u8, 76u8, 186u8, 86u8, 124u8, 129u8, 116u8, 235u8,
							233u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_assets::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some asset class was created.
			pub struct Created {
				pub asset_id: ::core::primitive::u32,
				pub creator: ::subxt::utils::AccountId32,
				pub owner: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Created {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "Created";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some assets were issued.
			pub struct Issued {
				pub asset_id: ::core::primitive::u32,
				pub owner: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Issued {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "Issued";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some assets were transferred.
			pub struct Transferred {
				pub asset_id: ::core::primitive::u32,
				pub from: ::subxt::utils::AccountId32,
				pub to: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Transferred {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "Transferred";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some assets were destroyed.
			pub struct Burned {
				pub asset_id: ::core::primitive::u32,
				pub owner: ::subxt::utils::AccountId32,
				pub balance: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Burned {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "Burned";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The management team changed.
			pub struct TeamChanged {
				pub asset_id: ::core::primitive::u32,
				pub issuer: ::subxt::utils::AccountId32,
				pub admin: ::subxt::utils::AccountId32,
				pub freezer: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for TeamChanged {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "TeamChanged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The owner changed.
			pub struct OwnerChanged {
				pub asset_id: ::core::primitive::u32,
				pub owner: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for OwnerChanged {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "OwnerChanged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some account `who` was frozen.
			pub struct Frozen {
				pub asset_id: ::core::primitive::u32,
				pub who: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Frozen {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "Frozen";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some account `who` was thawed.
			pub struct Thawed {
				pub asset_id: ::core::primitive::u32,
				pub who: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Thawed {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "Thawed";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some asset `asset_id` was frozen.
			pub struct AssetFrozen {
				pub asset_id: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for AssetFrozen {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "AssetFrozen";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some asset `asset_id` was thawed.
			pub struct AssetThawed {
				pub asset_id: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for AssetThawed {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "AssetThawed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Accounts were destroyed for given asset.
			pub struct AccountsDestroyed {
				pub asset_id: ::core::primitive::u32,
				pub accounts_destroyed: ::core::primitive::u32,
				pub accounts_remaining: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for AccountsDestroyed {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "AccountsDestroyed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Approvals were destroyed for given asset.
			pub struct ApprovalsDestroyed {
				pub asset_id: ::core::primitive::u32,
				pub approvals_destroyed: ::core::primitive::u32,
				pub approvals_remaining: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for ApprovalsDestroyed {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "ApprovalsDestroyed";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An asset class is in the process of being destroyed.
			pub struct DestructionStarted {
				pub asset_id: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for DestructionStarted {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "DestructionStarted";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An asset class was destroyed.
			pub struct Destroyed {
				pub asset_id: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Destroyed {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "Destroyed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some asset class was force-created.
			pub struct ForceCreated {
				pub asset_id: ::core::primitive::u32,
				pub owner: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for ForceCreated {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "ForceCreated";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///New metadata has been set for an asset.
			pub struct MetadataSet {
				pub asset_id: ::core::primitive::u32,
				pub name: ::std::vec::Vec<::core::primitive::u8>,
				pub symbol: ::std::vec::Vec<::core::primitive::u8>,
				pub decimals: ::core::primitive::u8,
				pub is_frozen: ::core::primitive::bool,
			}
			impl ::subxt::events::StaticEvent for MetadataSet {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "MetadataSet";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Metadata has been cleared for an asset.
			pub struct MetadataCleared {
				pub asset_id: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for MetadataCleared {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "MetadataCleared";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///(Additional) funds have been approved for transfer to a destination account.
			pub struct ApprovedTransfer {
				pub asset_id: ::core::primitive::u32,
				pub source: ::subxt::utils::AccountId32,
				pub delegate: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for ApprovedTransfer {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "ApprovedTransfer";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An approval for account `delegate` was cancelled by `owner`.
			pub struct ApprovalCancelled {
				pub asset_id: ::core::primitive::u32,
				pub owner: ::subxt::utils::AccountId32,
				pub delegate: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for ApprovalCancelled {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "ApprovalCancelled";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An `amount` was transferred in its entirety from `owner` to `destination` by
			///the approved `delegate`.
			pub struct TransferredApproved {
				pub asset_id: ::core::primitive::u32,
				pub owner: ::subxt::utils::AccountId32,
				pub delegate: ::subxt::utils::AccountId32,
				pub destination: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for TransferredApproved {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "TransferredApproved";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An asset has had its attributes changed by the `Force` origin.
			pub struct AssetStatusChanged {
				pub asset_id: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for AssetStatusChanged {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "AssetStatusChanged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The min_balance of an asset has been updated by the asset owner.
			pub struct AssetMinBalanceChanged {
				pub asset_id: ::core::primitive::u32,
				pub new_min_balance: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for AssetMinBalanceChanged {
				const PALLET: &'static str = "Assets";
				const EVENT: &'static str = "AssetMinBalanceChanged";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// Details of an asset.
				pub fn asset(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_assets::types::AssetDetails<
						::core::primitive::u128,
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Assets",
						"Asset",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							251u8, 148u8, 82u8, 150u8, 66u8, 26u8, 46u8, 186u8, 60u8, 59u8, 239u8,
							190u8, 102u8, 156u8, 113u8, 175u8, 1u8, 117u8, 147u8, 236u8, 114u8,
							88u8, 49u8, 210u8, 165u8, 162u8, 201u8, 230u8, 147u8, 141u8, 174u8,
							221u8,
						],
					)
				}
				/// Details of an asset.
				pub fn asset_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_assets::types::AssetDetails<
						::core::primitive::u128,
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Assets",
						"Asset",
						Vec::new(),
						[
							251u8, 148u8, 82u8, 150u8, 66u8, 26u8, 46u8, 186u8, 60u8, 59u8, 239u8,
							190u8, 102u8, 156u8, 113u8, 175u8, 1u8, 117u8, 147u8, 236u8, 114u8,
							88u8, 49u8, 210u8, 165u8, 162u8, 201u8, 230u8, 147u8, 141u8, 174u8,
							221u8,
						],
					)
				}
				/// The holdings of a specific account for a specific asset.
				pub fn account(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_assets::types::AssetAccount<
						::core::primitive::u128,
						::core::primitive::u128,
						(),
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Assets",
						"Account",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							109u8, 245u8, 93u8, 133u8, 206u8, 68u8, 94u8, 233u8, 29u8, 113u8,
							245u8, 201u8, 241u8, 2u8, 200u8, 179u8, 37u8, 199u8, 128u8, 243u8,
							49u8, 50u8, 122u8, 139u8, 135u8, 48u8, 201u8, 109u8, 195u8, 38u8,
							205u8, 32u8,
						],
					)
				}
				/// The holdings of a specific account for a specific asset.
				pub fn account_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_assets::types::AssetAccount<
						::core::primitive::u128,
						::core::primitive::u128,
						(),
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Assets",
						"Account",
						Vec::new(),
						[
							109u8, 245u8, 93u8, 133u8, 206u8, 68u8, 94u8, 233u8, 29u8, 113u8,
							245u8, 201u8, 241u8, 2u8, 200u8, 179u8, 37u8, 199u8, 128u8, 243u8,
							49u8, 50u8, 122u8, 139u8, 135u8, 48u8, 201u8, 109u8, 195u8, 38u8,
							205u8, 32u8,
						],
					)
				}
				/// Approved balance transfers. First balance is the amount approved for transfer.
				/// Second is the amount of `T::Currency` reserved for storing this.
				/// First key is the asset ID, second key is the owner and third key is the
				/// delegate.
				pub fn approvals(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
					_2: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_assets::types::Approval<
						::core::primitive::u128,
						::core::primitive::u128,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Assets",
						"Approvals",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_2.borrow()),
						],
						[
							210u8, 147u8, 203u8, 49u8, 232u8, 215u8, 116u8, 154u8, 43u8, 154u8,
							69u8, 159u8, 241u8, 28u8, 238u8, 101u8, 108u8, 162u8, 242u8, 121u8,
							138u8, 164u8, 217u8, 243u8, 72u8, 173u8, 75u8, 109u8, 194u8, 9u8,
							196u8, 163u8,
						],
					)
				}
				/// Approved balance transfers. First balance is the amount approved for transfer.
				/// Second is the amount of `T::Currency` reserved for storing this.
				/// First key is the asset ID, second key is the owner and third key is the
				/// delegate.
				pub fn approvals_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_assets::types::Approval<
						::core::primitive::u128,
						::core::primitive::u128,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Assets",
						"Approvals",
						Vec::new(),
						[
							210u8, 147u8, 203u8, 49u8, 232u8, 215u8, 116u8, 154u8, 43u8, 154u8,
							69u8, 159u8, 241u8, 28u8, 238u8, 101u8, 108u8, 162u8, 242u8, 121u8,
							138u8, 164u8, 217u8, 243u8, 72u8, 173u8, 75u8, 109u8, 194u8, 9u8,
							196u8, 163u8,
						],
					)
				}
				/// Metadata of an asset.
				pub fn metadata(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_assets::types::AssetMetadata<
						::core::primitive::u128,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Assets",
						"Metadata",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							80u8, 115u8, 155u8, 115u8, 136u8, 108u8, 82u8, 93u8, 65u8, 130u8,
							143u8, 228u8, 170u8, 234u8, 182u8, 170u8, 229u8, 217u8, 168u8, 71u8,
							81u8, 80u8, 16u8, 112u8, 209u8, 82u8, 8u8, 165u8, 80u8, 137u8, 58u8,
							170u8,
						],
					)
				}
				/// Metadata of an asset.
				pub fn metadata_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_assets::types::AssetMetadata<
						::core::primitive::u128,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Assets",
						"Metadata",
						Vec::new(),
						[
							80u8, 115u8, 155u8, 115u8, 136u8, 108u8, 82u8, 93u8, 65u8, 130u8,
							143u8, 228u8, 170u8, 234u8, 182u8, 170u8, 229u8, 217u8, 168u8, 71u8,
							81u8, 80u8, 16u8, 112u8, 209u8, 82u8, 8u8, 165u8, 80u8, 137u8, 58u8,
							170u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// Max number of items to destroy per `destroy_accounts` and `destroy_approvals`
				/// call.
				///
				/// Must be configured to result in a weight that makes each call fit in a block.
				pub fn remove_items_limit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Assets",
						"RemoveItemsLimit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The basic amount of funds that must be reserved for an asset.
				pub fn asset_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Assets",
						"AssetDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The amount of funds that must be reserved for a non-provider asset account to be
				/// maintained.
				pub fn asset_account_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Assets",
						"AssetAccountDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The basic amount of funds that must be reserved when adding metadata to your
				/// asset.
				pub fn metadata_deposit_base(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Assets",
						"MetadataDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The additional funds that must be reserved for the number of bytes you store in
				/// your metadata.
				pub fn metadata_deposit_per_byte(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Assets",
						"MetadataDepositPerByte",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The amount of funds that must be reserved when creating a new approval.
				pub fn approval_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Assets",
						"ApprovalDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The maximum length of a name or symbol stored on-chain.
				pub fn string_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Assets",
						"StringLimit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod lottery {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct BuyTicket {
				pub call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetCalls {
				pub calls: ::std::vec::Vec<runtime_types::babe_runtime::RuntimeCall>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct StartLottery {
				pub price: ::core::primitive::u128,
				pub length: ::core::primitive::u32,
				pub delay: ::core::primitive::u32,
				pub repeat: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct StopRepeat;
			pub struct TransactionApi;
			impl TransactionApi {
				///Buy a ticket to enter the lottery.
				///
				///This extrinsic acts as a passthrough function for `call`. In all
				///situations where `call` alone would succeed, this extrinsic should
				///succeed.
				///
				///If `call` is successful, then we will attempt to purchase a ticket,
				///which may fail silently. To detect success of a ticket purchase, you
				///should listen for the `TicketBought` event.
				///
				///This extrinsic must be called by a signed origin.
				pub fn buy_ticket(
					&self,
					call: runtime_types::babe_runtime::RuntimeCall,
				) -> ::subxt::tx::Payload<BuyTicket> {
					::subxt::tx::Payload::new_static(
						"Lottery",
						"buy_ticket",
						BuyTicket { call: ::std::boxed::Box::new(call) },
						[
							116u8, 127u8, 246u8, 229u8, 107u8, 24u8, 71u8, 121u8, 125u8, 192u8,
							176u8, 111u8, 170u8, 107u8, 142u8, 146u8, 186u8, 43u8, 251u8, 61u8,
							210u8, 44u8, 4u8, 154u8, 218u8, 3u8, 113u8, 254u8, 152u8, 19u8, 131u8,
							176u8,
						],
					)
				}
				///Set calls in storage which can be used to purchase a lottery ticket.
				///
				///This function only matters if you use the `ValidateCall` implementation
				///provided by this pallet, which uses storage to determine the valid calls.
				///
				///This extrinsic must be called by the Manager origin.
				pub fn set_calls(
					&self,
					calls: ::std::vec::Vec<runtime_types::babe_runtime::RuntimeCall>,
				) -> ::subxt::tx::Payload<SetCalls> {
					::subxt::tx::Payload::new_static(
						"Lottery",
						"set_calls",
						SetCalls { calls },
						[
							48u8, 64u8, 16u8, 105u8, 191u8, 115u8, 249u8, 206u8, 110u8, 97u8, 46u8,
							7u8, 73u8, 29u8, 155u8, 57u8, 44u8, 143u8, 117u8, 97u8, 146u8, 215u8,
							252u8, 60u8, 220u8, 130u8, 180u8, 25u8, 118u8, 5u8, 240u8, 70u8,
						],
					)
				}
				///Start a lottery using the provided configuration.
				///
				///This extrinsic must be called by the `ManagerOrigin`.
				///
				///Parameters:
				///
				/// * `price`: The cost of a single ticket.
				/// * `length`: How long the lottery should run for starting at the current block.
				/// * `delay`: How long after the lottery end we should wait before picking a
				///   winner.
				/// * `repeat`: If the lottery should repeat when completed.
				pub fn start_lottery(
					&self,
					price: ::core::primitive::u128,
					length: ::core::primitive::u32,
					delay: ::core::primitive::u32,
					repeat: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<StartLottery> {
					::subxt::tx::Payload::new_static(
						"Lottery",
						"start_lottery",
						StartLottery { price, length, delay, repeat },
						[
							4u8, 194u8, 105u8, 75u8, 63u8, 167u8, 224u8, 4u8, 163u8, 148u8, 96u8,
							248u8, 21u8, 190u8, 168u8, 101u8, 207u8, 152u8, 169u8, 203u8, 180u8,
							103u8, 137u8, 151u8, 166u8, 187u8, 232u8, 219u8, 22u8, 89u8, 206u8,
							194u8,
						],
					)
				}
				///If a lottery is repeating, you can use this to stop the repeat.
				///The lottery will continue to run to completion.
				///
				///This extrinsic must be called by the `ManagerOrigin`.
				pub fn stop_repeat(&self) -> ::subxt::tx::Payload<StopRepeat> {
					::subxt::tx::Payload::new_static(
						"Lottery",
						"stop_repeat",
						StopRepeat {},
						[
							28u8, 43u8, 248u8, 131u8, 209u8, 84u8, 75u8, 42u8, 22u8, 180u8, 126u8,
							235u8, 116u8, 241u8, 167u8, 161u8, 25u8, 0u8, 22u8, 207u8, 167u8,
							191u8, 89u8, 180u8, 54u8, 25u8, 14u8, 35u8, 90u8, 244u8, 5u8, 241u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_lottery::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A lottery has been started!
			pub struct LotteryStarted;
			impl ::subxt::events::StaticEvent for LotteryStarted {
				const PALLET: &'static str = "Lottery";
				const EVENT: &'static str = "LotteryStarted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A new set of calls have been set!
			pub struct CallsUpdated;
			impl ::subxt::events::StaticEvent for CallsUpdated {
				const PALLET: &'static str = "Lottery";
				const EVENT: &'static str = "CallsUpdated";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A winner has been chosen!
			pub struct Winner {
				pub winner: ::subxt::utils::AccountId32,
				pub lottery_balance: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Winner {
				const PALLET: &'static str = "Lottery";
				const EVENT: &'static str = "Winner";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A ticket has been bought!
			pub struct TicketBought {
				pub who: ::subxt::utils::AccountId32,
				pub call_index: (::core::primitive::u8, ::core::primitive::u8),
			}
			impl ::subxt::events::StaticEvent for TicketBought {
				const PALLET: &'static str = "Lottery";
				const EVENT: &'static str = "TicketBought";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				pub fn lottery_index(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Lottery",
						"LotteryIndex",
						vec![],
						[
							79u8, 74u8, 246u8, 125u8, 89u8, 183u8, 60u8, 48u8, 34u8, 211u8, 236u8,
							222u8, 23u8, 158u8, 184u8, 140u8, 200u8, 80u8, 232u8, 5u8, 240u8,
							218u8, 70u8, 221u8, 219u8, 1u8, 3u8, 203u8, 77u8, 3u8, 128u8, 89u8,
						],
					)
				}
				/// The configuration for the current lottery.
				pub fn lottery(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_lottery::LotteryConfig<
						::core::primitive::u32,
						::core::primitive::u128,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Lottery",
						"Lottery",
						vec![],
						[
							46u8, 51u8, 122u8, 129u8, 145u8, 2u8, 183u8, 42u8, 184u8, 167u8, 30u8,
							73u8, 175u8, 49u8, 109u8, 166u8, 188u8, 151u8, 171u8, 8u8, 186u8,
							208u8, 227u8, 19u8, 252u8, 141u8, 56u8, 89u8, 229u8, 139u8, 247u8,
							117u8,
						],
					)
				}
				/// Users who have purchased a ticket. (Lottery Index, Tickets Purchased)
				pub fn participants(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						::core::primitive::u32,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							::core::primitive::u8,
							::core::primitive::u8,
						)>,
					),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Lottery",
						"Participants",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							129u8, 243u8, 95u8, 30u8, 228u8, 183u8, 238u8, 141u8, 77u8, 8u8, 166u8,
							197u8, 168u8, 93u8, 27u8, 40u8, 38u8, 22u8, 188u8, 55u8, 58u8, 154u8,
							122u8, 122u8, 76u8, 57u8, 183u8, 210u8, 254u8, 185u8, 239u8, 242u8,
						],
					)
				}
				/// Users who have purchased a ticket. (Lottery Index, Tickets Purchased)
				pub fn participants_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						::core::primitive::u32,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							::core::primitive::u8,
							::core::primitive::u8,
						)>,
					),
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Lottery",
						"Participants",
						Vec::new(),
						[
							129u8, 243u8, 95u8, 30u8, 228u8, 183u8, 238u8, 141u8, 77u8, 8u8, 166u8,
							197u8, 168u8, 93u8, 27u8, 40u8, 38u8, 22u8, 188u8, 55u8, 58u8, 154u8,
							122u8, 122u8, 76u8, 57u8, 183u8, 210u8, 254u8, 185u8, 239u8, 242u8,
						],
					)
				}
				/// Total number of tickets sold.
				pub fn tickets_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Lottery",
						"TicketsCount",
						vec![],
						[
							112u8, 164u8, 111u8, 40u8, 98u8, 247u8, 174u8, 117u8, 198u8, 56u8,
							109u8, 205u8, 38u8, 175u8, 118u8, 75u8, 136u8, 86u8, 95u8, 200u8,
							233u8, 199u8, 195u8, 198u8, 161u8, 64u8, 199u8, 141u8, 125u8, 42u8,
							187u8, 40u8,
						],
					)
				}
				/// Each ticket's owner.
				///
				/// May have residual storage from previous lotteries. Use `TicketsCount` to see
				/// which ones are actually valid ticket mappings.
				pub fn tickets(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Lottery",
						"Tickets",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							146u8, 73u8, 177u8, 170u8, 239u8, 27u8, 41u8, 142u8, 212u8, 251u8,
							124u8, 174u8, 237u8, 255u8, 133u8, 237u8, 34u8, 249u8, 246u8, 3u8,
							153u8, 156u8, 80u8, 244u8, 65u8, 26u8, 106u8, 234u8, 150u8, 75u8, 93u8,
							175u8,
						],
					)
				}
				/// Each ticket's owner.
				///
				/// May have residual storage from previous lotteries. Use `TicketsCount` to see
				/// which ones are actually valid ticket mappings.
				pub fn tickets_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Lottery",
						"Tickets",
						Vec::new(),
						[
							146u8, 73u8, 177u8, 170u8, 239u8, 27u8, 41u8, 142u8, 212u8, 251u8,
							124u8, 174u8, 237u8, 255u8, 133u8, 237u8, 34u8, 249u8, 246u8, 3u8,
							153u8, 156u8, 80u8, 244u8, 65u8, 26u8, 106u8, 234u8, 150u8, 75u8, 93u8,
							175u8,
						],
					)
				}
				/// The calls stored in this pallet to be used in an active lottery if configured
				/// by `Config::ValidateCall`.
				pub fn call_indices(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						::core::primitive::u8,
						::core::primitive::u8,
					)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Lottery",
						"CallIndices",
						vec![],
						[
							244u8, 89u8, 150u8, 164u8, 63u8, 13u8, 41u8, 8u8, 140u8, 211u8, 163u8,
							176u8, 239u8, 120u8, 247u8, 160u8, 131u8, 116u8, 13u8, 152u8, 154u8,
							1u8, 128u8, 128u8, 182u8, 246u8, 45u8, 106u8, 88u8, 6u8, 135u8, 158u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The Lottery's pallet id
				pub fn pallet_id(
					&self,
				) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId> {
					::subxt::constants::Address::new_static(
						"Lottery",
						"PalletId",
						[
							139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
							174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
							9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
						],
					)
				}
				/// The max number of calls available in a single lottery.
				pub fn max_calls(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Lottery",
						"MaxCalls",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Number of time we should try to generate a random number that has no modulo
				/// bias. The larger this number, the more potential computation is used for picking
				/// the winner, but also the more likely that the chosen winner is done fairly.
				pub fn max_generate_random(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Lottery",
						"MaxGenerateRandom",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod nis {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct PlaceBid {
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
				pub duration: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RetractBid {
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
				pub duration: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct FundDeficit;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ThawPrivate {
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				pub maybe_proportion:
					::core::option::Option<runtime_types::sp_arithmetic::per_things::Perquintill>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ThawCommunal {
				#[codec(compact)]
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Communify {
				#[codec(compact)]
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Privatize {
				#[codec(compact)]
				pub index: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Place a bid.
				///
				///Origin must be Signed, and account must have at least `amount` in free balance.
				///
				/// - `amount`: The amount of the bid; these funds will be reserved, and if/when
				///  consolidated, removed. Must be at least `MinBid`.
				/// - `duration`: The number of periods before which the newly consolidated bid may
				///   be
				///  thawed. Must be greater than 1 and no more than `QueueCount`.
				///
				///Complexities:
				/// - `Queues[duration].len()` (just take max).
				pub fn place_bid(
					&self,
					amount: ::core::primitive::u128,
					duration: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<PlaceBid> {
					::subxt::tx::Payload::new_static(
						"Nis",
						"place_bid",
						PlaceBid { amount, duration },
						[
							197u8, 16u8, 24u8, 59u8, 72u8, 162u8, 72u8, 124u8, 149u8, 28u8, 208u8,
							47u8, 208u8, 0u8, 110u8, 122u8, 32u8, 225u8, 29u8, 21u8, 144u8, 75u8,
							138u8, 188u8, 213u8, 188u8, 34u8, 231u8, 52u8, 191u8, 210u8, 158u8,
						],
					)
				}
				///Retract a previously placed bid.
				///
				///Origin must be Signed, and the account should have previously issued a
				/// still-active bid of `amount` for `duration`.
				///
				/// - `amount`: The amount of the previous bid.
				/// - `duration`: The duration of the previous bid.
				pub fn retract_bid(
					&self,
					amount: ::core::primitive::u128,
					duration: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<RetractBid> {
					::subxt::tx::Payload::new_static(
						"Nis",
						"retract_bid",
						RetractBid { amount, duration },
						[
							139u8, 141u8, 178u8, 24u8, 250u8, 206u8, 70u8, 51u8, 249u8, 82u8,
							172u8, 68u8, 157u8, 50u8, 110u8, 233u8, 163u8, 46u8, 204u8, 54u8,
							154u8, 20u8, 18u8, 205u8, 137u8, 95u8, 187u8, 74u8, 250u8, 161u8,
							220u8, 22u8,
						],
					)
				}
				///Ensure we have sufficient funding for all potential payouts.
				///
				/// - `origin`: Must be accepted by `FundOrigin`.
				pub fn fund_deficit(&self) -> ::subxt::tx::Payload<FundDeficit> {
					::subxt::tx::Payload::new_static(
						"Nis",
						"fund_deficit",
						FundDeficit {},
						[
							70u8, 45u8, 215u8, 5u8, 225u8, 2u8, 127u8, 191u8, 36u8, 210u8, 1u8,
							35u8, 22u8, 17u8, 187u8, 237u8, 241u8, 245u8, 168u8, 204u8, 112u8,
							25u8, 55u8, 124u8, 12u8, 26u8, 149u8, 7u8, 26u8, 248u8, 190u8, 125u8,
						],
					)
				}
				///Reduce or remove an outstanding receipt, placing the according proportion of
				/// funds into the account of the owner.
				///
				/// - `origin`: Must be Signed and the account must be the owner of the receipt
				///   `index` as
				///  well as any fungible counterpart.
				/// - `index`: The index of the receipt.
				/// - `portion`: If `Some`, then only the given portion of the receipt should be
				///   thawed. If
				///  `None`, then all of it should be.
				pub fn thaw_private(
					&self,
					index: ::core::primitive::u32,
					maybe_proportion: ::core::option::Option<
						runtime_types::sp_arithmetic::per_things::Perquintill,
					>,
				) -> ::subxt::tx::Payload<ThawPrivate> {
					::subxt::tx::Payload::new_static(
						"Nis",
						"thaw_private",
						ThawPrivate { index, maybe_proportion },
						[
							18u8, 152u8, 64u8, 60u8, 106u8, 168u8, 52u8, 210u8, 254u8, 246u8,
							221u8, 41u8, 216u8, 11u8, 38u8, 22u8, 163u8, 199u8, 94u8, 181u8, 171u8,
							99u8, 113u8, 27u8, 73u8, 187u8, 255u8, 106u8, 241u8, 83u8, 102u8,
							253u8,
						],
					)
				}
				///Reduce or remove an outstanding receipt, placing the according proportion of
				/// funds into the account of the owner.
				///
				/// - `origin`: Must be Signed and the account must be the owner of the fungible
				///   counterpart
				///  for receipt `index`.
				/// - `index`: The index of the receipt.
				pub fn thaw_communal(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<ThawCommunal> {
					::subxt::tx::Payload::new_static(
						"Nis",
						"thaw_communal",
						ThawCommunal { index },
						[
							125u8, 60u8, 128u8, 54u8, 205u8, 231u8, 236u8, 247u8, 232u8, 152u8,
							121u8, 17u8, 87u8, 97u8, 235u8, 115u8, 111u8, 156u8, 181u8, 98u8,
							240u8, 232u8, 54u8, 130u8, 58u8, 170u8, 118u8, 16u8, 33u8, 65u8, 23u8,
							36u8,
						],
					)
				}
				///Make a private receipt communal and create fungible counterparts for its owner.
				pub fn communify(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Communify> {
					::subxt::tx::Payload::new_static(
						"Nis",
						"communify",
						Communify { index },
						[
							88u8, 164u8, 59u8, 88u8, 62u8, 109u8, 248u8, 93u8, 253u8, 219u8, 115u8,
							13u8, 135u8, 248u8, 134u8, 154u8, 160u8, 50u8, 233u8, 34u8, 50u8,
							186u8, 70u8, 81u8, 125u8, 222u8, 162u8, 150u8, 113u8, 203u8, 91u8,
							50u8,
						],
					)
				}
				///Make a communal receipt private and burn fungible counterparts from its owner.
				pub fn privatize(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Privatize> {
					::subxt::tx::Payload::new_static(
						"Nis",
						"privatize",
						Privatize { index },
						[
							145u8, 182u8, 44u8, 183u8, 91u8, 5u8, 217u8, 200u8, 111u8, 211u8,
							139u8, 10u8, 143u8, 255u8, 10u8, 57u8, 145u8, 64u8, 18u8, 190u8, 199u8,
							164u8, 177u8, 131u8, 7u8, 30u8, 13u8, 181u8, 59u8, 174u8, 88u8, 36u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_nis::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A bid was successfully placed.
			pub struct BidPlaced {
				pub who: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
				pub duration: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for BidPlaced {
				const PALLET: &'static str = "Nis";
				const EVENT: &'static str = "BidPlaced";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A bid was successfully removed (before being accepted).
			pub struct BidRetracted {
				pub who: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
				pub duration: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for BidRetracted {
				const PALLET: &'static str = "Nis";
				const EVENT: &'static str = "BidRetracted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A bid was dropped from a queue because of another, more substantial, bid was
			/// present.
			pub struct BidDropped {
				pub who: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
				pub duration: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for BidDropped {
				const PALLET: &'static str = "Nis";
				const EVENT: &'static str = "BidDropped";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A bid was accepted. The balance may not be released until expiry.
			pub struct Issued {
				pub index: ::core::primitive::u32,
				pub expiry: ::core::primitive::u32,
				pub who: ::subxt::utils::AccountId32,
				pub proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Issued {
				const PALLET: &'static str = "Nis";
				const EVENT: &'static str = "Issued";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An receipt has been (at least partially) thawed.
			pub struct Thawed {
				pub index: ::core::primitive::u32,
				pub who: ::subxt::utils::AccountId32,
				pub proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
				pub amount: ::core::primitive::u128,
				pub dropped: ::core::primitive::bool,
			}
			impl ::subxt::events::StaticEvent for Thawed {
				const PALLET: &'static str = "Nis";
				const EVENT: &'static str = "Thawed";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An automatic funding of the deficit was made.
			pub struct Funded {
				pub deficit: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Funded {
				const PALLET: &'static str = "Nis";
				const EVENT: &'static str = "Funded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A receipt was transfered.
			pub struct Transferred {
				pub from: ::subxt::utils::AccountId32,
				pub to: ::subxt::utils::AccountId32,
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Transferred {
				const PALLET: &'static str = "Nis";
				const EVENT: &'static str = "Transferred";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The totals of items and balances within each queue. Saves a lot of storage reads
				/// in the case of sparsely packed queues.
				///
				/// The vector is indexed by duration in `Period`s, offset by one, so information on
				/// the queue whose duration is one `Period` would be storage `0`.
				pub fn queue_totals(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						::core::primitive::u32,
						::core::primitive::u128,
					)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Nis",
						"QueueTotals",
						vec![],
						[
							230u8, 24u8, 0u8, 151u8, 63u8, 26u8, 180u8, 81u8, 179u8, 26u8, 176u8,
							46u8, 2u8, 91u8, 250u8, 210u8, 212u8, 27u8, 47u8, 228u8, 2u8, 51u8,
							64u8, 7u8, 218u8, 130u8, 210u8, 7u8, 92u8, 102u8, 184u8, 227u8,
						],
					)
				}
				/// The queues of bids. Indexed by duration (in `Period`s).
				pub fn queues(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_nis::pallet::Bid<
							::core::primitive::u128,
							::subxt::utils::AccountId32,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nis",
						"Queues",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							11u8, 50u8, 58u8, 232u8, 240u8, 243u8, 90u8, 103u8, 252u8, 238u8, 15u8,
							75u8, 189u8, 241u8, 231u8, 50u8, 194u8, 134u8, 162u8, 220u8, 97u8,
							217u8, 215u8, 135u8, 138u8, 189u8, 167u8, 15u8, 162u8, 247u8, 6u8,
							74u8,
						],
					)
				}
				/// The queues of bids. Indexed by duration (in `Period`s).
				pub fn queues_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_nis::pallet::Bid<
							::core::primitive::u128,
							::subxt::utils::AccountId32,
						>,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nis",
						"Queues",
						Vec::new(),
						[
							11u8, 50u8, 58u8, 232u8, 240u8, 243u8, 90u8, 103u8, 252u8, 238u8, 15u8,
							75u8, 189u8, 241u8, 231u8, 50u8, 194u8, 134u8, 162u8, 220u8, 97u8,
							217u8, 215u8, 135u8, 138u8, 189u8, 167u8, 15u8, 162u8, 247u8, 6u8,
							74u8,
						],
					)
				}
				/// Summary information over the general state.
				pub fn summary(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nis::pallet::SummaryRecord<
						::core::primitive::u32,
						::core::primitive::u128,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Nis",
						"Summary",
						vec![],
						[
							34u8, 27u8, 67u8, 146u8, 199u8, 150u8, 63u8, 31u8, 117u8, 228u8, 20u8,
							73u8, 110u8, 73u8, 49u8, 128u8, 154u8, 222u8, 20u8, 44u8, 240u8, 154u8,
							199u8, 73u8, 87u8, 160u8, 165u8, 14u8, 53u8, 173u8, 90u8, 197u8,
						],
					)
				}
				/// The currently outstanding receipts, indexed according to the order of creation.
				pub fn receipts(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nis::pallet::ReceiptRecord<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
						::core::primitive::u128,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nis",
						"Receipts",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							133u8, 81u8, 13u8, 58u8, 124u8, 55u8, 176u8, 92u8, 245u8, 46u8, 131u8,
							139u8, 226u8, 81u8, 201u8, 103u8, 79u8, 8u8, 166u8, 161u8, 42u8, 226u8,
							247u8, 125u8, 226u8, 219u8, 82u8, 43u8, 165u8, 19u8, 56u8, 172u8,
						],
					)
				}
				/// The currently outstanding receipts, indexed according to the order of creation.
				pub fn receipts_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nis::pallet::ReceiptRecord<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
						::core::primitive::u128,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nis",
						"Receipts",
						Vec::new(),
						[
							133u8, 81u8, 13u8, 58u8, 124u8, 55u8, 176u8, 92u8, 245u8, 46u8, 131u8,
							139u8, 226u8, 81u8, 201u8, 103u8, 79u8, 8u8, 166u8, 161u8, 42u8, 226u8,
							247u8, 125u8, 226u8, 219u8, 82u8, 43u8, 165u8, 19u8, 56u8, 172u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The treasury's pallet id, used for deriving its sovereign account ID.
				pub fn pallet_id(
					&self,
				) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId> {
					::subxt::constants::Address::new_static(
						"Nis",
						"PalletId",
						[
							139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
							174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
							9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
						],
					)
				}
				/// Number of duration queues in total. This sets the maximum duration supported,
				/// which is this value multiplied by `Period`.
				pub fn queue_count(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Nis",
						"QueueCount",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Maximum number of items that may be in each duration queue.
				///
				/// Must be larger than zero.
				pub fn max_queue_len(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Nis",
						"MaxQueueLen",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Portion of the queue which is free from ordering and just a FIFO.
				///
				/// Must be no greater than `MaxQueueLen`.
				pub fn fifo_queue_len(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Nis",
						"FifoQueueLen",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The base period for the duration queues. This is the common multiple across all
				/// supported freezing durations that can be bid upon.
				pub fn base_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Nis",
						"BasePeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The minimum amount of funds that may be placed in a bid. Note that this
				/// does not actually limit the amount which may be represented in a receipt since
				/// bids may be split up by the system.
				///
				/// It should be at least big enough to ensure that there is no possible storage
				/// spam attack or queue-filling attack.
				pub fn min_bid(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Nis",
						"MinBid",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The minimum amount of funds which may intentionally be left remaining under a
				/// single receipt.
				pub fn min_receipt(
					&self,
				) -> ::subxt::constants::Address<
					runtime_types::sp_arithmetic::per_things::Perquintill,
				> {
					::subxt::constants::Address::new_static(
						"Nis",
						"MinReceipt",
						[
							6u8, 4u8, 24u8, 100u8, 110u8, 86u8, 4u8, 252u8, 70u8, 43u8, 169u8,
							124u8, 204u8, 27u8, 252u8, 91u8, 99u8, 13u8, 149u8, 202u8, 65u8, 211u8,
							125u8, 108u8, 127u8, 4u8, 146u8, 163u8, 41u8, 193u8, 25u8, 103u8,
						],
					)
				}
				/// The number of blocks between consecutive attempts to dequeue bids and create
				/// receipts.
				///
				/// A larger value results in fewer storage hits each block, but a slower period to
				/// get to the target.
				pub fn intake_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Nis",
						"IntakePeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum amount of bids that can consolidated into receipts in a single
				/// intake. A larger value here means less of the block available for transactions
				/// should there be a glut of bids.
				pub fn max_intake_weight(
					&self,
				) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight> {
					::subxt::constants::Address::new_static(
						"Nis",
						"MaxIntakeWeight",
						[
							206u8, 61u8, 253u8, 247u8, 163u8, 40u8, 161u8, 52u8, 134u8, 140u8,
							206u8, 83u8, 44u8, 166u8, 226u8, 115u8, 181u8, 14u8, 227u8, 130u8,
							210u8, 32u8, 85u8, 29u8, 230u8, 97u8, 130u8, 165u8, 147u8, 134u8,
							106u8, 76u8,
						],
					)
				}
				/// The maximum proportion which may be thawed and the period over which it is
				/// reset.
				pub fn thaw_throttle(
					&self,
				) -> ::subxt::constants::Address<(
					runtime_types::sp_arithmetic::per_things::Perquintill,
					::core::primitive::u32,
				)> {
					::subxt::constants::Address::new_static(
						"Nis",
						"ThawThrottle",
						[
							186u8, 73u8, 125u8, 166u8, 127u8, 250u8, 1u8, 100u8, 253u8, 174u8,
							176u8, 185u8, 210u8, 229u8, 218u8, 53u8, 27u8, 72u8, 79u8, 130u8, 87u8,
							138u8, 50u8, 139u8, 205u8, 79u8, 190u8, 58u8, 140u8, 68u8, 70u8, 16u8,
						],
					)
				}
				/// The name for the reserve ID.
				pub fn reserve_id(
					&self,
				) -> ::subxt::constants::Address<[::core::primitive::u8; 8usize]> {
					::subxt::constants::Address::new_static(
						"Nis",
						"ReserveId",
						[
							224u8, 197u8, 247u8, 125u8, 62u8, 180u8, 69u8, 91u8, 226u8, 36u8, 82u8,
							148u8, 70u8, 147u8, 209u8, 40u8, 210u8, 229u8, 181u8, 191u8, 170u8,
							205u8, 138u8, 97u8, 127u8, 59u8, 124u8, 244u8, 252u8, 30u8, 213u8,
							179u8,
						],
					)
				}
			}
		}
	}
	pub mod uniques {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Create {
				pub collection: ::core::primitive::u32,
				pub admin: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceCreate {
				pub collection: ::core::primitive::u32,
				pub owner: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub free_holding: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Destroy {
				pub collection: ::core::primitive::u32,
				pub witness: runtime_types::pallet_uniques::types::DestroyWitness,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Mint {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub owner: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Burn {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub check_owner: ::core::option::Option<
					::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Transfer {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub dest: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Redeposit {
				pub collection: ::core::primitive::u32,
				pub items: ::std::vec::Vec<::core::primitive::u32>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Freeze {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Thaw {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct FreezeCollection {
				pub collection: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ThawCollection {
				pub collection: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TransferOwnership {
				pub collection: ::core::primitive::u32,
				pub owner: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetTeam {
				pub collection: ::core::primitive::u32,
				pub issuer: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub admin: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub freezer: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ApproveTransfer {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub delegate: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CancelApproval {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub maybe_check_delegate: ::core::option::Option<
					::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceItemStatus {
				pub collection: ::core::primitive::u32,
				pub owner: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub issuer: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub admin: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub freezer: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub free_holding: ::core::primitive::bool,
				pub is_frozen: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetAttribute {
				pub collection: ::core::primitive::u32,
				pub maybe_item: ::core::option::Option<::core::primitive::u32>,
				pub key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
				pub value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClearAttribute {
				pub collection: ::core::primitive::u32,
				pub maybe_item: ::core::option::Option<::core::primitive::u32>,
				pub key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetMetadata {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
				pub is_frozen: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClearMetadata {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetCollectionMetadata {
				pub collection: ::core::primitive::u32,
				pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
				pub is_frozen: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClearCollectionMetadata {
				pub collection: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetAcceptOwnership {
				pub maybe_collection: ::core::option::Option<::core::primitive::u32>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetCollectionMaxSupply {
				pub collection: ::core::primitive::u32,
				pub max_supply: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetPrice {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub price: ::core::option::Option<::core::primitive::u128>,
				pub whitelisted_buyer: ::core::option::Option<
					::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct BuyItem {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub bid_price: ::core::primitive::u128,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Issue a new collection of non-fungible items from a public origin.
				///
				///This new collection has no items initially and its owner is the origin.
				///
				///The origin must conform to the configured `CreateOrigin` and have sufficient
				/// funds free.
				///
				///`ItemDeposit` funds of sender are reserved.
				///
				///Parameters:
				/// - `collection`: The identifier of the new collection. This must not be currently
				///   in use.
				/// - `admin`: The admin of this collection. The admin is the initial address of
				///   each
				///member of the collection's admin team.
				///
				///Emits `Created` event when successful.
				///
				///Weight: `O(1)`
				pub fn create(
					&self,
					collection: ::core::primitive::u32,
					admin: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<Create> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"create",
						Create { collection, admin },
						[
							250u8, 79u8, 237u8, 220u8, 143u8, 6u8, 150u8, 213u8, 251u8, 95u8, 81u8,
							65u8, 94u8, 176u8, 218u8, 190u8, 103u8, 116u8, 61u8, 188u8, 31u8,
							180u8, 109u8, 209u8, 140u8, 102u8, 247u8, 41u8, 12u8, 21u8, 143u8,
							162u8,
						],
					)
				}
				///Issue a new collection of non-fungible items from a privileged origin.
				///
				///This new collection has no items initially.
				///
				///The origin must conform to `ForceOrigin`.
				///
				///Unlike `create`, no funds are reserved.
				///
				/// - `collection`: The identifier of the new item. This must not be currently in
				///   use.
				/// - `owner`: The owner of this collection of items. The owner has full superuser
				///  permissions
				///over this item, but may later change and configure the permissions using
				///`transfer_ownership` and `set_team`.
				///
				///Emits `ForceCreated` event when successful.
				///
				///Weight: `O(1)`
				pub fn force_create(
					&self,
					collection: ::core::primitive::u32,
					owner: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					free_holding: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<ForceCreate> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"force_create",
						ForceCreate { collection, owner, free_holding },
						[
							128u8, 35u8, 126u8, 101u8, 171u8, 131u8, 36u8, 84u8, 196u8, 235u8,
							243u8, 21u8, 43u8, 160u8, 101u8, 203u8, 58u8, 103u8, 236u8, 159u8,
							217u8, 124u8, 94u8, 135u8, 37u8, 42u8, 159u8, 204u8, 163u8, 106u8,
							86u8, 97u8,
						],
					)
				}
				///Destroy a collection of fungible items.
				///
				///The origin must conform to `ForceOrigin` or must be `Signed` and the sender must
				/// be the owner of the `collection`.
				///
				/// - `collection`: The identifier of the collection to be destroyed.
				/// - `witness`: Information on the items minted in the collection. This must be
				///correct.
				///
				///Emits `Destroyed` event when successful.
				///
				///Weight: `O(n + m)` where:
				/// - `n = witness.items`
				/// - `m = witness.item_metadatas`
				/// - `a = witness.attributes`
				pub fn destroy(
					&self,
					collection: ::core::primitive::u32,
					witness: runtime_types::pallet_uniques::types::DestroyWitness,
				) -> ::subxt::tx::Payload<Destroy> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"destroy",
						Destroy { collection, witness },
						[
							194u8, 219u8, 14u8, 11u8, 254u8, 25u8, 217u8, 157u8, 117u8, 236u8,
							144u8, 148u8, 151u8, 141u8, 40u8, 60u8, 243u8, 241u8, 140u8, 184u8,
							45u8, 153u8, 33u8, 177u8, 248u8, 79u8, 67u8, 249u8, 47u8, 244u8, 198u8,
							138u8,
						],
					)
				}
				///Mint an item of a particular collection.
				///
				///The origin must be Signed and the sender must be the Issuer of the `collection`.
				///
				/// - `collection`: The collection of the item to be minted.
				/// - `item`: The item value of the item to be minted.
				/// - `beneficiary`: The initial owner of the minted item.
				///
				///Emits `Issued` event when successful.
				///
				///Weight: `O(1)`
				pub fn mint(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					owner: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<Mint> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"mint",
						Mint { collection, item, owner },
						[
							55u8, 248u8, 214u8, 184u8, 144u8, 201u8, 35u8, 97u8, 81u8, 129u8,
							159u8, 219u8, 46u8, 107u8, 174u8, 115u8, 73u8, 198u8, 140u8, 172u8,
							254u8, 157u8, 182u8, 0u8, 71u8, 237u8, 226u8, 202u8, 136u8, 65u8,
							174u8, 246u8,
						],
					)
				}
				///Destroy a single item.
				///
				///Origin must be Signed and the signing account must be either:
				/// - the Admin of the `collection`;
				/// - the Owner of the `item`;
				///
				/// - `collection`: The collection of the item to be burned.
				/// - `item`: The item of the item to be burned.
				/// - `check_owner`: If `Some` then the operation will fail with `WrongOwner` unless
				///   the
				///  item is owned by this value.
				///
				///Emits `Burned` with the actual amount burned.
				///
				///Weight: `O(1)`
				///Modes: `check_owner.is_some()`.
				pub fn burn(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					check_owner: ::core::option::Option<
						::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					>,
				) -> ::subxt::tx::Payload<Burn> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"burn",
						Burn { collection, item, check_owner },
						[
							215u8, 138u8, 65u8, 126u8, 201u8, 135u8, 73u8, 194u8, 2u8, 196u8,
							229u8, 103u8, 140u8, 74u8, 21u8, 144u8, 111u8, 99u8, 200u8, 210u8,
							191u8, 108u8, 220u8, 56u8, 64u8, 89u8, 216u8, 181u8, 175u8, 57u8, 41u8,
							173u8,
						],
					)
				}
				///Move an item from the sender account to another.
				///
				///This resets the approved account of the item.
				///
				///Origin must be Signed and the signing account must be either:
				/// - the Admin of the `collection`;
				/// - the Owner of the `item`;
				/// - the approved delegate for the `item` (in this case, the approval is reset).
				///
				///Arguments:
				/// - `collection`: The collection of the item to be transferred.
				/// - `item`: The item of the item to be transferred.
				/// - `dest`: The account to receive ownership of the item.
				///
				///Emits `Transferred`.
				///
				///Weight: `O(1)`
				pub fn transfer(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					dest: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<Transfer> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"transfer",
						Transfer { collection, item, dest },
						[
							223u8, 90u8, 63u8, 140u8, 84u8, 72u8, 67u8, 84u8, 225u8, 84u8, 4u8,
							197u8, 17u8, 53u8, 151u8, 209u8, 163u8, 114u8, 253u8, 225u8, 44u8,
							171u8, 240u8, 8u8, 112u8, 8u8, 20u8, 25u8, 224u8, 131u8, 175u8, 40u8,
						],
					)
				}
				///Reevaluate the deposits on some items.
				///
				///Origin must be Signed and the sender should be the Owner of the `collection`.
				///
				/// - `collection`: The collection to be frozen.
				/// - `items`: The items of the collection whose deposits will be reevaluated.
				///
				///NOTE: This exists as a best-effort function. Any items which are unknown or
				///in the case that the owner account does not have reservable funds to pay for a
				///deposit increase are ignored. Generally the owner isn't going to call this on
				/// items whose existing deposit is less than the refreshed deposit as it would only
				/// cost them, so it's of little consequence.
				///
				///It will still return an error in the case that the collection is unknown of the
				/// signer is not permitted to call it.
				///
				///Weight: `O(items.len())`
				pub fn redeposit(
					&self,
					collection: ::core::primitive::u32,
					items: ::std::vec::Vec<::core::primitive::u32>,
				) -> ::subxt::tx::Payload<Redeposit> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"redeposit",
						Redeposit { collection, items },
						[
							81u8, 142u8, 143u8, 126u8, 12u8, 71u8, 139u8, 28u8, 170u8, 219u8,
							195u8, 22u8, 146u8, 69u8, 202u8, 7u8, 202u8, 113u8, 93u8, 187u8, 113u8,
							16u8, 8u8, 76u8, 3u8, 124u8, 248u8, 38u8, 17u8, 232u8, 120u8, 145u8,
						],
					)
				}
				///Disallow further unprivileged transfer of an item.
				///
				///Origin must be Signed and the sender should be the Freezer of the `collection`.
				///
				/// - `collection`: The collection of the item to be frozen.
				/// - `item`: The item of the item to be frozen.
				///
				///Emits `Frozen`.
				///
				///Weight: `O(1)`
				pub fn freeze(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Freeze> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"freeze",
						Freeze { collection, item },
						[
							71u8, 169u8, 3u8, 86u8, 145u8, 29u8, 181u8, 125u8, 226u8, 255u8, 19u8,
							202u8, 166u8, 193u8, 183u8, 145u8, 184u8, 67u8, 80u8, 51u8, 241u8,
							132u8, 226u8, 206u8, 24u8, 249u8, 189u8, 1u8, 2u8, 65u8, 53u8, 114u8,
						],
					)
				}
				///Re-allow unprivileged transfer of an item.
				///
				///Origin must be Signed and the sender should be the Freezer of the `collection`.
				///
				/// - `collection`: The collection of the item to be thawed.
				/// - `item`: The item of the item to be thawed.
				///
				///Emits `Thawed`.
				///
				///Weight: `O(1)`
				pub fn thaw(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Thaw> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"thaw",
						Thaw { collection, item },
						[
							17u8, 158u8, 130u8, 248u8, 75u8, 216u8, 110u8, 113u8, 113u8, 243u8,
							157u8, 40u8, 140u8, 41u8, 128u8, 255u8, 188u8, 7u8, 135u8, 27u8, 251u8,
							123u8, 192u8, 220u8, 149u8, 111u8, 215u8, 26u8, 92u8, 188u8, 219u8,
							90u8,
						],
					)
				}
				///Disallow further unprivileged transfers for a whole collection.
				///
				///Origin must be Signed and the sender should be the Freezer of the `collection`.
				///
				/// - `collection`: The collection to be frozen.
				///
				///Emits `CollectionFrozen`.
				///
				///Weight: `O(1)`
				pub fn freeze_collection(
					&self,
					collection: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<FreezeCollection> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"freeze_collection",
						FreezeCollection { collection },
						[
							17u8, 75u8, 230u8, 120u8, 48u8, 46u8, 9u8, 118u8, 130u8, 136u8, 249u8,
							123u8, 110u8, 105u8, 145u8, 232u8, 243u8, 80u8, 149u8, 59u8, 233u8,
							151u8, 24u8, 140u8, 40u8, 60u8, 250u8, 54u8, 25u8, 168u8, 147u8, 194u8,
						],
					)
				}
				///Re-allow unprivileged transfers for a whole collection.
				///
				///Origin must be Signed and the sender should be the Admin of the `collection`.
				///
				/// - `collection`: The collection to be thawed.
				///
				///Emits `CollectionThawed`.
				///
				///Weight: `O(1)`
				pub fn thaw_collection(
					&self,
					collection: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<ThawCollection> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"thaw_collection",
						ThawCollection { collection },
						[
							134u8, 69u8, 120u8, 153u8, 244u8, 7u8, 197u8, 28u8, 169u8, 128u8,
							183u8, 72u8, 46u8, 41u8, 47u8, 173u8, 251u8, 33u8, 195u8, 245u8, 74u8,
							156u8, 165u8, 9u8, 164u8, 32u8, 144u8, 158u8, 58u8, 202u8, 69u8, 213u8,
						],
					)
				}
				///Change the Owner of a collection.
				///
				///Origin must be Signed and the sender should be the Owner of the `collection`.
				///
				/// - `collection`: The collection whose owner should be changed.
				/// - `owner`: The new Owner of this collection. They must have called
				///  `set_accept_ownership` with `collection` in order for this operation to
				/// succeed.
				///
				///Emits `OwnerChanged`.
				///
				///Weight: `O(1)`
				pub fn transfer_ownership(
					&self,
					collection: ::core::primitive::u32,
					owner: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<TransferOwnership> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"transfer_ownership",
						TransferOwnership { collection, owner },
						[
							217u8, 228u8, 51u8, 96u8, 179u8, 215u8, 163u8, 137u8, 231u8, 239u8,
							181u8, 113u8, 48u8, 144u8, 91u8, 140u8, 50u8, 175u8, 81u8, 251u8,
							128u8, 208u8, 38u8, 246u8, 103u8, 219u8, 65u8, 179u8, 153u8, 4u8,
							154u8, 181u8,
						],
					)
				}
				///Change the Issuer, Admin and Freezer of a collection.
				///
				///Origin must be Signed and the sender should be the Owner of the `collection`.
				///
				/// - `collection`: The collection whose team should be changed.
				/// - `issuer`: The new Issuer of this collection.
				/// - `admin`: The new Admin of this collection.
				/// - `freezer`: The new Freezer of this collection.
				///
				///Emits `TeamChanged`.
				///
				///Weight: `O(1)`
				pub fn set_team(
					&self,
					collection: ::core::primitive::u32,
					issuer: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					admin: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					freezer: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<SetTeam> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"set_team",
						SetTeam { collection, issuer, admin, freezer },
						[
							34u8, 168u8, 70u8, 30u8, 29u8, 186u8, 131u8, 181u8, 132u8, 63u8, 163u8,
							22u8, 244u8, 41u8, 205u8, 234u8, 17u8, 238u8, 54u8, 64u8, 158u8, 136u8,
							50u8, 40u8, 242u8, 117u8, 111u8, 211u8, 168u8, 156u8, 156u8, 27u8,
						],
					)
				}
				///Approve an item to be transferred by a delegated third-party account.
				///
				///The origin must conform to `ForceOrigin` or must be `Signed` and the sender must
				/// be either the owner of the `item` or the admin of the collection.
				///
				/// - `collection`: The collection of the item to be approved for delegated
				///   transfer.
				/// - `item`: The item of the item to be approved for delegated transfer.
				/// - `delegate`: The account to delegate permission to transfer the item.
				///
				///Important NOTE: The `approved` account gets reset after each transfer.
				///
				///Emits `ApprovedTransfer` on success.
				///
				///Weight: `O(1)`
				pub fn approve_transfer(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					delegate: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<ApproveTransfer> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"approve_transfer",
						ApproveTransfer { collection, item, delegate },
						[
							101u8, 171u8, 204u8, 251u8, 223u8, 253u8, 213u8, 182u8, 128u8, 86u8,
							244u8, 4u8, 19u8, 173u8, 197u8, 93u8, 80u8, 13u8, 234u8, 229u8, 47u8,
							60u8, 100u8, 77u8, 112u8, 138u8, 74u8, 178u8, 95u8, 244u8, 12u8, 52u8,
						],
					)
				}
				///Cancel the prior approval for the transfer of an item by a delegate.
				///
				///Origin must be either:
				/// - the `Force` origin;
				/// - `Signed` with the signer being the Admin of the `collection`;
				/// - `Signed` with the signer being the Owner of the `item`;
				///
				///Arguments:
				/// - `collection`: The collection of the item of whose approval will be cancelled.
				/// - `item`: The item of the item of whose approval will be cancelled.
				/// - `maybe_check_delegate`: If `Some` will ensure that the given account is the
				///   one to
				///  which permission of transfer is delegated.
				///
				///Emits `ApprovalCancelled` on success.
				///
				///Weight: `O(1)`
				pub fn cancel_approval(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					maybe_check_delegate: ::core::option::Option<
						::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					>,
				) -> ::subxt::tx::Payload<CancelApproval> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"cancel_approval",
						CancelApproval { collection, item, maybe_check_delegate },
						[
							66u8, 69u8, 36u8, 135u8, 174u8, 24u8, 110u8, 166u8, 77u8, 128u8, 3u8,
							102u8, 186u8, 253u8, 130u8, 191u8, 2u8, 159u8, 54u8, 217u8, 190u8,
							45u8, 64u8, 54u8, 29u8, 196u8, 99u8, 204u8, 74u8, 128u8, 143u8, 84u8,
						],
					)
				}
				///Alter the attributes of a given item.
				///
				///Origin must be `ForceOrigin`.
				///
				/// - `collection`: The identifier of the item.
				/// - `owner`: The new Owner of this item.
				/// - `issuer`: The new Issuer of this item.
				/// - `admin`: The new Admin of this item.
				/// - `freezer`: The new Freezer of this item.
				/// - `free_holding`: Whether a deposit is taken for holding an item of this
				///   collection.
				/// - `is_frozen`: Whether this collection is frozen except for permissioned/admin
				///instructions.
				///
				///Emits `ItemStatusChanged` with the identity of the item.
				///
				///Weight: `O(1)`
				pub fn force_item_status(
					&self,
					collection: ::core::primitive::u32,
					owner: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					issuer: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					admin: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					freezer: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					free_holding: ::core::primitive::bool,
					is_frozen: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<ForceItemStatus> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"force_item_status",
						ForceItemStatus {
							collection,
							owner,
							issuer,
							admin,
							freezer,
							free_holding,
							is_frozen,
						},
						[
							80u8, 205u8, 188u8, 92u8, 184u8, 129u8, 222u8, 36u8, 205u8, 131u8,
							248u8, 126u8, 56u8, 209u8, 7u8, 109u8, 105u8, 176u8, 173u8, 65u8, 75u8,
							130u8, 117u8, 50u8, 124u8, 27u8, 233u8, 146u8, 5u8, 114u8, 226u8,
							230u8,
						],
					)
				}
				///Set an attribute for a collection or item.
				///
				///Origin must be either `ForceOrigin` or Signed and the sender should be the Owner
				/// of the `collection`.
				///
				///If the origin is Signed, then funds of signer are reserved according to the
				/// formula: `MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking
				/// into account any already reserved funds.
				///
				/// - `collection`: The identifier of the collection whose item's metadata to set.
				/// - `maybe_item`: The identifier of the item whose metadata to set.
				/// - `key`: The key of the attribute.
				/// - `value`: The value to which to set the attribute.
				///
				///Emits `AttributeSet`.
				///
				///Weight: `O(1)`
				pub fn set_attribute(
					&self,
					collection: ::core::primitive::u32,
					maybe_item: ::core::option::Option<::core::primitive::u32>,
					key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
				) -> ::subxt::tx::Payload<SetAttribute> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"set_attribute",
						SetAttribute { collection, maybe_item, key, value },
						[
							227u8, 229u8, 21u8, 73u8, 122u8, 15u8, 156u8, 240u8, 210u8, 78u8, 83u8,
							101u8, 42u8, 92u8, 160u8, 235u8, 225u8, 150u8, 221u8, 160u8, 204u8,
							221u8, 9u8, 175u8, 122u8, 145u8, 169u8, 28u8, 71u8, 148u8, 188u8, 20u8,
						],
					)
				}
				///Clear an attribute for a collection or item.
				///
				///Origin must be either `ForceOrigin` or Signed and the sender should be the Owner
				/// of the `collection`.
				///
				///Any deposit is freed for the collection's owner.
				///
				/// - `collection`: The identifier of the collection whose item's metadata to clear.
				/// - `maybe_item`: The identifier of the item whose metadata to clear.
				/// - `key`: The key of the attribute.
				///
				///Emits `AttributeCleared`.
				///
				///Weight: `O(1)`
				pub fn clear_attribute(
					&self,
					collection: ::core::primitive::u32,
					maybe_item: ::core::option::Option<::core::primitive::u32>,
					key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
				) -> ::subxt::tx::Payload<ClearAttribute> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"clear_attribute",
						ClearAttribute { collection, maybe_item, key },
						[
							246u8, 34u8, 148u8, 125u8, 22u8, 119u8, 14u8, 109u8, 181u8, 113u8,
							246u8, 243u8, 83u8, 171u8, 77u8, 0u8, 162u8, 15u8, 76u8, 250u8, 119u8,
							186u8, 0u8, 176u8, 74u8, 207u8, 70u8, 33u8, 218u8, 134u8, 239u8, 78u8,
						],
					)
				}
				///Set the metadata for an item.
				///
				///Origin must be either `ForceOrigin` or Signed and the sender should be the Owner
				/// of the `collection`.
				///
				///If the origin is Signed, then funds of signer are reserved according to the
				/// formula: `MetadataDepositBase + DepositPerByte * data.len` taking into
				///account any already reserved funds.
				///
				/// - `collection`: The identifier of the collection whose item's metadata to set.
				/// - `item`: The identifier of the item whose metadata to set.
				/// - `data`: The general information of this item. Limited in length by
				///   `StringLimit`.
				/// - `is_frozen`: Whether the metadata should be frozen against further changes.
				///
				///Emits `MetadataSet`.
				///
				///Weight: `O(1)`
				pub fn set_metadata(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					is_frozen: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<SetMetadata> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"set_metadata",
						SetMetadata { collection, item, data, is_frozen },
						[
							182u8, 1u8, 20u8, 121u8, 184u8, 169u8, 101u8, 195u8, 60u8, 196u8, 77u8,
							79u8, 207u8, 175u8, 109u8, 136u8, 214u8, 201u8, 99u8, 32u8, 89u8, 8u8,
							181u8, 182u8, 226u8, 166u8, 146u8, 224u8, 48u8, 231u8, 146u8, 123u8,
						],
					)
				}
				///Clear the metadata for an item.
				///
				///Origin must be either `ForceOrigin` or Signed and the sender should be the Owner
				/// of the `item`.
				///
				///Any deposit is freed for the collection's owner.
				///
				/// - `collection`: The identifier of the collection whose item's metadata to clear.
				/// - `item`: The identifier of the item whose metadata to clear.
				///
				///Emits `MetadataCleared`.
				///
				///Weight: `O(1)`
				pub fn clear_metadata(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<ClearMetadata> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"clear_metadata",
						ClearMetadata { collection, item },
						[
							113u8, 75u8, 211u8, 250u8, 129u8, 61u8, 231u8, 204u8, 141u8, 151u8,
							65u8, 108u8, 230u8, 68u8, 51u8, 165u8, 126u8, 211u8, 51u8, 33u8, 9u8,
							47u8, 50u8, 71u8, 123u8, 71u8, 43u8, 162u8, 76u8, 1u8, 90u8, 222u8,
						],
					)
				}
				///Set the metadata for a collection.
				///
				///Origin must be either `ForceOrigin` or `Signed` and the sender should be the
				/// Owner of the `collection`.
				///
				///If the origin is `Signed`, then funds of signer are reserved according to the
				/// formula: `MetadataDepositBase + DepositPerByte * data.len` taking into
				///account any already reserved funds.
				///
				/// - `collection`: The identifier of the item whose metadata to update.
				/// - `data`: The general information of this item. Limited in length by
				///   `StringLimit`.
				/// - `is_frozen`: Whether the metadata should be frozen against further changes.
				///
				///Emits `CollectionMetadataSet`.
				///
				///Weight: `O(1)`
				pub fn set_collection_metadata(
					&self,
					collection: ::core::primitive::u32,
					data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					is_frozen: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<SetCollectionMetadata> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"set_collection_metadata",
						SetCollectionMetadata { collection, data, is_frozen },
						[
							98u8, 156u8, 235u8, 75u8, 88u8, 239u8, 86u8, 131u8, 2u8, 226u8, 12u8,
							122u8, 135u8, 145u8, 138u8, 220u8, 36u8, 120u8, 21u8, 27u8, 222u8,
							11u8, 99u8, 44u8, 250u8, 233u8, 219u8, 65u8, 33u8, 152u8, 226u8, 51u8,
						],
					)
				}
				///Clear the metadata for a collection.
				///
				///Origin must be either `ForceOrigin` or `Signed` and the sender should be the
				/// Owner of the `collection`.
				///
				///Any deposit is freed for the collection's owner.
				///
				/// - `collection`: The identifier of the collection whose metadata to clear.
				///
				///Emits `CollectionMetadataCleared`.
				///
				///Weight: `O(1)`
				pub fn clear_collection_metadata(
					&self,
					collection: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<ClearCollectionMetadata> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"clear_collection_metadata",
						ClearCollectionMetadata { collection },
						[
							218u8, 108u8, 43u8, 96u8, 85u8, 130u8, 198u8, 167u8, 28u8, 4u8, 151u8,
							185u8, 162u8, 123u8, 120u8, 42u8, 72u8, 37u8, 250u8, 135u8, 100u8,
							37u8, 193u8, 232u8, 62u8, 91u8, 18u8, 120u8, 241u8, 47u8, 73u8, 209u8,
						],
					)
				}
				///Set (or reset) the acceptance of ownership for a particular account.
				///
				///Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer
				/// must have a provider reference.
				///
				/// - `maybe_collection`: The identifier of the collection whose ownership the
				///   signer is
				///  willing to accept, or if `None`, an indication that the signer is willing to
				/// accept no  ownership transferal.
				///
				///Emits `OwnershipAcceptanceChanged`.
				pub fn set_accept_ownership(
					&self,
					maybe_collection: ::core::option::Option<::core::primitive::u32>,
				) -> ::subxt::tx::Payload<SetAcceptOwnership> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"set_accept_ownership",
						SetAcceptOwnership { maybe_collection },
						[
							171u8, 174u8, 217u8, 70u8, 115u8, 1u8, 231u8, 149u8, 223u8, 227u8, 6u8,
							226u8, 190u8, 144u8, 101u8, 21u8, 147u8, 243u8, 123u8, 228u8, 42u8,
							27u8, 126u8, 58u8, 31u8, 233u8, 54u8, 157u8, 193u8, 212u8, 114u8,
							232u8,
						],
					)
				}
				///Set the maximum amount of items a collection could have.
				///
				///Origin must be either `ForceOrigin` or `Signed` and the sender should be the
				/// Owner of the `collection`.
				///
				///Note: This function can only succeed once per collection.
				///
				/// - `collection`: The identifier of the collection to change.
				/// - `max_supply`: The maximum amount of items a collection could have.
				///
				///Emits `CollectionMaxSupplySet` event when successful.
				pub fn set_collection_max_supply(
					&self,
					collection: ::core::primitive::u32,
					max_supply: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<SetCollectionMaxSupply> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"set_collection_max_supply",
						SetCollectionMaxSupply { collection, max_supply },
						[
							116u8, 134u8, 93u8, 228u8, 6u8, 198u8, 26u8, 168u8, 154u8, 137u8, 0u8,
							151u8, 1u8, 187u8, 36u8, 154u8, 62u8, 193u8, 250u8, 83u8, 41u8, 135u8,
							187u8, 4u8, 132u8, 234u8, 207u8, 127u8, 153u8, 157u8, 76u8, 80u8,
						],
					)
				}
				///Set (or reset) the price for an item.
				///
				///Origin must be Signed and must be the owner of the asset `item`.
				///
				/// - `collection`: The collection of the item.
				/// - `item`: The item to set the price for.
				/// - `price`: The price for the item. Pass `None`, to reset the price.
				/// - `buyer`: Restricts the buy operation to a specific account.
				///
				///Emits `ItemPriceSet` on success if the price is not `None`.
				///Emits `ItemPriceRemoved` on success if the price is `None`.
				pub fn set_price(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					price: ::core::option::Option<::core::primitive::u128>,
					whitelisted_buyer: ::core::option::Option<
						::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					>,
				) -> ::subxt::tx::Payload<SetPrice> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"set_price",
						SetPrice { collection, item, price, whitelisted_buyer },
						[
							159u8, 178u8, 134u8, 144u8, 165u8, 80u8, 141u8, 253u8, 194u8, 11u8,
							8u8, 215u8, 7u8, 82u8, 138u8, 62u8, 81u8, 178u8, 75u8, 84u8, 97u8,
							175u8, 161u8, 97u8, 125u8, 175u8, 70u8, 247u8, 209u8, 132u8, 48u8,
							196u8,
						],
					)
				}
				///Allows to buy an item if it's up for sale.
				///
				///Origin must be Signed and must not be the owner of the `item`.
				///
				/// - `collection`: The collection of the item.
				/// - `item`: The item the sender wants to buy.
				/// - `bid_price`: The price the sender is willing to pay.
				///
				///Emits `ItemBought` on success.
				pub fn buy_item(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					bid_price: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<BuyItem> {
					::subxt::tx::Payload::new_static(
						"Uniques",
						"buy_item",
						BuyItem { collection, item, bid_price },
						[
							79u8, 39u8, 106u8, 21u8, 227u8, 244u8, 7u8, 107u8, 125u8, 114u8, 24u8,
							254u8, 208u8, 67u8, 31u8, 123u8, 134u8, 29u8, 94u8, 243u8, 164u8,
							137u8, 191u8, 71u8, 17u8, 170u8, 226u8, 172u8, 233u8, 198u8, 226u8,
							33u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_uniques::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A `collection` was created.
			pub struct Created {
				pub collection: ::core::primitive::u32,
				pub creator: ::subxt::utils::AccountId32,
				pub owner: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Created {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "Created";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A `collection` was force-created.
			pub struct ForceCreated {
				pub collection: ::core::primitive::u32,
				pub owner: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for ForceCreated {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "ForceCreated";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A `collection` was destroyed.
			pub struct Destroyed {
				pub collection: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Destroyed {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "Destroyed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An `item` was issued.
			pub struct Issued {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub owner: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Issued {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "Issued";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An `item` was transferred.
			pub struct Transferred {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub from: ::subxt::utils::AccountId32,
				pub to: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Transferred {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "Transferred";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An `item` was destroyed.
			pub struct Burned {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub owner: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Burned {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "Burned";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some `item` was frozen.
			pub struct Frozen {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Frozen {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "Frozen";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some `item` was thawed.
			pub struct Thawed {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Thawed {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "Thawed";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some `collection` was frozen.
			pub struct CollectionFrozen {
				pub collection: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for CollectionFrozen {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "CollectionFrozen";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some `collection` was thawed.
			pub struct CollectionThawed {
				pub collection: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for CollectionThawed {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "CollectionThawed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The owner changed.
			pub struct OwnerChanged {
				pub collection: ::core::primitive::u32,
				pub new_owner: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for OwnerChanged {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "OwnerChanged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The management team changed.
			pub struct TeamChanged {
				pub collection: ::core::primitive::u32,
				pub issuer: ::subxt::utils::AccountId32,
				pub admin: ::subxt::utils::AccountId32,
				pub freezer: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for TeamChanged {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "TeamChanged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An `item` of a `collection` has been approved by the `owner` for transfer by
			///a `delegate`.
			pub struct ApprovedTransfer {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub owner: ::subxt::utils::AccountId32,
				pub delegate: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for ApprovedTransfer {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "ApprovedTransfer";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An approval for a `delegate` account to transfer the `item` of an item
			///`collection` was cancelled by its `owner`.
			pub struct ApprovalCancelled {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub owner: ::subxt::utils::AccountId32,
				pub delegate: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for ApprovalCancelled {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "ApprovalCancelled";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A `collection` has had its attributes changed by the `Force` origin.
			pub struct ItemStatusChanged {
				pub collection: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for ItemStatusChanged {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "ItemStatusChanged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///New metadata has been set for a `collection`.
			pub struct CollectionMetadataSet {
				pub collection: ::core::primitive::u32,
				pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
				pub is_frozen: ::core::primitive::bool,
			}
			impl ::subxt::events::StaticEvent for CollectionMetadataSet {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "CollectionMetadataSet";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Metadata has been cleared for a `collection`.
			pub struct CollectionMetadataCleared {
				pub collection: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for CollectionMetadataCleared {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "CollectionMetadataCleared";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///New metadata has been set for an item.
			pub struct MetadataSet {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
				pub is_frozen: ::core::primitive::bool,
			}
			impl ::subxt::events::StaticEvent for MetadataSet {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "MetadataSet";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Metadata has been cleared for an item.
			pub struct MetadataCleared {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for MetadataCleared {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "MetadataCleared";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Metadata has been cleared for an item.
			pub struct Redeposited {
				pub collection: ::core::primitive::u32,
				pub successful_items: ::std::vec::Vec<::core::primitive::u32>,
			}
			impl ::subxt::events::StaticEvent for Redeposited {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "Redeposited";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///New attribute metadata has been set for a `collection` or `item`.
			pub struct AttributeSet {
				pub collection: ::core::primitive::u32,
				pub maybe_item: ::core::option::Option<::core::primitive::u32>,
				pub key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
				pub value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
			}
			impl ::subxt::events::StaticEvent for AttributeSet {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "AttributeSet";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Attribute metadata has been cleared for a `collection` or `item`.
			pub struct AttributeCleared {
				pub collection: ::core::primitive::u32,
				pub maybe_item: ::core::option::Option<::core::primitive::u32>,
				pub key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
			}
			impl ::subxt::events::StaticEvent for AttributeCleared {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "AttributeCleared";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Ownership acceptance has changed for an account.
			pub struct OwnershipAcceptanceChanged {
				pub who: ::subxt::utils::AccountId32,
				pub maybe_collection: ::core::option::Option<::core::primitive::u32>,
			}
			impl ::subxt::events::StaticEvent for OwnershipAcceptanceChanged {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "OwnershipAcceptanceChanged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Max supply has been set for a collection.
			pub struct CollectionMaxSupplySet {
				pub collection: ::core::primitive::u32,
				pub max_supply: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for CollectionMaxSupplySet {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "CollectionMaxSupplySet";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The price was set for the instance.
			pub struct ItemPriceSet {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub price: ::core::primitive::u128,
				pub whitelisted_buyer: ::core::option::Option<::subxt::utils::AccountId32>,
			}
			impl ::subxt::events::StaticEvent for ItemPriceSet {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "ItemPriceSet";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The price for the instance was removed.
			pub struct ItemPriceRemoved {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for ItemPriceRemoved {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "ItemPriceRemoved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An item was bought.
			pub struct ItemBought {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub price: ::core::primitive::u128,
				pub seller: ::subxt::utils::AccountId32,
				pub buyer: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for ItemBought {
				const PALLET: &'static str = "Uniques";
				const EVENT: &'static str = "ItemBought";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// Details of a collection.
				pub fn class(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_uniques::types::CollectionDetails<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"Class",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							32u8, 21u8, 193u8, 165u8, 1u8, 239u8, 178u8, 63u8, 20u8, 180u8, 240u8,
							180u8, 62u8, 46u8, 37u8, 198u8, 10u8, 245u8, 49u8, 64u8, 27u8, 217u8,
							0u8, 251u8, 116u8, 50u8, 166u8, 201u8, 108u8, 73u8, 233u8, 218u8,
						],
					)
				}
				/// Details of a collection.
				pub fn class_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_uniques::types::CollectionDetails<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"Class",
						Vec::new(),
						[
							32u8, 21u8, 193u8, 165u8, 1u8, 239u8, 178u8, 63u8, 20u8, 180u8, 240u8,
							180u8, 62u8, 46u8, 37u8, 198u8, 10u8, 245u8, 49u8, 64u8, 27u8, 217u8,
							0u8, 251u8, 116u8, 50u8, 166u8, 201u8, 108u8, 73u8, 233u8, 218u8,
						],
					)
				}
				/// The collection, if any, of which an account is willing to take ownership.
				pub fn ownership_acceptance(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"OwnershipAcceptance",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							166u8, 46u8, 6u8, 129u8, 145u8, 240u8, 8u8, 115u8, 232u8, 123u8, 153u8,
							254u8, 202u8, 128u8, 141u8, 17u8, 207u8, 218u8, 201u8, 239u8, 220u8,
							233u8, 22u8, 123u8, 126u8, 151u8, 67u8, 90u8, 51u8, 167u8, 189u8, 39u8,
						],
					)
				}
				/// The collection, if any, of which an account is willing to take ownership.
				pub fn ownership_acceptance_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"OwnershipAcceptance",
						Vec::new(),
						[
							166u8, 46u8, 6u8, 129u8, 145u8, 240u8, 8u8, 115u8, 232u8, 123u8, 153u8,
							254u8, 202u8, 128u8, 141u8, 17u8, 207u8, 218u8, 201u8, 239u8, 220u8,
							233u8, 22u8, 123u8, 126u8, 151u8, 67u8, 90u8, 51u8, 167u8, 189u8, 39u8,
						],
					)
				}
				/// The items held by any given account; set out this way so that items owned by a
				/// single account can be enumerated.
				pub fn account(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_2: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(),
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"Account",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_2.borrow()),
						],
						[
							83u8, 188u8, 8u8, 123u8, 84u8, 224u8, 52u8, 18u8, 81u8, 207u8, 139u8,
							149u8, 209u8, 246u8, 211u8, 132u8, 63u8, 86u8, 145u8, 33u8, 4u8, 252u8,
							90u8, 88u8, 89u8, 145u8, 147u8, 164u8, 223u8, 162u8, 119u8, 161u8,
						],
					)
				}
				/// The items held by any given account; set out this way so that items owned by a
				/// single account can be enumerated.
				pub fn account_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(),
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"Account",
						Vec::new(),
						[
							83u8, 188u8, 8u8, 123u8, 84u8, 224u8, 52u8, 18u8, 81u8, 207u8, 139u8,
							149u8, 209u8, 246u8, 211u8, 132u8, 63u8, 86u8, 145u8, 33u8, 4u8, 252u8,
							90u8, 88u8, 89u8, 145u8, 147u8, 164u8, 223u8, 162u8, 119u8, 161u8,
						],
					)
				}
				/// The collections owned by any given account; set out this way so that collections
				/// owned by a single account can be enumerated.
				pub fn class_account(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(),
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"ClassAccount",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							150u8, 252u8, 105u8, 208u8, 130u8, 203u8, 171u8, 17u8, 240u8, 159u8,
							148u8, 32u8, 191u8, 48u8, 240u8, 199u8, 128u8, 68u8, 24u8, 41u8, 77u8,
							159u8, 32u8, 109u8, 37u8, 65u8, 127u8, 147u8, 65u8, 91u8, 111u8, 175u8,
						],
					)
				}
				/// The collections owned by any given account; set out this way so that collections
				/// owned by a single account can be enumerated.
				pub fn class_account_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(),
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"ClassAccount",
						Vec::new(),
						[
							150u8, 252u8, 105u8, 208u8, 130u8, 203u8, 171u8, 17u8, 240u8, 159u8,
							148u8, 32u8, 191u8, 48u8, 240u8, 199u8, 128u8, 68u8, 24u8, 41u8, 77u8,
							159u8, 32u8, 109u8, 37u8, 65u8, 127u8, 147u8, 65u8, 91u8, 111u8, 175u8,
						],
					)
				}
				/// The items in existence and their ownership details.
				pub fn asset(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_uniques::types::ItemDetails<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"Asset",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							91u8, 5u8, 41u8, 213u8, 166u8, 235u8, 22u8, 162u8, 111u8, 84u8, 106u8,
							54u8, 15u8, 132u8, 79u8, 56u8, 143u8, 39u8, 101u8, 224u8, 232u8, 98u8,
							165u8, 137u8, 182u8, 175u8, 150u8, 169u8, 120u8, 198u8, 189u8, 55u8,
						],
					)
				}
				/// The items in existence and their ownership details.
				pub fn asset_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_uniques::types::ItemDetails<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"Asset",
						Vec::new(),
						[
							91u8, 5u8, 41u8, 213u8, 166u8, 235u8, 22u8, 162u8, 111u8, 84u8, 106u8,
							54u8, 15u8, 132u8, 79u8, 56u8, 143u8, 39u8, 101u8, 224u8, 232u8, 98u8,
							165u8, 137u8, 182u8, 175u8, 150u8, 169u8, 120u8, 198u8, 189u8, 55u8,
						],
					)
				}
				/// Metadata of a collection.
				pub fn class_metadata_of(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_uniques::types::CollectionMetadata<
						::core::primitive::u128,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"ClassMetadataOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							30u8, 185u8, 220u8, 71u8, 235u8, 255u8, 56u8, 170u8, 95u8, 244u8, 64u8,
							125u8, 173u8, 211u8, 208u8, 153u8, 179u8, 237u8, 82u8, 45u8, 113u8,
							6u8, 239u8, 245u8, 151u8, 224u8, 74u8, 69u8, 47u8, 127u8, 163u8, 102u8,
						],
					)
				}
				/// Metadata of a collection.
				pub fn class_metadata_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_uniques::types::CollectionMetadata<
						::core::primitive::u128,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"ClassMetadataOf",
						Vec::new(),
						[
							30u8, 185u8, 220u8, 71u8, 235u8, 255u8, 56u8, 170u8, 95u8, 244u8, 64u8,
							125u8, 173u8, 211u8, 208u8, 153u8, 179u8, 237u8, 82u8, 45u8, 113u8,
							6u8, 239u8, 245u8, 151u8, 224u8, 74u8, 69u8, 47u8, 127u8, 163u8, 102u8,
						],
					)
				}
				/// Metadata of an item.
				pub fn instance_metadata_of(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_uniques::types::ItemMetadata<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"InstanceMetadataOf",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							53u8, 239u8, 109u8, 42u8, 253u8, 16u8, 125u8, 128u8, 52u8, 166u8,
							174u8, 60u8, 17u8, 144u8, 226u8, 83u8, 199u8, 35u8, 195u8, 77u8, 57u8,
							13u8, 128u8, 49u8, 47u8, 115u8, 239u8, 33u8, 33u8, 127u8, 154u8, 247u8,
						],
					)
				}
				/// Metadata of an item.
				pub fn instance_metadata_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_uniques::types::ItemMetadata<::core::primitive::u128>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"InstanceMetadataOf",
						Vec::new(),
						[
							53u8, 239u8, 109u8, 42u8, 253u8, 16u8, 125u8, 128u8, 52u8, 166u8,
							174u8, 60u8, 17u8, 144u8, 226u8, 83u8, 199u8, 35u8, 195u8, 77u8, 57u8,
							13u8, 128u8, 49u8, 47u8, 115u8, 239u8, 33u8, 33u8, 127u8, 154u8, 247u8,
						],
					)
				}
				/// Attributes of a collection.
				pub fn attribute(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::core::option::Option<::core::primitive::u32>>,
					_2: impl ::std::borrow::Borrow<
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						::core::primitive::u128,
					),
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"Attribute",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_2.borrow()),
						],
						[
							101u8, 37u8, 8u8, 243u8, 33u8, 252u8, 251u8, 102u8, 206u8, 223u8, 64u8,
							117u8, 252u8, 22u8, 122u8, 201u8, 99u8, 126u8, 64u8, 208u8, 136u8,
							97u8, 244u8, 139u8, 17u8, 112u8, 67u8, 70u8, 148u8, 164u8, 167u8,
							188u8,
						],
					)
				}
				/// Attributes of a collection.
				pub fn attribute_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						::core::primitive::u128,
					),
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"Attribute",
						Vec::new(),
						[
							101u8, 37u8, 8u8, 243u8, 33u8, 252u8, 251u8, 102u8, 206u8, 223u8, 64u8,
							117u8, 252u8, 22u8, 122u8, 201u8, 99u8, 126u8, 64u8, 208u8, 136u8,
							97u8, 244u8, 139u8, 17u8, 112u8, 67u8, 70u8, 148u8, 164u8, 167u8,
							188u8,
						],
					)
				}
				/// Price of an asset instance.
				pub fn item_price_of(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(::core::primitive::u128, ::core::option::Option<::subxt::utils::AccountId32>),
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"ItemPriceOf",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							63u8, 143u8, 204u8, 99u8, 128u8, 218u8, 233u8, 140u8, 216u8, 44u8,
							248u8, 111u8, 204u8, 40u8, 248u8, 249u8, 24u8, 130u8, 50u8, 255u8,
							30u8, 42u8, 220u8, 136u8, 228u8, 64u8, 158u8, 195u8, 233u8, 105u8,
							137u8, 216u8,
						],
					)
				}
				/// Price of an asset instance.
				pub fn item_price_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(::core::primitive::u128, ::core::option::Option<::subxt::utils::AccountId32>),
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"ItemPriceOf",
						Vec::new(),
						[
							63u8, 143u8, 204u8, 99u8, 128u8, 218u8, 233u8, 140u8, 216u8, 44u8,
							248u8, 111u8, 204u8, 40u8, 248u8, 249u8, 24u8, 130u8, 50u8, 255u8,
							30u8, 42u8, 220u8, 136u8, 228u8, 64u8, 158u8, 195u8, 233u8, 105u8,
							137u8, 216u8,
						],
					)
				}
				/// Keeps track of the number of items a collection might have.
				pub fn collection_max_supply(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"CollectionMaxSupply",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							86u8, 134u8, 143u8, 101u8, 154u8, 17u8, 75u8, 144u8, 113u8, 61u8,
							172u8, 98u8, 72u8, 224u8, 127u8, 136u8, 27u8, 129u8, 56u8, 236u8,
							141u8, 59u8, 174u8, 48u8, 29u8, 214u8, 36u8, 121u8, 25u8, 141u8, 122u8,
							196u8,
						],
					)
				}
				/// Keeps track of the number of items a collection might have.
				pub fn collection_max_supply_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Uniques",
						"CollectionMaxSupply",
						Vec::new(),
						[
							86u8, 134u8, 143u8, 101u8, 154u8, 17u8, 75u8, 144u8, 113u8, 61u8,
							172u8, 98u8, 72u8, 224u8, 127u8, 136u8, 27u8, 129u8, 56u8, 236u8,
							141u8, 59u8, 174u8, 48u8, 29u8, 214u8, 36u8, 121u8, 25u8, 141u8, 122u8,
							196u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The basic amount of funds that must be reserved for collection.
				pub fn collection_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Uniques",
						"CollectionDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The basic amount of funds that must be reserved for an item.
				pub fn item_deposit(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Uniques",
						"ItemDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The basic amount of funds that must be reserved when adding metadata to your
				/// item.
				pub fn metadata_deposit_base(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Uniques",
						"MetadataDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The basic amount of funds that must be reserved when adding an attribute to an
				/// item.
				pub fn attribute_deposit_base(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Uniques",
						"AttributeDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The additional funds that must be reserved for the number of bytes store in
				/// metadata, either "normal" metadata or attribute metadata.
				pub fn deposit_per_byte(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Uniques",
						"DepositPerByte",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The maximum length of data stored on-chain.
				pub fn string_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Uniques",
						"StringLimit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum length of an attribute key.
				pub fn key_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Uniques",
						"KeyLimit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum length of an attribute value.
				pub fn value_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Uniques",
						"ValueLimit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod nfts {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Create {
				pub admin: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub config: runtime_types::pallet_nfts::types::CollectionConfig<
					::core::primitive::u128,
					::core::primitive::u32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceCreate {
				pub owner: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub config: runtime_types::pallet_nfts::types::CollectionConfig<
					::core::primitive::u128,
					::core::primitive::u32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Destroy {
				pub collection: ::core::primitive::u32,
				pub witness: runtime_types::pallet_nfts::types::DestroyWitness,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Mint {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub mint_to: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub witness_data: ::core::option::Option<
					runtime_types::pallet_nfts::types::MintWitness<::core::primitive::u32>,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceMint {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub mint_to: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub item_config: runtime_types::pallet_nfts::types::ItemConfig,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Burn {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Transfer {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub dest: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Redeposit {
				pub collection: ::core::primitive::u32,
				pub items: ::std::vec::Vec<::core::primitive::u32>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct LockItemTransfer {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct UnlockItemTransfer {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct LockCollection {
				pub collection: ::core::primitive::u32,
				pub lock_settings: runtime_types::pallet_nfts::types::BitFlags<
					runtime_types::pallet_nfts::types::CollectionSetting,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TransferOwnership {
				pub collection: ::core::primitive::u32,
				pub owner: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetTeam {
				pub collection: ::core::primitive::u32,
				pub issuer: ::core::option::Option<
					::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				>,
				pub admin: ::core::option::Option<
					::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				>,
				pub freezer: ::core::option::Option<
					::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceCollectionOwner {
				pub collection: ::core::primitive::u32,
				pub owner: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceCollectionConfig {
				pub collection: ::core::primitive::u32,
				pub config: runtime_types::pallet_nfts::types::CollectionConfig<
					::core::primitive::u128,
					::core::primitive::u32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ApproveTransfer {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub delegate: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub maybe_deadline: ::core::option::Option<::core::primitive::u32>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CancelApproval {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub delegate: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClearAllTransferApprovals {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct LockItemProperties {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub lock_metadata: ::core::primitive::bool,
				pub lock_attributes: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetAttribute {
				pub collection: ::core::primitive::u32,
				pub maybe_item: ::core::option::Option<::core::primitive::u32>,
				pub namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
					::subxt::utils::AccountId32,
				>,
				pub key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
				pub value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceSetAttribute {
				pub set_as: ::core::option::Option<::subxt::utils::AccountId32>,
				pub collection: ::core::primitive::u32,
				pub maybe_item: ::core::option::Option<::core::primitive::u32>,
				pub namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
					::subxt::utils::AccountId32,
				>,
				pub key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
				pub value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClearAttribute {
				pub collection: ::core::primitive::u32,
				pub maybe_item: ::core::option::Option<::core::primitive::u32>,
				pub namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
					::subxt::utils::AccountId32,
				>,
				pub key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ApproveItemAttributes {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub delegate: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CancelItemAttributesApproval {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub delegate: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub witness: runtime_types::pallet_nfts::types::CancelAttributesApprovalWitness,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetMetadata {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClearMetadata {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetCollectionMetadata {
				pub collection: ::core::primitive::u32,
				pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClearCollectionMetadata {
				pub collection: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetAcceptOwnership {
				pub maybe_collection: ::core::option::Option<::core::primitive::u32>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetCollectionMaxSupply {
				pub collection: ::core::primitive::u32,
				pub max_supply: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct UpdateMintSettings {
				pub collection: ::core::primitive::u32,
				pub mint_settings: runtime_types::pallet_nfts::types::MintSettings<
					::core::primitive::u128,
					::core::primitive::u32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetPrice {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub price: ::core::option::Option<::core::primitive::u128>,
				pub whitelisted_buyer: ::core::option::Option<
					::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct BuyItem {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub bid_price: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct PayTips {
				pub tips: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					runtime_types::pallet_nfts::types::ItemTip<
						::core::primitive::u32,
						::core::primitive::u32,
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CreateSwap {
				pub offered_collection: ::core::primitive::u32,
				pub offered_item: ::core::primitive::u32,
				pub desired_collection: ::core::primitive::u32,
				pub maybe_desired_item: ::core::option::Option<::core::primitive::u32>,
				pub maybe_price: ::core::option::Option<
					runtime_types::pallet_nfts::types::PriceWithDirection<::core::primitive::u128>,
				>,
				pub duration: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CancelSwap {
				pub offered_collection: ::core::primitive::u32,
				pub offered_item: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClaimSwap {
				pub send_collection: ::core::primitive::u32,
				pub send_item: ::core::primitive::u32,
				pub receive_collection: ::core::primitive::u32,
				pub receive_item: ::core::primitive::u32,
				pub witness_price: ::core::option::Option<
					runtime_types::pallet_nfts::types::PriceWithDirection<::core::primitive::u128>,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct MintPreSigned {
				pub mint_data: runtime_types::pallet_nfts::types::PreSignedMint<
					::core::primitive::u32,
					::core::primitive::u32,
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub signature: runtime_types::sp_runtime::MultiSignature,
				pub signer: ::subxt::utils::AccountId32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetAttributesPreSigned {
				pub data: runtime_types::pallet_nfts::types::PreSignedAttributes<
					::core::primitive::u32,
					::core::primitive::u32,
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub signature: runtime_types::sp_runtime::MultiSignature,
				pub signer: ::subxt::utils::AccountId32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Issue a new collection of non-fungible items from a public origin.
				///
				///This new collection has no items initially and its owner is the origin.
				///
				///The origin must be Signed and the sender must have sufficient funds free.
				///
				///`ItemDeposit` funds of sender are reserved.
				///
				///Parameters:
				/// - `admin`: The admin of this collection. The admin is the initial address of
				///   each
				///member of the collection's admin team.
				///
				///Emits `Created` event when successful.
				///
				///Weight: `O(1)`
				pub fn create(
					&self,
					admin: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					config: runtime_types::pallet_nfts::types::CollectionConfig<
						::core::primitive::u128,
						::core::primitive::u32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<Create> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"create",
						Create { admin, config },
						[
							39u8, 4u8, 38u8, 44u8, 147u8, 41u8, 137u8, 135u8, 131u8, 186u8, 47u8,
							61u8, 129u8, 151u8, 187u8, 234u8, 92u8, 11u8, 75u8, 150u8, 166u8,
							187u8, 114u8, 41u8, 74u8, 33u8, 200u8, 13u8, 104u8, 73u8, 35u8, 58u8,
						],
					)
				}
				///Issue a new collection of non-fungible items from a privileged origin.
				///
				///This new collection has no items initially.
				///
				///The origin must conform to `ForceOrigin`.
				///
				///Unlike `create`, no funds are reserved.
				///
				/// - `owner`: The owner of this collection of items. The owner has full superuser
				///  permissions over this item, but may later change and configure the permissions
				/// using  `transfer_ownership` and `set_team`.
				///
				///Emits `ForceCreated` event when successful.
				///
				///Weight: `O(1)`
				pub fn force_create(
					&self,
					owner: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					config: runtime_types::pallet_nfts::types::CollectionConfig<
						::core::primitive::u128,
						::core::primitive::u32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<ForceCreate> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"force_create",
						ForceCreate { owner, config },
						[
							90u8, 0u8, 154u8, 141u8, 23u8, 101u8, 243u8, 20u8, 255u8, 61u8, 114u8,
							183u8, 127u8, 92u8, 131u8, 14u8, 179u8, 96u8, 133u8, 180u8, 69u8, 67u8,
							133u8, 205u8, 167u8, 207u8, 173u8, 56u8, 185u8, 241u8, 129u8, 74u8,
						],
					)
				}
				///Destroy a collection of fungible items.
				///
				///The origin must conform to `ForceOrigin` or must be `Signed` and the sender must
				/// be the owner of the `collection`.
				///
				///NOTE: The collection must have 0 items to be destroyed.
				///
				/// - `collection`: The identifier of the collection to be destroyed.
				/// - `witness`: Information on the items minted in the collection. This must be
				///correct.
				///
				///Emits `Destroyed` event when successful.
				///
				///Weight: `O(m + c + a)` where:
				/// - `m = witness.item_metadatas`
				/// - `c = witness.item_configs`
				/// - `a = witness.attributes`
				pub fn destroy(
					&self,
					collection: ::core::primitive::u32,
					witness: runtime_types::pallet_nfts::types::DestroyWitness,
				) -> ::subxt::tx::Payload<Destroy> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"destroy",
						Destroy { collection, witness },
						[
							238u8, 83u8, 101u8, 129u8, 183u8, 36u8, 16u8, 156u8, 73u8, 42u8, 178u8,
							190u8, 163u8, 199u8, 194u8, 197u8, 242u8, 150u8, 218u8, 240u8, 101u8,
							50u8, 246u8, 139u8, 120u8, 76u8, 84u8, 95u8, 113u8, 117u8, 88u8, 19u8,
						],
					)
				}
				///Mint an item of a particular collection.
				///
				///The origin must be Signed and the sender must comply with the `mint_settings`
				/// rules.
				///
				/// - `collection`: The collection of the item to be minted.
				/// - `item`: An identifier of the new item.
				/// - `mint_to`: Account into which the item will be minted.
				/// - `witness_data`: When the mint type is `HolderOf(collection_id)`, then the
				///   owned
				///  item_id from that collection needs to be provided within the witness data
				/// object.
				///
				///Note: the deposit will be taken from the `origin` and not the `owner` of the
				/// `item`.
				///
				///Emits `Issued` event when successful.
				///
				///Weight: `O(1)`
				pub fn mint(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					mint_to: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					witness_data: ::core::option::Option<
						runtime_types::pallet_nfts::types::MintWitness<::core::primitive::u32>,
					>,
				) -> ::subxt::tx::Payload<Mint> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"mint",
						Mint { collection, item, mint_to, witness_data },
						[
							141u8, 162u8, 85u8, 6u8, 159u8, 157u8, 209u8, 43u8, 0u8, 84u8, 152u8,
							143u8, 111u8, 79u8, 151u8, 221u8, 201u8, 146u8, 68u8, 38u8, 230u8,
							214u8, 188u8, 31u8, 143u8, 104u8, 84u8, 224u8, 195u8, 226u8, 35u8,
							206u8,
						],
					)
				}
				///Mint an item of a particular collection from a privileged origin.
				///
				///The origin must conform to `ForceOrigin` or must be `Signed` and the sender must
				/// be the Issuer of the `collection`.
				///
				/// - `collection`: The collection of the item to be minted.
				/// - `item`: An identifier of the new item.
				/// - `mint_to`: Account into which the item will be minted.
				/// - `item_config`: A config of the new item.
				///
				///Emits `Issued` event when successful.
				///
				///Weight: `O(1)`
				pub fn force_mint(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					mint_to: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					item_config: runtime_types::pallet_nfts::types::ItemConfig,
				) -> ::subxt::tx::Payload<ForceMint> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"force_mint",
						ForceMint { collection, item, mint_to, item_config },
						[
							178u8, 21u8, 236u8, 7u8, 99u8, 52u8, 79u8, 176u8, 166u8, 27u8, 167u8,
							111u8, 15u8, 106u8, 139u8, 203u8, 173u8, 57u8, 103u8, 167u8, 241u8,
							196u8, 201u8, 16u8, 245u8, 68u8, 26u8, 71u8, 152u8, 132u8, 107u8, 73u8,
						],
					)
				}
				///Destroy a single item.
				///
				///The origin must conform to `ForceOrigin` or must be Signed and the signing
				/// account must be the owner of the `item`.
				///
				/// - `collection`: The collection of the item to be burned.
				/// - `item`: The item to be burned.
				///
				///Emits `Burned`.
				///
				///Weight: `O(1)`
				pub fn burn(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Burn> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"burn",
						Burn { collection, item },
						[
							105u8, 183u8, 84u8, 11u8, 179u8, 141u8, 232u8, 89u8, 254u8, 74u8,
							167u8, 203u8, 242u8, 87u8, 99u8, 200u8, 206u8, 59u8, 129u8, 58u8,
							117u8, 92u8, 233u8, 246u8, 33u8, 158u8, 133u8, 246u8, 27u8, 208u8,
							196u8, 109u8,
						],
					)
				}
				///Move an item from the sender account to another.
				///
				///Origin must be Signed and the signing account must be either:
				/// - the Owner of the `item`;
				/// - the approved delegate for the `item` (in this case, the approval is reset).
				///
				///Arguments:
				/// - `collection`: The collection of the item to be transferred.
				/// - `item`: The item to be transferred.
				/// - `dest`: The account to receive ownership of the item.
				///
				///Emits `Transferred`.
				///
				///Weight: `O(1)`
				pub fn transfer(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					dest: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<Transfer> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"transfer",
						Transfer { collection, item, dest },
						[
							223u8, 90u8, 63u8, 140u8, 84u8, 72u8, 67u8, 84u8, 225u8, 84u8, 4u8,
							197u8, 17u8, 53u8, 151u8, 209u8, 163u8, 114u8, 253u8, 225u8, 44u8,
							171u8, 240u8, 8u8, 112u8, 8u8, 20u8, 25u8, 224u8, 131u8, 175u8, 40u8,
						],
					)
				}
				///Re-evaluate the deposits on some items.
				///
				///Origin must be Signed and the sender should be the Owner of the `collection`.
				///
				/// - `collection`: The collection of the items to be reevaluated.
				/// - `items`: The items of the collection whose deposits will be reevaluated.
				///
				///NOTE: This exists as a best-effort function. Any items which are unknown or
				///in the case that the owner account does not have reservable funds to pay for a
				///deposit increase are ignored. Generally the owner isn't going to call this on
				/// items whose existing deposit is less than the refreshed deposit as it would only
				/// cost them, so it's of little consequence.
				///
				///It will still return an error in the case that the collection is unknown or the
				/// signer is not permitted to call it.
				///
				///Weight: `O(items.len())`
				pub fn redeposit(
					&self,
					collection: ::core::primitive::u32,
					items: ::std::vec::Vec<::core::primitive::u32>,
				) -> ::subxt::tx::Payload<Redeposit> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"redeposit",
						Redeposit { collection, items },
						[
							81u8, 142u8, 143u8, 126u8, 12u8, 71u8, 139u8, 28u8, 170u8, 219u8,
							195u8, 22u8, 146u8, 69u8, 202u8, 7u8, 202u8, 113u8, 93u8, 187u8, 113u8,
							16u8, 8u8, 76u8, 3u8, 124u8, 248u8, 38u8, 17u8, 232u8, 120u8, 145u8,
						],
					)
				}
				///Disallow further unprivileged transfer of an item.
				///
				///Origin must be Signed and the sender should be the Freezer of the `collection`.
				///
				/// - `collection`: The collection of the item to be changed.
				/// - `item`: The item to become non-transferable.
				///
				///Emits `ItemTransferLocked`.
				///
				///Weight: `O(1)`
				pub fn lock_item_transfer(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<LockItemTransfer> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"lock_item_transfer",
						LockItemTransfer { collection, item },
						[
							234u8, 3u8, 222u8, 142u8, 68u8, 171u8, 104u8, 48u8, 216u8, 153u8,
							167u8, 77u8, 161u8, 153u8, 191u8, 245u8, 190u8, 228u8, 255u8, 138u8,
							215u8, 196u8, 189u8, 121u8, 251u8, 56u8, 158u8, 157u8, 156u8, 189u8,
							135u8, 16u8,
						],
					)
				}
				///Re-allow unprivileged transfer of an item.
				///
				///Origin must be Signed and the sender should be the Freezer of the `collection`.
				///
				/// - `collection`: The collection of the item to be changed.
				/// - `item`: The item to become transferable.
				///
				///Emits `ItemTransferUnlocked`.
				///
				///Weight: `O(1)`
				pub fn unlock_item_transfer(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<UnlockItemTransfer> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"unlock_item_transfer",
						UnlockItemTransfer { collection, item },
						[
							33u8, 30u8, 131u8, 204u8, 136u8, 8u8, 180u8, 37u8, 180u8, 93u8, 79u8,
							20u8, 113u8, 73u8, 213u8, 68u8, 158u8, 72u8, 10u8, 46u8, 204u8, 109u8,
							132u8, 127u8, 42u8, 78u8, 196u8, 228u8, 84u8, 61u8, 139u8, 85u8,
						],
					)
				}
				///Disallows specified settings for the whole collection.
				///
				///Origin must be Signed and the sender should be the Owner of the `collection`.
				///
				/// - `collection`: The collection to be locked.
				/// - `lock_settings`: The settings to be locked.
				///
				///Note: it's possible to only lock(set) the setting, but not to unset it.
				///
				///Emits `CollectionLocked`.
				///
				///Weight: `O(1)`
				pub fn lock_collection(
					&self,
					collection: ::core::primitive::u32,
					lock_settings: runtime_types::pallet_nfts::types::BitFlags<
						runtime_types::pallet_nfts::types::CollectionSetting,
					>,
				) -> ::subxt::tx::Payload<LockCollection> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"lock_collection",
						LockCollection { collection, lock_settings },
						[
							116u8, 190u8, 188u8, 12u8, 163u8, 231u8, 39u8, 163u8, 83u8, 109u8,
							15u8, 248u8, 154u8, 19u8, 9u8, 27u8, 160u8, 66u8, 105u8, 55u8, 164u8,
							61u8, 8u8, 139u8, 210u8, 192u8, 116u8, 44u8, 75u8, 4u8, 166u8, 215u8,
						],
					)
				}
				///Change the Owner of a collection.
				///
				///Origin must be Signed and the sender should be the Owner of the `collection`.
				///
				/// - `collection`: The collection whose owner should be changed.
				/// - `owner`: The new Owner of this collection. They must have called
				///  `set_accept_ownership` with `collection` in order for this operation to
				/// succeed.
				///
				///Emits `OwnerChanged`.
				///
				///Weight: `O(1)`
				pub fn transfer_ownership(
					&self,
					collection: ::core::primitive::u32,
					owner: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<TransferOwnership> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"transfer_ownership",
						TransferOwnership { collection, owner },
						[
							217u8, 228u8, 51u8, 96u8, 179u8, 215u8, 163u8, 137u8, 231u8, 239u8,
							181u8, 113u8, 48u8, 144u8, 91u8, 140u8, 50u8, 175u8, 81u8, 251u8,
							128u8, 208u8, 38u8, 246u8, 103u8, 219u8, 65u8, 179u8, 153u8, 4u8,
							154u8, 181u8,
						],
					)
				}
				///Change the Issuer, Admin and Freezer of a collection.
				///
				///Origin must be either `ForceOrigin` or Signed and the sender should be the Owner
				/// of the `collection`.
				///
				///Note: by setting the role to `None` only the `ForceOrigin` will be able to
				/// change it after to `Some(account)`.
				///
				/// - `collection`: The collection whose team should be changed.
				/// - `issuer`: The new Issuer of this collection.
				/// - `admin`: The new Admin of this collection.
				/// - `freezer`: The new Freezer of this collection.
				///
				///Emits `TeamChanged`.
				///
				///Weight: `O(1)`
				pub fn set_team(
					&self,
					collection: ::core::primitive::u32,
					issuer: ::core::option::Option<
						::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					>,
					admin: ::core::option::Option<
						::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					>,
					freezer: ::core::option::Option<
						::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					>,
				) -> ::subxt::tx::Payload<SetTeam> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"set_team",
						SetTeam { collection, issuer, admin, freezer },
						[
							31u8, 57u8, 39u8, 180u8, 99u8, 181u8, 33u8, 43u8, 17u8, 247u8, 137u8,
							195u8, 99u8, 145u8, 99u8, 32u8, 211u8, 248u8, 0u8, 174u8, 49u8, 48u8,
							120u8, 136u8, 40u8, 125u8, 154u8, 132u8, 172u8, 9u8, 21u8, 171u8,
						],
					)
				}
				///Change the Owner of a collection.
				///
				///Origin must be `ForceOrigin`.
				///
				/// - `collection`: The identifier of the collection.
				/// - `owner`: The new Owner of this collection.
				///
				///Emits `OwnerChanged`.
				///
				///Weight: `O(1)`
				pub fn force_collection_owner(
					&self,
					collection: ::core::primitive::u32,
					owner: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<ForceCollectionOwner> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"force_collection_owner",
						ForceCollectionOwner { collection, owner },
						[
							170u8, 152u8, 48u8, 227u8, 138u8, 164u8, 130u8, 169u8, 175u8, 227u8,
							210u8, 90u8, 78u8, 126u8, 18u8, 171u8, 115u8, 42u8, 102u8, 13u8, 221u8,
							210u8, 188u8, 170u8, 230u8, 105u8, 40u8, 124u8, 168u8, 127u8, 17u8,
							53u8,
						],
					)
				}
				///Change the config of a collection.
				///
				///Origin must be `ForceOrigin`.
				///
				/// - `collection`: The identifier of the collection.
				/// - `config`: The new config of this collection.
				///
				///Emits `CollectionConfigChanged`.
				///
				///Weight: `O(1)`
				pub fn force_collection_config(
					&self,
					collection: ::core::primitive::u32,
					config: runtime_types::pallet_nfts::types::CollectionConfig<
						::core::primitive::u128,
						::core::primitive::u32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<ForceCollectionConfig> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"force_collection_config",
						ForceCollectionConfig { collection, config },
						[
							6u8, 58u8, 170u8, 231u8, 3u8, 28u8, 161u8, 69u8, 157u8, 145u8, 67u8,
							247u8, 153u8, 129u8, 105u8, 169u8, 227u8, 12u8, 166u8, 11u8, 219u8,
							186u8, 145u8, 102u8, 192u8, 36u8, 44u8, 230u8, 213u8, 63u8, 240u8,
							227u8,
						],
					)
				}
				///Approve an item to be transferred by a delegated third-party account.
				///
				///Origin must be either `ForceOrigin` or Signed and the sender should be the Owner
				/// of the `item`.
				///
				/// - `collection`: The collection of the item to be approved for delegated
				///   transfer.
				/// - `item`: The item to be approved for delegated transfer.
				/// - `delegate`: The account to delegate permission to transfer the item.
				/// - `maybe_deadline`: Optional deadline for the approval. Specified by providing
				///   the
				///	number of blocks after which the approval will expire
				///
				///Emits `TransferApproved` on success.
				///
				///Weight: `O(1)`
				pub fn approve_transfer(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					delegate: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					maybe_deadline: ::core::option::Option<::core::primitive::u32>,
				) -> ::subxt::tx::Payload<ApproveTransfer> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"approve_transfer",
						ApproveTransfer { collection, item, delegate, maybe_deadline },
						[
							203u8, 41u8, 60u8, 28u8, 226u8, 166u8, 64u8, 195u8, 219u8, 2u8, 245u8,
							4u8, 171u8, 221u8, 218u8, 209u8, 31u8, 160u8, 142u8, 215u8, 93u8, 49u8,
							174u8, 105u8, 117u8, 52u8, 166u8, 177u8, 206u8, 189u8, 101u8, 113u8,
						],
					)
				}
				///Cancel one of the transfer approvals for a specific item.
				///
				///Origin must be either:
				/// - the `Force` origin;
				/// - `Signed` with the signer being the Owner of the `item`;
				///
				///Arguments:
				/// - `collection`: The collection of the item of whose approval will be cancelled.
				/// - `item`: The item of the collection of whose approval will be cancelled.
				/// - `delegate`: The account that is going to loose their approval.
				///
				///Emits `ApprovalCancelled` on success.
				///
				///Weight: `O(1)`
				pub fn cancel_approval(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					delegate: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<CancelApproval> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"cancel_approval",
						CancelApproval { collection, item, delegate },
						[
							129u8, 99u8, 206u8, 28u8, 18u8, 72u8, 197u8, 126u8, 239u8, 204u8,
							219u8, 232u8, 160u8, 110u8, 206u8, 64u8, 162u8, 54u8, 134u8, 7u8,
							221u8, 61u8, 95u8, 23u8, 71u8, 10u8, 25u8, 244u8, 14u8, 31u8, 179u8,
							58u8,
						],
					)
				}
				///Cancel all the approvals of a specific item.
				///
				///Origin must be either:
				/// - the `Force` origin;
				/// - `Signed` with the signer being the Owner of the `item`;
				///
				///Arguments:
				/// - `collection`: The collection of the item of whose approvals will be cleared.
				/// - `item`: The item of the collection of whose approvals will be cleared.
				///
				///Emits `AllApprovalsCancelled` on success.
				///
				///Weight: `O(1)`
				pub fn clear_all_transfer_approvals(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<ClearAllTransferApprovals> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"clear_all_transfer_approvals",
						ClearAllTransferApprovals { collection, item },
						[
							95u8, 218u8, 189u8, 248u8, 199u8, 163u8, 184u8, 65u8, 200u8, 240u8,
							134u8, 224u8, 12u8, 139u8, 222u8, 193u8, 78u8, 71u8, 63u8, 57u8, 124u8,
							249u8, 239u8, 188u8, 38u8, 15u8, 203u8, 184u8, 243u8, 87u8, 17u8,
							166u8,
						],
					)
				}
				///Disallows changing the metadata or attributes of the item.
				///
				///Origin must be either `ForceOrigin` or Signed and the sender should be the Admin
				///of the `collection`.
				///
				/// - `collection`: The collection if the `item`.
				/// - `item`: An item to be locked.
				/// - `lock_metadata`: Specifies whether the metadata should be locked.
				/// - `lock_attributes`: Specifies whether the attributes in the `CollectionOwner`
				///   namespace
				///  should be locked.
				///
				///Note: `lock_attributes` affects the attributes in the `CollectionOwner`
				/// namespace only. When the metadata or attributes are locked, it won't be possible
				/// the unlock them.
				///
				///Emits `ItemPropertiesLocked`.
				///
				///Weight: `O(1)`
				pub fn lock_item_properties(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					lock_metadata: ::core::primitive::bool,
					lock_attributes: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<LockItemProperties> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"lock_item_properties",
						LockItemProperties { collection, item, lock_metadata, lock_attributes },
						[
							243u8, 23u8, 227u8, 8u8, 254u8, 177u8, 170u8, 38u8, 48u8, 179u8, 166u8,
							53u8, 131u8, 186u8, 211u8, 107u8, 186u8, 116u8, 204u8, 188u8, 15u8,
							206u8, 79u8, 136u8, 179u8, 141u8, 146u8, 22u8, 156u8, 90u8, 21u8,
							213u8,
						],
					)
				}
				///Set an attribute for a collection or item.
				///
				///Origin must be Signed and must conform to the namespace ruleset:
				/// - `CollectionOwner` namespace could be modified by the `collection` Admin only;
				/// - `ItemOwner` namespace could be modified by the `maybe_item` owner only.
				///   `maybe_item`
				///  should be set in that case;
				/// - `Account(AccountId)` namespace could be modified only when the `origin` was
				///   given a
				///  permission to do so;
				///
				///The funds of `origin` are reserved according to the formula:
				///`AttributeDepositBase + DepositPerByte * (key.len + value.len)` taking into
				///account any already reserved funds.
				///
				/// - `collection`: The identifier of the collection whose item's metadata to set.
				/// - `maybe_item`: The identifier of the item whose metadata to set.
				/// - `namespace`: Attribute's namespace.
				/// - `key`: The key of the attribute.
				/// - `value`: The value to which to set the attribute.
				///
				///Emits `AttributeSet`.
				///
				///Weight: `O(1)`
				pub fn set_attribute(
					&self,
					collection: ::core::primitive::u32,
					maybe_item: ::core::option::Option<::core::primitive::u32>,
					namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
						::subxt::utils::AccountId32,
					>,
					key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
				) -> ::subxt::tx::Payload<SetAttribute> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"set_attribute",
						SetAttribute { collection, maybe_item, namespace, key, value },
						[
							191u8, 30u8, 39u8, 37u8, 65u8, 243u8, 40u8, 67u8, 160u8, 45u8, 63u8,
							196u8, 221u8, 105u8, 159u8, 211u8, 198u8, 125u8, 14u8, 233u8, 59u8,
							208u8, 197u8, 137u8, 88u8, 101u8, 234u8, 71u8, 102u8, 161u8, 219u8,
							179u8,
						],
					)
				}
				///Force-set an attribute for a collection or item.
				///
				///Origin must be `ForceOrigin`.
				///
				///If the attribute already exists and it was set by another account, the deposit
				///will be returned to the previous owner.
				///
				/// - `set_as`: An optional owner of the attribute.
				/// - `collection`: The identifier of the collection whose item's metadata to set.
				/// - `maybe_item`: The identifier of the item whose metadata to set.
				/// - `namespace`: Attribute's namespace.
				/// - `key`: The key of the attribute.
				/// - `value`: The value to which to set the attribute.
				///
				///Emits `AttributeSet`.
				///
				///Weight: `O(1)`
				pub fn force_set_attribute(
					&self,
					set_as: ::core::option::Option<::subxt::utils::AccountId32>,
					collection: ::core::primitive::u32,
					maybe_item: ::core::option::Option<::core::primitive::u32>,
					namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
						::subxt::utils::AccountId32,
					>,
					key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
				) -> ::subxt::tx::Payload<ForceSetAttribute> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"force_set_attribute",
						ForceSetAttribute { set_as, collection, maybe_item, namespace, key, value },
						[
							8u8, 111u8, 29u8, 35u8, 198u8, 9u8, 1u8, 219u8, 122u8, 60u8, 134u8,
							199u8, 254u8, 1u8, 85u8, 126u8, 58u8, 137u8, 243u8, 228u8, 252u8,
							143u8, 95u8, 8u8, 251u8, 3u8, 86u8, 11u8, 40u8, 87u8, 138u8, 230u8,
						],
					)
				}
				///Clear an attribute for a collection or item.
				///
				///Origin must be either `ForceOrigin` or Signed and the sender should be the Owner
				/// of the attribute.
				///
				///Any deposit is freed for the collection's owner.
				///
				/// - `collection`: The identifier of the collection whose item's metadata to clear.
				/// - `maybe_item`: The identifier of the item whose metadata to clear.
				/// - `namespace`: Attribute's namespace.
				/// - `key`: The key of the attribute.
				///
				///Emits `AttributeCleared`.
				///
				///Weight: `O(1)`
				pub fn clear_attribute(
					&self,
					collection: ::core::primitive::u32,
					maybe_item: ::core::option::Option<::core::primitive::u32>,
					namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
						::subxt::utils::AccountId32,
					>,
					key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
				) -> ::subxt::tx::Payload<ClearAttribute> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"clear_attribute",
						ClearAttribute { collection, maybe_item, namespace, key },
						[
							110u8, 144u8, 255u8, 153u8, 138u8, 39u8, 100u8, 38u8, 242u8, 147u8,
							177u8, 103u8, 167u8, 154u8, 46u8, 57u8, 16u8, 82u8, 153u8, 228u8, 3u8,
							161u8, 198u8, 61u8, 73u8, 28u8, 93u8, 216u8, 120u8, 194u8, 183u8,
							220u8,
						],
					)
				}
				///Approve item's attributes to be changed by a delegated third-party account.
				///
				///Origin must be Signed and must be an owner of the `item`.
				///
				/// - `collection`: A collection of the item.
				/// - `item`: The item that holds attributes.
				/// - `delegate`: The account to delegate permission to change attributes of the
				///   item.
				///
				///Emits `ItemAttributesApprovalAdded` on success.
				pub fn approve_item_attributes(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					delegate: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<ApproveItemAttributes> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"approve_item_attributes",
						ApproveItemAttributes { collection, item, delegate },
						[
							194u8, 174u8, 249u8, 37u8, 88u8, 207u8, 198u8, 238u8, 83u8, 11u8,
							170u8, 0u8, 56u8, 5u8, 64u8, 138u8, 30u8, 184u8, 71u8, 79u8, 178u8,
							189u8, 125u8, 249u8, 141u8, 173u8, 164u8, 109u8, 192u8, 0u8, 179u8,
							67u8,
						],
					)
				}
				///Cancel the previously provided approval to change item's attributes.
				///All the previously set attributes by the `delegate` will be removed.
				///
				///Origin must be Signed and must be an owner of the `item`.
				///
				/// - `collection`: Collection that the item is contained within.
				/// - `item`: The item that holds attributes.
				/// - `delegate`: The previously approved account to remove.
				///
				///Emits `ItemAttributesApprovalRemoved` on success.
				pub fn cancel_item_attributes_approval(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					delegate: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					witness: runtime_types::pallet_nfts::types::CancelAttributesApprovalWitness,
				) -> ::subxt::tx::Payload<CancelItemAttributesApproval> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"cancel_item_attributes_approval",
						CancelItemAttributesApproval { collection, item, delegate, witness },
						[
							237u8, 139u8, 12u8, 197u8, 94u8, 100u8, 182u8, 14u8, 202u8, 190u8,
							87u8, 148u8, 61u8, 240u8, 8u8, 197u8, 28u8, 18u8, 85u8, 86u8, 215u8,
							201u8, 54u8, 187u8, 141u8, 68u8, 156u8, 231u8, 15u8, 219u8, 234u8,
							26u8,
						],
					)
				}
				///Set the metadata for an item.
				///
				///Origin must be either `ForceOrigin` or Signed and the sender should be the Admin
				/// of the `collection`.
				///
				///If the origin is Signed, then funds of signer are reserved according to the
				/// formula: `MetadataDepositBase + DepositPerByte * data.len` taking into
				///account any already reserved funds.
				///
				/// - `collection`: The identifier of the collection whose item's metadata to set.
				/// - `item`: The identifier of the item whose metadata to set.
				/// - `data`: The general information of this item. Limited in length by
				///   `StringLimit`.
				///
				///Emits `ItemMetadataSet`.
				///
				///Weight: `O(1)`
				pub fn set_metadata(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
				) -> ::subxt::tx::Payload<SetMetadata> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"set_metadata",
						SetMetadata { collection, item, data },
						[
							45u8, 223u8, 215u8, 10u8, 235u8, 165u8, 61u8, 151u8, 170u8, 176u8,
							34u8, 182u8, 95u8, 218u8, 7u8, 115u8, 99u8, 241u8, 221u8, 190u8, 211u8,
							24u8, 44u8, 121u8, 79u8, 93u8, 37u8, 154u8, 155u8, 205u8, 176u8, 158u8,
						],
					)
				}
				///Clear the metadata for an item.
				///
				///Origin must be either `ForceOrigin` or Signed and the sender should be the Admin
				/// of the `collection`.
				///
				///Any deposit is freed for the collection's owner.
				///
				/// - `collection`: The identifier of the collection whose item's metadata to clear.
				/// - `item`: The identifier of the item whose metadata to clear.
				///
				///Emits `ItemMetadataCleared`.
				///
				///Weight: `O(1)`
				pub fn clear_metadata(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<ClearMetadata> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"clear_metadata",
						ClearMetadata { collection, item },
						[
							113u8, 75u8, 211u8, 250u8, 129u8, 61u8, 231u8, 204u8, 141u8, 151u8,
							65u8, 108u8, 230u8, 68u8, 51u8, 165u8, 126u8, 211u8, 51u8, 33u8, 9u8,
							47u8, 50u8, 71u8, 123u8, 71u8, 43u8, 162u8, 76u8, 1u8, 90u8, 222u8,
						],
					)
				}
				///Set the metadata for a collection.
				///
				///Origin must be either `ForceOrigin` or `Signed` and the sender should be the
				/// Admin of the `collection`.
				///
				///If the origin is `Signed`, then funds of signer are reserved according to the
				/// formula: `MetadataDepositBase + DepositPerByte * data.len` taking into
				///account any already reserved funds.
				///
				/// - `collection`: The identifier of the item whose metadata to update.
				/// - `data`: The general information of this item. Limited in length by
				///   `StringLimit`.
				///
				///Emits `CollectionMetadataSet`.
				///
				///Weight: `O(1)`
				pub fn set_collection_metadata(
					&self,
					collection: ::core::primitive::u32,
					data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
				) -> ::subxt::tx::Payload<SetCollectionMetadata> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"set_collection_metadata",
						SetCollectionMetadata { collection, data },
						[
							32u8, 118u8, 96u8, 38u8, 27u8, 73u8, 98u8, 37u8, 105u8, 42u8, 127u8,
							130u8, 202u8, 159u8, 214u8, 72u8, 127u8, 178u8, 5u8, 184u8, 217u8,
							59u8, 205u8, 120u8, 161u8, 177u8, 186u8, 204u8, 117u8, 111u8, 5u8,
							10u8,
						],
					)
				}
				///Clear the metadata for a collection.
				///
				///Origin must be either `ForceOrigin` or `Signed` and the sender should be the
				/// Admin of the `collection`.
				///
				///Any deposit is freed for the collection's owner.
				///
				/// - `collection`: The identifier of the collection whose metadata to clear.
				///
				///Emits `CollectionMetadataCleared`.
				///
				///Weight: `O(1)`
				pub fn clear_collection_metadata(
					&self,
					collection: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<ClearCollectionMetadata> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"clear_collection_metadata",
						ClearCollectionMetadata { collection },
						[
							218u8, 108u8, 43u8, 96u8, 85u8, 130u8, 198u8, 167u8, 28u8, 4u8, 151u8,
							185u8, 162u8, 123u8, 120u8, 42u8, 72u8, 37u8, 250u8, 135u8, 100u8,
							37u8, 193u8, 232u8, 62u8, 91u8, 18u8, 120u8, 241u8, 47u8, 73u8, 209u8,
						],
					)
				}
				///Set (or reset) the acceptance of ownership for a particular account.
				///
				///Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer
				/// must have a provider reference.
				///
				/// - `maybe_collection`: The identifier of the collection whose ownership the
				///   signer is
				///  willing to accept, or if `None`, an indication that the signer is willing to
				/// accept no  ownership transferal.
				///
				///Emits `OwnershipAcceptanceChanged`.
				pub fn set_accept_ownership(
					&self,
					maybe_collection: ::core::option::Option<::core::primitive::u32>,
				) -> ::subxt::tx::Payload<SetAcceptOwnership> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"set_accept_ownership",
						SetAcceptOwnership { maybe_collection },
						[
							171u8, 174u8, 217u8, 70u8, 115u8, 1u8, 231u8, 149u8, 223u8, 227u8, 6u8,
							226u8, 190u8, 144u8, 101u8, 21u8, 147u8, 243u8, 123u8, 228u8, 42u8,
							27u8, 126u8, 58u8, 31u8, 233u8, 54u8, 157u8, 193u8, 212u8, 114u8,
							232u8,
						],
					)
				}
				///Set the maximum number of items a collection could have.
				///
				///Origin must be either `ForceOrigin` or `Signed` and the sender should be the
				/// Owner of the `collection`.
				///
				/// - `collection`: The identifier of the collection to change.
				/// - `max_supply`: The maximum number of items a collection could have.
				///
				///Emits `CollectionMaxSupplySet` event when successful.
				pub fn set_collection_max_supply(
					&self,
					collection: ::core::primitive::u32,
					max_supply: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<SetCollectionMaxSupply> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"set_collection_max_supply",
						SetCollectionMaxSupply { collection, max_supply },
						[
							116u8, 134u8, 93u8, 228u8, 6u8, 198u8, 26u8, 168u8, 154u8, 137u8, 0u8,
							151u8, 1u8, 187u8, 36u8, 154u8, 62u8, 193u8, 250u8, 83u8, 41u8, 135u8,
							187u8, 4u8, 132u8, 234u8, 207u8, 127u8, 153u8, 157u8, 76u8, 80u8,
						],
					)
				}
				///Update mint settings.
				///
				///Origin must be either `ForceOrigin` or `Signed` and the sender should be the
				/// Issuer of the `collection`.
				///
				/// - `collection`: The identifier of the collection to change.
				/// - `mint_settings`: The new mint settings.
				///
				///Emits `CollectionMintSettingsUpdated` event when successful.
				pub fn update_mint_settings(
					&self,
					collection: ::core::primitive::u32,
					mint_settings: runtime_types::pallet_nfts::types::MintSettings<
						::core::primitive::u128,
						::core::primitive::u32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<UpdateMintSettings> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"update_mint_settings",
						UpdateMintSettings { collection, mint_settings },
						[
							194u8, 13u8, 39u8, 21u8, 179u8, 228u8, 251u8, 99u8, 247u8, 10u8, 0u8,
							247u8, 69u8, 226u8, 191u8, 143u8, 182u8, 128u8, 112u8, 142u8, 138u8,
							99u8, 197u8, 62u8, 246u8, 150u8, 184u8, 172u8, 100u8, 238u8, 236u8,
							236u8,
						],
					)
				}
				///Set (or reset) the price for an item.
				///
				///Origin must be Signed and must be the owner of the `item`.
				///
				/// - `collection`: The collection of the item.
				/// - `item`: The item to set the price for.
				/// - `price`: The price for the item. Pass `None`, to reset the price.
				/// - `buyer`: Restricts the buy operation to a specific account.
				///
				///Emits `ItemPriceSet` on success if the price is not `None`.
				///Emits `ItemPriceRemoved` on success if the price is `None`.
				pub fn set_price(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					price: ::core::option::Option<::core::primitive::u128>,
					whitelisted_buyer: ::core::option::Option<
						::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					>,
				) -> ::subxt::tx::Payload<SetPrice> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"set_price",
						SetPrice { collection, item, price, whitelisted_buyer },
						[
							159u8, 178u8, 134u8, 144u8, 165u8, 80u8, 141u8, 253u8, 194u8, 11u8,
							8u8, 215u8, 7u8, 82u8, 138u8, 62u8, 81u8, 178u8, 75u8, 84u8, 97u8,
							175u8, 161u8, 97u8, 125u8, 175u8, 70u8, 247u8, 209u8, 132u8, 48u8,
							196u8,
						],
					)
				}
				///Allows to buy an item if it's up for sale.
				///
				///Origin must be Signed and must not be the owner of the `item`.
				///
				/// - `collection`: The collection of the item.
				/// - `item`: The item the sender wants to buy.
				/// - `bid_price`: The price the sender is willing to pay.
				///
				///Emits `ItemBought` on success.
				pub fn buy_item(
					&self,
					collection: ::core::primitive::u32,
					item: ::core::primitive::u32,
					bid_price: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<BuyItem> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"buy_item",
						BuyItem { collection, item, bid_price },
						[
							79u8, 39u8, 106u8, 21u8, 227u8, 244u8, 7u8, 107u8, 125u8, 114u8, 24u8,
							254u8, 208u8, 67u8, 31u8, 123u8, 134u8, 29u8, 94u8, 243u8, 164u8,
							137u8, 191u8, 71u8, 17u8, 170u8, 226u8, 172u8, 233u8, 198u8, 226u8,
							33u8,
						],
					)
				}
				///Allows to pay the tips.
				///
				///Origin must be Signed.
				///
				/// - `tips`: Tips array.
				///
				///Emits `TipSent` on every tip transfer.
				pub fn pay_tips(
					&self,
					tips: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_nfts::types::ItemTip<
							::core::primitive::u32,
							::core::primitive::u32,
							::subxt::utils::AccountId32,
							::core::primitive::u128,
						>,
					>,
				) -> ::subxt::tx::Payload<PayTips> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"pay_tips",
						PayTips { tips },
						[
							139u8, 37u8, 187u8, 31u8, 201u8, 46u8, 235u8, 234u8, 117u8, 184u8,
							146u8, 246u8, 127u8, 116u8, 180u8, 166u8, 69u8, 43u8, 152u8, 109u8,
							10u8, 43u8, 67u8, 92u8, 118u8, 242u8, 217u8, 166u8, 35u8, 73u8, 148u8,
							226u8,
						],
					)
				}
				///Register a new atomic swap, declaring an intention to send an `item` in exchange
				/// for `desired_item` from origin to target on the current blockchain.
				///The target can execute the swap during the specified `duration` of blocks (if
				/// set). Additionally, the price could be set for the desired `item`.
				///
				///Origin must be Signed and must be an owner of the `item`.
				///
				/// - `collection`: The collection of the item.
				/// - `item`: The item an owner wants to give.
				/// - `desired_collection`: The collection of the desired item.
				/// - `desired_item`: The desired item an owner wants to receive.
				/// - `maybe_price`: The price an owner is willing to pay or receive for the desired
				///   `item`.
				/// - `duration`: A deadline for the swap. Specified by providing the number of
				///   blocks
				///	after which the swap will expire.
				///
				///Emits `SwapCreated` on success.
				pub fn create_swap(
					&self,
					offered_collection: ::core::primitive::u32,
					offered_item: ::core::primitive::u32,
					desired_collection: ::core::primitive::u32,
					maybe_desired_item: ::core::option::Option<::core::primitive::u32>,
					maybe_price: ::core::option::Option<
						runtime_types::pallet_nfts::types::PriceWithDirection<
							::core::primitive::u128,
						>,
					>,
					duration: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<CreateSwap> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"create_swap",
						CreateSwap {
							offered_collection,
							offered_item,
							desired_collection,
							maybe_desired_item,
							maybe_price,
							duration,
						},
						[
							71u8, 97u8, 120u8, 17u8, 181u8, 119u8, 135u8, 247u8, 45u8, 11u8, 240u8,
							111u8, 120u8, 47u8, 66u8, 66u8, 104u8, 248u8, 224u8, 129u8, 153u8,
							148u8, 233u8, 20u8, 105u8, 169u8, 54u8, 191u8, 22u8, 169u8, 148u8,
							31u8,
						],
					)
				}
				///Cancel an atomic swap.
				///
				///Origin must be Signed.
				///Origin must be an owner of the `item` if the deadline hasn't expired.
				///
				/// - `collection`: The collection of the item.
				/// - `item`: The item an owner wants to give.
				///
				///Emits `SwapCancelled` on success.
				pub fn cancel_swap(
					&self,
					offered_collection: ::core::primitive::u32,
					offered_item: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<CancelSwap> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"cancel_swap",
						CancelSwap { offered_collection, offered_item },
						[
							87u8, 2u8, 127u8, 158u8, 82u8, 37u8, 1u8, 140u8, 227u8, 31u8, 131u8,
							188u8, 250u8, 66u8, 147u8, 211u8, 65u8, 6u8, 251u8, 60u8, 82u8, 45u8,
							217u8, 114u8, 204u8, 161u8, 25u8, 166u8, 135u8, 7u8, 119u8, 91u8,
						],
					)
				}
				///Claim an atomic swap.
				///This method executes a pending swap, that was created by a counterpart before.
				///
				///Origin must be Signed and must be an owner of the `item`.
				///
				/// - `send_collection`: The collection of the item to be sent.
				/// - `send_item`: The item to be sent.
				/// - `receive_collection`: The collection of the item to be received.
				/// - `receive_item`: The item to be received.
				/// - `witness_price`: A price that was previously agreed on.
				///
				///Emits `SwapClaimed` on success.
				pub fn claim_swap(
					&self,
					send_collection: ::core::primitive::u32,
					send_item: ::core::primitive::u32,
					receive_collection: ::core::primitive::u32,
					receive_item: ::core::primitive::u32,
					witness_price: ::core::option::Option<
						runtime_types::pallet_nfts::types::PriceWithDirection<
							::core::primitive::u128,
						>,
					>,
				) -> ::subxt::tx::Payload<ClaimSwap> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"claim_swap",
						ClaimSwap {
							send_collection,
							send_item,
							receive_collection,
							receive_item,
							witness_price,
						},
						[
							221u8, 120u8, 31u8, 254u8, 154u8, 243u8, 53u8, 56u8, 138u8, 174u8,
							83u8, 58u8, 78u8, 240u8, 177u8, 153u8, 1u8, 27u8, 203u8, 147u8, 53u8,
							24u8, 186u8, 196u8, 22u8, 161u8, 106u8, 125u8, 166u8, 212u8, 116u8,
							247u8,
						],
					)
				}
				///Mint an item by providing the pre-signed approval.
				///
				///Origin must be Signed.
				///
				/// - `mint_data`: The pre-signed approval that consists of the information about
				///   the item,
				///  its metadata, attributes, who can mint it (`None` for anyone) and until what
				/// block  number.
				/// - `signature`: The signature of the `data` object.
				/// - `signer`: The `data` object's signer. Should be an Issuer of the collection.
				///
				///Emits `Issued` on success.
				///Emits `AttributeSet` if the attributes were provided.
				///Emits `ItemMetadataSet` if the metadata was not empty.
				pub fn mint_pre_signed(
					&self,
					mint_data: runtime_types::pallet_nfts::types::PreSignedMint<
						::core::primitive::u32,
						::core::primitive::u32,
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					signature: runtime_types::sp_runtime::MultiSignature,
					signer: ::subxt::utils::AccountId32,
				) -> ::subxt::tx::Payload<MintPreSigned> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"mint_pre_signed",
						MintPreSigned { mint_data, signature, signer },
						[
							65u8, 35u8, 176u8, 233u8, 74u8, 1u8, 15u8, 250u8, 182u8, 146u8, 115u8,
							167u8, 124u8, 154u8, 56u8, 85u8, 155u8, 125u8, 153u8, 160u8, 245u8,
							63u8, 14u8, 8u8, 126u8, 57u8, 74u8, 162u8, 98u8, 64u8, 144u8, 128u8,
						],
					)
				}
				///Set attributes for an item by providing the pre-signed approval.
				///
				///Origin must be Signed and must be an owner of the `data.item`.
				///
				/// - `data`: The pre-signed approval that consists of the information about the
				///   item,
				///  attributes to update and until what block number.
				/// - `signature`: The signature of the `data` object.
				/// - `signer`: The `data` object's signer. Should be an Admin of the collection for
				///   the
				///  `CollectionOwner` namespace.
				///
				///Emits `AttributeSet` for each provided attribute.
				///Emits `ItemAttributesApprovalAdded` if the approval wasn't set before.
				///Emits `PreSignedAttributesSet` on success.
				pub fn set_attributes_pre_signed(
					&self,
					data: runtime_types::pallet_nfts::types::PreSignedAttributes<
						::core::primitive::u32,
						::core::primitive::u32,
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					signature: runtime_types::sp_runtime::MultiSignature,
					signer: ::subxt::utils::AccountId32,
				) -> ::subxt::tx::Payload<SetAttributesPreSigned> {
					::subxt::tx::Payload::new_static(
						"Nfts",
						"set_attributes_pre_signed",
						SetAttributesPreSigned { data, signature, signer },
						[
							49u8, 130u8, 130u8, 93u8, 251u8, 58u8, 59u8, 116u8, 35u8, 71u8, 204u8,
							180u8, 66u8, 51u8, 56u8, 164u8, 130u8, 92u8, 100u8, 207u8, 206u8,
							226u8, 136u8, 114u8, 82u8, 248u8, 180u8, 248u8, 226u8, 16u8, 183u8,
							72u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_nfts::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A `collection` was created.
			pub struct Created {
				pub collection: ::core::primitive::u32,
				pub creator: ::subxt::utils::AccountId32,
				pub owner: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Created {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "Created";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A `collection` was force-created.
			pub struct ForceCreated {
				pub collection: ::core::primitive::u32,
				pub owner: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for ForceCreated {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "ForceCreated";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A `collection` was destroyed.
			pub struct Destroyed {
				pub collection: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Destroyed {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "Destroyed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An `item` was issued.
			pub struct Issued {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub owner: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Issued {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "Issued";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An `item` was transferred.
			pub struct Transferred {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub from: ::subxt::utils::AccountId32,
				pub to: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Transferred {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "Transferred";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An `item` was destroyed.
			pub struct Burned {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub owner: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Burned {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "Burned";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An `item` became non-transferable.
			pub struct ItemTransferLocked {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for ItemTransferLocked {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "ItemTransferLocked";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An `item` became transferable.
			pub struct ItemTransferUnlocked {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for ItemTransferUnlocked {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "ItemTransferUnlocked";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///`item` metadata or attributes were locked.
			pub struct ItemPropertiesLocked {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub lock_metadata: ::core::primitive::bool,
				pub lock_attributes: ::core::primitive::bool,
			}
			impl ::subxt::events::StaticEvent for ItemPropertiesLocked {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "ItemPropertiesLocked";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some `collection` was locked.
			pub struct CollectionLocked {
				pub collection: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for CollectionLocked {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "CollectionLocked";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The owner changed.
			pub struct OwnerChanged {
				pub collection: ::core::primitive::u32,
				pub new_owner: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for OwnerChanged {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "OwnerChanged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The management team changed.
			pub struct TeamChanged {
				pub collection: ::core::primitive::u32,
				pub issuer: ::core::option::Option<::subxt::utils::AccountId32>,
				pub admin: ::core::option::Option<::subxt::utils::AccountId32>,
				pub freezer: ::core::option::Option<::subxt::utils::AccountId32>,
			}
			impl ::subxt::events::StaticEvent for TeamChanged {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "TeamChanged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An `item` of a `collection` has been approved by the `owner` for transfer by
			///a `delegate`.
			pub struct TransferApproved {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub owner: ::subxt::utils::AccountId32,
				pub delegate: ::subxt::utils::AccountId32,
				pub deadline: ::core::option::Option<::core::primitive::u32>,
			}
			impl ::subxt::events::StaticEvent for TransferApproved {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "TransferApproved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An approval for a `delegate` account to transfer the `item` of an item
			///`collection` was cancelled by its `owner`.
			pub struct ApprovalCancelled {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub owner: ::subxt::utils::AccountId32,
				pub delegate: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for ApprovalCancelled {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "ApprovalCancelled";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///All approvals of an item got cancelled.
			pub struct AllApprovalsCancelled {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub owner: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for AllApprovalsCancelled {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "AllApprovalsCancelled";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A `collection` has had its config changed by the `Force` origin.
			pub struct CollectionConfigChanged {
				pub collection: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for CollectionConfigChanged {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "CollectionConfigChanged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///New metadata has been set for a `collection`.
			pub struct CollectionMetadataSet {
				pub collection: ::core::primitive::u32,
				pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
			}
			impl ::subxt::events::StaticEvent for CollectionMetadataSet {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "CollectionMetadataSet";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Metadata has been cleared for a `collection`.
			pub struct CollectionMetadataCleared {
				pub collection: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for CollectionMetadataCleared {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "CollectionMetadataCleared";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///New metadata has been set for an item.
			pub struct ItemMetadataSet {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
			}
			impl ::subxt::events::StaticEvent for ItemMetadataSet {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "ItemMetadataSet";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Metadata has been cleared for an item.
			pub struct ItemMetadataCleared {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for ItemMetadataCleared {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "ItemMetadataCleared";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The deposit for a set of `item`s within a `collection` has been updated.
			pub struct Redeposited {
				pub collection: ::core::primitive::u32,
				pub successful_items: ::std::vec::Vec<::core::primitive::u32>,
			}
			impl ::subxt::events::StaticEvent for Redeposited {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "Redeposited";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///New attribute metadata has been set for a `collection` or `item`.
			pub struct AttributeSet {
				pub collection: ::core::primitive::u32,
				pub maybe_item: ::core::option::Option<::core::primitive::u32>,
				pub key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
				pub value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
				pub namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
					::subxt::utils::AccountId32,
				>,
			}
			impl ::subxt::events::StaticEvent for AttributeSet {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "AttributeSet";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Attribute metadata has been cleared for a `collection` or `item`.
			pub struct AttributeCleared {
				pub collection: ::core::primitive::u32,
				pub maybe_item: ::core::option::Option<::core::primitive::u32>,
				pub key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
				pub namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
					::subxt::utils::AccountId32,
				>,
			}
			impl ::subxt::events::StaticEvent for AttributeCleared {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "AttributeCleared";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A new approval to modify item attributes was added.
			pub struct ItemAttributesApprovalAdded {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub delegate: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for ItemAttributesApprovalAdded {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "ItemAttributesApprovalAdded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A new approval to modify item attributes was removed.
			pub struct ItemAttributesApprovalRemoved {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub delegate: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for ItemAttributesApprovalRemoved {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "ItemAttributesApprovalRemoved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Ownership acceptance has changed for an account.
			pub struct OwnershipAcceptanceChanged {
				pub who: ::subxt::utils::AccountId32,
				pub maybe_collection: ::core::option::Option<::core::primitive::u32>,
			}
			impl ::subxt::events::StaticEvent for OwnershipAcceptanceChanged {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "OwnershipAcceptanceChanged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Max supply has been set for a collection.
			pub struct CollectionMaxSupplySet {
				pub collection: ::core::primitive::u32,
				pub max_supply: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for CollectionMaxSupplySet {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "CollectionMaxSupplySet";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Mint settings for a collection had changed.
			pub struct CollectionMintSettingsUpdated {
				pub collection: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for CollectionMintSettingsUpdated {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "CollectionMintSettingsUpdated";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Event gets emitted when the `NextCollectionId` gets incremented.
			pub struct NextCollectionIdIncremented {
				pub next_id: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for NextCollectionIdIncremented {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "NextCollectionIdIncremented";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The price was set for the item.
			pub struct ItemPriceSet {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub price: ::core::primitive::u128,
				pub whitelisted_buyer: ::core::option::Option<::subxt::utils::AccountId32>,
			}
			impl ::subxt::events::StaticEvent for ItemPriceSet {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "ItemPriceSet";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The price for the item was removed.
			pub struct ItemPriceRemoved {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for ItemPriceRemoved {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "ItemPriceRemoved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An item was bought.
			pub struct ItemBought {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub price: ::core::primitive::u128,
				pub seller: ::subxt::utils::AccountId32,
				pub buyer: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for ItemBought {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "ItemBought";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A tip was sent.
			pub struct TipSent {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub sender: ::subxt::utils::AccountId32,
				pub receiver: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for TipSent {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "TipSent";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An `item` swap intent was created.
			pub struct SwapCreated {
				pub offered_collection: ::core::primitive::u32,
				pub offered_item: ::core::primitive::u32,
				pub desired_collection: ::core::primitive::u32,
				pub desired_item: ::core::option::Option<::core::primitive::u32>,
				pub price: ::core::option::Option<
					runtime_types::pallet_nfts::types::PriceWithDirection<::core::primitive::u128>,
				>,
				pub deadline: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for SwapCreated {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "SwapCreated";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The swap was cancelled.
			pub struct SwapCancelled {
				pub offered_collection: ::core::primitive::u32,
				pub offered_item: ::core::primitive::u32,
				pub desired_collection: ::core::primitive::u32,
				pub desired_item: ::core::option::Option<::core::primitive::u32>,
				pub price: ::core::option::Option<
					runtime_types::pallet_nfts::types::PriceWithDirection<::core::primitive::u128>,
				>,
				pub deadline: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for SwapCancelled {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "SwapCancelled";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The swap has been claimed.
			pub struct SwapClaimed {
				pub sent_collection: ::core::primitive::u32,
				pub sent_item: ::core::primitive::u32,
				pub sent_item_owner: ::subxt::utils::AccountId32,
				pub received_collection: ::core::primitive::u32,
				pub received_item: ::core::primitive::u32,
				pub received_item_owner: ::subxt::utils::AccountId32,
				pub price: ::core::option::Option<
					runtime_types::pallet_nfts::types::PriceWithDirection<::core::primitive::u128>,
				>,
				pub deadline: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for SwapClaimed {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "SwapClaimed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///New attributes have been set for an `item` of the `collection`.
			pub struct PreSignedAttributesSet {
				pub collection: ::core::primitive::u32,
				pub item: ::core::primitive::u32,
				pub namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
					::subxt::utils::AccountId32,
				>,
			}
			impl ::subxt::events::StaticEvent for PreSignedAttributesSet {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "PreSignedAttributesSet";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A new attribute in the `Pallet` namespace was set for the `collection` or an `item`
			///within that `collection`.
			pub struct PalletAttributeSet {
				pub collection: ::core::primitive::u32,
				pub item: ::core::option::Option<::core::primitive::u32>,
				pub attribute:
					runtime_types::pallet_nfts::types::PalletAttributes<::core::primitive::u32>,
				pub value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
			}
			impl ::subxt::events::StaticEvent for PalletAttributeSet {
				const PALLET: &'static str = "Nfts";
				const EVENT: &'static str = "PalletAttributeSet";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// Details of a collection.
				pub fn collection(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nfts::types::CollectionDetails<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"Collection",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							45u8, 39u8, 5u8, 254u8, 230u8, 244u8, 161u8, 243u8, 150u8, 46u8, 127u8,
							113u8, 217u8, 194u8, 118u8, 179u8, 61u8, 136u8, 78u8, 134u8, 60u8,
							227u8, 170u8, 133u8, 62u8, 164u8, 138u8, 27u8, 234u8, 148u8, 65u8,
							230u8,
						],
					)
				}
				/// Details of a collection.
				pub fn collection_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nfts::types::CollectionDetails<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"Collection",
						Vec::new(),
						[
							45u8, 39u8, 5u8, 254u8, 230u8, 244u8, 161u8, 243u8, 150u8, 46u8, 127u8,
							113u8, 217u8, 194u8, 118u8, 179u8, 61u8, 136u8, 78u8, 134u8, 60u8,
							227u8, 170u8, 133u8, 62u8, 164u8, 138u8, 27u8, 234u8, 148u8, 65u8,
							230u8,
						],
					)
				}
				/// The collection, if any, of which an account is willing to take ownership.
				pub fn ownership_acceptance(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"OwnershipAcceptance",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							166u8, 46u8, 6u8, 129u8, 145u8, 240u8, 8u8, 115u8, 232u8, 123u8, 153u8,
							254u8, 202u8, 128u8, 141u8, 17u8, 207u8, 218u8, 201u8, 239u8, 220u8,
							233u8, 22u8, 123u8, 126u8, 151u8, 67u8, 90u8, 51u8, 167u8, 189u8, 39u8,
						],
					)
				}
				/// The collection, if any, of which an account is willing to take ownership.
				pub fn ownership_acceptance_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"OwnershipAcceptance",
						Vec::new(),
						[
							166u8, 46u8, 6u8, 129u8, 145u8, 240u8, 8u8, 115u8, 232u8, 123u8, 153u8,
							254u8, 202u8, 128u8, 141u8, 17u8, 207u8, 218u8, 201u8, 239u8, 220u8,
							233u8, 22u8, 123u8, 126u8, 151u8, 67u8, 90u8, 51u8, 167u8, 189u8, 39u8,
						],
					)
				}
				/// The items held by any given account; set out this way so that items owned by a
				/// single account can be enumerated.
				pub fn account(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_2: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(),
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"Account",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_2.borrow()),
						],
						[
							83u8, 188u8, 8u8, 123u8, 84u8, 224u8, 52u8, 18u8, 81u8, 207u8, 139u8,
							149u8, 209u8, 246u8, 211u8, 132u8, 63u8, 86u8, 145u8, 33u8, 4u8, 252u8,
							90u8, 88u8, 89u8, 145u8, 147u8, 164u8, 223u8, 162u8, 119u8, 161u8,
						],
					)
				}
				/// The items held by any given account; set out this way so that items owned by a
				/// single account can be enumerated.
				pub fn account_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(),
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"Account",
						Vec::new(),
						[
							83u8, 188u8, 8u8, 123u8, 84u8, 224u8, 52u8, 18u8, 81u8, 207u8, 139u8,
							149u8, 209u8, 246u8, 211u8, 132u8, 63u8, 86u8, 145u8, 33u8, 4u8, 252u8,
							90u8, 88u8, 89u8, 145u8, 147u8, 164u8, 223u8, 162u8, 119u8, 161u8,
						],
					)
				}
				/// The collections owned by any given account; set out this way so that collections
				/// owned by a single account can be enumerated.
				pub fn collection_account(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(),
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"CollectionAccount",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							173u8, 183u8, 58u8, 232u8, 121u8, 133u8, 40u8, 226u8, 60u8, 146u8,
							31u8, 110u8, 186u8, 235u8, 206u8, 160u8, 36u8, 221u8, 27u8, 222u8,
							91u8, 107u8, 93u8, 19u8, 5u8, 24u8, 51u8, 220u8, 79u8, 26u8, 216u8,
							26u8,
						],
					)
				}
				/// The collections owned by any given account; set out this way so that collections
				/// owned by a single account can be enumerated.
				pub fn collection_account_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(),
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"CollectionAccount",
						Vec::new(),
						[
							173u8, 183u8, 58u8, 232u8, 121u8, 133u8, 40u8, 226u8, 60u8, 146u8,
							31u8, 110u8, 186u8, 235u8, 206u8, 160u8, 36u8, 221u8, 27u8, 222u8,
							91u8, 107u8, 93u8, 19u8, 5u8, 24u8, 51u8, 220u8, 79u8, 26u8, 216u8,
							26u8,
						],
					)
				}
				/// The items in existence and their ownership details.
				/// Stores collection roles as per account.
				pub fn collection_role_of(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nfts::types::BitFlags<
						runtime_types::pallet_nfts::types::CollectionRole,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"CollectionRoleOf",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							220u8, 76u8, 45u8, 235u8, 74u8, 231u8, 161u8, 241u8, 235u8, 154u8,
							69u8, 168u8, 62u8, 45u8, 234u8, 106u8, 17u8, 17u8, 152u8, 220u8, 144u8,
							67u8, 159u8, 137u8, 39u8, 130u8, 169u8, 111u8, 109u8, 195u8, 9u8, 96u8,
						],
					)
				}
				/// The items in existence and their ownership details.
				/// Stores collection roles as per account.
				pub fn collection_role_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nfts::types::BitFlags<
						runtime_types::pallet_nfts::types::CollectionRole,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"CollectionRoleOf",
						Vec::new(),
						[
							220u8, 76u8, 45u8, 235u8, 74u8, 231u8, 161u8, 241u8, 235u8, 154u8,
							69u8, 168u8, 62u8, 45u8, 234u8, 106u8, 17u8, 17u8, 152u8, 220u8, 144u8,
							67u8, 159u8, 137u8, 39u8, 130u8, 169u8, 111u8, 109u8, 195u8, 9u8, 96u8,
						],
					)
				}
				/// The items in existence and their ownership details.
				pub fn item(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nfts::types::ItemDetails<
						::subxt::utils::AccountId32,
						runtime_types::pallet_nfts::types::ItemDeposit<
							::core::primitive::u128,
							::subxt::utils::AccountId32,
						>,
						runtime_types::bounded_collections::bounded_btree_map::BoundedBTreeMap<
							::subxt::utils::AccountId32,
							::core::option::Option<::core::primitive::u32>,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"Item",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							159u8, 81u8, 47u8, 170u8, 54u8, 246u8, 176u8, 130u8, 225u8, 246u8,
							29u8, 6u8, 214u8, 178u8, 133u8, 248u8, 248u8, 1u8, 237u8, 171u8, 64u8,
							2u8, 83u8, 107u8, 225u8, 36u8, 30u8, 194u8, 185u8, 218u8, 245u8, 62u8,
						],
					)
				}
				/// The items in existence and their ownership details.
				pub fn item_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nfts::types::ItemDetails<
						::subxt::utils::AccountId32,
						runtime_types::pallet_nfts::types::ItemDeposit<
							::core::primitive::u128,
							::subxt::utils::AccountId32,
						>,
						runtime_types::bounded_collections::bounded_btree_map::BoundedBTreeMap<
							::subxt::utils::AccountId32,
							::core::option::Option<::core::primitive::u32>,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"Item",
						Vec::new(),
						[
							159u8, 81u8, 47u8, 170u8, 54u8, 246u8, 176u8, 130u8, 225u8, 246u8,
							29u8, 6u8, 214u8, 178u8, 133u8, 248u8, 248u8, 1u8, 237u8, 171u8, 64u8,
							2u8, 83u8, 107u8, 225u8, 36u8, 30u8, 194u8, 185u8, 218u8, 245u8, 62u8,
						],
					)
				}
				/// Metadata of a collection.
				pub fn collection_metadata_of(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nfts::types::CollectionMetadata<::core::primitive::u128>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"CollectionMetadataOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							174u8, 253u8, 204u8, 147u8, 93u8, 148u8, 155u8, 23u8, 38u8, 174u8,
							76u8, 126u8, 200u8, 105u8, 78u8, 38u8, 173u8, 92u8, 153u8, 190u8,
							200u8, 130u8, 172u8, 131u8, 96u8, 181u8, 133u8, 163u8, 219u8, 113u8,
							233u8, 135u8,
						],
					)
				}
				/// Metadata of a collection.
				pub fn collection_metadata_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nfts::types::CollectionMetadata<::core::primitive::u128>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"CollectionMetadataOf",
						Vec::new(),
						[
							174u8, 253u8, 204u8, 147u8, 93u8, 148u8, 155u8, 23u8, 38u8, 174u8,
							76u8, 126u8, 200u8, 105u8, 78u8, 38u8, 173u8, 92u8, 153u8, 190u8,
							200u8, 130u8, 172u8, 131u8, 96u8, 181u8, 133u8, 163u8, 219u8, 113u8,
							233u8, 135u8,
						],
					)
				}
				/// Metadata of an item.
				pub fn item_metadata_of(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nfts::types::ItemMetadata<
						runtime_types::pallet_nfts::types::ItemMetadataDeposit<
							::core::primitive::u128,
							::subxt::utils::AccountId32,
						>,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"ItemMetadataOf",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							73u8, 89u8, 88u8, 237u8, 245u8, 109u8, 23u8, 98u8, 221u8, 5u8, 107u8,
							61u8, 161u8, 23u8, 73u8, 171u8, 55u8, 141u8, 210u8, 35u8, 37u8, 54u8,
							72u8, 206u8, 172u8, 41u8, 250u8, 142u8, 52u8, 133u8, 131u8, 111u8,
						],
					)
				}
				/// Metadata of an item.
				pub fn item_metadata_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nfts::types::ItemMetadata<
						runtime_types::pallet_nfts::types::ItemMetadataDeposit<
							::core::primitive::u128,
							::subxt::utils::AccountId32,
						>,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"ItemMetadataOf",
						Vec::new(),
						[
							73u8, 89u8, 88u8, 237u8, 245u8, 109u8, 23u8, 98u8, 221u8, 5u8, 107u8,
							61u8, 161u8, 23u8, 73u8, 171u8, 55u8, 141u8, 210u8, 35u8, 37u8, 54u8,
							72u8, 206u8, 172u8, 41u8, 250u8, 142u8, 52u8, 133u8, 131u8, 111u8,
						],
					)
				}
				/// Attributes of a collection.
				pub fn attribute(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::core::option::Option<::core::primitive::u32>>,
					_2: impl ::std::borrow::Borrow<
						runtime_types::pallet_nfts::types::AttributeNamespace<
							::subxt::utils::AccountId32,
						>,
					>,
					_3: impl ::std::borrow::Borrow<
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						runtime_types::pallet_nfts::types::AttributeDeposit<
							::core::primitive::u128,
							::subxt::utils::AccountId32,
						>,
					),
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"Attribute",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_2.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_3.borrow()),
						],
						[
							140u8, 179u8, 237u8, 237u8, 226u8, 18u8, 187u8, 225u8, 239u8, 191u8,
							94u8, 239u8, 157u8, 110u8, 226u8, 85u8, 61u8, 199u8, 159u8, 141u8,
							250u8, 254u8, 187u8, 83u8, 57u8, 232u8, 133u8, 119u8, 118u8, 41u8,
							201u8, 25u8,
						],
					)
				}
				/// Attributes of a collection.
				pub fn attribute_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						runtime_types::pallet_nfts::types::AttributeDeposit<
							::core::primitive::u128,
							::subxt::utils::AccountId32,
						>,
					),
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"Attribute",
						Vec::new(),
						[
							140u8, 179u8, 237u8, 237u8, 226u8, 18u8, 187u8, 225u8, 239u8, 191u8,
							94u8, 239u8, 157u8, 110u8, 226u8, 85u8, 61u8, 199u8, 159u8, 141u8,
							250u8, 254u8, 187u8, 83u8, 57u8, 232u8, 133u8, 119u8, 118u8, 41u8,
							201u8, 25u8,
						],
					)
				}
				/// A price of an item.
				pub fn item_price_of(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(::core::primitive::u128, ::core::option::Option<::subxt::utils::AccountId32>),
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"ItemPriceOf",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							63u8, 143u8, 204u8, 99u8, 128u8, 218u8, 233u8, 140u8, 216u8, 44u8,
							248u8, 111u8, 204u8, 40u8, 248u8, 249u8, 24u8, 130u8, 50u8, 255u8,
							30u8, 42u8, 220u8, 136u8, 228u8, 64u8, 158u8, 195u8, 233u8, 105u8,
							137u8, 216u8,
						],
					)
				}
				/// A price of an item.
				pub fn item_price_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(::core::primitive::u128, ::core::option::Option<::subxt::utils::AccountId32>),
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"ItemPriceOf",
						Vec::new(),
						[
							63u8, 143u8, 204u8, 99u8, 128u8, 218u8, 233u8, 140u8, 216u8, 44u8,
							248u8, 111u8, 204u8, 40u8, 248u8, 249u8, 24u8, 130u8, 50u8, 255u8,
							30u8, 42u8, 220u8, 136u8, 228u8, 64u8, 158u8, 195u8, 233u8, 105u8,
							137u8, 216u8,
						],
					)
				}
				/// Item attribute approvals.
				pub fn item_attributes_approvals_of(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_btree_set::BoundedBTreeSet<
						::subxt::utils::AccountId32,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"ItemAttributesApprovalsOf",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							11u8, 53u8, 249u8, 252u8, 0u8, 48u8, 6u8, 72u8, 254u8, 133u8, 66u8,
							97u8, 165u8, 132u8, 215u8, 65u8, 111u8, 64u8, 99u8, 228u8, 48u8, 188u8,
							240u8, 246u8, 69u8, 9u8, 165u8, 33u8, 155u8, 249u8, 164u8, 237u8,
						],
					)
				}
				/// Item attribute approvals.
				pub fn item_attributes_approvals_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_btree_set::BoundedBTreeSet<
						::subxt::utils::AccountId32,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"ItemAttributesApprovalsOf",
						Vec::new(),
						[
							11u8, 53u8, 249u8, 252u8, 0u8, 48u8, 6u8, 72u8, 254u8, 133u8, 66u8,
							97u8, 165u8, 132u8, 215u8, 65u8, 111u8, 64u8, 99u8, 228u8, 48u8, 188u8,
							240u8, 246u8, 69u8, 9u8, 165u8, 33u8, 155u8, 249u8, 164u8, 237u8,
						],
					)
				}
				/// Stores the `CollectionId` that is going to be used for the next collection.
				/// This gets incremented whenever a new collection is created.
				pub fn next_collection_id(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"NextCollectionId",
						vec![],
						[
							247u8, 80u8, 254u8, 162u8, 36u8, 233u8, 151u8, 211u8, 1u8, 156u8,
							102u8, 9u8, 21u8, 175u8, 224u8, 254u8, 255u8, 73u8, 26u8, 42u8, 112u8,
							107u8, 159u8, 108u8, 25u8, 22u8, 84u8, 113u8, 108u8, 18u8, 253u8, 66u8,
						],
					)
				}
				/// Handles all the pending swaps.
				pub fn pending_swap_of(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nfts::types::PendingSwap<
						::core::primitive::u32,
						::core::primitive::u32,
						runtime_types::pallet_nfts::types::PriceWithDirection<
							::core::primitive::u128,
						>,
						::core::primitive::u32,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"PendingSwapOf",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							230u8, 132u8, 138u8, 201u8, 217u8, 119u8, 35u8, 191u8, 184u8, 202u8,
							9u8, 3u8, 29u8, 246u8, 228u8, 210u8, 195u8, 141u8, 179u8, 160u8, 130u8,
							40u8, 121u8, 133u8, 209u8, 218u8, 64u8, 18u8, 36u8, 62u8, 1u8, 203u8,
						],
					)
				}
				/// Handles all the pending swaps.
				pub fn pending_swap_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nfts::types::PendingSwap<
						::core::primitive::u32,
						::core::primitive::u32,
						runtime_types::pallet_nfts::types::PriceWithDirection<
							::core::primitive::u128,
						>,
						::core::primitive::u32,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"PendingSwapOf",
						Vec::new(),
						[
							230u8, 132u8, 138u8, 201u8, 217u8, 119u8, 35u8, 191u8, 184u8, 202u8,
							9u8, 3u8, 29u8, 246u8, 228u8, 210u8, 195u8, 141u8, 179u8, 160u8, 130u8,
							40u8, 121u8, 133u8, 209u8, 218u8, 64u8, 18u8, 36u8, 62u8, 1u8, 203u8,
						],
					)
				}
				/// Config of a collection.
				pub fn collection_config_of(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nfts::types::CollectionConfig<
						::core::primitive::u128,
						::core::primitive::u32,
						::core::primitive::u32,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"CollectionConfigOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							65u8, 20u8, 107u8, 140u8, 134u8, 116u8, 78u8, 79u8, 217u8, 215u8, 30u8,
							185u8, 18u8, 87u8, 127u8, 59u8, 152u8, 94u8, 144u8, 138u8, 24u8, 9u8,
							250u8, 225u8, 7u8, 176u8, 31u8, 75u8, 171u8, 24u8, 132u8, 168u8,
						],
					)
				}
				/// Config of a collection.
				pub fn collection_config_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nfts::types::CollectionConfig<
						::core::primitive::u128,
						::core::primitive::u32,
						::core::primitive::u32,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"CollectionConfigOf",
						Vec::new(),
						[
							65u8, 20u8, 107u8, 140u8, 134u8, 116u8, 78u8, 79u8, 217u8, 215u8, 30u8,
							185u8, 18u8, 87u8, 127u8, 59u8, 152u8, 94u8, 144u8, 138u8, 24u8, 9u8,
							250u8, 225u8, 7u8, 176u8, 31u8, 75u8, 171u8, 24u8, 132u8, 168u8,
						],
					)
				}
				/// Config of an item.
				pub fn item_config_of(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nfts::types::ItemConfig,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"ItemConfigOf",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							13u8, 64u8, 28u8, 168u8, 121u8, 178u8, 11u8, 143u8, 107u8, 185u8,
							148u8, 54u8, 212u8, 83u8, 251u8, 165u8, 19u8, 222u8, 130u8, 90u8,
							111u8, 144u8, 146u8, 255u8, 68u8, 66u8, 225u8, 62u8, 89u8, 33u8, 200u8,
							120u8,
						],
					)
				}
				/// Config of an item.
				pub fn item_config_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nfts::types::ItemConfig,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Nfts",
						"ItemConfigOf",
						Vec::new(),
						[
							13u8, 64u8, 28u8, 168u8, 121u8, 178u8, 11u8, 143u8, 107u8, 185u8,
							148u8, 54u8, 212u8, 83u8, 251u8, 165u8, 19u8, 222u8, 130u8, 90u8,
							111u8, 144u8, 146u8, 255u8, 68u8, 66u8, 225u8, 62u8, 89u8, 33u8, 200u8,
							120u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The basic amount of funds that must be reserved for collection.
				pub fn collection_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Nfts",
						"CollectionDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The basic amount of funds that must be reserved for an item.
				pub fn item_deposit(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Nfts",
						"ItemDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The basic amount of funds that must be reserved when adding metadata to your
				/// item.
				pub fn metadata_deposit_base(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Nfts",
						"MetadataDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The basic amount of funds that must be reserved when adding an attribute to an
				/// item.
				pub fn attribute_deposit_base(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Nfts",
						"AttributeDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The additional funds that must be reserved for the number of bytes store in
				/// metadata, either "normal" metadata or attribute metadata.
				pub fn deposit_per_byte(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Nfts",
						"DepositPerByte",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The maximum length of data stored on-chain.
				pub fn string_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Nfts",
						"StringLimit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum length of an attribute key.
				pub fn key_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Nfts",
						"KeyLimit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum length of an attribute value.
				pub fn value_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Nfts",
						"ValueLimit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum approvals an item could have.
				pub fn approvals_limit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Nfts",
						"ApprovalsLimit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum attributes approvals an item could have.
				pub fn item_attributes_approvals_limit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Nfts",
						"ItemAttributesApprovalsLimit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The max number of tips a user could send.
				pub fn max_tips(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Nfts",
						"MaxTips",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The max duration in blocks for deadlines.
				pub fn max_deadline_duration(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Nfts",
						"MaxDeadlineDuration",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The max number of attributes a user could set per call.
				pub fn max_attributes_per_call(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Nfts",
						"MaxAttributesPerCall",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Disables some of pallet's features.
				pub fn features(
					&self,
				) -> ::subxt::constants::Address<
					runtime_types::pallet_nfts::types::BitFlags<
						runtime_types::pallet_nfts::types::PalletFeature,
					>,
				> {
					::subxt::constants::Address::new_static(
						"Nfts",
						"Features",
						[
							6u8, 4u8, 24u8, 100u8, 110u8, 86u8, 4u8, 252u8, 70u8, 43u8, 169u8,
							124u8, 204u8, 27u8, 252u8, 91u8, 99u8, 13u8, 149u8, 202u8, 65u8, 211u8,
							125u8, 108u8, 127u8, 4u8, 146u8, 163u8, 41u8, 193u8, 25u8, 103u8,
						],
					)
				}
			}
		}
	}
	pub mod salary {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Init;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Bump;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Induct;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Register;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Payout;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct PayoutOther {
				pub beneficiary: ::subxt::utils::AccountId32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CheckPayment;
			pub struct TransactionApi;
			impl TransactionApi {
				///Start the first payout cycle.
				///
				/// - `origin`: A `Signed` origin of an account.
				pub fn init(&self) -> ::subxt::tx::Payload<Init> {
					::subxt::tx::Payload::new_static(
						"Salary",
						"init",
						Init {},
						[
							170u8, 35u8, 132u8, 200u8, 24u8, 84u8, 176u8, 187u8, 227u8, 241u8,
							135u8, 160u8, 154u8, 109u8, 229u8, 127u8, 211u8, 215u8, 252u8, 118u8,
							200u8, 148u8, 119u8, 64u8, 86u8, 52u8, 195u8, 152u8, 254u8, 176u8,
							89u8, 189u8,
						],
					)
				}
				///Move to next payout cycle, assuming that the present block is now within that
				/// cycle.
				///
				/// - `origin`: A `Signed` origin of an account.
				pub fn bump(&self) -> ::subxt::tx::Payload<Bump> {
					::subxt::tx::Payload::new_static(
						"Salary",
						"bump",
						Bump {},
						[
							9u8, 78u8, 193u8, 233u8, 251u8, 32u8, 17u8, 247u8, 120u8, 83u8, 142u8,
							235u8, 187u8, 36u8, 11u8, 235u8, 105u8, 49u8, 254u8, 72u8, 20u8, 25u8,
							218u8, 10u8, 31u8, 200u8, 196u8, 18u8, 136u8, 14u8, 101u8, 41u8,
						],
					)
				}
				///Induct oneself into the payout system.
				pub fn induct(&self) -> ::subxt::tx::Payload<Induct> {
					::subxt::tx::Payload::new_static(
						"Salary",
						"induct",
						Induct {},
						[
							18u8, 53u8, 61u8, 39u8, 117u8, 215u8, 202u8, 113u8, 112u8, 23u8, 69u8,
							99u8, 174u8, 45u8, 197u8, 133u8, 76u8, 186u8, 100u8, 28u8, 149u8, 20u8,
							157u8, 196u8, 72u8, 72u8, 134u8, 155u8, 41u8, 121u8, 196u8, 86u8,
						],
					)
				}
				///Register for a payout.
				///
				///Will only work if we are in the first `RegistrationPeriod` blocks since the
				/// cycle started.
				///
				/// - `origin`: A `Signed` origin of an account which is a member of `Members`.
				pub fn register(&self) -> ::subxt::tx::Payload<Register> {
					::subxt::tx::Payload::new_static(
						"Salary",
						"register",
						Register {},
						[
							7u8, 223u8, 242u8, 183u8, 157u8, 227u8, 132u8, 111u8, 179u8, 167u8,
							85u8, 130u8, 203u8, 206u8, 24u8, 17u8, 136u8, 34u8, 30u8, 162u8, 2u8,
							46u8, 188u8, 97u8, 251u8, 38u8, 67u8, 240u8, 31u8, 31u8, 100u8, 47u8,
						],
					)
				}
				///Request a payout.
				///
				///Will only work if we are after the first `RegistrationPeriod` blocks since the
				/// cycle started but by no more than `PayoutPeriod` blocks.
				///
				/// - `origin`: A `Signed` origin of an account which is a member of `Members`.
				pub fn payout(&self) -> ::subxt::tx::Payload<Payout> {
					::subxt::tx::Payload::new_static(
						"Salary",
						"payout",
						Payout {},
						[
							255u8, 171u8, 227u8, 58u8, 244u8, 95u8, 239u8, 127u8, 129u8, 211u8,
							131u8, 191u8, 154u8, 234u8, 85u8, 69u8, 173u8, 135u8, 179u8, 83u8,
							17u8, 41u8, 34u8, 137u8, 174u8, 251u8, 127u8, 62u8, 74u8, 255u8, 19u8,
							234u8,
						],
					)
				}
				///Request a payout to a secondary account.
				///
				///Will only work if we are after the first `RegistrationPeriod` blocks since the
				/// cycle started but by no more than `PayoutPeriod` blocks.
				///
				/// - `origin`: A `Signed` origin of an account which is a member of `Members`.
				/// - `beneficiary`: The account to receive payment.
				pub fn payout_other(
					&self,
					beneficiary: ::subxt::utils::AccountId32,
				) -> ::subxt::tx::Payload<PayoutOther> {
					::subxt::tx::Payload::new_static(
						"Salary",
						"payout_other",
						PayoutOther { beneficiary },
						[
							22u8, 125u8, 9u8, 194u8, 155u8, 223u8, 104u8, 131u8, 156u8, 203u8,
							221u8, 68u8, 50u8, 85u8, 150u8, 5u8, 128u8, 138u8, 190u8, 244u8, 120u8,
							103u8, 16u8, 35u8, 133u8, 179u8, 145u8, 14u8, 252u8, 198u8, 212u8,
							71u8,
						],
					)
				}
				///Update a payment's status; if it failed, alter the state so the payment can be
				/// retried.
				///
				///This must be called within the same cycle as the failed payment. It will fail
				/// with `Event::NotCurrent` otherwise.
				///
				/// - `origin`: A `Signed` origin of an account which is a member of `Members` who
				///   has
				///  received a payment this cycle.
				pub fn check_payment(&self) -> ::subxt::tx::Payload<CheckPayment> {
					::subxt::tx::Payload::new_static(
						"Salary",
						"check_payment",
						CheckPayment {},
						[
							203u8, 143u8, 143u8, 187u8, 6u8, 122u8, 105u8, 180u8, 146u8, 194u8,
							117u8, 209u8, 133u8, 146u8, 205u8, 23u8, 9u8, 98u8, 141u8, 53u8, 171u8,
							145u8, 124u8, 90u8, 232u8, 235u8, 182u8, 119u8, 62u8, 135u8, 155u8,
							167u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_salary::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A member is inducted into the payroll.
			pub struct Inducted {
				pub who: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Inducted {
				const PALLET: &'static str = "Salary";
				const EVENT: &'static str = "Inducted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A member registered for a payout.
			pub struct Registered {
				pub who: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Registered {
				const PALLET: &'static str = "Salary";
				const EVENT: &'static str = "Registered";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A payment happened.
			pub struct Paid {
				pub who: ::subxt::utils::AccountId32,
				pub beneficiary: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
				pub id: (),
			}
			impl ::subxt::events::StaticEvent for Paid {
				const PALLET: &'static str = "Salary";
				const EVENT: &'static str = "Paid";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The next cycle begins.
			pub struct CycleStarted {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for CycleStarted {
				const PALLET: &'static str = "Salary";
				const EVENT: &'static str = "CycleStarted";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The overall status of the system.
				pub fn status(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_salary::StatusType<
						::core::primitive::u32,
						::core::primitive::u32,
						::core::primitive::u128,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Salary",
						"Status",
						vec![],
						[
							105u8, 202u8, 4u8, 243u8, 58u8, 203u8, 12u8, 36u8, 222u8, 121u8, 243u8,
							139u8, 220u8, 13u8, 170u8, 138u8, 255u8, 6u8, 181u8, 132u8, 21u8,
							135u8, 27u8, 77u8, 104u8, 240u8, 148u8, 24u8, 252u8, 16u8, 123u8, 2u8,
						],
					)
				}
				/// The status of a claimant.
				pub fn claimant(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_salary::ClaimantStatus<
						::core::primitive::u32,
						::core::primitive::u128,
						(),
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Salary",
						"Claimant",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							77u8, 146u8, 11u8, 166u8, 181u8, 210u8, 102u8, 248u8, 150u8, 16u8,
							100u8, 215u8, 59u8, 111u8, 29u8, 72u8, 109u8, 156u8, 120u8, 36u8,
							144u8, 168u8, 113u8, 62u8, 47u8, 13u8, 246u8, 75u8, 150u8, 203u8, 32u8,
							61u8,
						],
					)
				}
				/// The status of a claimant.
				pub fn claimant_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_salary::ClaimantStatus<
						::core::primitive::u32,
						::core::primitive::u128,
						(),
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Salary",
						"Claimant",
						Vec::new(),
						[
							77u8, 146u8, 11u8, 166u8, 181u8, 210u8, 102u8, 248u8, 150u8, 16u8,
							100u8, 215u8, 59u8, 111u8, 29u8, 72u8, 109u8, 156u8, 120u8, 36u8,
							144u8, 168u8, 113u8, 62u8, 47u8, 13u8, 246u8, 75u8, 150u8, 203u8, 32u8,
							61u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The number of blocks within a cycle which accounts have to register their intent
				/// to claim.
				///
				/// The number of blocks between sequential payout cycles is the sum of this and
				/// `PayoutPeriod`.
				pub fn registration_period(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Salary",
						"RegistrationPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The number of blocks within a cycle which accounts have to claim the payout.
				///
				/// The number of blocks between sequential payout cycles is the sum of this and
				/// `RegistrationPeriod`.
				pub fn payout_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Salary",
						"PayoutPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The total budget per cycle.
				///
				/// This may change over the course of a cycle without any problem.
				pub fn budget(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Salary",
						"Budget",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
			}
		}
	}
	pub mod core_fellowship {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Bump {
				pub who: ::subxt::utils::AccountId32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetParams {
				pub params: ::std::boxed::Box<
					runtime_types::pallet_core_fellowship::ParamsType<
						::core::primitive::u128,
						::core::primitive::u32,
					>,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetActive {
				pub is_active: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Approve {
				pub who: ::subxt::utils::AccountId32,
				pub at_rank: ::core::primitive::u16,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Induct {
				pub who: ::subxt::utils::AccountId32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Promote {
				pub who: ::subxt::utils::AccountId32,
				pub to_rank: ::core::primitive::u16,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Offboard {
				pub who: ::subxt::utils::AccountId32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SubmitEvidence {
				pub wish: runtime_types::pallet_core_fellowship::Wish,
				pub evidence: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Import;
			pub struct TransactionApi;
			impl TransactionApi {
				///Bump the state of a member.
				///
				///This will demote a member whose `last_proof` is now beyond their rank's
				///`demotion_period`.
				///
				/// - `origin`: A `Signed` origin of an account.
				/// - `who`: A member account whose state is to be updated.
				pub fn bump(&self, who: ::subxt::utils::AccountId32) -> ::subxt::tx::Payload<Bump> {
					::subxt::tx::Payload::new_static(
						"CoreFellowship",
						"bump",
						Bump { who },
						[
							88u8, 216u8, 79u8, 136u8, 112u8, 13u8, 157u8, 86u8, 196u8, 187u8,
							139u8, 20u8, 94u8, 226u8, 147u8, 131u8, 132u8, 122u8, 182u8, 87u8,
							102u8, 235u8, 32u8, 108u8, 48u8, 157u8, 86u8, 13u8, 129u8, 120u8, 23u8,
							5u8,
						],
					)
				}
				///Set the parameters.
				///
				/// - `origin`: A origin complying with `ParamsOrigin` or root.
				/// - `params`: The new parameters for the pallet.
				pub fn set_params(
					&self,
					params: runtime_types::pallet_core_fellowship::ParamsType<
						::core::primitive::u128,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<SetParams> {
					::subxt::tx::Payload::new_static(
						"CoreFellowship",
						"set_params",
						SetParams { params: ::std::boxed::Box::new(params) },
						[
							16u8, 242u8, 207u8, 102u8, 157u8, 238u8, 129u8, 61u8, 13u8, 53u8,
							160u8, 92u8, 105u8, 33u8, 67u8, 140u8, 96u8, 55u8, 215u8, 193u8, 111u8,
							246u8, 169u8, 81u8, 28u8, 242u8, 50u8, 48u8, 151u8, 30u8, 231u8, 49u8,
						],
					)
				}
				///Set whether a member is active or not.
				///
				/// - `origin`: A `Signed` origin of a member's account.
				/// - `is_active`: `true` iff the member is active.
				pub fn set_active(
					&self,
					is_active: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<SetActive> {
					::subxt::tx::Payload::new_static(
						"CoreFellowship",
						"set_active",
						SetActive { is_active },
						[
							156u8, 94u8, 162u8, 16u8, 96u8, 182u8, 9u8, 203u8, 146u8, 189u8, 153u8,
							186u8, 132u8, 171u8, 30u8, 178u8, 147u8, 250u8, 29u8, 189u8, 202u8,
							170u8, 60u8, 109u8, 158u8, 241u8, 225u8, 75u8, 218u8, 150u8, 8u8,
							165u8,
						],
					)
				}
				///Approve a member to continue at their rank.
				///
				///This resets `last_proof` to the current block, thereby delaying any automatic
				/// demotion.
				///
				///If `who` is not already tracked by this pallet, then it will become tracked.
				///`last_promotion` will be set to zero.
				///
				/// - `origin`: An origin which satisfies `ApproveOrigin` or root.
				/// - `who`: A member (i.e. of non-zero rank).
				/// - `at_rank`: The rank of member.
				pub fn approve(
					&self,
					who: ::subxt::utils::AccountId32,
					at_rank: ::core::primitive::u16,
				) -> ::subxt::tx::Payload<Approve> {
					::subxt::tx::Payload::new_static(
						"CoreFellowship",
						"approve",
						Approve { who, at_rank },
						[
							80u8, 57u8, 184u8, 69u8, 152u8, 122u8, 241u8, 232u8, 101u8, 105u8,
							46u8, 207u8, 27u8, 173u8, 240u8, 234u8, 169u8, 131u8, 238u8, 41u8,
							44u8, 173u8, 250u8, 47u8, 231u8, 226u8, 100u8, 74u8, 63u8, 223u8, 85u8,
							48u8,
						],
					)
				}
				///Introduce a new and unranked candidate (rank zero).
				///
				/// - `origin`: An origin which satisfies `InductOrigin` or root.
				/// - `who`: The account ID of the candidate to be inducted and become a member.
				pub fn induct(
					&self,
					who: ::subxt::utils::AccountId32,
				) -> ::subxt::tx::Payload<Induct> {
					::subxt::tx::Payload::new_static(
						"CoreFellowship",
						"induct",
						Induct { who },
						[
							151u8, 10u8, 104u8, 194u8, 241u8, 115u8, 15u8, 250u8, 32u8, 47u8, 29u8,
							89u8, 99u8, 60u8, 54u8, 222u8, 84u8, 18u8, 110u8, 177u8, 245u8, 63u8,
							241u8, 194u8, 31u8, 35u8, 2u8, 208u8, 187u8, 193u8, 171u8, 116u8,
						],
					)
				}
				///Increment the rank of a ranked and tracked account.
				///
				/// - `origin`: An origin which satisfies `PromoteOrigin` with a `Success` result of
				///  `to_rank` or more or root.
				/// - `who`: The account ID of the member to be promoted to `to_rank`.
				/// - `to_rank`: One more than the current rank of `who`.
				pub fn promote(
					&self,
					who: ::subxt::utils::AccountId32,
					to_rank: ::core::primitive::u16,
				) -> ::subxt::tx::Payload<Promote> {
					::subxt::tx::Payload::new_static(
						"CoreFellowship",
						"promote",
						Promote { who, to_rank },
						[
							153u8, 90u8, 150u8, 234u8, 186u8, 146u8, 100u8, 45u8, 68u8, 78u8,
							120u8, 138u8, 176u8, 150u8, 218u8, 98u8, 53u8, 59u8, 141u8, 22u8,
							208u8, 97u8, 166u8, 236u8, 107u8, 253u8, 255u8, 32u8, 142u8, 87u8,
							71u8, 164u8,
						],
					)
				}
				///Stop tracking a prior member who is now not a ranked member of the collective.
				///
				/// - `origin`: A `Signed` origin of an account.
				/// - `who`: The ID of an account which was tracked in this pallet but which is now
				///   not a
				///  ranked member of the collective.
				pub fn offboard(
					&self,
					who: ::subxt::utils::AccountId32,
				) -> ::subxt::tx::Payload<Offboard> {
					::subxt::tx::Payload::new_static(
						"CoreFellowship",
						"offboard",
						Offboard { who },
						[
							21u8, 212u8, 246u8, 74u8, 0u8, 38u8, 26u8, 107u8, 29u8, 189u8, 192u8,
							253u8, 200u8, 4u8, 154u8, 35u8, 105u8, 176u8, 174u8, 188u8, 180u8,
							25u8, 208u8, 36u8, 44u8, 30u8, 222u8, 65u8, 80u8, 197u8, 109u8, 193u8,
						],
					)
				}
				///Provide evidence that a rank is deserved.
				///
				///This is free as long as no evidence for the forthcoming judgement is already
				/// submitted. Evidence is cleared after an outcome (either demotion, promotion of
				/// approval).
				///
				/// - `origin`: A `Signed` origin of an inducted and ranked account.
				/// - `wish`: The stated desire of the member.
				/// - `evidence`: A dump of evidence to be considered. This should generally be
				///   either a
				///  Markdown-encoded document or a series of 32-byte hashes which can be found on a
				///  decentralised content-based-indexing system such as IPFS.
				pub fn submit_evidence(
					&self,
					wish: runtime_types::pallet_core_fellowship::Wish,
					evidence: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
				) -> ::subxt::tx::Payload<SubmitEvidence> {
					::subxt::tx::Payload::new_static(
						"CoreFellowship",
						"submit_evidence",
						SubmitEvidence { wish, evidence },
						[
							120u8, 52u8, 119u8, 1u8, 134u8, 67u8, 112u8, 155u8, 247u8, 254u8, 94u8,
							181u8, 156u8, 165u8, 50u8, 42u8, 30u8, 205u8, 182u8, 191u8, 138u8,
							10u8, 85u8, 36u8, 157u8, 131u8, 249u8, 241u8, 42u8, 125u8, 73u8, 218u8,
						],
					)
				}
				///Introduce an already-ranked individual of the collective into this pallet. The
				/// rank may still be zero.
				///
				///This resets `last_proof` to the current block and `last_promotion` will be set
				/// to zero, thereby delaying any automatic demotion but allowing immediate
				/// promotion.
				///
				/// - `origin`: A signed origin of a ranked, but not tracked, account.
				pub fn import(&self) -> ::subxt::tx::Payload<Import> {
					::subxt::tx::Payload::new_static(
						"CoreFellowship",
						"import",
						Import {},
						[
							229u8, 242u8, 254u8, 15u8, 58u8, 139u8, 236u8, 168u8, 235u8, 60u8,
							79u8, 188u8, 43u8, 188u8, 178u8, 42u8, 40u8, 216u8, 112u8, 157u8,
							223u8, 137u8, 16u8, 10u8, 100u8, 77u8, 186u8, 213u8, 117u8, 205u8,
							110u8, 164u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_core_fellowship::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Parameters for the pallet have changed.
			pub struct ParamsChanged {
				pub params: runtime_types::pallet_core_fellowship::ParamsType<
					::core::primitive::u128,
					::core::primitive::u32,
				>,
			}
			impl ::subxt::events::StaticEvent for ParamsChanged {
				const PALLET: &'static str = "CoreFellowship";
				const EVENT: &'static str = "ParamsChanged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Member activity flag has been set.
			pub struct ActiveChanged {
				pub who: ::subxt::utils::AccountId32,
				pub is_active: ::core::primitive::bool,
			}
			impl ::subxt::events::StaticEvent for ActiveChanged {
				const PALLET: &'static str = "CoreFellowship";
				const EVENT: &'static str = "ActiveChanged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Member has begun being tracked in this pallet.
			pub struct Inducted {
				pub who: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Inducted {
				const PALLET: &'static str = "CoreFellowship";
				const EVENT: &'static str = "Inducted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Member has been removed from being tracked in this pallet (i.e. because rank is now
			///zero).
			pub struct Offboarded {
				pub who: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Offboarded {
				const PALLET: &'static str = "CoreFellowship";
				const EVENT: &'static str = "Offboarded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Member has been promoted to the given rank.
			pub struct Promoted {
				pub who: ::subxt::utils::AccountId32,
				pub to_rank: ::core::primitive::u16,
			}
			impl ::subxt::events::StaticEvent for Promoted {
				const PALLET: &'static str = "CoreFellowship";
				const EVENT: &'static str = "Promoted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Member has been demoted to the given (non-zero) rank.
			pub struct Demoted {
				pub who: ::subxt::utils::AccountId32,
				pub to_rank: ::core::primitive::u16,
			}
			impl ::subxt::events::StaticEvent for Demoted {
				const PALLET: &'static str = "CoreFellowship";
				const EVENT: &'static str = "Demoted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Member has been proven at their current rank, postponing auto-demotion.
			pub struct Proven {
				pub who: ::subxt::utils::AccountId32,
				pub at_rank: ::core::primitive::u16,
			}
			impl ::subxt::events::StaticEvent for Proven {
				const PALLET: &'static str = "CoreFellowship";
				const EVENT: &'static str = "Proven";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Member has stated evidence of their efforts their request for rank.
			pub struct Requested {
				pub who: ::subxt::utils::AccountId32,
				pub wish: runtime_types::pallet_core_fellowship::Wish,
			}
			impl ::subxt::events::StaticEvent for Requested {
				const PALLET: &'static str = "CoreFellowship";
				const EVENT: &'static str = "Requested";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some submitted evidence was judged and removed. There may or may not have been a
			/// change to the rank, but in any case, `last_proof` is reset.
			pub struct EvidenceJudged {
				pub who: ::subxt::utils::AccountId32,
				pub wish: runtime_types::pallet_core_fellowship::Wish,
				pub evidence: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
				pub old_rank: ::core::primitive::u16,
				pub new_rank: ::core::option::Option<::core::primitive::u16>,
			}
			impl ::subxt::events::StaticEvent for EvidenceJudged {
				const PALLET: &'static str = "CoreFellowship";
				const EVENT: &'static str = "EvidenceJudged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Pre-ranked account has been inducted at their current rank.
			pub struct Imported {
				pub who: ::subxt::utils::AccountId32,
				pub rank: ::core::primitive::u16,
			}
			impl ::subxt::events::StaticEvent for Imported {
				const PALLET: &'static str = "CoreFellowship";
				const EVENT: &'static str = "Imported";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The overall status of the system.
				pub fn params(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_core_fellowship::ParamsType<
						::core::primitive::u128,
						::core::primitive::u32,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"CoreFellowship",
						"Params",
						vec![],
						[
							18u8, 80u8, 251u8, 121u8, 186u8, 64u8, 158u8, 248u8, 218u8, 171u8,
							56u8, 212u8, 150u8, 232u8, 33u8, 192u8, 181u8, 164u8, 36u8, 101u8,
							127u8, 23u8, 139u8, 192u8, 69u8, 179u8, 245u8, 89u8, 132u8, 228u8, 7u8,
							174u8,
						],
					)
				}
				/// The status of a claimant.
				pub fn member(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_core_fellowship::MemberStatus<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"CoreFellowship",
						"Member",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							122u8, 92u8, 38u8, 5u8, 26u8, 124u8, 127u8, 46u8, 84u8, 207u8, 40u8,
							87u8, 184u8, 104u8, 29u8, 155u8, 20u8, 53u8, 114u8, 31u8, 59u8, 147u8,
							239u8, 57u8, 206u8, 97u8, 210u8, 207u8, 221u8, 201u8, 128u8, 217u8,
						],
					)
				}
				/// The status of a claimant.
				pub fn member_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_core_fellowship::MemberStatus<::core::primitive::u32>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"CoreFellowship",
						"Member",
						Vec::new(),
						[
							122u8, 92u8, 38u8, 5u8, 26u8, 124u8, 127u8, 46u8, 84u8, 207u8, 40u8,
							87u8, 184u8, 104u8, 29u8, 155u8, 20u8, 53u8, 114u8, 31u8, 59u8, 147u8,
							239u8, 57u8, 206u8, 97u8, 210u8, 207u8, 221u8, 201u8, 128u8, 217u8,
						],
					)
				}
				/// Some evidence together with the desired outcome for which it was presented.
				pub fn member_evidence(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						runtime_types::pallet_core_fellowship::Wish,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					),
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"CoreFellowship",
						"MemberEvidence",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							84u8, 3u8, 153u8, 181u8, 3u8, 158u8, 196u8, 194u8, 1u8, 125u8, 212u8,
							61u8, 126u8, 133u8, 193u8, 62u8, 28u8, 15u8, 67u8, 123u8, 238u8, 19u8,
							70u8, 20u8, 42u8, 3u8, 6u8, 250u8, 40u8, 105u8, 219u8, 197u8,
						],
					)
				}
				/// Some evidence together with the desired outcome for which it was presented.
				pub fn member_evidence_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(
						runtime_types::pallet_core_fellowship::Wish,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					),
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"CoreFellowship",
						"MemberEvidence",
						Vec::new(),
						[
							84u8, 3u8, 153u8, 181u8, 3u8, 158u8, 196u8, 194u8, 1u8, 125u8, 212u8,
							61u8, 126u8, 133u8, 193u8, 62u8, 28u8, 15u8, 67u8, 123u8, 238u8, 19u8,
							70u8, 20u8, 42u8, 3u8, 6u8, 250u8, 40u8, 105u8, 219u8, 197u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The maximum size in bytes submitted evidence is allowed to be.
				pub fn evidence_size(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"CoreFellowship",
						"EvidenceSize",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod transaction_storage {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Store {
				pub data: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Renew {
				pub block: ::core::primitive::u32,
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CheckProof {
				pub proof: runtime_types::sp_transaction_storage_proof::TransactionStorageProof,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Index and store data off chain. Minimum data size is 1 bytes, maximum is
				///`MaxTransactionSize`. Data will be removed after `STORAGE_PERIOD` blocks, unless
				/// `renew` is called.
				///## Complexity
				/// - O(n*log(n)) of data size, as all data is pushed to an in-memory trie.
				pub fn store(
					&self,
					data: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::Payload<Store> {
					::subxt::tx::Payload::new_static(
						"TransactionStorage",
						"store",
						Store { data },
						[
							43u8, 208u8, 69u8, 186u8, 52u8, 197u8, 110u8, 180u8, 94u8, 179u8,
							108u8, 83u8, 54u8, 128u8, 76u8, 158u8, 198u8, 25u8, 251u8, 31u8, 79u8,
							228u8, 104u8, 120u8, 79u8, 187u8, 167u8, 112u8, 133u8, 201u8, 208u8,
							28u8,
						],
					)
				}
				///Renew previously stored data. Parameters are the block number that contains
				///previous `store` or `renew` call and transaction index within that block.
				///Transaction index is emitted in the `Stored` or `Renewed` event.
				///Applies same fees as `store`.
				///## Complexity
				/// - O(1).
				pub fn renew(
					&self,
					block: ::core::primitive::u32,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Renew> {
					::subxt::tx::Payload::new_static(
						"TransactionStorage",
						"renew",
						Renew { block, index },
						[
							72u8, 33u8, 43u8, 220u8, 210u8, 211u8, 107u8, 206u8, 156u8, 0u8, 45u8,
							233u8, 72u8, 154u8, 47u8, 176u8, 73u8, 116u8, 93u8, 121u8, 197u8, 15u8,
							166u8, 53u8, 101u8, 202u8, 21u8, 208u8, 62u8, 115u8, 100u8, 66u8,
						],
					)
				}
				///Check storage proof for block number `block_number() - StoragePeriod`.
				///If such block does not exist the proof is expected to be `None`.
				///## Complexity
				/// - Linear w.r.t the number of indexed transactions in the proved block for random
				///  probing.
				///There's a DB read for each transaction.
				pub fn check_proof(
					&self,
					proof: runtime_types::sp_transaction_storage_proof::TransactionStorageProof,
				) -> ::subxt::tx::Payload<CheckProof> {
					::subxt::tx::Payload::new_static(
						"TransactionStorage",
						"check_proof",
						CheckProof { proof },
						[
							102u8, 90u8, 179u8, 228u8, 197u8, 192u8, 53u8, 148u8, 7u8, 97u8, 25u8,
							243u8, 247u8, 161u8, 108u8, 197u8, 137u8, 219u8, 154u8, 198u8, 4u8,
							7u8, 47u8, 150u8, 156u8, 234u8, 20u8, 51u8, 180u8, 134u8, 10u8, 19u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_transaction_storage::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Stored data under specified index.
			pub struct Stored {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Stored {
				const PALLET: &'static str = "TransactionStorage";
				const EVENT: &'static str = "Stored";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Renewed data under specified index.
			pub struct Renewed {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Renewed {
				const PALLET: &'static str = "TransactionStorage";
				const EVENT: &'static str = "Renewed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Storage proof was successfully checked.
			pub struct ProofChecked;
			impl ::subxt::events::StaticEvent for ProofChecked {
				const PALLET: &'static str = "TransactionStorage";
				const EVENT: &'static str = "ProofChecked";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// Collection of transaction metadata by block number.
				pub fn transactions(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_transaction_storage::TransactionInfo,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"TransactionStorage",
						"Transactions",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							135u8, 204u8, 74u8, 229u8, 33u8, 97u8, 220u8, 224u8, 215u8, 234u8,
							152u8, 113u8, 14u8, 232u8, 161u8, 97u8, 235u8, 241u8, 216u8, 115u8,
							252u8, 15u8, 116u8, 110u8, 239u8, 105u8, 246u8, 15u8, 154u8, 213u8,
							163u8, 87u8,
						],
					)
				}
				/// Collection of transaction metadata by block number.
				pub fn transactions_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_transaction_storage::TransactionInfo,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"TransactionStorage",
						"Transactions",
						Vec::new(),
						[
							135u8, 204u8, 74u8, 229u8, 33u8, 97u8, 220u8, 224u8, 215u8, 234u8,
							152u8, 113u8, 14u8, 232u8, 161u8, 97u8, 235u8, 241u8, 216u8, 115u8,
							252u8, 15u8, 116u8, 110u8, 239u8, 105u8, 246u8, 15u8, 154u8, 213u8,
							163u8, 87u8,
						],
					)
				}
				/// Count indexed chunks for each block.
				pub fn chunk_count(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"TransactionStorage",
						"ChunkCount",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							28u8, 45u8, 130u8, 130u8, 223u8, 108u8, 11u8, 246u8, 112u8, 28u8,
							132u8, 216u8, 71u8, 251u8, 141u8, 186u8, 179u8, 73u8, 225u8, 87u8,
							38u8, 182u8, 117u8, 213u8, 79u8, 107u8, 92u8, 43u8, 167u8, 155u8,
							213u8, 135u8,
						],
					)
				}
				/// Count indexed chunks for each block.
				pub fn chunk_count_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"TransactionStorage",
						"ChunkCount",
						Vec::new(),
						[
							28u8, 45u8, 130u8, 130u8, 223u8, 108u8, 11u8, 246u8, 112u8, 28u8,
							132u8, 216u8, 71u8, 251u8, 141u8, 186u8, 179u8, 73u8, 225u8, 87u8,
							38u8, 182u8, 117u8, 213u8, 79u8, 107u8, 92u8, 43u8, 167u8, 155u8,
							213u8, 135u8,
						],
					)
				}
				/// Storage fee per byte.
				pub fn byte_fee(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TransactionStorage",
						"ByteFee",
						vec![],
						[
							175u8, 21u8, 92u8, 118u8, 196u8, 19u8, 87u8, 215u8, 167u8, 205u8,
							139u8, 138u8, 17u8, 164u8, 85u8, 191u8, 90u8, 206u8, 35u8, 255u8, 50u8,
							63u8, 0u8, 20u8, 222u8, 219u8, 77u8, 220u8, 57u8, 143u8, 24u8, 185u8,
						],
					)
				}
				/// Storage fee per transaction.
				pub fn entry_fee(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TransactionStorage",
						"EntryFee",
						vec![],
						[
							66u8, 20u8, 76u8, 16u8, 189u8, 156u8, 164u8, 45u8, 163u8, 66u8, 121u8,
							196u8, 103u8, 131u8, 30u8, 188u8, 166u8, 46u8, 142u8, 113u8, 38u8,
							138u8, 109u8, 33u8, 59u8, 61u8, 239u8, 4u8, 135u8, 76u8, 105u8, 137u8,
						],
					)
				}
				/// Storage period for data in blocks. Should match
				/// `sp_storage_proof::DEFAULT_STORAGE_PERIOD` for block authoring.
				pub fn storage_period(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TransactionStorage",
						"StoragePeriod",
						vec![],
						[
							10u8, 53u8, 101u8, 7u8, 28u8, 0u8, 14u8, 145u8, 138u8, 50u8, 14u8,
							182u8, 105u8, 25u8, 57u8, 166u8, 116u8, 232u8, 84u8, 255u8, 71u8, 88u8,
							85u8, 28u8, 21u8, 223u8, 119u8, 122u8, 204u8, 44u8, 171u8, 118u8,
						],
					)
				}
				pub fn block_transactions(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_transaction_storage::TransactionInfo,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TransactionStorage",
						"BlockTransactions",
						vec![],
						[
							238u8, 72u8, 1u8, 41u8, 254u8, 6u8, 252u8, 199u8, 151u8, 11u8, 246u8,
							236u8, 68u8, 18u8, 147u8, 235u8, 60u8, 178u8, 21u8, 120u8, 216u8, 53u8,
							83u8, 29u8, 132u8, 91u8, 14u8, 120u8, 238u8, 88u8, 160u8, 208u8,
						],
					)
				}
				/// Was the proof checked in this block?
				pub fn proof_checked(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::bool,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"TransactionStorage",
						"ProofChecked",
						vec![],
						[
							120u8, 50u8, 236u8, 167u8, 184u8, 166u8, 35u8, 208u8, 129u8, 112u8,
							151u8, 218u8, 123u8, 60u8, 71u8, 12u8, 210u8, 162u8, 52u8, 7u8, 192u8,
							197u8, 117u8, 101u8, 102u8, 179u8, 62u8, 240u8, 146u8, 249u8, 190u8,
							18u8,
						],
					)
				}
			}
		}
	}
	pub mod voter_list {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Rebag {
				pub dislocated: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct PutInFrontOf {
				pub lighter: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Declare that some `dislocated` account has, through rewards or penalties,
				/// sufficiently changed its score that it should properly fall into a different bag
				/// than its current one.
				///
				///Anyone can call this function about any potentially dislocated account.
				///
				///Will always update the stored score of `dislocated` to the correct score, based
				/// on `ScoreProvider`.
				///
				///If `dislocated` does not exists, it returns an error.
				pub fn rebag(
					&self,
					dislocated: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<Rebag> {
					::subxt::tx::Payload::new_static(
						"VoterList",
						"rebag",
						Rebag { dislocated },
						[
							0u8, 168u8, 218u8, 188u8, 236u8, 124u8, 250u8, 201u8, 237u8, 20u8,
							97u8, 150u8, 117u8, 232u8, 116u8, 237u8, 55u8, 151u8, 71u8, 119u8,
							42u8, 48u8, 10u8, 66u8, 167u8, 208u8, 184u8, 228u8, 146u8, 181u8, 84u8,
							70u8,
						],
					)
				}
				///Move the caller's Id directly in front of `lighter`.
				///
				///The dispatch origin for this call must be _Signed_ and can only be called by the
				/// Id of the account going in front of `lighter`.
				///
				///Only works if
				/// - both nodes are within the same bag,
				/// - and `origin` has a greater `Score` than `lighter`.
				pub fn put_in_front_of(
					&self,
					lighter: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<PutInFrontOf> {
					::subxt::tx::Payload::new_static(
						"VoterList",
						"put_in_front_of",
						PutInFrontOf { lighter },
						[
							104u8, 36u8, 96u8, 80u8, 236u8, 75u8, 203u8, 232u8, 136u8, 167u8,
							205u8, 143u8, 200u8, 53u8, 124u8, 148u8, 76u8, 246u8, 71u8, 246u8,
							205u8, 82u8, 32u8, 186u8, 33u8, 5u8, 183u8, 127u8, 153u8, 232u8, 80u8,
							164u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_bags_list::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Moved an account from one bag to another.
			pub struct Rebagged {
				pub who: ::subxt::utils::AccountId32,
				pub from: ::core::primitive::u64,
				pub to: ::core::primitive::u64,
			}
			impl ::subxt::events::StaticEvent for Rebagged {
				const PALLET: &'static str = "VoterList";
				const EVENT: &'static str = "Rebagged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Updated the score of some account to the given amount.
			pub struct ScoreUpdated {
				pub who: ::subxt::utils::AccountId32,
				pub new_score: ::core::primitive::u64,
			}
			impl ::subxt::events::StaticEvent for ScoreUpdated {
				const PALLET: &'static str = "VoterList";
				const EVENT: &'static str = "ScoreUpdated";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// A single node, within some bag.
				///
				/// Nodes store links forward and back within their respective bags.
				pub fn list_nodes(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_bags_list::list::Node,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"VoterList",
						"ListNodes",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							176u8, 186u8, 93u8, 51u8, 100u8, 184u8, 240u8, 29u8, 70u8, 3u8, 117u8,
							47u8, 23u8, 66u8, 231u8, 234u8, 53u8, 8u8, 234u8, 175u8, 181u8, 8u8,
							161u8, 154u8, 48u8, 178u8, 147u8, 227u8, 122u8, 115u8, 57u8, 97u8,
						],
					)
				}
				/// A single node, within some bag.
				///
				/// Nodes store links forward and back within their respective bags.
				pub fn list_nodes_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_bags_list::list::Node,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"VoterList",
						"ListNodes",
						Vec::new(),
						[
							176u8, 186u8, 93u8, 51u8, 100u8, 184u8, 240u8, 29u8, 70u8, 3u8, 117u8,
							47u8, 23u8, 66u8, 231u8, 234u8, 53u8, 8u8, 234u8, 175u8, 181u8, 8u8,
							161u8, 154u8, 48u8, 178u8, 147u8, 227u8, 122u8, 115u8, 57u8, 97u8,
						],
					)
				}
				///Counter for the related counted storage map
				pub fn counter_for_list_nodes(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"VoterList",
						"CounterForListNodes",
						vec![],
						[
							156u8, 168u8, 97u8, 33u8, 84u8, 117u8, 220u8, 89u8, 62u8, 182u8, 24u8,
							88u8, 231u8, 244u8, 41u8, 19u8, 210u8, 131u8, 87u8, 0u8, 241u8, 230u8,
							160u8, 142u8, 128u8, 153u8, 83u8, 36u8, 88u8, 247u8, 70u8, 130u8,
						],
					)
				}
				/// A bag stored in storage.
				///
				/// Stores a `Bag` struct, which stores head and tail pointers to itself.
				pub fn list_bags(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u64>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_bags_list::list::Bag,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"VoterList",
						"ListBags",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							38u8, 86u8, 63u8, 92u8, 85u8, 59u8, 225u8, 244u8, 14u8, 155u8, 76u8,
							249u8, 153u8, 140u8, 179u8, 7u8, 96u8, 170u8, 236u8, 179u8, 4u8, 18u8,
							232u8, 146u8, 216u8, 51u8, 135u8, 116u8, 196u8, 117u8, 143u8, 153u8,
						],
					)
				}
				/// A bag stored in storage.
				///
				/// Stores a `Bag` struct, which stores head and tail pointers to itself.
				pub fn list_bags_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_bags_list::list::Bag,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"VoterList",
						"ListBags",
						Vec::new(),
						[
							38u8, 86u8, 63u8, 92u8, 85u8, 59u8, 225u8, 244u8, 14u8, 155u8, 76u8,
							249u8, 153u8, 140u8, 179u8, 7u8, 96u8, 170u8, 236u8, 179u8, 4u8, 18u8,
							232u8, 146u8, 216u8, 51u8, 135u8, 116u8, 196u8, 117u8, 143u8, 153u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The list of thresholds separating the various bags.
				///
				/// Ids are separated into unsorted bags according to their score. This specifies
				/// the thresholds separating the bags. An id's bag is the largest bag for which the
				/// id's score is less than or equal to its upper threshold.
				///
				/// When ids are iterated, higher bags are iterated completely before lower bags.
				/// This means that iteration is _semi-sorted_: ids of higher score tend to come
				/// before ids of lower score, but peer ids within a particular bag are sorted in
				/// insertion order.
				///
				/// # Expressing the constant
				///
				/// This constant must be sorted in strictly increasing order. Duplicate items are
				/// not permitted.
				///
				/// There is an implied upper limit of `Score::MAX`; that value does not need to be
				/// specified within the bag. For any two threshold lists, if one ends with
				/// `Score::MAX`, the other one does not, and they are otherwise equal, the two
				/// lists will behave identically.
				///
				/// # Calculation
				///
				/// It is recommended to generate the set of thresholds in a geometric series, such
				/// that there exists some constant ratio such that `threshold[k + 1] ==
				/// (threshold[k] * constant_ratio).max(threshold[k] + 1)` for all `k`.
				///
				/// The helpers in the `/utils/frame/generate-bags` module can simplify this
				/// calculation.
				///
				/// # Examples
				///
				/// - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag,
				///   and iteration is strictly in insertion order.
				/// - If `BagThresholds::get().len() == 64`, and the thresholds are determined
				///   according to the procedure given above, then the constant ratio is equal to 2.
				/// - If `BagThresholds::get().len() == 200`, and the thresholds are determined
				///   according to the procedure given above, then the constant ratio is
				///   approximately equal to 1.248.
				/// - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1
				///   will fall into bag 0, an id with score 2 will fall into bag 1, etc.
				///
				/// # Migration
				///
				/// In the event that this list ever changes, a copy of the old bags list must be
				/// retained. With that `List::migrate` can be called, which will perform the
				/// appropriate migration.
				pub fn bag_thresholds(
					&self,
				) -> ::subxt::constants::Address<::std::vec::Vec<::core::primitive::u64>> {
					::subxt::constants::Address::new_static(
						"VoterList",
						"BagThresholds",
						[
							103u8, 102u8, 255u8, 165u8, 124u8, 54u8, 5u8, 172u8, 112u8, 234u8,
							25u8, 175u8, 178u8, 19u8, 251u8, 73u8, 91u8, 192u8, 227u8, 81u8, 249u8,
							45u8, 126u8, 116u8, 7u8, 37u8, 9u8, 200u8, 167u8, 182u8, 12u8, 131u8,
						],
					)
				}
			}
		}
	}
	pub mod state_trie_migration {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ControlAutoMigration {
				pub maybe_config: ::core::option::Option<
					runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ContinueMigrate {
				pub limits: runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
				pub real_size_upper: ::core::primitive::u32,
				pub witness_task: runtime_types::pallet_state_trie_migration::pallet::MigrationTask,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct MigrateCustomTop {
				pub keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
				pub witness_size: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct MigrateCustomChild {
				pub root: ::std::vec::Vec<::core::primitive::u8>,
				pub child_keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
				pub total_size: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetSignedMaxLimits {
				pub limits: runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ForceSetProgress {
				pub progress_top: runtime_types::pallet_state_trie_migration::pallet::Progress,
				pub progress_child: runtime_types::pallet_state_trie_migration::pallet::Progress,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Control the automatic migration.
				///
				///The dispatch origin of this call must be [`Config::ControlOrigin`].
				pub fn control_auto_migration(
					&self,
					maybe_config: ::core::option::Option<
						runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
					>,
				) -> ::subxt::tx::Payload<ControlAutoMigration> {
					::subxt::tx::Payload::new_static(
						"StateTrieMigration",
						"control_auto_migration",
						ControlAutoMigration { maybe_config },
						[
							162u8, 96u8, 125u8, 236u8, 212u8, 188u8, 150u8, 69u8, 75u8, 40u8,
							116u8, 249u8, 80u8, 248u8, 180u8, 38u8, 167u8, 228u8, 116u8, 130u8,
							201u8, 59u8, 27u8, 3u8, 24u8, 209u8, 40u8, 0u8, 238u8, 100u8, 173u8,
							128u8,
						],
					)
				}
				///Continue the migration for the given `limits`.
				///
				///The dispatch origin of this call can be any signed account.
				///
				///This transaction has NO MONETARY INCENTIVES. calling it will not reward anyone.
				/// Albeit, Upon successful execution, the transaction fee is returned.
				///
				///The (potentially over-estimated) of the byte length of all the data read must be
				///provided for up-front fee-payment and weighing. In essence, the caller is
				/// guaranteeing that executing the current `MigrationTask` with the given `limits`
				/// will not exceed `real_size_upper` bytes of read data.
				///
				///The `witness_task` is merely a helper to prevent the caller from being slashed
				/// or generally trigger a migration that they do not intend. This parameter is just
				/// a message from caller, saying that they believed `witness_task` was the last
				/// state of the migration, and they only wish for their transaction to do anything,
				/// if this assumption holds. In case `witness_task` does not match, the transaction
				/// fails.
				///
				///Based on the documentation of [`MigrationTask::migrate_until_exhaustion`], the
				///recommended way of doing this is to pass a `limit` that only bounds `count`, as
				/// the `size` limit can always be overwritten.
				pub fn continue_migrate(
					&self,
					limits: runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
					real_size_upper: ::core::primitive::u32,
					witness_task: runtime_types::pallet_state_trie_migration::pallet::MigrationTask,
				) -> ::subxt::tx::Payload<ContinueMigrate> {
					::subxt::tx::Payload::new_static(
						"StateTrieMigration",
						"continue_migrate",
						ContinueMigrate { limits, real_size_upper, witness_task },
						[
							13u8, 29u8, 35u8, 220u8, 79u8, 73u8, 159u8, 203u8, 121u8, 137u8, 71u8,
							108u8, 143u8, 95u8, 183u8, 127u8, 247u8, 1u8, 63u8, 10u8, 69u8, 1u8,
							196u8, 237u8, 175u8, 147u8, 252u8, 168u8, 152u8, 217u8, 135u8, 109u8,
						],
					)
				}
				///Migrate the list of top keys by iterating each of them one by one.
				///
				///This does not affect the global migration process tracker
				/// ([`MigrationProcess`]), and should only be used in case any keys are leftover
				/// due to a bug.
				pub fn migrate_custom_top(
					&self,
					keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
					witness_size: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<MigrateCustomTop> {
					::subxt::tx::Payload::new_static(
						"StateTrieMigration",
						"migrate_custom_top",
						MigrateCustomTop { keys, witness_size },
						[
							186u8, 249u8, 25u8, 216u8, 251u8, 100u8, 32u8, 31u8, 174u8, 158u8,
							202u8, 41u8, 18u8, 130u8, 187u8, 105u8, 83u8, 125u8, 131u8, 212u8,
							98u8, 120u8, 152u8, 207u8, 208u8, 1u8, 183u8, 181u8, 169u8, 129u8,
							163u8, 161u8,
						],
					)
				}
				///Migrate the list of child keys by iterating each of them one by one.
				///
				///All of the given child keys must be present under one `child_root`.
				///
				///This does not affect the global migration process tracker
				/// ([`MigrationProcess`]), and should only be used in case any keys are leftover
				/// due to a bug.
				pub fn migrate_custom_child(
					&self,
					root: ::std::vec::Vec<::core::primitive::u8>,
					child_keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
					total_size: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<MigrateCustomChild> {
					::subxt::tx::Payload::new_static(
						"StateTrieMigration",
						"migrate_custom_child",
						MigrateCustomChild { root, child_keys, total_size },
						[
							79u8, 93u8, 66u8, 136u8, 84u8, 153u8, 42u8, 104u8, 242u8, 99u8, 225u8,
							125u8, 233u8, 196u8, 151u8, 160u8, 164u8, 228u8, 36u8, 186u8, 12u8,
							247u8, 118u8, 12u8, 96u8, 218u8, 38u8, 120u8, 33u8, 147u8, 2u8, 214u8,
						],
					)
				}
				///Set the maximum limit of the signed migration.
				pub fn set_signed_max_limits(
					&self,
					limits: runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
				) -> ::subxt::tx::Payload<SetSignedMaxLimits> {
					::subxt::tx::Payload::new_static(
						"StateTrieMigration",
						"set_signed_max_limits",
						SetSignedMaxLimits { limits },
						[
							95u8, 185u8, 123u8, 100u8, 144u8, 68u8, 67u8, 101u8, 101u8, 137u8,
							229u8, 154u8, 172u8, 128u8, 4u8, 164u8, 230u8, 63u8, 196u8, 243u8,
							118u8, 187u8, 220u8, 168u8, 73u8, 51u8, 254u8, 233u8, 214u8, 238u8,
							16u8, 227u8,
						],
					)
				}
				///Forcefully set the progress the running migration.
				///
				///This is only useful in one case: the next key to migrate is too big to be
				/// migrated with a signed account, in a parachain context, and we simply want to
				/// skip it. A reasonable example of this would be `:code:`, which is both very
				/// expensive to migrate, and commonly used, so probably it is already migrated.
				///
				///In case you mess things up, you can also, in principle, use this to reset the
				/// migration process.
				pub fn force_set_progress(
					&self,
					progress_top: runtime_types::pallet_state_trie_migration::pallet::Progress,
					progress_child: runtime_types::pallet_state_trie_migration::pallet::Progress,
				) -> ::subxt::tx::Payload<ForceSetProgress> {
					::subxt::tx::Payload::new_static(
						"StateTrieMigration",
						"force_set_progress",
						ForceSetProgress { progress_top, progress_child },
						[
							29u8, 180u8, 184u8, 136u8, 24u8, 192u8, 64u8, 95u8, 243u8, 171u8,
							184u8, 20u8, 62u8, 5u8, 1u8, 25u8, 12u8, 105u8, 137u8, 81u8, 161u8,
							39u8, 215u8, 180u8, 225u8, 24u8, 122u8, 124u8, 122u8, 183u8, 141u8,
							224u8,
						],
					)
				}
			}
		}
		///Inner events of this pallet.
		pub type Event = runtime_types::pallet_state_trie_migration::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Given number of `(top, child)` keys were migrated respectively, with the given
			///`compute`.
			pub struct Migrated {
				pub top: ::core::primitive::u32,
				pub child: ::core::primitive::u32,
				pub compute: runtime_types::pallet_state_trie_migration::pallet::MigrationCompute,
			}
			impl ::subxt::events::StaticEvent for Migrated {
				const PALLET: &'static str = "StateTrieMigration";
				const EVENT: &'static str = "Migrated";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some account got slashed by the given amount.
			pub struct Slashed {
				pub who: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Slashed {
				const PALLET: &'static str = "StateTrieMigration";
				const EVENT: &'static str = "Slashed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The auto migration task finished.
			pub struct AutoMigrationFinished;
			impl ::subxt::events::StaticEvent for AutoMigrationFinished {
				const PALLET: &'static str = "StateTrieMigration";
				const EVENT: &'static str = "AutoMigrationFinished";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Migration got halted due to an error or miss-configuration.
			pub struct Halted {
				pub error: runtime_types::pallet_state_trie_migration::pallet::Error,
			}
			impl ::subxt::events::StaticEvent for Halted {
				const PALLET: &'static str = "StateTrieMigration";
				const EVENT: &'static str = "Halted";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// Migration progress.
				///
				/// This stores the snapshot of the last migrated keys. It can be set into motion
				/// and move forward by any of the means provided by this pallet.
				pub fn migration_process(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_state_trie_migration::pallet::MigrationTask,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"StateTrieMigration",
						"MigrationProcess",
						vec![],
						[
							151u8, 248u8, 89u8, 241u8, 228u8, 249u8, 59u8, 199u8, 21u8, 95u8,
							182u8, 95u8, 205u8, 226u8, 119u8, 123u8, 241u8, 60u8, 242u8, 52u8,
							113u8, 101u8, 170u8, 140u8, 66u8, 66u8, 248u8, 130u8, 130u8, 140u8,
							206u8, 202u8,
						],
					)
				}
				/// The limits that are imposed on automatic migrations.
				///
				/// If set to None, then no automatic migration happens.
				pub fn auto_limits(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::option::Option<
						runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"StateTrieMigration",
						"AutoLimits",
						vec![],
						[
							214u8, 100u8, 160u8, 204u8, 4u8, 205u8, 205u8, 100u8, 60u8, 127u8,
							84u8, 243u8, 50u8, 164u8, 153u8, 1u8, 250u8, 123u8, 134u8, 109u8,
							115u8, 173u8, 102u8, 104u8, 18u8, 134u8, 43u8, 3u8, 7u8, 26u8, 157u8,
							39u8,
						],
					)
				}
				/// The maximum limits that the signed migration could use.
				///
				/// If not set, no signed submission is allowed.
				pub fn signed_migration_max_limits(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"StateTrieMigration",
						"SignedMigrationMaxLimits",
						vec![],
						[
							142u8, 87u8, 222u8, 135u8, 24u8, 133u8, 45u8, 18u8, 104u8, 31u8, 147u8,
							121u8, 17u8, 155u8, 64u8, 166u8, 209u8, 145u8, 231u8, 65u8, 172u8,
							104u8, 165u8, 19u8, 181u8, 240u8, 169u8, 6u8, 249u8, 140u8, 63u8,
							252u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// Maximal number of bytes that a key can have.
				///
				/// FRAME itself does not limit the key length.
				/// The concrete value must therefore depend on your storage usage.
				/// A [`frame_support::storage::StorageNMap`] for example can have an arbitrary
				/// number of keys which are then hashed and concatenated, resulting in arbitrarily
				/// long keys.
				///
				/// Use the *state migration RPC* to retrieve the length of the longest key in your
				/// storage: <https://github.com/paritytech/substrate/issues/11642>
				///
				/// The migration will halt with a `Halted` event if this value is too small.
				/// Since there is no real penalty from over-estimating, it is advised to use a
				/// large value. The default is 512 byte.
				///
				/// Some key lengths for reference:
				/// - [`frame_support::storage::StorageValue`]: 32 byte
				/// - [`frame_support::storage::StorageMap`]: 64 byte
				/// - [`frame_support::storage::StorageDoubleMap`]: 96 byte
				///
				/// For more info see
				/// <https://www.shawntabrizi.com/substrate/querying-substrate-storage-via-rpc/>
				pub fn max_key_len(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"StateTrieMigration",
						"MaxKeyLen",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod child_bounties {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AddChildBounty {
				#[codec(compact)]
				pub parent_bounty_id: ::core::primitive::u32,
				#[codec(compact)]
				pub value: ::core::primitive::u128,
				pub description: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ProposeCurator {
				#[codec(compact)]
				pub parent_bounty_id: ::core::primitive::u32,
				#[codec(compact)]
				pub child_bounty_id: ::core::primitive::u32,
				pub curator: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub fee: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AcceptCurator {
				#[codec(compact)]
				pub parent_bounty_id: ::core::primitive::u32,
				#[codec(compact)]
				pub child_bounty_id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct UnassignCurator {
				#[codec(compact)]
				pub parent_bounty_id: ::core::primitive::u32,
				#[codec(compact)]
				pub child_bounty_id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AwardChildBounty {
				#[codec(compact)]
				pub parent_bounty_id: ::core::primitive::u32,
				#[codec(compact)]
				pub child_bounty_id: ::core::primitive::u32,
				pub beneficiary: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClaimChildBounty {
				#[codec(compact)]
				pub parent_bounty_id: ::core::primitive::u32,
				#[codec(compact)]
				pub child_bounty_id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CloseChildBounty {
				#[codec(compact)]
				pub parent_bounty_id: ::core::primitive::u32,
				#[codec(compact)]
				pub child_bounty_id: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Add a new child-bounty.
				///
				///The dispatch origin for this call must be the curator of parent
				///bounty and the parent bounty must be in "active" state.
				///
				///Child-bounty gets added successfully & fund gets transferred from
				///parent bounty to child-bounty account, if parent bounty has enough
				///funds, else the call fails.
				///
				///Upper bound to maximum number of active  child bounties that can be
				///added are managed via runtime trait config
				///[`Config::MaxActiveChildBountyCount`].
				///
				///If the call is success, the status of child-bounty is updated to
				///"Added".
				///
				/// - `parent_bounty_id`: Index of parent bounty for which child-bounty is being
				///   added.
				/// - `value`: Value for executing the proposal.
				/// - `description`: Text description for the child-bounty.
				pub fn add_child_bounty(
					&self,
					parent_bounty_id: ::core::primitive::u32,
					value: ::core::primitive::u128,
					description: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::Payload<AddChildBounty> {
					::subxt::tx::Payload::new_static(
						"ChildBounties",
						"add_child_bounty",
						AddChildBounty { parent_bounty_id, value, description },
						[
							210u8, 156u8, 242u8, 121u8, 28u8, 214u8, 212u8, 203u8, 46u8, 45u8,
							110u8, 25u8, 33u8, 138u8, 136u8, 71u8, 23u8, 102u8, 203u8, 122u8, 77u8,
							162u8, 112u8, 133u8, 43u8, 73u8, 201u8, 176u8, 102u8, 68u8, 188u8, 8u8,
						],
					)
				}
				///Propose curator for funded child-bounty.
				///
				///The dispatch origin for this call must be curator of parent bounty.
				///
				///Parent bounty must be in active state, for this child-bounty call to
				///work.
				///
				///Child-bounty must be in "Added" state, for processing the call. And
				///state of child-bounty is moved to "CuratorProposed" on successful
				///call completion.
				///
				/// - `parent_bounty_id`: Index of parent bounty.
				/// - `child_bounty_id`: Index of child bounty.
				/// - `curator`: Address of child-bounty curator.
				/// - `fee`: payment fee to child-bounty curator for execution.
				pub fn propose_curator(
					&self,
					parent_bounty_id: ::core::primitive::u32,
					child_bounty_id: ::core::primitive::u32,
					curator: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					fee: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<ProposeCurator> {
					::subxt::tx::Payload::new_static(
						"ChildBounties",
						"propose_curator",
						ProposeCurator { parent_bounty_id, child_bounty_id, curator, fee },
						[
							147u8, 32u8, 161u8, 72u8, 92u8, 246u8, 250u8, 138u8, 98u8, 84u8, 229u8,
							228u8, 217u8, 128u8, 168u8, 20u8, 73u8, 113u8, 55u8, 207u8, 117u8,
							52u8, 9u8, 139u8, 223u8, 149u8, 48u8, 1u8, 8u8, 82u8, 133u8, 112u8,
						],
					)
				}
				///Accept the curator role for the child-bounty.
				///
				///The dispatch origin for this call must be the curator of this
				///child-bounty.
				///
				///A deposit will be reserved from the curator and refund upon
				///successful payout or cancellation.
				///
				///Fee for curator is deducted from curator fee of parent bounty.
				///
				///Parent bounty must be in active state, for this child-bounty call to
				///work.
				///
				///Child-bounty must be in "CuratorProposed" state, for processing the
				///call. And state of child-bounty is moved to "Active" on successful
				///call completion.
				///
				/// - `parent_bounty_id`: Index of parent bounty.
				/// - `child_bounty_id`: Index of child bounty.
				pub fn accept_curator(
					&self,
					parent_bounty_id: ::core::primitive::u32,
					child_bounty_id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<AcceptCurator> {
					::subxt::tx::Payload::new_static(
						"ChildBounties",
						"accept_curator",
						AcceptCurator { parent_bounty_id, child_bounty_id },
						[
							112u8, 175u8, 238u8, 54u8, 132u8, 20u8, 206u8, 59u8, 220u8, 228u8,
							207u8, 222u8, 132u8, 240u8, 188u8, 0u8, 210u8, 225u8, 234u8, 142u8,
							232u8, 53u8, 64u8, 89u8, 220u8, 29u8, 28u8, 123u8, 125u8, 207u8, 10u8,
							52u8,
						],
					)
				}
				///Unassign curator from a child-bounty.
				///
				///The dispatch origin for this call can be either `RejectOrigin`, or
				///the curator of the parent bounty, or any signed origin.
				///
				///For the origin other than T::RejectOrigin and the child-bounty
				///curator, parent bounty must be in active state, for this call to
				///work. We allow child-bounty curator and T::RejectOrigin to execute
				///this call irrespective of the parent bounty state.
				///
				///If this function is called by the `RejectOrigin` or the
				///parent bounty curator, we assume that the child-bounty curator is
				///malicious or inactive. As a result, child-bounty curator deposit is
				///slashed.
				///
				///If the origin is the child-bounty curator, we take this as a sign
				///that they are unable to do their job, and are willingly giving up.
				///We could slash the deposit, but for now we allow them to unreserve
				///their deposit and exit without issue. (We may want to change this if
				///it is abused.)
				///
				///Finally, the origin can be anyone iff the child-bounty curator is
				///"inactive". Expiry update due of parent bounty is used to estimate
				///inactive state of child-bounty curator.
				///
				///This allows anyone in the community to call out that a child-bounty
				///curator is not doing their due diligence, and we should pick a new
				///one. In this case the child-bounty curator deposit is slashed.
				///
				///State of child-bounty is moved to Added state on successful call
				///completion.
				///
				/// - `parent_bounty_id`: Index of parent bounty.
				/// - `child_bounty_id`: Index of child bounty.
				pub fn unassign_curator(
					&self,
					parent_bounty_id: ::core::primitive::u32,
					child_bounty_id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<UnassignCurator> {
					::subxt::tx::Payload::new_static(
						"ChildBounties",
						"unassign_curator",
						UnassignCurator { parent_bounty_id, child_bounty_id },
						[
							228u8, 189u8, 46u8, 75u8, 121u8, 161u8, 150u8, 87u8, 207u8, 86u8,
							192u8, 50u8, 52u8, 61u8, 49u8, 88u8, 178u8, 182u8, 89u8, 72u8, 203u8,
							45u8, 41u8, 26u8, 149u8, 114u8, 154u8, 169u8, 118u8, 128u8, 13u8,
							211u8,
						],
					)
				}
				///Award child-bounty to a beneficiary.
				///
				///The beneficiary will be able to claim the funds after a delay.
				///
				///The dispatch origin for this call must be the parent curator or
				///curator of this child-bounty.
				///
				///Parent bounty must be in active state, for this child-bounty call to
				///work.
				///
				///Child-bounty must be in active state, for processing the call. And
				///state of child-bounty is moved to "PendingPayout" on successful call
				///completion.
				///
				/// - `parent_bounty_id`: Index of parent bounty.
				/// - `child_bounty_id`: Index of child bounty.
				/// - `beneficiary`: Beneficiary account.
				pub fn award_child_bounty(
					&self,
					parent_bounty_id: ::core::primitive::u32,
					child_bounty_id: ::core::primitive::u32,
					beneficiary: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<AwardChildBounty> {
					::subxt::tx::Payload::new_static(
						"ChildBounties",
						"award_child_bounty",
						AwardChildBounty { parent_bounty_id, child_bounty_id, beneficiary },
						[
							214u8, 25u8, 53u8, 19u8, 146u8, 11u8, 223u8, 173u8, 22u8, 235u8, 27u8,
							57u8, 90u8, 171u8, 161u8, 45u8, 102u8, 37u8, 171u8, 110u8, 215u8,
							151u8, 46u8, 136u8, 93u8, 7u8, 254u8, 112u8, 47u8, 42u8, 144u8, 140u8,
						],
					)
				}
				///Claim the payout from an awarded child-bounty after payout delay.
				///
				///The dispatch origin for this call may be any signed origin.
				///
				///Call works independent of parent bounty state, No need for parent
				///bounty to be in active state.
				///
				///The Beneficiary is paid out with agreed bounty value. Curator fee is
				///paid & curator deposit is unreserved.
				///
				///Child-bounty must be in "PendingPayout" state, for processing the
				///call. And instance of child-bounty is removed from the state on
				///successful call completion.
				///
				/// - `parent_bounty_id`: Index of parent bounty.
				/// - `child_bounty_id`: Index of child bounty.
				pub fn claim_child_bounty(
					&self,
					parent_bounty_id: ::core::primitive::u32,
					child_bounty_id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<ClaimChildBounty> {
					::subxt::tx::Payload::new_static(
						"ChildBounties",
						"claim_child_bounty",
						ClaimChildBounty { parent_bounty_id, child_bounty_id },
						[
							134u8, 243u8, 151u8, 228u8, 38u8, 174u8, 96u8, 140u8, 104u8, 124u8,
							166u8, 206u8, 126u8, 211u8, 17u8, 100u8, 172u8, 5u8, 234u8, 171u8,
							125u8, 2u8, 191u8, 163u8, 72u8, 29u8, 163u8, 107u8, 65u8, 92u8, 41u8,
							45u8,
						],
					)
				}
				///Cancel a proposed or active child-bounty. Child-bounty account funds
				///are transferred to parent bounty account. The child-bounty curator
				///deposit may be unreserved if possible.
				///
				///The dispatch origin for this call must be either parent curator or
				///`T::RejectOrigin`.
				///
				///If the state of child-bounty is `Active`, curator deposit is
				///unreserved.
				///
				///If the state of child-bounty is `PendingPayout`, call fails &
				///returns `PendingPayout` error.
				///
				///For the origin other than T::RejectOrigin, parent bounty must be in
				///active state, for this child-bounty call to work. For origin
				///T::RejectOrigin execution is forced.
				///
				///Instance of child-bounty is removed from the state on successful
				///call completion.
				///
				/// - `parent_bounty_id`: Index of parent bounty.
				/// - `child_bounty_id`: Index of child bounty.
				pub fn close_child_bounty(
					&self,
					parent_bounty_id: ::core::primitive::u32,
					child_bounty_id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<CloseChildBounty> {
					::subxt::tx::Payload::new_static(
						"ChildBounties",
						"close_child_bounty",
						CloseChildBounty { parent_bounty_id, child_bounty_id },
						[
							40u8, 0u8, 235u8, 75u8, 36u8, 196u8, 29u8, 26u8, 30u8, 172u8, 240u8,
							44u8, 129u8, 243u8, 55u8, 211u8, 96u8, 159u8, 72u8, 96u8, 142u8, 68u8,
							41u8, 238u8, 157u8, 167u8, 90u8, 141u8, 213u8, 249u8, 222u8, 22u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_child_bounties::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A child-bounty is added.
			pub struct Added {
				pub index: ::core::primitive::u32,
				pub child_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Added {
				const PALLET: &'static str = "ChildBounties";
				const EVENT: &'static str = "Added";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A child-bounty is awarded to a beneficiary.
			pub struct Awarded {
				pub index: ::core::primitive::u32,
				pub child_index: ::core::primitive::u32,
				pub beneficiary: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Awarded {
				const PALLET: &'static str = "ChildBounties";
				const EVENT: &'static str = "Awarded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A child-bounty is claimed by beneficiary.
			pub struct Claimed {
				pub index: ::core::primitive::u32,
				pub child_index: ::core::primitive::u32,
				pub payout: ::core::primitive::u128,
				pub beneficiary: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for Claimed {
				const PALLET: &'static str = "ChildBounties";
				const EVENT: &'static str = "Claimed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A child-bounty is cancelled.
			pub struct Canceled {
				pub index: ::core::primitive::u32,
				pub child_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Canceled {
				const PALLET: &'static str = "ChildBounties";
				const EVENT: &'static str = "Canceled";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// Number of total child bounties.
				pub fn child_bounty_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"ChildBounties",
						"ChildBountyCount",
						vec![],
						[
							46u8, 10u8, 183u8, 160u8, 98u8, 215u8, 39u8, 253u8, 81u8, 94u8, 114u8,
							147u8, 115u8, 162u8, 33u8, 117u8, 160u8, 214u8, 167u8, 7u8, 109u8,
							143u8, 158u8, 1u8, 200u8, 205u8, 17u8, 93u8, 89u8, 26u8, 30u8, 95u8,
						],
					)
				}
				/// Number of child bounties per parent bounty.
				/// Map of parent bounty index to number of child bounties.
				pub fn parent_child_bounties(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ChildBounties",
						"ParentChildBounties",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							127u8, 161u8, 181u8, 79u8, 235u8, 196u8, 252u8, 162u8, 39u8, 15u8,
							251u8, 49u8, 125u8, 80u8, 101u8, 24u8, 234u8, 88u8, 212u8, 126u8, 63u8,
							63u8, 19u8, 75u8, 137u8, 125u8, 38u8, 250u8, 77u8, 49u8, 76u8, 188u8,
						],
					)
				}
				/// Number of child bounties per parent bounty.
				/// Map of parent bounty index to number of child bounties.
				pub fn parent_child_bounties_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ChildBounties",
						"ParentChildBounties",
						Vec::new(),
						[
							127u8, 161u8, 181u8, 79u8, 235u8, 196u8, 252u8, 162u8, 39u8, 15u8,
							251u8, 49u8, 125u8, 80u8, 101u8, 24u8, 234u8, 88u8, 212u8, 126u8, 63u8,
							63u8, 19u8, 75u8, 137u8, 125u8, 38u8, 250u8, 77u8, 49u8, 76u8, 188u8,
						],
					)
				}
				/// Child bounties that have been added.
				pub fn child_bounties(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_child_bounties::ChildBounty<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
						::core::primitive::u32,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ChildBounties",
						"ChildBounties",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							66u8, 132u8, 251u8, 223u8, 216u8, 52u8, 162u8, 150u8, 229u8, 239u8,
							219u8, 182u8, 211u8, 228u8, 181u8, 46u8, 243u8, 151u8, 111u8, 235u8,
							105u8, 40u8, 39u8, 10u8, 245u8, 113u8, 78u8, 116u8, 219u8, 186u8,
							165u8, 91u8,
						],
					)
				}
				/// Child bounties that have been added.
				pub fn child_bounties_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_child_bounties::ChildBounty<
						::subxt::utils::AccountId32,
						::core::primitive::u128,
						::core::primitive::u32,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ChildBounties",
						"ChildBounties",
						Vec::new(),
						[
							66u8, 132u8, 251u8, 223u8, 216u8, 52u8, 162u8, 150u8, 229u8, 239u8,
							219u8, 182u8, 211u8, 228u8, 181u8, 46u8, 243u8, 151u8, 111u8, 235u8,
							105u8, 40u8, 39u8, 10u8, 245u8, 113u8, 78u8, 116u8, 219u8, 186u8,
							165u8, 91u8,
						],
					)
				}
				/// The description of each child-bounty.
				pub fn child_bounty_descriptions(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ChildBounties",
						"ChildBountyDescriptions",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							193u8, 200u8, 40u8, 30u8, 14u8, 71u8, 90u8, 42u8, 58u8, 253u8, 225u8,
							158u8, 172u8, 10u8, 45u8, 238u8, 36u8, 144u8, 184u8, 153u8, 11u8,
							157u8, 125u8, 220u8, 175u8, 31u8, 28u8, 93u8, 207u8, 212u8, 141u8,
							74u8,
						],
					)
				}
				/// The description of each child-bounty.
				pub fn child_bounty_descriptions_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ChildBounties",
						"ChildBountyDescriptions",
						Vec::new(),
						[
							193u8, 200u8, 40u8, 30u8, 14u8, 71u8, 90u8, 42u8, 58u8, 253u8, 225u8,
							158u8, 172u8, 10u8, 45u8, 238u8, 36u8, 144u8, 184u8, 153u8, 11u8,
							157u8, 125u8, 220u8, 175u8, 31u8, 28u8, 93u8, 207u8, 212u8, 141u8,
							74u8,
						],
					)
				}
				/// The cumulative child-bounty curator fee for each parent bounty.
				pub fn children_curator_fees(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ChildBounties",
						"ChildrenCuratorFees",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							174u8, 128u8, 86u8, 179u8, 133u8, 76u8, 98u8, 169u8, 234u8, 166u8,
							249u8, 214u8, 172u8, 171u8, 8u8, 161u8, 105u8, 69u8, 148u8, 151u8,
							35u8, 174u8, 118u8, 139u8, 101u8, 56u8, 85u8, 211u8, 121u8, 168u8, 0u8,
							216u8,
						],
					)
				}
				/// The cumulative child-bounty curator fee for each parent bounty.
				pub fn children_curator_fees_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ChildBounties",
						"ChildrenCuratorFees",
						Vec::new(),
						[
							174u8, 128u8, 86u8, 179u8, 133u8, 76u8, 98u8, 169u8, 234u8, 166u8,
							249u8, 214u8, 172u8, 171u8, 8u8, 161u8, 105u8, 69u8, 148u8, 151u8,
							35u8, 174u8, 118u8, 139u8, 101u8, 56u8, 85u8, 211u8, 121u8, 168u8, 0u8,
							216u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// Maximum number of child bounties that can be added to a parent bounty.
				pub fn max_active_child_bounty_count(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ChildBounties",
						"MaxActiveChildBountyCount",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Minimum value for a child-bounty.
				pub fn child_bounty_value_minimum(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"ChildBounties",
						"ChildBountyValueMinimum",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
			}
		}
	}
	pub mod referenda {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Submit {
				pub proposal_origin: ::std::boxed::Box<runtime_types::babe_runtime::OriginCaller>,
				pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
					runtime_types::babe_runtime::RuntimeCall,
				>,
				pub enactment_moment: runtime_types::frame_support::traits::schedule::DispatchTime<
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct PlaceDecisionDeposit {
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RefundDecisionDeposit {
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Cancel {
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Kill {
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct NudgeReferendum {
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct OneFewerDeciding {
				pub track: ::core::primitive::u16,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RefundSubmissionDeposit {
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetMetadata {
				pub index: ::core::primitive::u32,
				pub maybe_hash: ::core::option::Option<::subxt::utils::H256>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Propose a referendum on a privileged action.
				///
				/// - `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit`
				///   funds
				///  available.
				/// - `proposal_origin`: The origin from which the proposal should be executed.
				/// - `proposal`: The proposal.
				/// - `enactment_moment`: The moment that the proposal should be enacted.
				///
				///Emits `Submitted`.
				pub fn submit(
					&self,
					proposal_origin: runtime_types::babe_runtime::OriginCaller,
					proposal: runtime_types::frame_support::traits::preimages::Bounded<
						runtime_types::babe_runtime::RuntimeCall,
					>,
					enactment_moment: runtime_types::frame_support::traits::schedule::DispatchTime<
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<Submit> {
					::subxt::tx::Payload::new_static(
						"Referenda",
						"submit",
						Submit {
							proposal_origin: ::std::boxed::Box::new(proposal_origin),
							proposal,
							enactment_moment,
						},
						[
							91u8, 158u8, 209u8, 182u8, 19u8, 184u8, 252u8, 30u8, 200u8, 62u8, 92u8,
							254u8, 200u8, 245u8, 134u8, 143u8, 135u8, 67u8, 95u8, 107u8, 115u8,
							109u8, 12u8, 48u8, 111u8, 239u8, 84u8, 255u8, 23u8, 26u8, 140u8, 187u8,
						],
					)
				}
				///Post the Decision Deposit for a referendum.
				///
				/// - `origin`: must be `Signed` and the account must have funds available for the
				///  referendum's track's Decision Deposit.
				/// - `index`: The index of the submitted referendum whose Decision Deposit is yet
				///   to be
				///  posted.
				///
				///Emits `DecisionDepositPlaced`.
				pub fn place_decision_deposit(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<PlaceDecisionDeposit> {
					::subxt::tx::Payload::new_static(
						"Referenda",
						"place_decision_deposit",
						PlaceDecisionDeposit { index },
						[
							118u8, 227u8, 8u8, 55u8, 41u8, 171u8, 244u8, 40u8, 164u8, 232u8, 119u8,
							129u8, 139u8, 123u8, 77u8, 70u8, 219u8, 236u8, 145u8, 159u8, 84u8,
							111u8, 36u8, 4u8, 206u8, 5u8, 139u8, 231u8, 11u8, 231u8, 6u8, 30u8,
						],
					)
				}
				///Refund the Decision Deposit for a closed referendum back to the depositor.
				///
				/// - `origin`: must be `Signed` or `Root`.
				/// - `index`: The index of a closed referendum whose Decision Deposit has not yet
				///   been
				///  refunded.
				///
				///Emits `DecisionDepositRefunded`.
				pub fn refund_decision_deposit(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<RefundDecisionDeposit> {
					::subxt::tx::Payload::new_static(
						"Referenda",
						"refund_decision_deposit",
						RefundDecisionDeposit { index },
						[
							120u8, 116u8, 89u8, 51u8, 255u8, 76u8, 150u8, 74u8, 54u8, 93u8, 19u8,
							64u8, 13u8, 177u8, 144u8, 93u8, 132u8, 150u8, 244u8, 48u8, 202u8,
							223u8, 201u8, 130u8, 112u8, 167u8, 29u8, 207u8, 112u8, 181u8, 43u8,
							93u8,
						],
					)
				}
				///Cancel an ongoing referendum.
				///
				/// - `origin`: must be the `CancelOrigin`.
				/// - `index`: The index of the referendum to be cancelled.
				///
				///Emits `Cancelled`.
				pub fn cancel(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Cancel> {
					::subxt::tx::Payload::new_static(
						"Referenda",
						"cancel",
						Cancel { index },
						[
							247u8, 55u8, 146u8, 211u8, 168u8, 140u8, 248u8, 217u8, 218u8, 235u8,
							25u8, 39u8, 47u8, 132u8, 134u8, 18u8, 239u8, 70u8, 223u8, 50u8, 245u8,
							101u8, 97u8, 39u8, 226u8, 4u8, 196u8, 16u8, 66u8, 177u8, 178u8, 252u8,
						],
					)
				}
				///Cancel an ongoing referendum and slash the deposits.
				///
				/// - `origin`: must be the `KillOrigin`.
				/// - `index`: The index of the referendum to be cancelled.
				///
				///Emits `Killed` and `DepositSlashed`.
				pub fn kill(&self, index: ::core::primitive::u32) -> ::subxt::tx::Payload<Kill> {
					::subxt::tx::Payload::new_static(
						"Referenda",
						"kill",
						Kill { index },
						[
							98u8, 109u8, 143u8, 42u8, 24u8, 80u8, 39u8, 243u8, 249u8, 141u8, 104u8,
							195u8, 29u8, 93u8, 149u8, 37u8, 27u8, 130u8, 84u8, 178u8, 246u8, 26u8,
							113u8, 224u8, 157u8, 94u8, 16u8, 14u8, 158u8, 80u8, 148u8, 198u8,
						],
					)
				}
				///Advance a referendum onto its next logical state. Only used internally.
				///
				/// - `origin`: must be `Root`.
				/// - `index`: the referendum to be advanced.
				pub fn nudge_referendum(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<NudgeReferendum> {
					::subxt::tx::Payload::new_static(
						"Referenda",
						"nudge_referendum",
						NudgeReferendum { index },
						[
							60u8, 221u8, 153u8, 136u8, 107u8, 209u8, 59u8, 178u8, 208u8, 170u8,
							10u8, 225u8, 213u8, 170u8, 228u8, 64u8, 204u8, 166u8, 7u8, 230u8,
							243u8, 15u8, 206u8, 114u8, 8u8, 128u8, 46u8, 150u8, 114u8, 241u8,
							112u8, 97u8,
						],
					)
				}
				///Advance a track onto its next logical state. Only used internally.
				///
				/// - `origin`: must be `Root`.
				/// - `track`: the track to be advanced.
				///
				///Action item for when there is now one fewer referendum in the deciding phase and
				/// the `DecidingCount` is not yet updated. This means that we should either:
				/// - begin deciding another referendum (and leave `DecidingCount` alone); or
				/// - decrement `DecidingCount`.
				pub fn one_fewer_deciding(
					&self,
					track: ::core::primitive::u16,
				) -> ::subxt::tx::Payload<OneFewerDeciding> {
					::subxt::tx::Payload::new_static(
						"Referenda",
						"one_fewer_deciding",
						OneFewerDeciding { track },
						[
							239u8, 43u8, 70u8, 73u8, 77u8, 28u8, 75u8, 62u8, 29u8, 67u8, 110u8,
							120u8, 234u8, 236u8, 126u8, 99u8, 46u8, 183u8, 169u8, 16u8, 143u8,
							233u8, 137u8, 247u8, 138u8, 96u8, 32u8, 223u8, 149u8, 52u8, 214u8,
							195u8,
						],
					)
				}
				///Refund the Submission Deposit for a closed referendum back to the depositor.
				///
				/// - `origin`: must be `Signed` or `Root`.
				/// - `index`: The index of a closed referendum whose Submission Deposit has not yet
				///   been
				///  refunded.
				///
				///Emits `SubmissionDepositRefunded`.
				pub fn refund_submission_deposit(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<RefundSubmissionDeposit> {
					::subxt::tx::Payload::new_static(
						"Referenda",
						"refund_submission_deposit",
						RefundSubmissionDeposit { index },
						[
							101u8, 147u8, 237u8, 27u8, 220u8, 116u8, 73u8, 131u8, 191u8, 92u8,
							134u8, 31u8, 175u8, 172u8, 129u8, 225u8, 91u8, 33u8, 23u8, 132u8, 89u8,
							19u8, 81u8, 238u8, 133u8, 243u8, 56u8, 70u8, 143u8, 43u8, 176u8, 83u8,
						],
					)
				}
				///Set or clear metadata of a referendum.
				///
				///Parameters:
				/// - `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear
				///   a
				///  metadata of a finished referendum.
				/// - `index`:  The index of a referendum to set or clear metadata for.
				/// - `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a
				///   metadata.
				pub fn set_metadata(
					&self,
					index: ::core::primitive::u32,
					maybe_hash: ::core::option::Option<::subxt::utils::H256>,
				) -> ::subxt::tx::Payload<SetMetadata> {
					::subxt::tx::Payload::new_static(
						"Referenda",
						"set_metadata",
						SetMetadata { index, maybe_hash },
						[
							235u8, 215u8, 66u8, 214u8, 157u8, 177u8, 233u8, 214u8, 103u8, 92u8,
							216u8, 228u8, 7u8, 123u8, 167u8, 225u8, 128u8, 16u8, 161u8, 102u8,
							217u8, 36u8, 80u8, 207u8, 137u8, 24u8, 219u8, 239u8, 42u8, 234u8,
							144u8, 133u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_referenda::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A referendum has been submitted.
			pub struct Submitted {
				pub index: ::core::primitive::u32,
				pub track: ::core::primitive::u16,
				pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
					runtime_types::babe_runtime::RuntimeCall,
				>,
			}
			impl ::subxt::events::StaticEvent for Submitted {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "Submitted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The decision deposit has been placed.
			pub struct DecisionDepositPlaced {
				pub index: ::core::primitive::u32,
				pub who: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for DecisionDepositPlaced {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "DecisionDepositPlaced";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The decision deposit has been refunded.
			pub struct DecisionDepositRefunded {
				pub index: ::core::primitive::u32,
				pub who: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for DecisionDepositRefunded {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "DecisionDepositRefunded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A deposit has been slashaed.
			pub struct DepositSlashed {
				pub who: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for DepositSlashed {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "DepositSlashed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A referendum has moved into the deciding phase.
			pub struct DecisionStarted {
				pub index: ::core::primitive::u32,
				pub track: ::core::primitive::u16,
				pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
					runtime_types::babe_runtime::RuntimeCall,
				>,
				pub tally:
					runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>,
			}
			impl ::subxt::events::StaticEvent for DecisionStarted {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "DecisionStarted";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ConfirmStarted {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for ConfirmStarted {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "ConfirmStarted";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ConfirmAborted {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for ConfirmAborted {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "ConfirmAborted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A referendum has ended its confirmation phase and is ready for approval.
			pub struct Confirmed {
				pub index: ::core::primitive::u32,
				pub tally:
					runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>,
			}
			impl ::subxt::events::StaticEvent for Confirmed {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "Confirmed";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A referendum has been approved and its proposal has been scheduled.
			pub struct Approved {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Approved {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "Approved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A proposal has been rejected by referendum.
			pub struct Rejected {
				pub index: ::core::primitive::u32,
				pub tally:
					runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>,
			}
			impl ::subxt::events::StaticEvent for Rejected {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "Rejected";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A referendum has been timed out without being decided.
			pub struct TimedOut {
				pub index: ::core::primitive::u32,
				pub tally:
					runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>,
			}
			impl ::subxt::events::StaticEvent for TimedOut {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "TimedOut";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A referendum has been cancelled.
			pub struct Cancelled {
				pub index: ::core::primitive::u32,
				pub tally:
					runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>,
			}
			impl ::subxt::events::StaticEvent for Cancelled {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "Cancelled";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A referendum has been killed.
			pub struct Killed {
				pub index: ::core::primitive::u32,
				pub tally:
					runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>,
			}
			impl ::subxt::events::StaticEvent for Killed {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "Killed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The submission deposit has been refunded.
			pub struct SubmissionDepositRefunded {
				pub index: ::core::primitive::u32,
				pub who: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for SubmissionDepositRefunded {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "SubmissionDepositRefunded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Metadata for a referendum has been set.
			pub struct MetadataSet {
				pub index: ::core::primitive::u32,
				pub hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for MetadataSet {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "MetadataSet";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Metadata for a referendum has been cleared.
			pub struct MetadataCleared {
				pub index: ::core::primitive::u32,
				pub hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for MetadataCleared {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "MetadataCleared";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The next free referendum index, aka the number of referenda started so far.
				pub fn referendum_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Referenda",
						"ReferendumCount",
						vec![],
						[
							153u8, 210u8, 106u8, 244u8, 156u8, 70u8, 124u8, 251u8, 123u8, 75u8,
							7u8, 189u8, 199u8, 145u8, 95u8, 119u8, 137u8, 11u8, 240u8, 160u8,
							151u8, 248u8, 229u8, 231u8, 89u8, 222u8, 18u8, 237u8, 144u8, 78u8,
							99u8, 58u8,
						],
					)
				}
				/// Information concerning any given referendum.
				pub fn referendum_info_for(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_referenda::types::ReferendumInfo<
						::core::primitive::u16,
						runtime_types::babe_runtime::OriginCaller,
						::core::primitive::u32,
						runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::babe_runtime::RuntimeCall,
						>,
						::core::primitive::u128,
						runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
						::subxt::utils::AccountId32,
						(::core::primitive::u32, ::core::primitive::u32),
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Referenda",
						"ReferendumInfoFor",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							25u8, 217u8, 0u8, 39u8, 178u8, 83u8, 21u8, 62u8, 224u8, 149u8, 196u8,
							86u8, 187u8, 173u8, 75u8, 17u8, 234u8, 126u8, 202u8, 44u8, 196u8,
							253u8, 214u8, 158u8, 119u8, 128u8, 69u8, 239u8, 178u8, 51u8, 117u8,
							16u8,
						],
					)
				}
				/// Information concerning any given referendum.
				pub fn referendum_info_for_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_referenda::types::ReferendumInfo<
						::core::primitive::u16,
						runtime_types::babe_runtime::OriginCaller,
						::core::primitive::u32,
						runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::babe_runtime::RuntimeCall,
						>,
						::core::primitive::u128,
						runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
						::subxt::utils::AccountId32,
						(::core::primitive::u32, ::core::primitive::u32),
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Referenda",
						"ReferendumInfoFor",
						Vec::new(),
						[
							25u8, 217u8, 0u8, 39u8, 178u8, 83u8, 21u8, 62u8, 224u8, 149u8, 196u8,
							86u8, 187u8, 173u8, 75u8, 17u8, 234u8, 126u8, 202u8, 44u8, 196u8,
							253u8, 214u8, 158u8, 119u8, 128u8, 69u8, 239u8, 178u8, 51u8, 117u8,
							16u8,
						],
					)
				}
				/// The sorted list of referenda ready to be decided but not yet being decided,
				/// ordered by conviction-weighted approvals.
				///
				/// This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`.
				pub fn track_queue(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u16>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						::core::primitive::u32,
						::core::primitive::u128,
					)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Referenda",
						"TrackQueue",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							254u8, 82u8, 183u8, 246u8, 168u8, 87u8, 175u8, 224u8, 192u8, 117u8,
							129u8, 244u8, 18u8, 18u8, 249u8, 30u8, 51u8, 133u8, 244u8, 117u8,
							194u8, 174u8, 99u8, 51u8, 155u8, 76u8, 206u8, 202u8, 109u8, 39u8,
							253u8, 240u8,
						],
					)
				}
				/// The sorted list of referenda ready to be decided but not yet being decided,
				/// ordered by conviction-weighted approvals.
				///
				/// This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`.
				pub fn track_queue_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						::core::primitive::u32,
						::core::primitive::u128,
					)>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Referenda",
						"TrackQueue",
						Vec::new(),
						[
							254u8, 82u8, 183u8, 246u8, 168u8, 87u8, 175u8, 224u8, 192u8, 117u8,
							129u8, 244u8, 18u8, 18u8, 249u8, 30u8, 51u8, 133u8, 244u8, 117u8,
							194u8, 174u8, 99u8, 51u8, 155u8, 76u8, 206u8, 202u8, 109u8, 39u8,
							253u8, 240u8,
						],
					)
				}
				/// The number of referenda being decided currently.
				pub fn deciding_count(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u16>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Referenda",
						"DecidingCount",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							101u8, 153u8, 200u8, 225u8, 229u8, 227u8, 232u8, 26u8, 98u8, 60u8,
							60u8, 94u8, 204u8, 195u8, 193u8, 69u8, 50u8, 72u8, 31u8, 250u8, 224u8,
							179u8, 139u8, 207u8, 19u8, 156u8, 67u8, 234u8, 177u8, 223u8, 63u8,
							150u8,
						],
					)
				}
				/// The number of referenda being decided currently.
				pub fn deciding_count_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Referenda",
						"DecidingCount",
						Vec::new(),
						[
							101u8, 153u8, 200u8, 225u8, 229u8, 227u8, 232u8, 26u8, 98u8, 60u8,
							60u8, 94u8, 204u8, 195u8, 193u8, 69u8, 50u8, 72u8, 31u8, 250u8, 224u8,
							179u8, 139u8, 207u8, 19u8, 156u8, 67u8, 234u8, 177u8, 223u8, 63u8,
							150u8,
						],
					)
				}
				/// The metadata is a general information concerning the referendum.
				/// The `PreimageHash` refers to the preimage of the `Preimages` provider which can
				/// be a JSON dump or IPFS hash of a JSON file.
				///
				/// Consider a garbage collection for a metadata of finished referendums to
				/// `unrequest` (remove) large preimages.
				pub fn metadata_of(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::H256,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Referenda",
						"MetadataOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							104u8, 255u8, 134u8, 120u8, 111u8, 124u8, 108u8, 232u8, 61u8, 47u8,
							251u8, 228u8, 50u8, 49u8, 125u8, 229u8, 254u8, 88u8, 215u8, 90u8,
							116u8, 145u8, 111u8, 72u8, 132u8, 91u8, 106u8, 207u8, 13u8, 104u8,
							164u8, 100u8,
						],
					)
				}
				/// The metadata is a general information concerning the referendum.
				/// The `PreimageHash` refers to the preimage of the `Preimages` provider which can
				/// be a JSON dump or IPFS hash of a JSON file.
				///
				/// Consider a garbage collection for a metadata of finished referendums to
				/// `unrequest` (remove) large preimages.
				pub fn metadata_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::H256,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Referenda",
						"MetadataOf",
						Vec::new(),
						[
							104u8, 255u8, 134u8, 120u8, 111u8, 124u8, 108u8, 232u8, 61u8, 47u8,
							251u8, 228u8, 50u8, 49u8, 125u8, 229u8, 254u8, 88u8, 215u8, 90u8,
							116u8, 145u8, 111u8, 72u8, 132u8, 91u8, 106u8, 207u8, 13u8, 104u8,
							164u8, 100u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The minimum amount to be used as a deposit for a public referendum proposal.
				pub fn submission_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Referenda",
						"SubmissionDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// Maximum size of the referendum queue for a single track.
				pub fn max_queued(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Referenda",
						"MaxQueued",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The number of blocks after submission that a referendum must begin being decided
				/// by. Once this passes, then anyone may cancel the referendum.
				pub fn undeciding_timeout(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Referenda",
						"UndecidingTimeout",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Quantization level for the referendum wakeup scheduler. A higher number will
				/// result in fewer storage reads/writes needed for smaller voters, but also result
				/// in delays to the automatic referendum status changes. Explicit servicing
				/// instructions are unaffected.
				pub fn alarm_interval(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Referenda",
						"AlarmInterval",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Information concerning the different referendum tracks.
				pub fn tracks(
					&self,
				) -> ::subxt::constants::Address<
					::std::vec::Vec<(
						::core::primitive::u16,
						runtime_types::pallet_referenda::types::TrackInfo<
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					)>,
				> {
					::subxt::constants::Address::new_static(
						"Referenda",
						"Tracks",
						[
							71u8, 253u8, 246u8, 54u8, 168u8, 190u8, 182u8, 15u8, 207u8, 26u8, 50u8,
							138u8, 212u8, 124u8, 13u8, 203u8, 27u8, 35u8, 224u8, 1u8, 176u8, 192u8,
							197u8, 220u8, 147u8, 94u8, 196u8, 150u8, 125u8, 23u8, 48u8, 255u8,
						],
					)
				}
			}
		}
	}
	pub mod remark {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Store {
				pub remark: ::std::vec::Vec<::core::primitive::u8>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Index and store data off chain.
				pub fn store(
					&self,
					remark: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::Payload<Store> {
					::subxt::tx::Payload::new_static(
						"Remark",
						"store",
						Store { remark },
						[
							55u8, 111u8, 88u8, 127u8, 252u8, 241u8, 51u8, 152u8, 154u8, 138u8,
							228u8, 171u8, 59u8, 29u8, 135u8, 236u8, 227u8, 108u8, 169u8, 205u8,
							25u8, 96u8, 118u8, 73u8, 105u8, 132u8, 150u8, 148u8, 94u8, 230u8, 66u8,
							73u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_remark::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Stored data off chain.
			pub struct Stored {
				pub sender: ::subxt::utils::AccountId32,
				pub content_hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for Stored {
				const PALLET: &'static str = "Remark";
				const EVENT: &'static str = "Stored";
			}
		}
	}
	pub mod root_testing {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct FillBlock {
				pub ratio: runtime_types::sp_arithmetic::per_things::Perbill,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///A dispatch that will fill the block weight up to the given ratio.
				pub fn fill_block(
					&self,
					ratio: runtime_types::sp_arithmetic::per_things::Perbill,
				) -> ::subxt::tx::Payload<FillBlock> {
					::subxt::tx::Payload::new_static(
						"RootTesting",
						"fill_block",
						FillBlock { ratio },
						[
							48u8, 18u8, 205u8, 90u8, 222u8, 4u8, 20u8, 251u8, 173u8, 76u8, 167u8,
							4u8, 83u8, 203u8, 160u8, 89u8, 132u8, 218u8, 191u8, 145u8, 130u8,
							245u8, 177u8, 201u8, 169u8, 129u8, 173u8, 105u8, 88u8, 45u8, 136u8,
							191u8,
						],
					)
				}
			}
		}
	}
	pub mod conviction_voting {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Vote {
				#[codec(compact)]
				pub poll_index: ::core::primitive::u32,
				pub vote: runtime_types::pallet_conviction_voting::vote::AccountVote<
					::core::primitive::u128,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Delegate {
				pub class: ::core::primitive::u16,
				pub to: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
				pub balance: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Undelegate {
				pub class: ::core::primitive::u16,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Unlock {
				pub class: ::core::primitive::u16,
				pub target: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemoveVote {
				pub class: ::core::option::Option<::core::primitive::u16>,
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemoveOtherVote {
				pub target: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub class: ::core::primitive::u16,
				pub index: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;
				///otherwise it is a vote to keep the status quo.
				///
				///The dispatch origin of this call must be _Signed_.
				///
				/// - `poll_index`: The index of the poll to vote for.
				/// - `vote`: The vote configuration.
				///
				///Weight: `O(R)` where R is the number of polls the voter has voted on.
				pub fn vote(
					&self,
					poll_index: ::core::primitive::u32,
					vote: runtime_types::pallet_conviction_voting::vote::AccountVote<
						::core::primitive::u128,
					>,
				) -> ::subxt::tx::Payload<Vote> {
					::subxt::tx::Payload::new_static(
						"ConvictionVoting",
						"vote",
						Vote { poll_index, vote },
						[
							255u8, 8u8, 191u8, 166u8, 7u8, 48u8, 227u8, 0u8, 34u8, 109u8, 3u8,
							172u8, 168u8, 37u8, 220u8, 229u8, 88u8, 61u8, 117u8, 212u8, 131u8,
							124u8, 74u8, 60u8, 83u8, 62u8, 193u8, 66u8, 162u8, 121u8, 76u8, 180u8,
						],
					)
				}
				///Delegate the voting power (with some given conviction) of the sending account
				/// for a particular class of polls.
				///
				///The balance delegated is locked for as long as it's delegated, and thereafter
				/// for the time appropriate for the conviction's lock period.
				///
				///The dispatch origin of this call must be _Signed_, and the signing account must
				/// either:
				///  - be delegating already; or
				///  - have no voting activity (if there is, then it will need to be
				///    removed/consolidated through `reap_vote` or `unvote`).
				///
				/// - `to`: The account whose voting the `target` account's voting power will
				///   follow.
				/// - `class`: The class of polls to delegate. To delegate multiple classes,
				///   multiple calls
				///  to this function are required.
				/// - `conviction`: The conviction that will be attached to the delegated votes.
				///   When the
				///  account is undelegated, the funds will be locked for the corresponding period.
				/// - `balance`: The amount of the account's balance to be used in delegating. This
				///   must not
				///  be more than the account's current balance.
				///
				///Emits `Delegated`.
				///
				///Weight: `O(R)` where R is the number of polls the voter delegating to has
				///  voted on. Weight is initially charged as if maximum votes, but is refunded
				/// later.
				pub fn delegate(
					&self,
					class: ::core::primitive::u16,
					to: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
					balance: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<Delegate> {
					::subxt::tx::Payload::new_static(
						"ConvictionVoting",
						"delegate",
						Delegate { class, to, conviction, balance },
						[
							171u8, 252u8, 251u8, 36u8, 176u8, 75u8, 66u8, 106u8, 199u8, 126u8,
							94u8, 221u8, 146u8, 1u8, 172u8, 60u8, 160u8, 245u8, 47u8, 98u8, 183u8,
							66u8, 96u8, 19u8, 129u8, 163u8, 118u8, 216u8, 54u8, 109u8, 190u8,
							103u8,
						],
					)
				}
				///Undelegate the voting power of the sending account for a particular class of
				/// polls.
				///
				///Tokens may be unlocked following once an amount of time consistent with the lock
				/// period of the conviction with which the delegation was issued has passed.
				///
				///The dispatch origin of this call must be _Signed_ and the signing account must
				/// be currently delegating.
				///
				/// - `class`: The class of polls to remove the delegation from.
				///
				///Emits `Undelegated`.
				///
				///Weight: `O(R)` where R is the number of polls the voter delegating to has
				///  voted on. Weight is initially charged as if maximum votes, but is refunded
				/// later.
				pub fn undelegate(
					&self,
					class: ::core::primitive::u16,
				) -> ::subxt::tx::Payload<Undelegate> {
					::subxt::tx::Payload::new_static(
						"ConvictionVoting",
						"undelegate",
						Undelegate { class },
						[
							0u8, 244u8, 151u8, 108u8, 96u8, 240u8, 126u8, 247u8, 29u8, 33u8, 25u8,
							34u8, 253u8, 207u8, 107u8, 227u8, 139u8, 64u8, 184u8, 112u8, 246u8,
							81u8, 201u8, 41u8, 32u8, 201u8, 194u8, 201u8, 4u8, 170u8, 40u8, 83u8,
						],
					)
				}
				///Remove the lock caused by prior voting/delegating which has expired within a
				/// particular class.
				///
				///The dispatch origin of this call must be _Signed_.
				///
				/// - `class`: The class of polls to unlock.
				/// - `target`: The account to remove the lock on.
				///
				///Weight: `O(R)` with R number of vote of target.
				pub fn unlock(
					&self,
					class: ::core::primitive::u16,
					target: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<Unlock> {
					::subxt::tx::Payload::new_static(
						"ConvictionVoting",
						"unlock",
						Unlock { class, target },
						[
							165u8, 17u8, 167u8, 109u8, 53u8, 26u8, 241u8, 236u8, 105u8, 144u8,
							12u8, 61u8, 100u8, 52u8, 54u8, 88u8, 203u8, 255u8, 63u8, 215u8, 137u8,
							156u8, 112u8, 243u8, 79u8, 136u8, 147u8, 185u8, 102u8, 0u8, 57u8,
							223u8,
						],
					)
				}
				///Remove a vote for a poll.
				///
				///If:
				/// - the poll was cancelled, or
				/// - the poll is ongoing, or
				/// - the poll has ended such that
				///  - the vote of the account was in opposition to the result; or
				///  - there was no conviction to the account's vote; or
				///  - the account made a split vote
				///...then the vote is removed cleanly and a following call to `unlock` may result
				/// in more funds being available.
				///
				///If, however, the poll has ended and:
				/// - it finished corresponding to the vote of the account, and
				/// - the account made a standard vote with conviction, and
				/// - the lock period of the conviction is not over
				///...then the lock will be aggregated into the overall account's lock, which may
				/// involve *overlocking* (where the two locks are combined into a single lock that
				/// is the maximum of both the amount locked and the time is it locked for).
				///
				///The dispatch origin of this call must be _Signed_, and the signer must have a
				/// vote registered for poll `index`.
				///
				/// - `index`: The index of poll of the vote to be removed.
				/// - `class`: Optional parameter, if given it indicates the class of the poll. For
				///   polls
				///  which have finished or are cancelled, this must be `Some`.
				///
				///Weight: `O(R + log R)` where R is the number of polls that `target` has voted
				/// on.  Weight is calculated for the maximum number of vote.
				pub fn remove_vote(
					&self,
					class: ::core::option::Option<::core::primitive::u16>,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<RemoveVote> {
					::subxt::tx::Payload::new_static(
						"ConvictionVoting",
						"remove_vote",
						RemoveVote { class, index },
						[
							151u8, 255u8, 135u8, 195u8, 137u8, 27u8, 116u8, 193u8, 245u8, 78u8,
							38u8, 130u8, 233u8, 28u8, 235u8, 50u8, 144u8, 191u8, 39u8, 68u8, 17u8,
							214u8, 25u8, 2u8, 120u8, 14u8, 219u8, 205u8, 59u8, 192u8, 125u8, 142u8,
						],
					)
				}
				///Remove a vote for a poll.
				///
				///If the `target` is equal to the signer, then this function is exactly equivalent
				/// to `remove_vote`. If not equal to the signer, then the vote must have expired,
				///either because the poll was cancelled, because the voter lost the poll or
				///because the conviction period is over.
				///
				///The dispatch origin of this call must be _Signed_.
				///
				/// - `target`: The account of the vote to be removed; this account must have voted
				///   for poll
				///  `index`.
				/// - `index`: The index of poll of the vote to be removed.
				/// - `class`: The class of the poll.
				///
				///Weight: `O(R + log R)` where R is the number of polls that `target` has voted
				/// on.  Weight is calculated for the maximum number of vote.
				pub fn remove_other_vote(
					&self,
					target: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					class: ::core::primitive::u16,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<RemoveOtherVote> {
					::subxt::tx::Payload::new_static(
						"ConvictionVoting",
						"remove_other_vote",
						RemoveOtherVote { target, class, index },
						[
							9u8, 219u8, 232u8, 254u8, 85u8, 1u8, 189u8, 186u8, 87u8, 95u8, 27u8,
							248u8, 14u8, 165u8, 86u8, 167u8, 230u8, 18u8, 225u8, 151u8, 105u8,
							169u8, 84u8, 254u8, 201u8, 122u8, 157u8, 189u8, 40u8, 29u8, 107u8,
							21u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_conviction_voting::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An account has delegated their vote to another account. \[who, target\]
			pub struct Delegated(pub ::subxt::utils::AccountId32, pub ::subxt::utils::AccountId32);
			impl ::subxt::events::StaticEvent for Delegated {
				const PALLET: &'static str = "ConvictionVoting";
				const EVENT: &'static str = "Delegated";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An \[account\] has cancelled a previous delegation operation.
			pub struct Undelegated(pub ::subxt::utils::AccountId32);
			impl ::subxt::events::StaticEvent for Undelegated {
				const PALLET: &'static str = "ConvictionVoting";
				const EVENT: &'static str = "Undelegated";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// All voting for a particular voter in a particular voting class. We store the
				/// balance for the number of votes that we have recorded.
				pub fn voting_for(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u16>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_conviction_voting::vote::Voting<
						::core::primitive::u128,
						::subxt::utils::AccountId32,
						::core::primitive::u32,
						::core::primitive::u32,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ConvictionVoting",
						"VotingFor",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							45u8, 18u8, 71u8, 145u8, 31u8, 220u8, 221u8, 51u8, 69u8, 73u8, 153u8,
							139u8, 46u8, 231u8, 122u8, 15u8, 98u8, 186u8, 57u8, 121u8, 24u8, 241u8,
							161u8, 150u8, 252u8, 133u8, 65u8, 232u8, 21u8, 28u8, 25u8, 75u8,
						],
					)
				}
				/// All voting for a particular voter in a particular voting class. We store the
				/// balance for the number of votes that we have recorded.
				pub fn voting_for_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_conviction_voting::vote::Voting<
						::core::primitive::u128,
						::subxt::utils::AccountId32,
						::core::primitive::u32,
						::core::primitive::u32,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ConvictionVoting",
						"VotingFor",
						Vec::new(),
						[
							45u8, 18u8, 71u8, 145u8, 31u8, 220u8, 221u8, 51u8, 69u8, 73u8, 153u8,
							139u8, 46u8, 231u8, 122u8, 15u8, 98u8, 186u8, 57u8, 121u8, 24u8, 241u8,
							161u8, 150u8, 252u8, 133u8, 65u8, 232u8, 21u8, 28u8, 25u8, 75u8,
						],
					)
				}
				/// The voting classes which have a non-zero lock requirement and the lock amounts
				/// which they require. The actual amount locked on behalf of this pallet should
				/// always be the maximum of this list.
				pub fn class_locks_for(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						::core::primitive::u16,
						::core::primitive::u128,
					)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ConvictionVoting",
						"ClassLocksFor",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							65u8, 181u8, 225u8, 49u8, 35u8, 141u8, 185u8, 155u8, 124u8, 178u8,
							118u8, 51u8, 220u8, 232u8, 95u8, 24u8, 181u8, 135u8, 42u8, 207u8,
							103u8, 166u8, 244u8, 249u8, 106u8, 96u8, 177u8, 56u8, 243u8, 117u8,
							228u8, 145u8,
						],
					)
				}
				/// The voting classes which have a non-zero lock requirement and the lock amounts
				/// which they require. The actual amount locked on behalf of this pallet should
				/// always be the maximum of this list.
				pub fn class_locks_for_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						::core::primitive::u16,
						::core::primitive::u128,
					)>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"ConvictionVoting",
						"ClassLocksFor",
						Vec::new(),
						[
							65u8, 181u8, 225u8, 49u8, 35u8, 141u8, 185u8, 155u8, 124u8, 178u8,
							118u8, 51u8, 220u8, 232u8, 95u8, 24u8, 181u8, 135u8, 42u8, 207u8,
							103u8, 166u8, 244u8, 249u8, 106u8, 96u8, 177u8, 56u8, 243u8, 117u8,
							228u8, 145u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The maximum number of concurrent votes an account may have.
				///
				/// Also used to compute weight, an overly large value can lead to extrinsics with
				/// large weight estimation: see `delegate` for instance.
				pub fn max_votes(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ConvictionVoting",
						"MaxVotes",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The minimum period of vote locking.
				///
				/// It should be no shorter than enactment period to ensure that in the case of an
				/// approval, those successful voters are locked into the consequences that their
				/// votes entail.
				pub fn vote_locking_period(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"ConvictionVoting",
						"VoteLockingPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod whitelist {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct WhitelistCall {
				pub call_hash: ::subxt::utils::H256,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemoveWhitelistedCall {
				pub call_hash: ::subxt::utils::H256,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DispatchWhitelistedCall {
				pub call_hash: ::subxt::utils::H256,
				pub call_encoded_len: ::core::primitive::u32,
				pub call_weight_witness: runtime_types::sp_weights::weight_v2::Weight,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DispatchWhitelistedCallWithPreimage {
				pub call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				pub fn whitelist_call(
					&self,
					call_hash: ::subxt::utils::H256,
				) -> ::subxt::tx::Payload<WhitelistCall> {
					::subxt::tx::Payload::new_static(
						"Whitelist",
						"whitelist_call",
						WhitelistCall { call_hash },
						[
							21u8, 246u8, 244u8, 176u8, 163u8, 80u8, 45u8, 191u8, 3u8, 180u8, 150u8,
							66u8, 168u8, 3u8, 196u8, 129u8, 177u8, 104u8, 48u8, 5u8, 201u8, 208u8,
							226u8, 76u8, 148u8, 116u8, 206u8, 119u8, 145u8, 78u8, 86u8, 41u8,
						],
					)
				}
				pub fn remove_whitelisted_call(
					&self,
					call_hash: ::subxt::utils::H256,
				) -> ::subxt::tx::Payload<RemoveWhitelistedCall> {
					::subxt::tx::Payload::new_static(
						"Whitelist",
						"remove_whitelisted_call",
						RemoveWhitelistedCall { call_hash },
						[
							142u8, 227u8, 198u8, 110u8, 90u8, 127u8, 218u8, 117u8, 181u8, 209u8,
							210u8, 86u8, 133u8, 95u8, 244u8, 64u8, 50u8, 240u8, 220u8, 50u8, 212u8,
							106u8, 4u8, 189u8, 2u8, 72u8, 96u8, 52u8, 187u8, 140u8, 144u8, 76u8,
						],
					)
				}
				pub fn dispatch_whitelisted_call(
					&self,
					call_hash: ::subxt::utils::H256,
					call_encoded_len: ::core::primitive::u32,
					call_weight_witness: runtime_types::sp_weights::weight_v2::Weight,
				) -> ::subxt::tx::Payload<DispatchWhitelistedCall> {
					::subxt::tx::Payload::new_static(
						"Whitelist",
						"dispatch_whitelisted_call",
						DispatchWhitelistedCall {
							call_hash,
							call_encoded_len,
							call_weight_witness,
						},
						[
							243u8, 130u8, 216u8, 251u8, 131u8, 220u8, 75u8, 210u8, 203u8, 137u8,
							174u8, 95u8, 134u8, 252u8, 76u8, 33u8, 230u8, 185u8, 125u8, 15u8,
							200u8, 85u8, 46u8, 43u8, 34u8, 205u8, 245u8, 85u8, 46u8, 78u8, 245u8,
							135u8,
						],
					)
				}
				pub fn dispatch_whitelisted_call_with_preimage(
					&self,
					call: runtime_types::babe_runtime::RuntimeCall,
				) -> ::subxt::tx::Payload<DispatchWhitelistedCallWithPreimage> {
					::subxt::tx::Payload::new_static(
						"Whitelist",
						"dispatch_whitelisted_call_with_preimage",
						DispatchWhitelistedCallWithPreimage { call: ::std::boxed::Box::new(call) },
						[
							125u8, 144u8, 92u8, 156u8, 39u8, 156u8, 37u8, 105u8, 137u8, 238u8,
							232u8, 210u8, 233u8, 80u8, 63u8, 130u8, 21u8, 213u8, 108u8, 89u8,
							106u8, 145u8, 161u8, 33u8, 89u8, 115u8, 72u8, 152u8, 130u8, 4u8, 207u8,
							45u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_whitelist::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CallWhitelisted {
				pub call_hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for CallWhitelisted {
				const PALLET: &'static str = "Whitelist";
				const EVENT: &'static str = "CallWhitelisted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct WhitelistedCallRemoved {
				pub call_hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for WhitelistedCallRemoved {
				const PALLET: &'static str = "Whitelist";
				const EVENT: &'static str = "WhitelistedCallRemoved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct WhitelistedCallDispatched {
				pub call_hash: ::subxt::utils::H256,
				pub result: ::core::result::Result<
					runtime_types::frame_support::dispatch::PostDispatchInfo,
					runtime_types::sp_runtime::DispatchErrorWithPostInfo<
						runtime_types::frame_support::dispatch::PostDispatchInfo,
					>,
				>,
			}
			impl ::subxt::events::StaticEvent for WhitelistedCallDispatched {
				const PALLET: &'static str = "Whitelist";
				const EVENT: &'static str = "WhitelistedCallDispatched";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				pub fn whitelisted_call(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(),
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Whitelist",
						"WhitelistedCall",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							251u8, 179u8, 58u8, 232u8, 231u8, 121u8, 89u8, 218u8, 90u8, 70u8, 96u8,
							132u8, 54u8, 41u8, 18u8, 129u8, 197u8, 122u8, 221u8, 206u8, 41u8,
							100u8, 200u8, 141u8, 71u8, 98u8, 3u8, 3u8, 112u8, 167u8, 196u8, 77u8,
						],
					)
				}
				pub fn whitelisted_call_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					(),
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Whitelist",
						"WhitelistedCall",
						Vec::new(),
						[
							251u8, 179u8, 58u8, 232u8, 231u8, 121u8, 89u8, 218u8, 90u8, 70u8, 96u8,
							132u8, 54u8, 41u8, 18u8, 129u8, 197u8, 122u8, 221u8, 206u8, 41u8,
							100u8, 200u8, 141u8, 71u8, 98u8, 3u8, 3u8, 112u8, 167u8, 196u8, 77u8,
						],
					)
				}
			}
		}
	}
	pub mod alliance_motion {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetMembers {
				pub new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
				pub prime: ::core::option::Option<::subxt::utils::AccountId32>,
				pub old_count: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Execute {
				pub proposal: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Propose {
				#[codec(compact)]
				pub threshold: ::core::primitive::u32,
				pub proposal: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Vote {
				pub proposal: ::subxt::utils::H256,
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				pub approve: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CloseOldWeight {
				pub proposal_hash: ::subxt::utils::H256,
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				#[codec(compact)]
				pub proposal_weight_bound: runtime_types::sp_weights::OldWeight,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DisapproveProposal {
				pub proposal_hash: ::subxt::utils::H256,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Close {
				pub proposal_hash: ::subxt::utils::H256,
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				pub proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Set the collective's membership.
				///
				/// - `new_members`: The new member list. Be nice to the chain and provide it
				///   sorted.
				/// - `prime`: The prime member whose vote sets the default.
				/// - `old_count`: The upper bound for the previous number of members in storage.
				///   Used for
				///  weight estimation.
				///
				///The dispatch of this call must be `SetMembersOrigin`.
				///
				///NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members,
				/// but      the weight estimations rely on it to estimate dispatchable weight.
				///
				///# WARNING:
				///
				///The `pallet-collective` can also be managed by logic outside of the pallet
				/// through the implementation of the trait [`ChangeMembers`].
				///Any call to `set_members` must be careful that the member set doesn't get out of
				/// sync with other logic managing the member set.
				///
				///## Complexity:
				/// - `O(MP + N)` where:
				///  - `M` old-members-count (code- and governance-bounded)
				///  - `N` new-members-count (code- and governance-bounded)
				///  - `P` proposals-count (code-bounded)
				pub fn set_members(
					&self,
					new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
					prime: ::core::option::Option<::subxt::utils::AccountId32>,
					old_count: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<SetMembers> {
					::subxt::tx::Payload::new_static(
						"AllianceMotion",
						"set_members",
						SetMembers { new_members, prime, old_count },
						[
							196u8, 103u8, 123u8, 125u8, 226u8, 177u8, 126u8, 37u8, 160u8, 114u8,
							34u8, 136u8, 219u8, 84u8, 199u8, 94u8, 242u8, 20u8, 126u8, 126u8,
							166u8, 190u8, 198u8, 33u8, 162u8, 113u8, 237u8, 222u8, 90u8, 1u8, 2u8,
							234u8,
						],
					)
				}
				///Dispatch a proposal from a member using the `Member` origin.
				///
				///Origin must be a member of the collective.
				///
				///## Complexity:
				/// - `O(B + M + P)` where:
				/// - `B` is `proposal` size in bytes (length-fee-bounded)
				/// - `M` members-count (code-bounded)
				/// - `P` complexity of dispatching `proposal`
				pub fn execute(
					&self,
					proposal: runtime_types::babe_runtime::RuntimeCall,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Execute> {
					::subxt::tx::Payload::new_static(
						"AllianceMotion",
						"execute",
						Execute { proposal: ::std::boxed::Box::new(proposal), length_bound },
						[
							74u8, 171u8, 194u8, 100u8, 116u8, 71u8, 159u8, 221u8, 82u8, 177u8,
							120u8, 254u8, 142u8, 86u8, 22u8, 196u8, 78u8, 154u8, 197u8, 203u8,
							74u8, 195u8, 220u8, 239u8, 246u8, 217u8, 131u8, 58u8, 51u8, 17u8,
							123u8, 173u8,
						],
					)
				}
				///Add a new proposal to either be voted on or executed directly.
				///
				///Requires the sender to be member.
				///
				///`threshold` determines whether `proposal` is executed directly (`threshold < 2`)
				///or put up for voting.
				///
				///## Complexity
				/// - `O(B + M + P1)` or `O(B + M + P2)` where:
				///  - `B` is `proposal` size in bytes (length-fee-bounded)
				///  - `M` is members-count (code- and governance-bounded)
				///  - branching is influenced by `threshold` where:
				///    - `P1` is proposal execution complexity (`threshold < 2`)
				///    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)
				pub fn propose(
					&self,
					threshold: ::core::primitive::u32,
					proposal: runtime_types::babe_runtime::RuntimeCall,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Propose> {
					::subxt::tx::Payload::new_static(
						"AllianceMotion",
						"propose",
						Propose {
							threshold,
							proposal: ::std::boxed::Box::new(proposal),
							length_bound,
						},
						[
							136u8, 74u8, 108u8, 147u8, 25u8, 10u8, 77u8, 9u8, 252u8, 0u8, 42u8,
							60u8, 77u8, 234u8, 201u8, 135u8, 170u8, 246u8, 48u8, 35u8, 212u8,
							206u8, 119u8, 217u8, 32u8, 194u8, 121u8, 96u8, 57u8, 122u8, 62u8, 21u8,
						],
					)
				}
				///Add an aye or nay vote for the sender to the given proposal.
				///
				///Requires the sender to be a member.
				///
				///Transaction fees will be waived if the member is voting on any particular
				/// proposal for the first time and the call is successful. Subsequent vote changes
				/// will charge a fee.
				///## Complexity
				/// - `O(M)` where `M` is members-count (code- and governance-bounded)
				pub fn vote(
					&self,
					proposal: ::subxt::utils::H256,
					index: ::core::primitive::u32,
					approve: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<Vote> {
					::subxt::tx::Payload::new_static(
						"AllianceMotion",
						"vote",
						Vote { proposal, index, approve },
						[
							108u8, 46u8, 180u8, 148u8, 145u8, 24u8, 173u8, 56u8, 36u8, 100u8,
							216u8, 43u8, 178u8, 202u8, 26u8, 136u8, 93u8, 84u8, 80u8, 134u8, 14u8,
							42u8, 248u8, 205u8, 68u8, 92u8, 79u8, 11u8, 113u8, 115u8, 157u8, 100u8,
						],
					)
				}
				///Close a vote that is either approved, disapproved or whose voting period has
				/// ended.
				///
				///May be called by any signed account in order to finish voting and close the
				/// proposal.
				///
				///If called before the end of the voting period it will only close the vote if it
				/// is has enough votes to be approved or disapproved.
				///
				///If called after the end of the voting period abstentions are counted as
				/// rejections unless there is a prime member set and the prime member cast an
				/// approval.
				///
				///If the close operation completes successfully with disapproval, the transaction
				/// fee will be waived. Otherwise execution of the approved operation will be
				/// charged to the caller.
				///
				///+ `proposal_weight_bound`: The maximum amount of weight consumed by executing
				/// the closed proposal.
				///+ `length_bound`: The upper bound for the length of the proposal in storage.
				/// Checked via `storage::read` so it is `size_of::<u32>() == 4` larger than the
				/// pure length.
				///
				///## Complexity
				/// - `O(B + M + P1 + P2)` where:
				///  - `B` is `proposal` size in bytes (length-fee-bounded)
				///  - `M` is members-count (code- and governance-bounded)
				///  - `P1` is the complexity of `proposal` preimage.
				///  - `P2` is proposal-count (code-bounded)
				pub fn close_old_weight(
					&self,
					proposal_hash: ::subxt::utils::H256,
					index: ::core::primitive::u32,
					proposal_weight_bound: runtime_types::sp_weights::OldWeight,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<CloseOldWeight> {
					::subxt::tx::Payload::new_static(
						"AllianceMotion",
						"close_old_weight",
						CloseOldWeight {
							proposal_hash,
							index,
							proposal_weight_bound,
							length_bound,
						},
						[
							133u8, 219u8, 90u8, 40u8, 102u8, 95u8, 4u8, 199u8, 45u8, 234u8, 109u8,
							17u8, 162u8, 63u8, 102u8, 186u8, 95u8, 182u8, 13u8, 123u8, 227u8, 20u8,
							186u8, 207u8, 12u8, 47u8, 87u8, 252u8, 244u8, 172u8, 60u8, 206u8,
						],
					)
				}
				///Disapprove a proposal, close, and remove it from the system, regardless of its
				/// current state.
				///
				///Must be called by the Root origin.
				///
				///Parameters:
				/// * `proposal_hash`: The hash of the proposal that should be disapproved.
				///
				///## Complexity
				///O(P) where P is the number of max proposals
				pub fn disapprove_proposal(
					&self,
					proposal_hash: ::subxt::utils::H256,
				) -> ::subxt::tx::Payload<DisapproveProposal> {
					::subxt::tx::Payload::new_static(
						"AllianceMotion",
						"disapprove_proposal",
						DisapproveProposal { proposal_hash },
						[
							25u8, 123u8, 1u8, 8u8, 74u8, 37u8, 3u8, 40u8, 97u8, 37u8, 175u8, 224u8,
							72u8, 155u8, 123u8, 109u8, 104u8, 43u8, 91u8, 125u8, 199u8, 51u8, 17u8,
							225u8, 133u8, 38u8, 120u8, 76u8, 164u8, 5u8, 194u8, 201u8,
						],
					)
				}
				///Close a vote that is either approved, disapproved or whose voting period has
				/// ended.
				///
				///May be called by any signed account in order to finish voting and close the
				/// proposal.
				///
				///If called before the end of the voting period it will only close the vote if it
				/// is has enough votes to be approved or disapproved.
				///
				///If called after the end of the voting period abstentions are counted as
				/// rejections unless there is a prime member set and the prime member cast an
				/// approval.
				///
				///If the close operation completes successfully with disapproval, the transaction
				/// fee will be waived. Otherwise execution of the approved operation will be
				/// charged to the caller.
				///
				///+ `proposal_weight_bound`: The maximum amount of weight consumed by executing
				/// the closed proposal.
				///+ `length_bound`: The upper bound for the length of the proposal in storage.
				/// Checked via `storage::read` so it is `size_of::<u32>() == 4` larger than the
				/// pure length.
				///
				///## Complexity
				/// - `O(B + M + P1 + P2)` where:
				///  - `B` is `proposal` size in bytes (length-fee-bounded)
				///  - `M` is members-count (code- and governance-bounded)
				///  - `P1` is the complexity of `proposal` preimage.
				///  - `P2` is proposal-count (code-bounded)
				pub fn close(
					&self,
					proposal_hash: ::subxt::utils::H256,
					index: ::core::primitive::u32,
					proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Close> {
					::subxt::tx::Payload::new_static(
						"AllianceMotion",
						"close",
						Close { proposal_hash, index, proposal_weight_bound, length_bound },
						[
							191u8, 138u8, 89u8, 247u8, 97u8, 51u8, 45u8, 193u8, 76u8, 16u8, 80u8,
							225u8, 197u8, 83u8, 204u8, 133u8, 169u8, 16u8, 86u8, 32u8, 125u8, 16u8,
							116u8, 185u8, 45u8, 20u8, 76u8, 148u8, 206u8, 163u8, 154u8, 30u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_collective::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A motion (given hash) has been proposed (by given account) with a threshold (given
			///`MemberCount`).
			pub struct Proposed {
				pub account: ::subxt::utils::AccountId32,
				pub proposal_index: ::core::primitive::u32,
				pub proposal_hash: ::subxt::utils::H256,
				pub threshold: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Proposed {
				const PALLET: &'static str = "AllianceMotion";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A motion (given hash) has been voted on by given account, leaving
			///a tally (yes votes and no votes given respectively as `MemberCount`).
			pub struct Voted {
				pub account: ::subxt::utils::AccountId32,
				pub proposal_hash: ::subxt::utils::H256,
				pub voted: ::core::primitive::bool,
				pub yes: ::core::primitive::u32,
				pub no: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Voted {
				const PALLET: &'static str = "AllianceMotion";
				const EVENT: &'static str = "Voted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A motion was approved by the required threshold.
			pub struct Approved {
				pub proposal_hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for Approved {
				const PALLET: &'static str = "AllianceMotion";
				const EVENT: &'static str = "Approved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A motion was not approved by the required threshold.
			pub struct Disapproved {
				pub proposal_hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for Disapproved {
				const PALLET: &'static str = "AllianceMotion";
				const EVENT: &'static str = "Disapproved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A motion was executed; result will be `Ok` if it returned without error.
			pub struct Executed {
				pub proposal_hash: ::subxt::utils::H256,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for Executed {
				const PALLET: &'static str = "AllianceMotion";
				const EVENT: &'static str = "Executed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A single member did some action; result will be `Ok` if it returned without error.
			pub struct MemberExecuted {
				pub proposal_hash: ::subxt::utils::H256,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for MemberExecuted {
				const PALLET: &'static str = "AllianceMotion";
				const EVENT: &'static str = "MemberExecuted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A proposal was closed because its threshold was reached or after its duration was
			/// up.
			pub struct Closed {
				pub proposal_hash: ::subxt::utils::H256,
				pub yes: ::core::primitive::u32,
				pub no: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Closed {
				const PALLET: &'static str = "AllianceMotion";
				const EVENT: &'static str = "Closed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The hashes of the active proposals.
				pub fn proposals(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::subxt::utils::H256,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"AllianceMotion",
						"Proposals",
						vec![],
						[
							10u8, 133u8, 82u8, 54u8, 193u8, 41u8, 253u8, 159u8, 56u8, 96u8, 249u8,
							148u8, 43u8, 57u8, 116u8, 43u8, 222u8, 243u8, 237u8, 231u8, 238u8,
							60u8, 26u8, 225u8, 19u8, 203u8, 213u8, 220u8, 114u8, 217u8, 100u8,
							27u8,
						],
					)
				}
				/// Actual proposal for a given hash, if it's current.
				pub fn proposal_of(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::babe_runtime::RuntimeCall,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"AllianceMotion",
						"ProposalOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							31u8, 10u8, 39u8, 204u8, 31u8, 195u8, 16u8, 183u8, 154u8, 247u8, 219u8,
							168u8, 115u8, 186u8, 23u8, 140u8, 194u8, 247u8, 79u8, 212u8, 43u8,
							197u8, 16u8, 203u8, 212u8, 133u8, 88u8, 9u8, 156u8, 5u8, 10u8, 156u8,
						],
					)
				}
				/// Actual proposal for a given hash, if it's current.
				pub fn proposal_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::babe_runtime::RuntimeCall,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"AllianceMotion",
						"ProposalOf",
						Vec::new(),
						[
							31u8, 10u8, 39u8, 204u8, 31u8, 195u8, 16u8, 183u8, 154u8, 247u8, 219u8,
							168u8, 115u8, 186u8, 23u8, 140u8, 194u8, 247u8, 79u8, 212u8, 43u8,
							197u8, 16u8, 203u8, 212u8, 133u8, 88u8, 9u8, 156u8, 5u8, 10u8, 156u8,
						],
					)
				}
				/// Votes on a given proposal, if it is ongoing.
				pub fn voting(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_collective::Votes<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"AllianceMotion",
						"Voting",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							89u8, 108u8, 65u8, 58u8, 60u8, 116u8, 54u8, 68u8, 179u8, 73u8, 161u8,
							168u8, 78u8, 213u8, 208u8, 54u8, 244u8, 58u8, 70u8, 209u8, 170u8,
							136u8, 215u8, 3u8, 2u8, 105u8, 229u8, 217u8, 240u8, 230u8, 107u8,
							221u8,
						],
					)
				}
				/// Votes on a given proposal, if it is ongoing.
				pub fn voting_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_collective::Votes<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"AllianceMotion",
						"Voting",
						Vec::new(),
						[
							89u8, 108u8, 65u8, 58u8, 60u8, 116u8, 54u8, 68u8, 179u8, 73u8, 161u8,
							168u8, 78u8, 213u8, 208u8, 54u8, 244u8, 58u8, 70u8, 209u8, 170u8,
							136u8, 215u8, 3u8, 2u8, 105u8, 229u8, 217u8, 240u8, 230u8, 107u8,
							221u8,
						],
					)
				}
				/// Proposals so far.
				pub fn proposal_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"AllianceMotion",
						"ProposalCount",
						vec![],
						[
							132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8, 172u8, 143u8, 33u8,
							140u8, 99u8, 124u8, 208u8, 57u8, 232u8, 154u8, 110u8, 32u8, 142u8,
							24u8, 149u8, 109u8, 105u8, 30u8, 83u8, 39u8, 177u8, 127u8, 160u8, 34u8,
							70u8,
						],
					)
				}
				/// The current members of the collective. This is stored sorted (just by value).
				pub fn members(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::subxt::utils::AccountId32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"AllianceMotion",
						"Members",
						vec![],
						[
							162u8, 72u8, 174u8, 204u8, 140u8, 105u8, 205u8, 176u8, 197u8, 117u8,
							206u8, 134u8, 157u8, 110u8, 139u8, 54u8, 43u8, 233u8, 25u8, 51u8, 36u8,
							238u8, 94u8, 124u8, 221u8, 52u8, 237u8, 71u8, 125u8, 56u8, 129u8,
							222u8,
						],
					)
				}
				/// The prime member that helps determine the default vote behavior in case of
				/// absentations.
				pub fn prime(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"AllianceMotion",
						"Prime",
						vec![],
						[
							108u8, 118u8, 54u8, 193u8, 207u8, 227u8, 119u8, 97u8, 23u8, 239u8,
							157u8, 69u8, 56u8, 142u8, 106u8, 17u8, 215u8, 159u8, 48u8, 42u8, 185u8,
							209u8, 49u8, 159u8, 32u8, 168u8, 111u8, 158u8, 159u8, 217u8, 244u8,
							158u8,
						],
					)
				}
			}
		}
	}
	pub mod alliance {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Propose {
				#[codec(compact)]
				pub threshold: ::core::primitive::u32,
				pub proposal: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Vote {
				pub proposal: ::subxt::utils::H256,
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				pub approve: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CloseOldWeight {
				pub proposal_hash: ::subxt::utils::H256,
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				#[codec(compact)]
				pub proposal_weight_bound: runtime_types::sp_weights::OldWeight,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct InitMembers {
				pub fellows: ::std::vec::Vec<::subxt::utils::AccountId32>,
				pub allies: ::std::vec::Vec<::subxt::utils::AccountId32>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Disband {
				pub witness: runtime_types::pallet_alliance::types::DisbandWitness,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetRule {
				pub rule: runtime_types::pallet_alliance::types::Cid,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Announce {
				pub announcement: runtime_types::pallet_alliance::types::Cid,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemoveAnnouncement {
				pub announcement: runtime_types::pallet_alliance::types::Cid,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct JoinAlliance;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct NominateAlly {
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ElevateAlly {
				pub ally: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct GiveRetirementNotice;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Retire;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct KickMember {
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AddUnscrupulousItems {
				pub items: ::std::vec::Vec<
					runtime_types::pallet_alliance::UnscrupulousItem<
						::subxt::utils::AccountId32,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					>,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemoveUnscrupulousItems {
				pub items: ::std::vec::Vec<
					runtime_types::pallet_alliance::UnscrupulousItem<
						::subxt::utils::AccountId32,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					>,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Close {
				pub proposal_hash: ::subxt::utils::H256,
				#[codec(compact)]
				pub index: ::core::primitive::u32,
				pub proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
				#[codec(compact)]
				pub length_bound: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AbdicateFellowStatus;
			pub struct TransactionApi;
			impl TransactionApi {
				///Add a new proposal to be voted on.
				///
				///Must be called by a Fellow.
				pub fn propose(
					&self,
					threshold: ::core::primitive::u32,
					proposal: runtime_types::babe_runtime::RuntimeCall,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Propose> {
					::subxt::tx::Payload::new_static(
						"Alliance",
						"propose",
						Propose {
							threshold,
							proposal: ::std::boxed::Box::new(proposal),
							length_bound,
						},
						[
							136u8, 74u8, 108u8, 147u8, 25u8, 10u8, 77u8, 9u8, 252u8, 0u8, 42u8,
							60u8, 77u8, 234u8, 201u8, 135u8, 170u8, 246u8, 48u8, 35u8, 212u8,
							206u8, 119u8, 217u8, 32u8, 194u8, 121u8, 96u8, 57u8, 122u8, 62u8, 21u8,
						],
					)
				}
				///Add an aye or nay vote for the sender to the given proposal.
				///
				///Must be called by a Fellow.
				pub fn vote(
					&self,
					proposal: ::subxt::utils::H256,
					index: ::core::primitive::u32,
					approve: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<Vote> {
					::subxt::tx::Payload::new_static(
						"Alliance",
						"vote",
						Vote { proposal, index, approve },
						[
							108u8, 46u8, 180u8, 148u8, 145u8, 24u8, 173u8, 56u8, 36u8, 100u8,
							216u8, 43u8, 178u8, 202u8, 26u8, 136u8, 93u8, 84u8, 80u8, 134u8, 14u8,
							42u8, 248u8, 205u8, 68u8, 92u8, 79u8, 11u8, 113u8, 115u8, 157u8, 100u8,
						],
					)
				}
				///Close a vote that is either approved, disapproved, or whose voting period has
				/// ended.
				///
				///Must be called by a Fellow.
				pub fn close_old_weight(
					&self,
					proposal_hash: ::subxt::utils::H256,
					index: ::core::primitive::u32,
					proposal_weight_bound: runtime_types::sp_weights::OldWeight,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<CloseOldWeight> {
					::subxt::tx::Payload::new_static(
						"Alliance",
						"close_old_weight",
						CloseOldWeight {
							proposal_hash,
							index,
							proposal_weight_bound,
							length_bound,
						},
						[
							133u8, 219u8, 90u8, 40u8, 102u8, 95u8, 4u8, 199u8, 45u8, 234u8, 109u8,
							17u8, 162u8, 63u8, 102u8, 186u8, 95u8, 182u8, 13u8, 123u8, 227u8, 20u8,
							186u8, 207u8, 12u8, 47u8, 87u8, 252u8, 244u8, 172u8, 60u8, 206u8,
						],
					)
				}
				///Initialize the Alliance, onboard fellows and allies.
				///
				///The Alliance must be empty, and the call must provide some founding members.
				///
				///Must be called by the Root origin.
				pub fn init_members(
					&self,
					fellows: ::std::vec::Vec<::subxt::utils::AccountId32>,
					allies: ::std::vec::Vec<::subxt::utils::AccountId32>,
				) -> ::subxt::tx::Payload<InitMembers> {
					::subxt::tx::Payload::new_static(
						"Alliance",
						"init_members",
						InitMembers { fellows, allies },
						[
							182u8, 105u8, 49u8, 160u8, 26u8, 175u8, 215u8, 71u8, 58u8, 176u8, 86u8,
							29u8, 68u8, 186u8, 241u8, 47u8, 251u8, 136u8, 123u8, 151u8, 246u8,
							42u8, 232u8, 154u8, 210u8, 14u8, 165u8, 104u8, 163u8, 140u8, 196u8,
							164u8,
						],
					)
				}
				///Disband the Alliance, remove all active members and unreserve deposits.
				///
				///Witness data must be set.
				pub fn disband(
					&self,
					witness: runtime_types::pallet_alliance::types::DisbandWitness,
				) -> ::subxt::tx::Payload<Disband> {
					::subxt::tx::Payload::new_static(
						"Alliance",
						"disband",
						Disband { witness },
						[
							140u8, 243u8, 193u8, 235u8, 169u8, 181u8, 78u8, 54u8, 75u8, 109u8,
							70u8, 148u8, 49u8, 154u8, 225u8, 76u8, 65u8, 92u8, 149u8, 53u8, 62u8,
							106u8, 228u8, 172u8, 10u8, 189u8, 108u8, 144u8, 195u8, 6u8, 250u8,
							202u8,
						],
					)
				}
				///Set a new IPFS CID to the alliance rule.
				pub fn set_rule(
					&self,
					rule: runtime_types::pallet_alliance::types::Cid,
				) -> ::subxt::tx::Payload<SetRule> {
					::subxt::tx::Payload::new_static(
						"Alliance",
						"set_rule",
						SetRule { rule },
						[
							31u8, 78u8, 248u8, 0u8, 135u8, 28u8, 162u8, 57u8, 155u8, 173u8, 159u8,
							212u8, 213u8, 135u8, 191u8, 88u8, 161u8, 119u8, 122u8, 52u8, 190u8,
							214u8, 31u8, 10u8, 210u8, 231u8, 245u8, 248u8, 49u8, 60u8, 236u8, 67u8,
						],
					)
				}
				///Make an announcement of a new IPFS CID about alliance issues.
				pub fn announce(
					&self,
					announcement: runtime_types::pallet_alliance::types::Cid,
				) -> ::subxt::tx::Payload<Announce> {
					::subxt::tx::Payload::new_static(
						"Alliance",
						"announce",
						Announce { announcement },
						[
							197u8, 120u8, 117u8, 49u8, 53u8, 91u8, 207u8, 16u8, 31u8, 250u8, 85u8,
							0u8, 111u8, 24u8, 222u8, 255u8, 121u8, 191u8, 98u8, 85u8, 45u8, 237u8,
							106u8, 60u8, 142u8, 69u8, 125u8, 1u8, 128u8, 190u8, 99u8, 14u8,
						],
					)
				}
				///Remove an announcement.
				pub fn remove_announcement(
					&self,
					announcement: runtime_types::pallet_alliance::types::Cid,
				) -> ::subxt::tx::Payload<RemoveAnnouncement> {
					::subxt::tx::Payload::new_static(
						"Alliance",
						"remove_announcement",
						RemoveAnnouncement { announcement },
						[
							7u8, 152u8, 0u8, 165u8, 149u8, 198u8, 155u8, 138u8, 187u8, 125u8, 30u8,
							240u8, 229u8, 216u8, 215u8, 40u8, 150u8, 232u8, 76u8, 242u8, 98u8,
							11u8, 145u8, 165u8, 253u8, 6u8, 208u8, 136u8, 122u8, 122u8, 176u8,
							107u8,
						],
					)
				}
				///Submit oneself for candidacy. A fixed deposit is reserved.
				pub fn join_alliance(&self) -> ::subxt::tx::Payload<JoinAlliance> {
					::subxt::tx::Payload::new_static(
						"Alliance",
						"join_alliance",
						JoinAlliance {},
						[
							54u8, 110u8, 66u8, 7u8, 137u8, 10u8, 43u8, 147u8, 162u8, 126u8, 85u8,
							199u8, 167u8, 112u8, 27u8, 210u8, 42u8, 224u8, 29u8, 118u8, 67u8, 77u8,
							31u8, 133u8, 66u8, 24u8, 114u8, 185u8, 109u8, 159u8, 183u8, 157u8,
						],
					)
				}
				///A Fellow can nominate someone to join the alliance as an Ally. There is no
				/// deposit required from the nominator or nominee.
				pub fn nominate_ally(
					&self,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<NominateAlly> {
					::subxt::tx::Payload::new_static(
						"Alliance",
						"nominate_ally",
						NominateAlly { who },
						[
							60u8, 213u8, 72u8, 150u8, 238u8, 14u8, 199u8, 171u8, 147u8, 94u8,
							169u8, 243u8, 40u8, 238u8, 132u8, 118u8, 66u8, 122u8, 193u8, 195u8,
							237u8, 59u8, 82u8, 248u8, 8u8, 151u8, 188u8, 226u8, 167u8, 18u8, 228u8,
							105u8,
						],
					)
				}
				///Elevate an Ally to Fellow.
				pub fn elevate_ally(
					&self,
					ally: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<ElevateAlly> {
					::subxt::tx::Payload::new_static(
						"Alliance",
						"elevate_ally",
						ElevateAlly { ally },
						[
							235u8, 131u8, 98u8, 158u8, 30u8, 159u8, 195u8, 25u8, 41u8, 162u8, 10u8,
							148u8, 73u8, 210u8, 10u8, 190u8, 226u8, 109u8, 193u8, 218u8, 12u8,
							242u8, 172u8, 215u8, 56u8, 131u8, 31u8, 210u8, 215u8, 198u8, 81u8,
							74u8,
						],
					)
				}
				///As a member, give a retirement notice and start a retirement period required to
				/// pass in order to retire.
				pub fn give_retirement_notice(&self) -> ::subxt::tx::Payload<GiveRetirementNotice> {
					::subxt::tx::Payload::new_static(
						"Alliance",
						"give_retirement_notice",
						GiveRetirementNotice {},
						[
							179u8, 19u8, 191u8, 72u8, 65u8, 196u8, 142u8, 253u8, 35u8, 215u8,
							175u8, 47u8, 14u8, 238u8, 153u8, 157u8, 20u8, 44u8, 174u8, 91u8, 133u8,
							42u8, 48u8, 44u8, 116u8, 53u8, 27u8, 247u8, 198u8, 87u8, 50u8, 195u8,
						],
					)
				}
				///As a member, retire from the Alliance and unreserve the deposit.
				///
				///This can only be done once you have called `give_retirement_notice` and the
				///`RetirementPeriod` has passed.
				pub fn retire(&self) -> ::subxt::tx::Payload<Retire> {
					::subxt::tx::Payload::new_static(
						"Alliance",
						"retire",
						Retire {},
						[
							6u8, 231u8, 211u8, 120u8, 5u8, 242u8, 96u8, 98u8, 132u8, 36u8, 217u8,
							219u8, 22u8, 76u8, 196u8, 151u8, 140u8, 92u8, 186u8, 138u8, 76u8,
							219u8, 73u8, 242u8, 155u8, 169u8, 9u8, 184u8, 76u8, 23u8, 71u8, 116u8,
						],
					)
				}
				///Kick a member from the Alliance and slash its deposit.
				pub fn kick_member(
					&self,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<KickMember> {
					::subxt::tx::Payload::new_static(
						"Alliance",
						"kick_member",
						KickMember { who },
						[
							49u8, 234u8, 214u8, 238u8, 122u8, 243u8, 103u8, 51u8, 232u8, 73u8,
							207u8, 236u8, 126u8, 122u8, 60u8, 177u8, 130u8, 109u8, 68u8, 44u8,
							89u8, 46u8, 236u8, 226u8, 181u8, 200u8, 98u8, 183u8, 245u8, 227u8,
							27u8, 118u8,
						],
					)
				}
				///Add accounts or websites to the list of unscrupulous items.
				pub fn add_unscrupulous_items(
					&self,
					items: ::std::vec::Vec<
						runtime_types::pallet_alliance::UnscrupulousItem<
							::subxt::utils::AccountId32,
							runtime_types::bounded_collections::bounded_vec::BoundedVec<
								::core::primitive::u8,
							>,
						>,
					>,
				) -> ::subxt::tx::Payload<AddUnscrupulousItems> {
					::subxt::tx::Payload::new_static(
						"Alliance",
						"add_unscrupulous_items",
						AddUnscrupulousItems { items },
						[
							222u8, 68u8, 94u8, 39u8, 39u8, 0u8, 161u8, 99u8, 42u8, 25u8, 34u8,
							150u8, 225u8, 133u8, 240u8, 91u8, 127u8, 68u8, 188u8, 121u8, 126u8,
							130u8, 1u8, 147u8, 73u8, 114u8, 34u8, 88u8, 39u8, 97u8, 158u8, 197u8,
						],
					)
				}
				///Deem some items no longer unscrupulous.
				pub fn remove_unscrupulous_items(
					&self,
					items: ::std::vec::Vec<
						runtime_types::pallet_alliance::UnscrupulousItem<
							::subxt::utils::AccountId32,
							runtime_types::bounded_collections::bounded_vec::BoundedVec<
								::core::primitive::u8,
							>,
						>,
					>,
				) -> ::subxt::tx::Payload<RemoveUnscrupulousItems> {
					::subxt::tx::Payload::new_static(
						"Alliance",
						"remove_unscrupulous_items",
						RemoveUnscrupulousItems { items },
						[
							231u8, 184u8, 191u8, 126u8, 10u8, 183u8, 103u8, 127u8, 145u8, 98u8,
							57u8, 176u8, 124u8, 161u8, 129u8, 66u8, 100u8, 100u8, 154u8, 155u8,
							206u8, 42u8, 180u8, 62u8, 240u8, 33u8, 53u8, 251u8, 46u8, 203u8, 42u8,
							234u8,
						],
					)
				}
				///Close a vote that is either approved, disapproved, or whose voting period has
				/// ended.
				///
				///Must be called by a Fellow.
				pub fn close(
					&self,
					proposal_hash: ::subxt::utils::H256,
					index: ::core::primitive::u32,
					proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
					length_bound: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Close> {
					::subxt::tx::Payload::new_static(
						"Alliance",
						"close",
						Close { proposal_hash, index, proposal_weight_bound, length_bound },
						[
							191u8, 138u8, 89u8, 247u8, 97u8, 51u8, 45u8, 193u8, 76u8, 16u8, 80u8,
							225u8, 197u8, 83u8, 204u8, 133u8, 169u8, 16u8, 86u8, 32u8, 125u8, 16u8,
							116u8, 185u8, 45u8, 20u8, 76u8, 148u8, 206u8, 163u8, 154u8, 30u8,
						],
					)
				}
				///Abdicate one's position as a voting member and just be an Ally. May be used by
				/// Fellows who do not want to leave the Alliance but do not have the capacity to
				/// participate operationally for some time.
				pub fn abdicate_fellow_status(&self) -> ::subxt::tx::Payload<AbdicateFellowStatus> {
					::subxt::tx::Payload::new_static(
						"Alliance",
						"abdicate_fellow_status",
						AbdicateFellowStatus {},
						[
							32u8, 251u8, 224u8, 133u8, 152u8, 60u8, 139u8, 40u8, 253u8, 116u8,
							170u8, 79u8, 149u8, 89u8, 27u8, 203u8, 160u8, 75u8, 81u8, 144u8, 9u8,
							98u8, 139u8, 215u8, 253u8, 193u8, 211u8, 93u8, 208u8, 143u8, 41u8,
							175u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_alliance::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A new rule has been set.
			pub struct NewRuleSet {
				pub rule: runtime_types::pallet_alliance::types::Cid,
			}
			impl ::subxt::events::StaticEvent for NewRuleSet {
				const PALLET: &'static str = "Alliance";
				const EVENT: &'static str = "NewRuleSet";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A new announcement has been proposed.
			pub struct Announced {
				pub announcement: runtime_types::pallet_alliance::types::Cid,
			}
			impl ::subxt::events::StaticEvent for Announced {
				const PALLET: &'static str = "Alliance";
				const EVENT: &'static str = "Announced";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An on-chain announcement has been removed.
			pub struct AnnouncementRemoved {
				pub announcement: runtime_types::pallet_alliance::types::Cid,
			}
			impl ::subxt::events::StaticEvent for AnnouncementRemoved {
				const PALLET: &'static str = "Alliance";
				const EVENT: &'static str = "AnnouncementRemoved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Some accounts have been initialized as members (fellows/allies).
			pub struct MembersInitialized {
				pub fellows: ::std::vec::Vec<::subxt::utils::AccountId32>,
				pub allies: ::std::vec::Vec<::subxt::utils::AccountId32>,
			}
			impl ::subxt::events::StaticEvent for MembersInitialized {
				const PALLET: &'static str = "Alliance";
				const EVENT: &'static str = "MembersInitialized";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An account has been added as an Ally and reserved its deposit.
			pub struct NewAllyJoined {
				pub ally: ::subxt::utils::AccountId32,
				pub nominator: ::core::option::Option<::subxt::utils::AccountId32>,
				pub reserved: ::core::option::Option<::core::primitive::u128>,
			}
			impl ::subxt::events::StaticEvent for NewAllyJoined {
				const PALLET: &'static str = "Alliance";
				const EVENT: &'static str = "NewAllyJoined";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An ally has been elevated to Fellow.
			pub struct AllyElevated {
				pub ally: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for AllyElevated {
				const PALLET: &'static str = "Alliance";
				const EVENT: &'static str = "AllyElevated";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A member gave retirement notice and their retirement period started.
			pub struct MemberRetirementPeriodStarted {
				pub member: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for MemberRetirementPeriodStarted {
				const PALLET: &'static str = "Alliance";
				const EVENT: &'static str = "MemberRetirementPeriodStarted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A member has retired with its deposit unreserved.
			pub struct MemberRetired {
				pub member: ::subxt::utils::AccountId32,
				pub unreserved: ::core::option::Option<::core::primitive::u128>,
			}
			impl ::subxt::events::StaticEvent for MemberRetired {
				const PALLET: &'static str = "Alliance";
				const EVENT: &'static str = "MemberRetired";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A member has been kicked out with its deposit slashed.
			pub struct MemberKicked {
				pub member: ::subxt::utils::AccountId32,
				pub slashed: ::core::option::Option<::core::primitive::u128>,
			}
			impl ::subxt::events::StaticEvent for MemberKicked {
				const PALLET: &'static str = "Alliance";
				const EVENT: &'static str = "MemberKicked";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Accounts or websites have been added into the list of unscrupulous items.
			pub struct UnscrupulousItemAdded {
				pub items: ::std::vec::Vec<
					runtime_types::pallet_alliance::UnscrupulousItem<
						::subxt::utils::AccountId32,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					>,
				>,
			}
			impl ::subxt::events::StaticEvent for UnscrupulousItemAdded {
				const PALLET: &'static str = "Alliance";
				const EVENT: &'static str = "UnscrupulousItemAdded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Accounts or websites have been removed from the list of unscrupulous items.
			pub struct UnscrupulousItemRemoved {
				pub items: ::std::vec::Vec<
					runtime_types::pallet_alliance::UnscrupulousItem<
						::subxt::utils::AccountId32,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					>,
				>,
			}
			impl ::subxt::events::StaticEvent for UnscrupulousItemRemoved {
				const PALLET: &'static str = "Alliance";
				const EVENT: &'static str = "UnscrupulousItemRemoved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Alliance disbanded. Includes number deleted members and unreserved deposits.
			pub struct AllianceDisbanded {
				pub fellow_members: ::core::primitive::u32,
				pub ally_members: ::core::primitive::u32,
				pub unreserved: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for AllianceDisbanded {
				const PALLET: &'static str = "Alliance";
				const EVENT: &'static str = "AllianceDisbanded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A Fellow abdicated their voting rights. They are now an Ally.
			pub struct FellowAbdicated {
				pub fellow: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for FellowAbdicated {
				const PALLET: &'static str = "Alliance";
				const EVENT: &'static str = "FellowAbdicated";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The IPFS CID of the alliance rule.
				/// Fellows can propose a new rule with a super-majority.
				pub fn rule(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_alliance::types::Cid,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Alliance",
						"Rule",
						vec![],
						[
							132u8, 179u8, 91u8, 202u8, 26u8, 39u8, 178u8, 5u8, 221u8, 59u8, 148u8,
							116u8, 113u8, 55u8, 88u8, 104u8, 208u8, 165u8, 100u8, 78u8, 123u8,
							208u8, 191u8, 217u8, 36u8, 33u8, 103u8, 11u8, 5u8, 161u8, 207u8, 170u8,
						],
					)
				}
				/// The current IPFS CIDs of any announcements.
				pub fn announcements(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_alliance::types::Cid,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Alliance",
						"Announcements",
						vec![],
						[
							217u8, 117u8, 75u8, 244u8, 196u8, 60u8, 185u8, 248u8, 13u8, 121u8,
							132u8, 36u8, 112u8, 233u8, 210u8, 170u8, 4u8, 247u8, 109u8, 226u8,
							211u8, 37u8, 117u8, 15u8, 214u8, 7u8, 100u8, 0u8, 15u8, 0u8, 179u8,
							96u8,
						],
					)
				}
				/// Maps members to their candidacy deposit.
				pub fn deposit_of(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Alliance",
						"DepositOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							144u8, 38u8, 94u8, 133u8, 11u8, 36u8, 151u8, 247u8, 63u8, 168u8, 80u8,
							116u8, 39u8, 78u8, 240u8, 0u8, 11u8, 182u8, 118u8, 208u8, 224u8, 184u8,
							116u8, 51u8, 166u8, 133u8, 227u8, 246u8, 92u8, 146u8, 175u8, 65u8,
						],
					)
				}
				/// Maps members to their candidacy deposit.
				pub fn deposit_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Alliance",
						"DepositOf",
						Vec::new(),
						[
							144u8, 38u8, 94u8, 133u8, 11u8, 36u8, 151u8, 247u8, 63u8, 168u8, 80u8,
							116u8, 39u8, 78u8, 240u8, 0u8, 11u8, 182u8, 118u8, 208u8, 224u8, 184u8,
							116u8, 51u8, 166u8, 133u8, 227u8, 246u8, 92u8, 146u8, 175u8, 65u8,
						],
					)
				}
				/// Maps member type to members of each type.
				pub fn members(
					&self,
					_0: impl ::std::borrow::Borrow<runtime_types::pallet_alliance::MemberRole>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::subxt::utils::AccountId32,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Alliance",
						"Members",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							238u8, 61u8, 156u8, 136u8, 196u8, 188u8, 124u8, 182u8, 195u8, 205u8,
							210u8, 204u8, 73u8, 227u8, 32u8, 127u8, 124u8, 181u8, 105u8, 59u8,
							164u8, 180u8, 186u8, 222u8, 20u8, 129u8, 133u8, 95u8, 87u8, 246u8,
							155u8, 144u8,
						],
					)
				}
				/// Maps member type to members of each type.
				pub fn members_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::subxt::utils::AccountId32,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Alliance",
						"Members",
						Vec::new(),
						[
							238u8, 61u8, 156u8, 136u8, 196u8, 188u8, 124u8, 182u8, 195u8, 205u8,
							210u8, 204u8, 73u8, 227u8, 32u8, 127u8, 124u8, 181u8, 105u8, 59u8,
							164u8, 180u8, 186u8, 222u8, 20u8, 129u8, 133u8, 95u8, 87u8, 246u8,
							155u8, 144u8,
						],
					)
				}
				/// A set of members who gave a retirement notice. They can retire after the end of
				/// retirement period stored as a future block number.
				pub fn retiring_members(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Alliance",
						"RetiringMembers",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							195u8, 185u8, 238u8, 11u8, 200u8, 34u8, 221u8, 178u8, 171u8, 139u8,
							211u8, 27u8, 109u8, 173u8, 203u8, 218u8, 147u8, 40u8, 29u8, 226u8,
							65u8, 77u8, 199u8, 81u8, 153u8, 145u8, 97u8, 229u8, 54u8, 242u8, 12u8,
							187u8,
						],
					)
				}
				/// A set of members who gave a retirement notice. They can retire after the end of
				/// retirement period stored as a future block number.
				pub fn retiring_members_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Alliance",
						"RetiringMembers",
						Vec::new(),
						[
							195u8, 185u8, 238u8, 11u8, 200u8, 34u8, 221u8, 178u8, 171u8, 139u8,
							211u8, 27u8, 109u8, 173u8, 203u8, 218u8, 147u8, 40u8, 29u8, 226u8,
							65u8, 77u8, 199u8, 81u8, 153u8, 145u8, 97u8, 229u8, 54u8, 242u8, 12u8,
							187u8,
						],
					)
				}
				/// The current list of accounts deemed unscrupulous. These accounts non grata
				/// cannot submit candidacy.
				pub fn unscrupulous_accounts(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::subxt::utils::AccountId32,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Alliance",
						"UnscrupulousAccounts",
						vec![],
						[
							5u8, 149u8, 47u8, 164u8, 130u8, 46u8, 136u8, 88u8, 153u8, 77u8, 176u8,
							127u8, 165u8, 163u8, 40u8, 117u8, 137u8, 67u8, 72u8, 4u8, 151u8, 209u8,
							172u8, 20u8, 64u8, 162u8, 48u8, 199u8, 224u8, 85u8, 157u8, 44u8,
						],
					)
				}
				/// The current list of websites deemed unscrupulous.
				pub fn unscrupulous_websites(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Alliance",
						"UnscrupulousWebsites",
						vec![],
						[
							231u8, 15u8, 27u8, 215u8, 117u8, 150u8, 199u8, 19u8, 209u8, 43u8,
							144u8, 212u8, 160u8, 32u8, 195u8, 26u8, 128u8, 3u8, 151u8, 53u8, 230u8,
							102u8, 44u8, 42u8, 205u8, 68u8, 175u8, 206u8, 239u8, 236u8, 68u8,
							160u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The maximum number of the unscrupulous items supported by the pallet.
				pub fn max_unscrupulous_items(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Alliance",
						"MaxUnscrupulousItems",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum length of a website URL.
				pub fn max_website_url_length(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Alliance",
						"MaxWebsiteUrlLength",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The deposit required for submitting candidacy.
				pub fn ally_deposit(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"Alliance",
						"AllyDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// The maximum number of announcements.
				pub fn max_announcements_count(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Alliance",
						"MaxAnnouncementsCount",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum number of members per member role.
				pub fn max_members_count(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"Alliance",
						"MaxMembersCount",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod nomination_pools {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Join {
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
				pub pool_id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct BondExtra {
				pub extra:
					runtime_types::pallet_nomination_pools::BondExtra<::core::primitive::u128>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClaimPayout;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Unbond {
				pub member_account: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				#[codec(compact)]
				pub unbonding_points: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct PoolWithdrawUnbonded {
				pub pool_id: ::core::primitive::u32,
				pub num_slashing_spans: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct WithdrawUnbonded {
				pub member_account: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub num_slashing_spans: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Create {
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
				pub root: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub nominator: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub bouncer: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CreateWithPoolId {
				#[codec(compact)]
				pub amount: ::core::primitive::u128,
				pub root: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub nominator: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub bouncer: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub pool_id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Nominate {
				pub pool_id: ::core::primitive::u32,
				pub validators: ::std::vec::Vec<::subxt::utils::AccountId32>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetState {
				pub pool_id: ::core::primitive::u32,
				pub state: runtime_types::pallet_nomination_pools::PoolState,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetMetadata {
				pub pool_id: ::core::primitive::u32,
				pub metadata: ::std::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetConfigs {
				pub min_join_bond:
					runtime_types::pallet_nomination_pools::ConfigOp<::core::primitive::u128>,
				pub min_create_bond:
					runtime_types::pallet_nomination_pools::ConfigOp<::core::primitive::u128>,
				pub max_pools:
					runtime_types::pallet_nomination_pools::ConfigOp<::core::primitive::u32>,
				pub max_members:
					runtime_types::pallet_nomination_pools::ConfigOp<::core::primitive::u32>,
				pub max_members_per_pool:
					runtime_types::pallet_nomination_pools::ConfigOp<::core::primitive::u32>,
				pub global_max_commission: runtime_types::pallet_nomination_pools::ConfigOp<
					runtime_types::sp_arithmetic::per_things::Perbill,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct UpdateRoles {
				pub pool_id: ::core::primitive::u32,
				pub new_root:
					runtime_types::pallet_nomination_pools::ConfigOp<::subxt::utils::AccountId32>,
				pub new_nominator:
					runtime_types::pallet_nomination_pools::ConfigOp<::subxt::utils::AccountId32>,
				pub new_bouncer:
					runtime_types::pallet_nomination_pools::ConfigOp<::subxt::utils::AccountId32>,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Chill {
				pub pool_id: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct BondExtraOther {
				pub member: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub extra:
					runtime_types::pallet_nomination_pools::BondExtra<::core::primitive::u128>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetClaimPermission {
				pub permission: runtime_types::pallet_nomination_pools::ClaimPermission,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClaimPayoutOther {
				pub other: ::subxt::utils::AccountId32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetCommission {
				pub pool_id: ::core::primitive::u32,
				pub new_commission: ::core::option::Option<(
					runtime_types::sp_arithmetic::per_things::Perbill,
					::subxt::utils::AccountId32,
				)>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetCommissionMax {
				pub pool_id: ::core::primitive::u32,
				pub max_commission: runtime_types::sp_arithmetic::per_things::Perbill,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetCommissionChangeRate {
				pub pool_id: ::core::primitive::u32,
				pub change_rate: runtime_types::pallet_nomination_pools::CommissionChangeRate<
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClaimCommission {
				pub pool_id: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Stake funds with a pool. The amount to bond is transferred from the member to
				/// the pools account and immediately increases the pools bond.
				///
				///# Note
				///
				/// * An account can only be a member of a single pool.
				/// * An account cannot join the same pool multiple times.
				/// * This call will *not* dust the member account, so the member must have at least
				///  `existential deposit + amount` in their account.
				/// * Only a pool with [`PoolState::Open`] can be joined
				pub fn join(
					&self,
					amount: ::core::primitive::u128,
					pool_id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Join> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"join",
						Join { amount, pool_id },
						[
							205u8, 66u8, 42u8, 72u8, 146u8, 148u8, 119u8, 162u8, 101u8, 183u8,
							46u8, 176u8, 221u8, 204u8, 197u8, 20u8, 75u8, 226u8, 29u8, 118u8,
							208u8, 60u8, 192u8, 247u8, 222u8, 100u8, 69u8, 80u8, 172u8, 13u8, 69u8,
							250u8,
						],
					)
				}
				///Bond `extra` more funds from `origin` into the pool to which they already
				/// belong.
				///
				///Additional funds can come from either the free balance of the account, of from
				/// the accumulated rewards, see [`BondExtra`].
				///
				///Bonding extra funds implies an automatic payout of all pending rewards as well.
				///See `bond_extra_other` to bond pending rewards of `other` members.
				pub fn bond_extra(
					&self,
					extra: runtime_types::pallet_nomination_pools::BondExtra<
						::core::primitive::u128,
					>,
				) -> ::subxt::tx::Payload<BondExtra> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"bond_extra",
						BondExtra { extra },
						[
							50u8, 72u8, 181u8, 216u8, 249u8, 27u8, 250u8, 177u8, 253u8, 22u8,
							240u8, 100u8, 184u8, 202u8, 197u8, 34u8, 21u8, 188u8, 248u8, 191u8,
							11u8, 10u8, 236u8, 161u8, 168u8, 37u8, 38u8, 238u8, 61u8, 183u8, 86u8,
							55u8,
						],
					)
				}
				///A bonded member can use this to claim their payout based on the rewards that the
				/// pool has accumulated since their last claimed payout (OR since joining if this
				/// is their first time claiming rewards). The payout will be transferred to the
				/// member's account.
				///
				///The member will earn rewards pro rata based on the members stake vs the sum of
				/// the members in the pools stake. Rewards do not "expire".
				///
				///See `claim_payout_other` to caim rewards on bahalf of some `other` pool member.
				pub fn claim_payout(&self) -> ::subxt::tx::Payload<ClaimPayout> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"claim_payout",
						ClaimPayout {},
						[
							128u8, 58u8, 138u8, 55u8, 64u8, 16u8, 129u8, 25u8, 211u8, 229u8, 193u8,
							115u8, 47u8, 45u8, 155u8, 221u8, 218u8, 1u8, 222u8, 5u8, 236u8, 32u8,
							88u8, 0u8, 198u8, 72u8, 196u8, 181u8, 104u8, 16u8, 212u8, 29u8,
						],
					)
				}
				///Unbond up to `unbonding_points` of the `member_account`'s funds from the pool.
				/// It implicitly collects the rewards one last time, since not doing so would mean
				/// some rewards would be forfeited.
				///
				///Under certain conditions, this call can be dispatched permissionlessly (i.e. by
				/// any account).
				///
				///# Conditions for a permissionless dispatch.
				///
				/// * The pool is blocked and the caller is either the root or bouncer. This is
				///   refereed to
				///  as a kick.
				/// * The pool is destroying and the member is not the depositor.
				/// * The pool is destroying, the member is the depositor and no other members are
				///   in the
				///  pool.
				///
				///## Conditions for permissioned dispatch (i.e. the caller is also the
				///`member_account`):
				///
				/// * The caller is not the depositor.
				/// * The caller is the depositor, the pool is destroying and no other members are
				///   in the
				///  pool.
				///
				///# Note
				///
				///If there are too many unlocking chunks to unbond with the pool account,
				///[`Call::pool_withdraw_unbonded`] can be called to try and minimize unlocking
				/// chunks. The [`StakingInterface::unbond`] will implicitly call
				/// [`Call::pool_withdraw_unbonded`] to try to free chunks if necessary (ie. if
				/// unbound was called and no unlocking chunks are available). However, it may not
				/// be possible to release the current unlocking chunks, in which case, the result
				/// of this call will likely be the `NoMoreChunks` error from the staking system.
				pub fn unbond(
					&self,
					member_account: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					unbonding_points: ::core::primitive::u128,
				) -> ::subxt::tx::Payload<Unbond> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"unbond",
						Unbond { member_account, unbonding_points },
						[
							139u8, 71u8, 78u8, 184u8, 141u8, 89u8, 179u8, 123u8, 153u8, 30u8,
							116u8, 186u8, 148u8, 49u8, 48u8, 98u8, 33u8, 21u8, 29u8, 106u8, 180u8,
							212u8, 37u8, 251u8, 237u8, 21u8, 255u8, 13u8, 236u8, 73u8, 250u8, 57u8,
						],
					)
				}
				///Call `withdraw_unbonded` for the pools account. This call can be made by any
				/// account.
				///
				///This is useful if their are too many unlocking chunks to call `unbond`, and some
				///can be cleared by withdrawing. In the case there are too many unlocking chunks,
				/// the user would probably see an error like `NoMoreChunks` emitted from the
				/// staking system when they attempt to unbond.
				pub fn pool_withdraw_unbonded(
					&self,
					pool_id: ::core::primitive::u32,
					num_slashing_spans: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<PoolWithdrawUnbonded> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"pool_withdraw_unbonded",
						PoolWithdrawUnbonded { pool_id, num_slashing_spans },
						[
							152u8, 245u8, 131u8, 247u8, 106u8, 214u8, 154u8, 8u8, 7u8, 210u8,
							149u8, 218u8, 118u8, 46u8, 242u8, 182u8, 191u8, 119u8, 28u8, 199u8,
							36u8, 49u8, 219u8, 123u8, 58u8, 203u8, 211u8, 226u8, 217u8, 36u8, 56u8,
							0u8,
						],
					)
				}
				///Withdraw unbonded funds from `member_account`. If no bonded funds can be
				/// unbonded, an error is returned.
				///
				///Under certain conditions, this call can be dispatched permissionlessly (i.e. by
				/// any account).
				///
				///# Conditions for a permissionless dispatch
				///
				/// * The pool is in destroy mode and the target is not the depositor.
				/// * The target is the depositor and they are the only member in the sub pools.
				/// * The pool is blocked and the caller is either the root or bouncer.
				///
				///# Conditions for permissioned dispatch
				///
				/// * The caller is the target and they are not the depositor.
				///
				///# Note
				///
				///If the target is the depositor, the pool will be destroyed.
				pub fn withdraw_unbonded(
					&self,
					member_account: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					num_slashing_spans: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<WithdrawUnbonded> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"withdraw_unbonded",
						WithdrawUnbonded { member_account, num_slashing_spans },
						[
							192u8, 183u8, 121u8, 87u8, 176u8, 70u8, 91u8, 226u8, 156u8, 79u8, 87u8,
							34u8, 227u8, 84u8, 22u8, 235u8, 3u8, 181u8, 166u8, 194u8, 147u8, 72u8,
							27u8, 221u8, 57u8, 14u8, 44u8, 70u8, 253u8, 236u8, 44u8, 84u8,
						],
					)
				}
				///Create a new delegation pool.
				///
				///# Arguments
				///
				/// * `amount` - The amount of funds to delegate to the pool. This also acts of a
				///   sort of
				///  deposit since the pools creator cannot fully unbond funds until the pool is
				/// being  destroyed.
				/// * `index` - A disambiguation index for creating the account. Likely only useful
				///   when
				///  creating multiple pools in the same extrinsic.
				/// * `root` - The account to set as [`PoolRoles::root`].
				/// * `nominator` - The account to set as the [`PoolRoles::nominator`].
				/// * `bouncer` - The account to set as the [`PoolRoles::bouncer`].
				///
				///# Note
				///
				///In addition to `amount`, the caller will transfer the existential deposit; so
				/// the caller needs at have at least `amount + existential_deposit` transferrable.
				pub fn create(
					&self,
					amount: ::core::primitive::u128,
					root: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					nominator: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					bouncer: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<Create> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"create",
						Create { amount, root, nominator, bouncer },
						[
							19u8, 83u8, 115u8, 108u8, 192u8, 96u8, 44u8, 77u8, 251u8, 152u8, 61u8,
							103u8, 209u8, 17u8, 84u8, 245u8, 153u8, 174u8, 124u8, 92u8, 236u8,
							72u8, 225u8, 73u8, 89u8, 236u8, 174u8, 180u8, 60u8, 140u8, 198u8, 59u8,
						],
					)
				}
				///Create a new delegation pool with a previously used pool id
				///
				///# Arguments
				///
				///same as `create` with the inclusion of
				/// * `pool_id` - `A valid PoolId.
				pub fn create_with_pool_id(
					&self,
					amount: ::core::primitive::u128,
					root: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					nominator: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					bouncer: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					pool_id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<CreateWithPoolId> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"create_with_pool_id",
						CreateWithPoolId { amount, root, nominator, bouncer, pool_id },
						[
							81u8, 185u8, 201u8, 99u8, 26u8, 96u8, 149u8, 43u8, 181u8, 3u8, 149u8,
							110u8, 158u8, 178u8, 138u8, 205u8, 79u8, 251u8, 86u8, 18u8, 128u8,
							117u8, 66u8, 220u8, 222u8, 238u8, 122u8, 177u8, 63u8, 117u8, 104u8,
							54u8,
						],
					)
				}
				///Nominate on behalf of the pool.
				///
				///The dispatch origin of this call must be signed by the pool nominator or the
				/// pool root role.
				///
				///This directly forward the call to the staking pallet, on behalf of the pool
				/// bonded account.
				pub fn nominate(
					&self,
					pool_id: ::core::primitive::u32,
					validators: ::std::vec::Vec<::subxt::utils::AccountId32>,
				) -> ::subxt::tx::Payload<Nominate> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"nominate",
						Nominate { pool_id, validators },
						[
							10u8, 235u8, 64u8, 157u8, 36u8, 249u8, 186u8, 27u8, 79u8, 172u8, 25u8,
							3u8, 203u8, 19u8, 192u8, 182u8, 36u8, 103u8, 13u8, 20u8, 89u8, 140u8,
							159u8, 4u8, 132u8, 242u8, 192u8, 146u8, 55u8, 251u8, 216u8, 255u8,
						],
					)
				}
				///Set a new state for the pool.
				///
				///If a pool is already in the `Destroying` state, then under no condition can its
				/// state change again.
				///
				///The dispatch origin of this call must be either:
				///
				///1. signed by the bouncer, or the root role of the pool,
				///2. if the pool conditions to be open are NOT met (as described by
				/// `ok_to_be_open`), and   then the state of the pool can be permissionlessly
				/// changed to `Destroying`.
				pub fn set_state(
					&self,
					pool_id: ::core::primitive::u32,
					state: runtime_types::pallet_nomination_pools::PoolState,
				) -> ::subxt::tx::Payload<SetState> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"set_state",
						SetState { pool_id, state },
						[
							104u8, 40u8, 213u8, 88u8, 159u8, 115u8, 35u8, 249u8, 78u8, 180u8, 99u8,
							1u8, 225u8, 218u8, 192u8, 151u8, 25u8, 194u8, 192u8, 187u8, 39u8,
							170u8, 212u8, 125u8, 75u8, 250u8, 248u8, 175u8, 159u8, 161u8, 151u8,
							162u8,
						],
					)
				}
				///Set a new metadata for the pool.
				///
				///The dispatch origin of this call must be signed by the bouncer, or the root role
				/// of the pool.
				pub fn set_metadata(
					&self,
					pool_id: ::core::primitive::u32,
					metadata: ::std::vec::Vec<::core::primitive::u8>,
				) -> ::subxt::tx::Payload<SetMetadata> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"set_metadata",
						SetMetadata { pool_id, metadata },
						[
							156u8, 81u8, 170u8, 161u8, 34u8, 100u8, 183u8, 174u8, 5u8, 81u8, 31u8,
							76u8, 12u8, 42u8, 77u8, 1u8, 6u8, 26u8, 168u8, 7u8, 8u8, 115u8, 158u8,
							151u8, 30u8, 211u8, 52u8, 177u8, 234u8, 87u8, 125u8, 127u8,
						],
					)
				}
				///Update configurations for the nomination pools. The origin for this call must be
				///Root.
				///
				///# Arguments
				///
				/// * `min_join_bond` - Set [`MinJoinBond`].
				/// * `min_create_bond` - Set [`MinCreateBond`].
				/// * `max_pools` - Set [`MaxPools`].
				/// * `max_members` - Set [`MaxPoolMembers`].
				/// * `max_members_per_pool` - Set [`MaxPoolMembersPerPool`].
				/// * `global_max_commission` - Set [`GlobalMaxCommission`].
				pub fn set_configs(
					&self,
					min_join_bond: runtime_types::pallet_nomination_pools::ConfigOp<
						::core::primitive::u128,
					>,
					min_create_bond: runtime_types::pallet_nomination_pools::ConfigOp<
						::core::primitive::u128,
					>,
					max_pools: runtime_types::pallet_nomination_pools::ConfigOp<
						::core::primitive::u32,
					>,
					max_members: runtime_types::pallet_nomination_pools::ConfigOp<
						::core::primitive::u32,
					>,
					max_members_per_pool: runtime_types::pallet_nomination_pools::ConfigOp<
						::core::primitive::u32,
					>,
					global_max_commission: runtime_types::pallet_nomination_pools::ConfigOp<
						runtime_types::sp_arithmetic::per_things::Perbill,
					>,
				) -> ::subxt::tx::Payload<SetConfigs> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"set_configs",
						SetConfigs {
							min_join_bond,
							min_create_bond,
							max_pools,
							max_members,
							max_members_per_pool,
							global_max_commission,
						},
						[
							20u8, 66u8, 112u8, 172u8, 143u8, 78u8, 60u8, 159u8, 240u8, 102u8,
							245u8, 10u8, 207u8, 27u8, 99u8, 138u8, 217u8, 239u8, 101u8, 190u8,
							222u8, 253u8, 53u8, 77u8, 230u8, 225u8, 101u8, 109u8, 50u8, 144u8,
							31u8, 121u8,
						],
					)
				}
				///Update the roles of the pool.
				///
				///The root is the only entity that can change any of the roles, including itself,
				///excluding the depositor, who can never change.
				///
				///It emits an event, notifying UIs of the role change. This event is quite
				/// relevant to most pool members and they should be informed of changes to pool
				/// roles.
				pub fn update_roles(
					&self,
					pool_id: ::core::primitive::u32,
					new_root: runtime_types::pallet_nomination_pools::ConfigOp<
						::subxt::utils::AccountId32,
					>,
					new_nominator: runtime_types::pallet_nomination_pools::ConfigOp<
						::subxt::utils::AccountId32,
					>,
					new_bouncer: runtime_types::pallet_nomination_pools::ConfigOp<
						::subxt::utils::AccountId32,
					>,
				) -> ::subxt::tx::Payload<UpdateRoles> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"update_roles",
						UpdateRoles { pool_id, new_root, new_nominator, new_bouncer },
						[
							15u8, 154u8, 204u8, 28u8, 204u8, 120u8, 174u8, 203u8, 186u8, 33u8,
							123u8, 201u8, 143u8, 120u8, 193u8, 49u8, 164u8, 178u8, 55u8, 234u8,
							126u8, 247u8, 123u8, 73u8, 147u8, 107u8, 43u8, 72u8, 217u8, 4u8, 199u8,
							253u8,
						],
					)
				}
				///Chill on behalf of the pool.
				///
				///The dispatch origin of this call must be signed by the pool nominator or the
				/// pool root role, same as [`Pallet::nominate`].
				///
				///This directly forward the call to the staking pallet, on behalf of the pool
				/// bonded account.
				pub fn chill(
					&self,
					pool_id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Chill> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"chill",
						Chill { pool_id },
						[
							41u8, 114u8, 128u8, 121u8, 244u8, 15u8, 15u8, 52u8, 129u8, 88u8, 239u8,
							167u8, 216u8, 38u8, 123u8, 240u8, 172u8, 229u8, 132u8, 64u8, 175u8,
							87u8, 217u8, 27u8, 11u8, 124u8, 1u8, 140u8, 40u8, 191u8, 187u8, 36u8,
						],
					)
				}
				///`origin` bonds funds from `extra` for some pool member `member` into their
				/// respective pools.
				///
				///`origin` can bond extra funds from free balance or pending rewards when `origin
				/// == other`.
				///
				///In the case of `origin != other`, `origin` can only bond extra pending rewards
				/// of `other` members assuming set_claim_permission for the given member is
				///`PermissionlessAll` or `PermissionlessCompound`.
				pub fn bond_extra_other(
					&self,
					member: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					extra: runtime_types::pallet_nomination_pools::BondExtra<
						::core::primitive::u128,
					>,
				) -> ::subxt::tx::Payload<BondExtraOther> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"bond_extra_other",
						BondExtraOther { member, extra },
						[
							1u8, 73u8, 186u8, 39u8, 247u8, 130u8, 155u8, 185u8, 212u8, 110u8,
							151u8, 12u8, 18u8, 195u8, 106u8, 28u8, 194u8, 130u8, 54u8, 59u8, 184u8,
							192u8, 141u8, 227u8, 102u8, 210u8, 76u8, 41u8, 196u8, 90u8, 215u8,
							84u8,
						],
					)
				}
				///Allows a pool member to set a claim permission to allow or disallow
				/// permissionless bonding and withdrawing.
				///
				///By default, this is `Permissioned`, which implies only the pool member
				/// themselves can claim their pending rewards. If a pool member wishes so, they can
				/// set this to `PermissionlessAll` to allow any account to claim their rewards and
				/// bond extra to the pool.
				///
				///# Arguments
				///
				/// * `origin` - Member of a pool.
				/// * `actor` - Account to claim reward. // improve this
				pub fn set_claim_permission(
					&self,
					permission: runtime_types::pallet_nomination_pools::ClaimPermission,
				) -> ::subxt::tx::Payload<SetClaimPermission> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"set_claim_permission",
						SetClaimPermission { permission },
						[
							23u8, 253u8, 135u8, 53u8, 83u8, 71u8, 182u8, 223u8, 123u8, 57u8, 93u8,
							154u8, 110u8, 91u8, 63u8, 241u8, 144u8, 218u8, 129u8, 238u8, 169u8,
							9u8, 215u8, 76u8, 65u8, 168u8, 103u8, 44u8, 40u8, 39u8, 34u8, 16u8,
						],
					)
				}
				///`origin` can claim payouts on some pool member `other`'s behalf.
				///
				///Pool member `other` must have a `PermissionlessAll` or `PermissionlessWithdraw`
				/// in order for this call to be successful.
				pub fn claim_payout_other(
					&self,
					other: ::subxt::utils::AccountId32,
				) -> ::subxt::tx::Payload<ClaimPayoutOther> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"claim_payout_other",
						ClaimPayoutOther { other },
						[
							52u8, 165u8, 191u8, 125u8, 180u8, 54u8, 27u8, 235u8, 195u8, 22u8, 55u8,
							183u8, 209u8, 63u8, 116u8, 88u8, 154u8, 74u8, 100u8, 103u8, 88u8, 76u8,
							35u8, 14u8, 39u8, 156u8, 219u8, 253u8, 123u8, 104u8, 168u8, 76u8,
						],
					)
				}
				///Set the commission of a pool.
				///Both a commission percentage and a commission payee must be provided in the
				/// `current` tuple. Where a `current` of `None` is provided, any current commission
				/// will be removed.
				///
				/// - If a `None` is supplied to `new_commission`, existing commission will be
				///   removed.
				pub fn set_commission(
					&self,
					pool_id: ::core::primitive::u32,
					new_commission: ::core::option::Option<(
						runtime_types::sp_arithmetic::per_things::Perbill,
						::subxt::utils::AccountId32,
					)>,
				) -> ::subxt::tx::Payload<SetCommission> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"set_commission",
						SetCommission { pool_id, new_commission },
						[
							118u8, 240u8, 166u8, 40u8, 247u8, 44u8, 23u8, 92u8, 4u8, 78u8, 156u8,
							21u8, 178u8, 97u8, 197u8, 148u8, 61u8, 234u8, 15u8, 94u8, 248u8, 188u8,
							211u8, 13u8, 134u8, 10u8, 75u8, 59u8, 218u8, 13u8, 104u8, 115u8,
						],
					)
				}
				///Set the maximum commission of a pool.
				///
				/// - Initial max can be set to any `Perbill`, and only smaller values thereafter.
				/// - Current commission will be lowered in the event it is higher than a new max
				///  commission.
				pub fn set_commission_max(
					&self,
					pool_id: ::core::primitive::u32,
					max_commission: runtime_types::sp_arithmetic::per_things::Perbill,
				) -> ::subxt::tx::Payload<SetCommissionMax> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"set_commission_max",
						SetCommissionMax { pool_id, max_commission },
						[
							115u8, 90u8, 156u8, 35u8, 7u8, 125u8, 184u8, 123u8, 149u8, 232u8, 59u8,
							21u8, 42u8, 120u8, 14u8, 152u8, 184u8, 167u8, 18u8, 22u8, 148u8, 83u8,
							16u8, 81u8, 93u8, 182u8, 154u8, 182u8, 46u8, 40u8, 179u8, 187u8,
						],
					)
				}
				///Set the commission change rate for a pool.
				///
				///Initial change rate is not bounded, whereas subsequent updates can only be more
				///restrictive than the current.
				pub fn set_commission_change_rate(
					&self,
					pool_id: ::core::primitive::u32,
					change_rate: runtime_types::pallet_nomination_pools::CommissionChangeRate<
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<SetCommissionChangeRate> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"set_commission_change_rate",
						SetCommissionChangeRate { pool_id, change_rate },
						[
							118u8, 194u8, 114u8, 197u8, 214u8, 246u8, 23u8, 237u8, 10u8, 90u8,
							230u8, 123u8, 172u8, 174u8, 98u8, 198u8, 160u8, 71u8, 113u8, 76u8,
							201u8, 201u8, 153u8, 92u8, 222u8, 252u8, 7u8, 184u8, 236u8, 235u8,
							126u8, 201u8,
						],
					)
				}
				///Claim pending commission.
				///
				///The dispatch origin of this call must be signed by the `root` role of the pool.
				/// Pending commission is paid out and added to total claimed commission`. Total
				/// pending commission is reset to zero. the current.
				pub fn claim_commission(
					&self,
					pool_id: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<ClaimCommission> {
					::subxt::tx::Payload::new_static(
						"NominationPools",
						"claim_commission",
						ClaimCommission { pool_id },
						[
							139u8, 126u8, 219u8, 117u8, 140u8, 51u8, 163u8, 32u8, 83u8, 60u8,
							250u8, 44u8, 186u8, 194u8, 225u8, 84u8, 61u8, 181u8, 212u8, 160u8,
							156u8, 93u8, 16u8, 255u8, 165u8, 178u8, 25u8, 64u8, 187u8, 29u8, 169u8,
							174u8,
						],
					)
				}
			}
		}
		///Events of this pallet.
		pub type Event = runtime_types::pallet_nomination_pools::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A pool has been created.
			pub struct Created {
				pub depositor: ::subxt::utils::AccountId32,
				pub pool_id: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Created {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "Created";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A member has became bonded in a pool.
			pub struct Bonded {
				pub member: ::subxt::utils::AccountId32,
				pub pool_id: ::core::primitive::u32,
				pub bonded: ::core::primitive::u128,
				pub joined: ::core::primitive::bool,
			}
			impl ::subxt::events::StaticEvent for Bonded {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "Bonded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A payout has been made to a member.
			pub struct PaidOut {
				pub member: ::subxt::utils::AccountId32,
				pub pool_id: ::core::primitive::u32,
				pub payout: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for PaidOut {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "PaidOut";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A member has unbonded from their pool.
			///
			/// - `balance` is the corresponding balance of the number of points that has been
			///  requested to be unbonded (the argument of the `unbond` transaction) from the bonded
			///  pool.
			/// - `points` is the number of points that are issued as a result of `balance` being
			///dissolved into the corresponding unbonding pool.
			/// - `era` is the era in which the balance will be unbonded.
			///In the absence of slashing, these values will match. In the presence of slashing,
			/// the number of points that are issued in the unbonding pool will be less than the
			/// amount requested to be unbonded.
			pub struct Unbonded {
				pub member: ::subxt::utils::AccountId32,
				pub pool_id: ::core::primitive::u32,
				pub balance: ::core::primitive::u128,
				pub points: ::core::primitive::u128,
				pub era: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Unbonded {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "Unbonded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A member has withdrawn from their pool.
			///
			///The given number of `points` have been dissolved in return of `balance`.
			///
			///Similar to `Unbonded` event, in the absence of slashing, the ratio of point to
			/// balance will be 1.
			pub struct Withdrawn {
				pub member: ::subxt::utils::AccountId32,
				pub pool_id: ::core::primitive::u32,
				pub balance: ::core::primitive::u128,
				pub points: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Withdrawn {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "Withdrawn";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A pool has been destroyed.
			pub struct Destroyed {
				pub pool_id: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Destroyed {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "Destroyed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The state of a pool has changed
			pub struct StateChanged {
				pub pool_id: ::core::primitive::u32,
				pub new_state: runtime_types::pallet_nomination_pools::PoolState,
			}
			impl ::subxt::events::StaticEvent for StateChanged {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "StateChanged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A member has been removed from a pool.
			///
			///The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked).
			pub struct MemberRemoved {
				pub pool_id: ::core::primitive::u32,
				pub member: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for MemberRemoved {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "MemberRemoved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The roles of a pool have been updated to the given new roles. Note that the
			/// depositor can never change.
			pub struct RolesUpdated {
				pub root: ::core::option::Option<::subxt::utils::AccountId32>,
				pub bouncer: ::core::option::Option<::subxt::utils::AccountId32>,
				pub nominator: ::core::option::Option<::subxt::utils::AccountId32>,
			}
			impl ::subxt::events::StaticEvent for RolesUpdated {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "RolesUpdated";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The active balance of pool `pool_id` has been slashed to `balance`.
			pub struct PoolSlashed {
				pub pool_id: ::core::primitive::u32,
				pub balance: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for PoolSlashed {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "PoolSlashed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The unbond pool at `era` of pool `pool_id` has been slashed to `balance`.
			pub struct UnbondingPoolSlashed {
				pub pool_id: ::core::primitive::u32,
				pub era: ::core::primitive::u32,
				pub balance: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for UnbondingPoolSlashed {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "UnbondingPoolSlashed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A pool's commission setting has been changed.
			pub struct PoolCommissionUpdated {
				pub pool_id: ::core::primitive::u32,
				pub current: ::core::option::Option<(
					runtime_types::sp_arithmetic::per_things::Perbill,
					::subxt::utils::AccountId32,
				)>,
			}
			impl ::subxt::events::StaticEvent for PoolCommissionUpdated {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "PoolCommissionUpdated";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A pool's maximum commission setting has been changed.
			pub struct PoolMaxCommissionUpdated {
				pub pool_id: ::core::primitive::u32,
				pub max_commission: runtime_types::sp_arithmetic::per_things::Perbill,
			}
			impl ::subxt::events::StaticEvent for PoolMaxCommissionUpdated {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "PoolMaxCommissionUpdated";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A pool's commission `change_rate` has been changed.
			pub struct PoolCommissionChangeRateUpdated {
				pub pool_id: ::core::primitive::u32,
				pub change_rate: runtime_types::pallet_nomination_pools::CommissionChangeRate<
					::core::primitive::u32,
				>,
			}
			impl ::subxt::events::StaticEvent for PoolCommissionChangeRateUpdated {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "PoolCommissionChangeRateUpdated";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Pool commission has been claimed.
			pub struct PoolCommissionClaimed {
				pub pool_id: ::core::primitive::u32,
				pub commission: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for PoolCommissionClaimed {
				const PALLET: &'static str = "NominationPools";
				const EVENT: &'static str = "PoolCommissionClaimed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// Minimum amount to bond to join a pool.
				pub fn min_join_bond(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"MinJoinBond",
						vec![],
						[
							125u8, 239u8, 45u8, 225u8, 74u8, 129u8, 247u8, 184u8, 205u8, 58u8,
							45u8, 186u8, 126u8, 170u8, 112u8, 120u8, 23u8, 190u8, 247u8, 97u8,
							131u8, 126u8, 215u8, 44u8, 147u8, 122u8, 132u8, 212u8, 217u8, 84u8,
							240u8, 91u8,
						],
					)
				}
				/// Minimum bond required to create a pool.
				///
				/// This is the amount that the depositor must put as their initial stake in the
				/// pool, as an indication of "skin in the game".
				///
				/// This is the value that will always exist in the staking ledger of the pool
				/// bonded account while all other accounts leave.
				pub fn min_create_bond(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"MinCreateBond",
						vec![],
						[
							31u8, 208u8, 240u8, 158u8, 23u8, 218u8, 212u8, 138u8, 92u8, 210u8,
							207u8, 170u8, 32u8, 60u8, 5u8, 21u8, 84u8, 162u8, 1u8, 111u8, 181u8,
							243u8, 24u8, 148u8, 193u8, 253u8, 248u8, 190u8, 16u8, 222u8, 219u8,
							67u8,
						],
					)
				}
				/// Maximum number of nomination pools that can exist. If `None`, then an unbounded
				/// number of pools can exist.
				pub fn max_pools(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"MaxPools",
						vec![],
						[
							216u8, 111u8, 68u8, 103u8, 33u8, 50u8, 109u8, 3u8, 176u8, 195u8, 23u8,
							73u8, 112u8, 138u8, 9u8, 194u8, 233u8, 73u8, 68u8, 215u8, 162u8, 255u8,
							217u8, 173u8, 141u8, 27u8, 72u8, 199u8, 7u8, 240u8, 25u8, 34u8,
						],
					)
				}
				/// Maximum number of members that can exist in the system. If `None`, then the
				/// count members are not bound on a system wide basis.
				pub fn max_pool_members(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"MaxPoolMembers",
						vec![],
						[
							82u8, 217u8, 26u8, 234u8, 223u8, 241u8, 66u8, 182u8, 43u8, 233u8, 59u8,
							242u8, 202u8, 254u8, 69u8, 50u8, 254u8, 196u8, 166u8, 89u8, 120u8,
							87u8, 76u8, 148u8, 31u8, 197u8, 49u8, 88u8, 206u8, 41u8, 242u8, 62u8,
						],
					)
				}
				/// Maximum number of members that may belong to pool. If `None`, then the count of
				/// members is not bound on a per pool basis.
				pub fn max_pool_members_per_pool(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"MaxPoolMembersPerPool",
						vec![],
						[
							93u8, 241u8, 16u8, 169u8, 138u8, 199u8, 128u8, 149u8, 65u8, 30u8, 55u8,
							11u8, 41u8, 252u8, 83u8, 250u8, 9u8, 33u8, 152u8, 239u8, 195u8, 147u8,
							16u8, 248u8, 180u8, 153u8, 88u8, 231u8, 248u8, 169u8, 186u8, 48u8,
						],
					)
				}
				/// The maximum commission that can be charged by a pool. Used on commission payouts
				/// to bound pool commissions that are > `GlobalMaxCommission`, necessary if a
				/// future `GlobalMaxCommission` is lower than some current pool commissions.
				pub fn global_max_commission(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::sp_arithmetic::per_things::Perbill,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"GlobalMaxCommission",
						vec![],
						[
							142u8, 252u8, 92u8, 128u8, 162u8, 4u8, 216u8, 39u8, 118u8, 201u8,
							138u8, 171u8, 76u8, 90u8, 133u8, 176u8, 161u8, 138u8, 214u8, 183u8,
							193u8, 115u8, 245u8, 151u8, 216u8, 84u8, 99u8, 175u8, 144u8, 196u8,
							103u8, 190u8,
						],
					)
				}
				/// Active members.
				///
				/// TWOX-NOTE: SAFE since `AccountId` is a secure hash.
				pub fn pool_members(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nomination_pools::PoolMember,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"PoolMembers",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							252u8, 236u8, 201u8, 127u8, 219u8, 1u8, 19u8, 144u8, 5u8, 108u8, 70u8,
							30u8, 177u8, 232u8, 253u8, 237u8, 211u8, 91u8, 63u8, 62u8, 155u8,
							151u8, 153u8, 165u8, 206u8, 53u8, 111u8, 31u8, 60u8, 120u8, 100u8,
							249u8,
						],
					)
				}
				/// Active members.
				///
				/// TWOX-NOTE: SAFE since `AccountId` is a secure hash.
				pub fn pool_members_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nomination_pools::PoolMember,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"PoolMembers",
						Vec::new(),
						[
							252u8, 236u8, 201u8, 127u8, 219u8, 1u8, 19u8, 144u8, 5u8, 108u8, 70u8,
							30u8, 177u8, 232u8, 253u8, 237u8, 211u8, 91u8, 63u8, 62u8, 155u8,
							151u8, 153u8, 165u8, 206u8, 53u8, 111u8, 31u8, 60u8, 120u8, 100u8,
							249u8,
						],
					)
				}
				///Counter for the related counted storage map
				pub fn counter_for_pool_members(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"CounterForPoolMembers",
						vec![],
						[
							114u8, 126u8, 27u8, 138u8, 119u8, 44u8, 45u8, 129u8, 84u8, 107u8,
							171u8, 206u8, 117u8, 141u8, 20u8, 75u8, 229u8, 237u8, 31u8, 229u8,
							124u8, 190u8, 27u8, 124u8, 63u8, 59u8, 167u8, 42u8, 62u8, 212u8, 160u8,
							2u8,
						],
					)
				}
				/// Storage for bonded pools.
				pub fn bonded_pools(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nomination_pools::BondedPoolInner,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"BondedPools",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							3u8, 183u8, 140u8, 154u8, 74u8, 225u8, 69u8, 243u8, 150u8, 132u8,
							163u8, 26u8, 101u8, 45u8, 231u8, 178u8, 85u8, 144u8, 9u8, 112u8, 212u8,
							167u8, 131u8, 188u8, 203u8, 50u8, 177u8, 218u8, 154u8, 182u8, 80u8,
							232u8,
						],
					)
				}
				/// Storage for bonded pools.
				pub fn bonded_pools_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nomination_pools::BondedPoolInner,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"BondedPools",
						Vec::new(),
						[
							3u8, 183u8, 140u8, 154u8, 74u8, 225u8, 69u8, 243u8, 150u8, 132u8,
							163u8, 26u8, 101u8, 45u8, 231u8, 178u8, 85u8, 144u8, 9u8, 112u8, 212u8,
							167u8, 131u8, 188u8, 203u8, 50u8, 177u8, 218u8, 154u8, 182u8, 80u8,
							232u8,
						],
					)
				}
				///Counter for the related counted storage map
				pub fn counter_for_bonded_pools(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"CounterForBondedPools",
						vec![],
						[
							134u8, 94u8, 199u8, 73u8, 174u8, 253u8, 66u8, 242u8, 233u8, 244u8,
							140u8, 170u8, 242u8, 40u8, 41u8, 185u8, 183u8, 151u8, 58u8, 111u8,
							221u8, 225u8, 81u8, 71u8, 169u8, 219u8, 223u8, 135u8, 8u8, 171u8,
							180u8, 236u8,
						],
					)
				}
				/// Reward pools. This is where there rewards for each pool accumulate. When a
				/// members payout is claimed, the balance comes out fo the reward pool. Keyed by
				/// the bonded pools account.
				pub fn reward_pools(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nomination_pools::RewardPool,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"RewardPools",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							235u8, 6u8, 2u8, 103u8, 137u8, 31u8, 109u8, 165u8, 129u8, 48u8, 154u8,
							219u8, 110u8, 198u8, 241u8, 31u8, 174u8, 10u8, 92u8, 233u8, 161u8,
							76u8, 53u8, 136u8, 172u8, 214u8, 192u8, 12u8, 239u8, 165u8, 195u8,
							96u8,
						],
					)
				}
				/// Reward pools. This is where there rewards for each pool accumulate. When a
				/// members payout is claimed, the balance comes out fo the reward pool. Keyed by
				/// the bonded pools account.
				pub fn reward_pools_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nomination_pools::RewardPool,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"RewardPools",
						Vec::new(),
						[
							235u8, 6u8, 2u8, 103u8, 137u8, 31u8, 109u8, 165u8, 129u8, 48u8, 154u8,
							219u8, 110u8, 198u8, 241u8, 31u8, 174u8, 10u8, 92u8, 233u8, 161u8,
							76u8, 53u8, 136u8, 172u8, 214u8, 192u8, 12u8, 239u8, 165u8, 195u8,
							96u8,
						],
					)
				}
				///Counter for the related counted storage map
				pub fn counter_for_reward_pools(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"CounterForRewardPools",
						vec![],
						[
							209u8, 139u8, 212u8, 116u8, 210u8, 178u8, 213u8, 38u8, 75u8, 23u8,
							188u8, 57u8, 253u8, 213u8, 95u8, 118u8, 182u8, 250u8, 45u8, 205u8,
							17u8, 175u8, 17u8, 201u8, 234u8, 14u8, 98u8, 49u8, 143u8, 135u8, 201u8,
							81u8,
						],
					)
				}
				/// Groups of unbonding pools. Each group of unbonding pools belongs to a
				/// bonded pool, hence the name sub-pools. Keyed by the bonded pools account.
				pub fn sub_pools_storage(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nomination_pools::SubPools,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"SubPoolsStorage",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							231u8, 13u8, 111u8, 248u8, 1u8, 208u8, 179u8, 134u8, 224u8, 196u8,
							94u8, 201u8, 229u8, 29u8, 155u8, 211u8, 163u8, 150u8, 157u8, 34u8,
							68u8, 238u8, 55u8, 4u8, 222u8, 96u8, 186u8, 29u8, 205u8, 237u8, 80u8,
							42u8,
						],
					)
				}
				/// Groups of unbonding pools. Each group of unbonding pools belongs to a
				/// bonded pool, hence the name sub-pools. Keyed by the bonded pools account.
				pub fn sub_pools_storage_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nomination_pools::SubPools,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"SubPoolsStorage",
						Vec::new(),
						[
							231u8, 13u8, 111u8, 248u8, 1u8, 208u8, 179u8, 134u8, 224u8, 196u8,
							94u8, 201u8, 229u8, 29u8, 155u8, 211u8, 163u8, 150u8, 157u8, 34u8,
							68u8, 238u8, 55u8, 4u8, 222u8, 96u8, 186u8, 29u8, 205u8, 237u8, 80u8,
							42u8,
						],
					)
				}
				///Counter for the related counted storage map
				pub fn counter_for_sub_pools_storage(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"CounterForSubPoolsStorage",
						vec![],
						[
							212u8, 145u8, 212u8, 226u8, 234u8, 31u8, 26u8, 240u8, 107u8, 91u8,
							171u8, 120u8, 41u8, 195u8, 16u8, 86u8, 55u8, 127u8, 103u8, 93u8, 128u8,
							48u8, 69u8, 104u8, 168u8, 236u8, 81u8, 54u8, 2u8, 184u8, 215u8, 51u8,
						],
					)
				}
				/// Metadata for the pool.
				pub fn metadata(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"Metadata",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							108u8, 250u8, 163u8, 54u8, 192u8, 143u8, 239u8, 62u8, 97u8, 163u8,
							161u8, 215u8, 171u8, 225u8, 49u8, 18u8, 37u8, 200u8, 143u8, 254u8,
							136u8, 26u8, 54u8, 187u8, 39u8, 3u8, 216u8, 24u8, 188u8, 25u8, 243u8,
							251u8,
						],
					)
				}
				/// Metadata for the pool.
				pub fn metadata_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"Metadata",
						Vec::new(),
						[
							108u8, 250u8, 163u8, 54u8, 192u8, 143u8, 239u8, 62u8, 97u8, 163u8,
							161u8, 215u8, 171u8, 225u8, 49u8, 18u8, 37u8, 200u8, 143u8, 254u8,
							136u8, 26u8, 54u8, 187u8, 39u8, 3u8, 216u8, 24u8, 188u8, 25u8, 243u8,
							251u8,
						],
					)
				}
				///Counter for the related counted storage map
				pub fn counter_for_metadata(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"CounterForMetadata",
						vec![],
						[
							190u8, 232u8, 77u8, 134u8, 245u8, 89u8, 160u8, 187u8, 163u8, 68u8,
							188u8, 204u8, 31u8, 145u8, 219u8, 165u8, 213u8, 1u8, 167u8, 90u8,
							175u8, 218u8, 147u8, 144u8, 158u8, 226u8, 23u8, 233u8, 55u8, 168u8,
							161u8, 237u8,
						],
					)
				}
				/// Ever increasing number of all pools created so far.
				pub fn last_pool_id(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"LastPoolId",
						vec![],
						[
							50u8, 254u8, 218u8, 41u8, 213u8, 184u8, 170u8, 166u8, 31u8, 29u8,
							196u8, 57u8, 215u8, 20u8, 40u8, 40u8, 19u8, 22u8, 9u8, 184u8, 11u8,
							21u8, 21u8, 125u8, 97u8, 38u8, 219u8, 209u8, 2u8, 238u8, 247u8, 51u8,
						],
					)
				}
				/// A reverse lookup from the pool's account id to its id.
				///
				/// This is only used for slashing. In all other instances, the pool id is used, and
				/// the accounts are deterministically derived from it.
				pub fn reverse_pool_id_lookup(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"ReversePoolIdLookup",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							178u8, 161u8, 51u8, 220u8, 128u8, 1u8, 135u8, 83u8, 236u8, 159u8, 36u8,
							237u8, 120u8, 128u8, 6u8, 191u8, 41u8, 159u8, 94u8, 178u8, 174u8,
							235u8, 221u8, 173u8, 44u8, 81u8, 211u8, 255u8, 231u8, 81u8, 16u8, 87u8,
						],
					)
				}
				/// A reverse lookup from the pool's account id to its id.
				///
				/// This is only used for slashing. In all other instances, the pool id is used, and
				/// the accounts are deterministically derived from it.
				pub fn reverse_pool_id_lookup_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"ReversePoolIdLookup",
						Vec::new(),
						[
							178u8, 161u8, 51u8, 220u8, 128u8, 1u8, 135u8, 83u8, 236u8, 159u8, 36u8,
							237u8, 120u8, 128u8, 6u8, 191u8, 41u8, 159u8, 94u8, 178u8, 174u8,
							235u8, 221u8, 173u8, 44u8, 81u8, 211u8, 255u8, 231u8, 81u8, 16u8, 87u8,
						],
					)
				}
				///Counter for the related counted storage map
				pub fn counter_for_reverse_pool_id_lookup(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"CounterForReversePoolIdLookup",
						vec![],
						[
							148u8, 83u8, 81u8, 33u8, 188u8, 72u8, 148u8, 208u8, 245u8, 178u8, 52u8,
							245u8, 229u8, 140u8, 100u8, 152u8, 8u8, 217u8, 161u8, 80u8, 226u8,
							42u8, 15u8, 252u8, 90u8, 197u8, 120u8, 114u8, 144u8, 90u8, 199u8,
							123u8,
						],
					)
				}
				/// Map from a pool member account to their opted claim permission.
				pub fn claim_permissions(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nomination_pools::ClaimPermission,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"ClaimPermissions",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							23u8, 124u8, 83u8, 109u8, 174u8, 228u8, 170u8, 25u8, 124u8, 91u8,
							224u8, 66u8, 55u8, 127u8, 190u8, 226u8, 163u8, 16u8, 81u8, 231u8,
							241u8, 214u8, 209u8, 137u8, 101u8, 206u8, 104u8, 138u8, 49u8, 56u8,
							152u8, 228u8,
						],
					)
				}
				/// Map from a pool member account to their opted claim permission.
				pub fn claim_permissions_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_nomination_pools::ClaimPermission,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"NominationPools",
						"ClaimPermissions",
						Vec::new(),
						[
							23u8, 124u8, 83u8, 109u8, 174u8, 228u8, 170u8, 25u8, 124u8, 91u8,
							224u8, 66u8, 55u8, 127u8, 190u8, 226u8, 163u8, 16u8, 81u8, 231u8,
							241u8, 214u8, 209u8, 137u8, 101u8, 206u8, 104u8, 138u8, 49u8, 56u8,
							152u8, 228u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The nomination pool's pallet id.
				pub fn pallet_id(
					&self,
				) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId> {
					::subxt::constants::Address::new_static(
						"NominationPools",
						"PalletId",
						[
							139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
							174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
							9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
						],
					)
				}
				/// The maximum pool points-to-balance ratio that an `open` pool can have.
				///
				/// This is important in the event slashing takes place and the pool's
				/// points-to-balance ratio becomes disproportional.
				///
				/// Moreover, this relates to the `RewardCounter` type as well, as the arithmetic
				/// operations are a function of number of points, and by setting this value to e.g.
				/// 10, you ensure that the total number of points in the system are at most 10
				/// times the total_issuance of the chain, in the absolute worse case.
				///
				/// For a value of 10, the threshold would be a pool points-to-balance ratio of
				/// 10:1. Such a scenario would also be the equivalent of the pool being 90%
				/// slashed.
				pub fn max_points_to_balance(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u8> {
					::subxt::constants::Address::new_static(
						"NominationPools",
						"MaxPointsToBalance",
						[
							141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
							28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
							114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
							165u8,
						],
					)
				}
			}
		}
	}
	pub mod ranked_polls {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Submit {
				pub proposal_origin: ::std::boxed::Box<runtime_types::babe_runtime::OriginCaller>,
				pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
					runtime_types::babe_runtime::RuntimeCall,
				>,
				pub enactment_moment: runtime_types::frame_support::traits::schedule::DispatchTime<
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct PlaceDecisionDeposit {
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RefundDecisionDeposit {
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Cancel {
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Kill {
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct NudgeReferendum {
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct OneFewerDeciding {
				pub track: ::core::primitive::u16,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RefundSubmissionDeposit {
				pub index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SetMetadata {
				pub index: ::core::primitive::u32,
				pub maybe_hash: ::core::option::Option<::subxt::utils::H256>,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Propose a referendum on a privileged action.
				///
				/// - `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit`
				///   funds
				///  available.
				/// - `proposal_origin`: The origin from which the proposal should be executed.
				/// - `proposal`: The proposal.
				/// - `enactment_moment`: The moment that the proposal should be enacted.
				///
				///Emits `Submitted`.
				pub fn submit(
					&self,
					proposal_origin: runtime_types::babe_runtime::OriginCaller,
					proposal: runtime_types::frame_support::traits::preimages::Bounded<
						runtime_types::babe_runtime::RuntimeCall,
					>,
					enactment_moment: runtime_types::frame_support::traits::schedule::DispatchTime<
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<Submit> {
					::subxt::tx::Payload::new_static(
						"RankedPolls",
						"submit",
						Submit {
							proposal_origin: ::std::boxed::Box::new(proposal_origin),
							proposal,
							enactment_moment,
						},
						[
							91u8, 158u8, 209u8, 182u8, 19u8, 184u8, 252u8, 30u8, 200u8, 62u8, 92u8,
							254u8, 200u8, 245u8, 134u8, 143u8, 135u8, 67u8, 95u8, 107u8, 115u8,
							109u8, 12u8, 48u8, 111u8, 239u8, 84u8, 255u8, 23u8, 26u8, 140u8, 187u8,
						],
					)
				}
				///Post the Decision Deposit for a referendum.
				///
				/// - `origin`: must be `Signed` and the account must have funds available for the
				///  referendum's track's Decision Deposit.
				/// - `index`: The index of the submitted referendum whose Decision Deposit is yet
				///   to be
				///  posted.
				///
				///Emits `DecisionDepositPlaced`.
				pub fn place_decision_deposit(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<PlaceDecisionDeposit> {
					::subxt::tx::Payload::new_static(
						"RankedPolls",
						"place_decision_deposit",
						PlaceDecisionDeposit { index },
						[
							118u8, 227u8, 8u8, 55u8, 41u8, 171u8, 244u8, 40u8, 164u8, 232u8, 119u8,
							129u8, 139u8, 123u8, 77u8, 70u8, 219u8, 236u8, 145u8, 159u8, 84u8,
							111u8, 36u8, 4u8, 206u8, 5u8, 139u8, 231u8, 11u8, 231u8, 6u8, 30u8,
						],
					)
				}
				///Refund the Decision Deposit for a closed referendum back to the depositor.
				///
				/// - `origin`: must be `Signed` or `Root`.
				/// - `index`: The index of a closed referendum whose Decision Deposit has not yet
				///   been
				///  refunded.
				///
				///Emits `DecisionDepositRefunded`.
				pub fn refund_decision_deposit(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<RefundDecisionDeposit> {
					::subxt::tx::Payload::new_static(
						"RankedPolls",
						"refund_decision_deposit",
						RefundDecisionDeposit { index },
						[
							120u8, 116u8, 89u8, 51u8, 255u8, 76u8, 150u8, 74u8, 54u8, 93u8, 19u8,
							64u8, 13u8, 177u8, 144u8, 93u8, 132u8, 150u8, 244u8, 48u8, 202u8,
							223u8, 201u8, 130u8, 112u8, 167u8, 29u8, 207u8, 112u8, 181u8, 43u8,
							93u8,
						],
					)
				}
				///Cancel an ongoing referendum.
				///
				/// - `origin`: must be the `CancelOrigin`.
				/// - `index`: The index of the referendum to be cancelled.
				///
				///Emits `Cancelled`.
				pub fn cancel(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Cancel> {
					::subxt::tx::Payload::new_static(
						"RankedPolls",
						"cancel",
						Cancel { index },
						[
							247u8, 55u8, 146u8, 211u8, 168u8, 140u8, 248u8, 217u8, 218u8, 235u8,
							25u8, 39u8, 47u8, 132u8, 134u8, 18u8, 239u8, 70u8, 223u8, 50u8, 245u8,
							101u8, 97u8, 39u8, 226u8, 4u8, 196u8, 16u8, 66u8, 177u8, 178u8, 252u8,
						],
					)
				}
				///Cancel an ongoing referendum and slash the deposits.
				///
				/// - `origin`: must be the `KillOrigin`.
				/// - `index`: The index of the referendum to be cancelled.
				///
				///Emits `Killed` and `DepositSlashed`.
				pub fn kill(&self, index: ::core::primitive::u32) -> ::subxt::tx::Payload<Kill> {
					::subxt::tx::Payload::new_static(
						"RankedPolls",
						"kill",
						Kill { index },
						[
							98u8, 109u8, 143u8, 42u8, 24u8, 80u8, 39u8, 243u8, 249u8, 141u8, 104u8,
							195u8, 29u8, 93u8, 149u8, 37u8, 27u8, 130u8, 84u8, 178u8, 246u8, 26u8,
							113u8, 224u8, 157u8, 94u8, 16u8, 14u8, 158u8, 80u8, 148u8, 198u8,
						],
					)
				}
				///Advance a referendum onto its next logical state. Only used internally.
				///
				/// - `origin`: must be `Root`.
				/// - `index`: the referendum to be advanced.
				pub fn nudge_referendum(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<NudgeReferendum> {
					::subxt::tx::Payload::new_static(
						"RankedPolls",
						"nudge_referendum",
						NudgeReferendum { index },
						[
							60u8, 221u8, 153u8, 136u8, 107u8, 209u8, 59u8, 178u8, 208u8, 170u8,
							10u8, 225u8, 213u8, 170u8, 228u8, 64u8, 204u8, 166u8, 7u8, 230u8,
							243u8, 15u8, 206u8, 114u8, 8u8, 128u8, 46u8, 150u8, 114u8, 241u8,
							112u8, 97u8,
						],
					)
				}
				///Advance a track onto its next logical state. Only used internally.
				///
				/// - `origin`: must be `Root`.
				/// - `track`: the track to be advanced.
				///
				///Action item for when there is now one fewer referendum in the deciding phase and
				/// the `DecidingCount` is not yet updated. This means that we should either:
				/// - begin deciding another referendum (and leave `DecidingCount` alone); or
				/// - decrement `DecidingCount`.
				pub fn one_fewer_deciding(
					&self,
					track: ::core::primitive::u16,
				) -> ::subxt::tx::Payload<OneFewerDeciding> {
					::subxt::tx::Payload::new_static(
						"RankedPolls",
						"one_fewer_deciding",
						OneFewerDeciding { track },
						[
							239u8, 43u8, 70u8, 73u8, 77u8, 28u8, 75u8, 62u8, 29u8, 67u8, 110u8,
							120u8, 234u8, 236u8, 126u8, 99u8, 46u8, 183u8, 169u8, 16u8, 143u8,
							233u8, 137u8, 247u8, 138u8, 96u8, 32u8, 223u8, 149u8, 52u8, 214u8,
							195u8,
						],
					)
				}
				///Refund the Submission Deposit for a closed referendum back to the depositor.
				///
				/// - `origin`: must be `Signed` or `Root`.
				/// - `index`: The index of a closed referendum whose Submission Deposit has not yet
				///   been
				///  refunded.
				///
				///Emits `SubmissionDepositRefunded`.
				pub fn refund_submission_deposit(
					&self,
					index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<RefundSubmissionDeposit> {
					::subxt::tx::Payload::new_static(
						"RankedPolls",
						"refund_submission_deposit",
						RefundSubmissionDeposit { index },
						[
							101u8, 147u8, 237u8, 27u8, 220u8, 116u8, 73u8, 131u8, 191u8, 92u8,
							134u8, 31u8, 175u8, 172u8, 129u8, 225u8, 91u8, 33u8, 23u8, 132u8, 89u8,
							19u8, 81u8, 238u8, 133u8, 243u8, 56u8, 70u8, 143u8, 43u8, 176u8, 83u8,
						],
					)
				}
				///Set or clear metadata of a referendum.
				///
				///Parameters:
				/// - `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear
				///   a
				///  metadata of a finished referendum.
				/// - `index`:  The index of a referendum to set or clear metadata for.
				/// - `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a
				///   metadata.
				pub fn set_metadata(
					&self,
					index: ::core::primitive::u32,
					maybe_hash: ::core::option::Option<::subxt::utils::H256>,
				) -> ::subxt::tx::Payload<SetMetadata> {
					::subxt::tx::Payload::new_static(
						"RankedPolls",
						"set_metadata",
						SetMetadata { index, maybe_hash },
						[
							235u8, 215u8, 66u8, 214u8, 157u8, 177u8, 233u8, 214u8, 103u8, 92u8,
							216u8, 228u8, 7u8, 123u8, 167u8, 225u8, 128u8, 16u8, 161u8, 102u8,
							217u8, 36u8, 80u8, 207u8, 137u8, 24u8, 219u8, 239u8, 42u8, 234u8,
							144u8, 133u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_referenda::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A referendum has been submitted.
			pub struct Submitted {
				pub index: ::core::primitive::u32,
				pub track: ::core::primitive::u16,
				pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
					runtime_types::babe_runtime::RuntimeCall,
				>,
			}
			impl ::subxt::events::StaticEvent for Submitted {
				const PALLET: &'static str = "RankedPolls";
				const EVENT: &'static str = "Submitted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The decision deposit has been placed.
			pub struct DecisionDepositPlaced {
				pub index: ::core::primitive::u32,
				pub who: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for DecisionDepositPlaced {
				const PALLET: &'static str = "RankedPolls";
				const EVENT: &'static str = "DecisionDepositPlaced";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The decision deposit has been refunded.
			pub struct DecisionDepositRefunded {
				pub index: ::core::primitive::u32,
				pub who: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for DecisionDepositRefunded {
				const PALLET: &'static str = "RankedPolls";
				const EVENT: &'static str = "DecisionDepositRefunded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A deposit has been slashaed.
			pub struct DepositSlashed {
				pub who: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for DepositSlashed {
				const PALLET: &'static str = "RankedPolls";
				const EVENT: &'static str = "DepositSlashed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A referendum has moved into the deciding phase.
			pub struct DecisionStarted {
				pub index: ::core::primitive::u32,
				pub track: ::core::primitive::u16,
				pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
					runtime_types::babe_runtime::RuntimeCall,
				>,
				pub tally: runtime_types::pallet_ranked_collective::Tally,
			}
			impl ::subxt::events::StaticEvent for DecisionStarted {
				const PALLET: &'static str = "RankedPolls";
				const EVENT: &'static str = "DecisionStarted";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ConfirmStarted {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for ConfirmStarted {
				const PALLET: &'static str = "RankedPolls";
				const EVENT: &'static str = "ConfirmStarted";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ConfirmAborted {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for ConfirmAborted {
				const PALLET: &'static str = "RankedPolls";
				const EVENT: &'static str = "ConfirmAborted";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A referendum has ended its confirmation phase and is ready for approval.
			pub struct Confirmed {
				pub index: ::core::primitive::u32,
				pub tally: runtime_types::pallet_ranked_collective::Tally,
			}
			impl ::subxt::events::StaticEvent for Confirmed {
				const PALLET: &'static str = "RankedPolls";
				const EVENT: &'static str = "Confirmed";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A referendum has been approved and its proposal has been scheduled.
			pub struct Approved {
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for Approved {
				const PALLET: &'static str = "RankedPolls";
				const EVENT: &'static str = "Approved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A proposal has been rejected by referendum.
			pub struct Rejected {
				pub index: ::core::primitive::u32,
				pub tally: runtime_types::pallet_ranked_collective::Tally,
			}
			impl ::subxt::events::StaticEvent for Rejected {
				const PALLET: &'static str = "RankedPolls";
				const EVENT: &'static str = "Rejected";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A referendum has been timed out without being decided.
			pub struct TimedOut {
				pub index: ::core::primitive::u32,
				pub tally: runtime_types::pallet_ranked_collective::Tally,
			}
			impl ::subxt::events::StaticEvent for TimedOut {
				const PALLET: &'static str = "RankedPolls";
				const EVENT: &'static str = "TimedOut";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A referendum has been cancelled.
			pub struct Cancelled {
				pub index: ::core::primitive::u32,
				pub tally: runtime_types::pallet_ranked_collective::Tally,
			}
			impl ::subxt::events::StaticEvent for Cancelled {
				const PALLET: &'static str = "RankedPolls";
				const EVENT: &'static str = "Cancelled";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A referendum has been killed.
			pub struct Killed {
				pub index: ::core::primitive::u32,
				pub tally: runtime_types::pallet_ranked_collective::Tally,
			}
			impl ::subxt::events::StaticEvent for Killed {
				const PALLET: &'static str = "RankedPolls";
				const EVENT: &'static str = "Killed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The submission deposit has been refunded.
			pub struct SubmissionDepositRefunded {
				pub index: ::core::primitive::u32,
				pub who: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for SubmissionDepositRefunded {
				const PALLET: &'static str = "RankedPolls";
				const EVENT: &'static str = "SubmissionDepositRefunded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Metadata for a referendum has been set.
			pub struct MetadataSet {
				pub index: ::core::primitive::u32,
				pub hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for MetadataSet {
				const PALLET: &'static str = "RankedPolls";
				const EVENT: &'static str = "MetadataSet";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Metadata for a referendum has been cleared.
			pub struct MetadataCleared {
				pub index: ::core::primitive::u32,
				pub hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for MetadataCleared {
				const PALLET: &'static str = "RankedPolls";
				const EVENT: &'static str = "MetadataCleared";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The next free referendum index, aka the number of referenda started so far.
				pub fn referendum_count(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"RankedPolls",
						"ReferendumCount",
						vec![],
						[
							153u8, 210u8, 106u8, 244u8, 156u8, 70u8, 124u8, 251u8, 123u8, 75u8,
							7u8, 189u8, 199u8, 145u8, 95u8, 119u8, 137u8, 11u8, 240u8, 160u8,
							151u8, 248u8, 229u8, 231u8, 89u8, 222u8, 18u8, 237u8, 144u8, 78u8,
							99u8, 58u8,
						],
					)
				}
				/// Information concerning any given referendum.
				pub fn referendum_info_for(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_referenda::types::ReferendumInfo<
						::core::primitive::u16,
						runtime_types::babe_runtime::OriginCaller,
						::core::primitive::u32,
						runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::babe_runtime::RuntimeCall,
						>,
						::core::primitive::u128,
						runtime_types::pallet_ranked_collective::Tally,
						::subxt::utils::AccountId32,
						(::core::primitive::u32, ::core::primitive::u32),
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedPolls",
						"ReferendumInfoFor",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							128u8, 64u8, 140u8, 106u8, 75u8, 20u8, 189u8, 69u8, 252u8, 236u8,
							182u8, 172u8, 253u8, 97u8, 170u8, 219u8, 220u8, 136u8, 0u8, 231u8,
							212u8, 97u8, 82u8, 41u8, 156u8, 142u8, 33u8, 208u8, 70u8, 185u8, 182u8,
							244u8,
						],
					)
				}
				/// Information concerning any given referendum.
				pub fn referendum_info_for_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_referenda::types::ReferendumInfo<
						::core::primitive::u16,
						runtime_types::babe_runtime::OriginCaller,
						::core::primitive::u32,
						runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::babe_runtime::RuntimeCall,
						>,
						::core::primitive::u128,
						runtime_types::pallet_ranked_collective::Tally,
						::subxt::utils::AccountId32,
						(::core::primitive::u32, ::core::primitive::u32),
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedPolls",
						"ReferendumInfoFor",
						Vec::new(),
						[
							128u8, 64u8, 140u8, 106u8, 75u8, 20u8, 189u8, 69u8, 252u8, 236u8,
							182u8, 172u8, 253u8, 97u8, 170u8, 219u8, 220u8, 136u8, 0u8, 231u8,
							212u8, 97u8, 82u8, 41u8, 156u8, 142u8, 33u8, 208u8, 70u8, 185u8, 182u8,
							244u8,
						],
					)
				}
				/// The sorted list of referenda ready to be decided but not yet being decided,
				/// ordered by conviction-weighted approvals.
				///
				/// This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`.
				pub fn track_queue(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u16>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedPolls",
						"TrackQueue",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							250u8, 6u8, 4u8, 145u8, 233u8, 136u8, 58u8, 26u8, 252u8, 117u8, 90u8,
							85u8, 189u8, 21u8, 196u8, 201u8, 108u8, 23u8, 161u8, 157u8, 149u8,
							70u8, 77u8, 137u8, 159u8, 246u8, 244u8, 45u8, 134u8, 36u8, 231u8,
							254u8,
						],
					)
				}
				/// The sorted list of referenda ready to be decided but not yet being decided,
				/// ordered by conviction-weighted approvals.
				///
				/// This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`.
				pub fn track_queue_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedPolls",
						"TrackQueue",
						Vec::new(),
						[
							250u8, 6u8, 4u8, 145u8, 233u8, 136u8, 58u8, 26u8, 252u8, 117u8, 90u8,
							85u8, 189u8, 21u8, 196u8, 201u8, 108u8, 23u8, 161u8, 157u8, 149u8,
							70u8, 77u8, 137u8, 159u8, 246u8, 244u8, 45u8, 134u8, 36u8, 231u8,
							254u8,
						],
					)
				}
				/// The number of referenda being decided currently.
				pub fn deciding_count(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u16>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedPolls",
						"DecidingCount",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							101u8, 153u8, 200u8, 225u8, 229u8, 227u8, 232u8, 26u8, 98u8, 60u8,
							60u8, 94u8, 204u8, 195u8, 193u8, 69u8, 50u8, 72u8, 31u8, 250u8, 224u8,
							179u8, 139u8, 207u8, 19u8, 156u8, 67u8, 234u8, 177u8, 223u8, 63u8,
							150u8,
						],
					)
				}
				/// The number of referenda being decided currently.
				pub fn deciding_count_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedPolls",
						"DecidingCount",
						Vec::new(),
						[
							101u8, 153u8, 200u8, 225u8, 229u8, 227u8, 232u8, 26u8, 98u8, 60u8,
							60u8, 94u8, 204u8, 195u8, 193u8, 69u8, 50u8, 72u8, 31u8, 250u8, 224u8,
							179u8, 139u8, 207u8, 19u8, 156u8, 67u8, 234u8, 177u8, 223u8, 63u8,
							150u8,
						],
					)
				}
				/// The metadata is a general information concerning the referendum.
				/// The `PreimageHash` refers to the preimage of the `Preimages` provider which can
				/// be a JSON dump or IPFS hash of a JSON file.
				///
				/// Consider a garbage collection for a metadata of finished referendums to
				/// `unrequest` (remove) large preimages.
				pub fn metadata_of(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::H256,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedPolls",
						"MetadataOf",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							104u8, 255u8, 134u8, 120u8, 111u8, 124u8, 108u8, 232u8, 61u8, 47u8,
							251u8, 228u8, 50u8, 49u8, 125u8, 229u8, 254u8, 88u8, 215u8, 90u8,
							116u8, 145u8, 111u8, 72u8, 132u8, 91u8, 106u8, 207u8, 13u8, 104u8,
							164u8, 100u8,
						],
					)
				}
				/// The metadata is a general information concerning the referendum.
				/// The `PreimageHash` refers to the preimage of the `Preimages` provider which can
				/// be a JSON dump or IPFS hash of a JSON file.
				///
				/// Consider a garbage collection for a metadata of finished referendums to
				/// `unrequest` (remove) large preimages.
				pub fn metadata_of_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::H256,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedPolls",
						"MetadataOf",
						Vec::new(),
						[
							104u8, 255u8, 134u8, 120u8, 111u8, 124u8, 108u8, 232u8, 61u8, 47u8,
							251u8, 228u8, 50u8, 49u8, 125u8, 229u8, 254u8, 88u8, 215u8, 90u8,
							116u8, 145u8, 111u8, 72u8, 132u8, 91u8, 106u8, 207u8, 13u8, 104u8,
							164u8, 100u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The minimum amount to be used as a deposit for a public referendum proposal.
				pub fn submission_deposit(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"RankedPolls",
						"SubmissionDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				/// Maximum size of the referendum queue for a single track.
				pub fn max_queued(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"RankedPolls",
						"MaxQueued",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The number of blocks after submission that a referendum must begin being decided
				/// by. Once this passes, then anyone may cancel the referendum.
				pub fn undeciding_timeout(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"RankedPolls",
						"UndecidingTimeout",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Quantization level for the referendum wakeup scheduler. A higher number will
				/// result in fewer storage reads/writes needed for smaller voters, but also result
				/// in delays to the automatic referendum status changes. Explicit servicing
				/// instructions are unaffected.
				pub fn alarm_interval(
					&self,
				) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"RankedPolls",
						"AlarmInterval",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// Information concerning the different referendum tracks.
				pub fn tracks(
					&self,
				) -> ::subxt::constants::Address<
					::std::vec::Vec<(
						::core::primitive::u16,
						runtime_types::pallet_referenda::types::TrackInfo<
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					)>,
				> {
					::subxt::constants::Address::new_static(
						"RankedPolls",
						"Tracks",
						[
							71u8, 253u8, 246u8, 54u8, 168u8, 190u8, 182u8, 15u8, 207u8, 26u8, 50u8,
							138u8, 212u8, 124u8, 13u8, 203u8, 27u8, 35u8, 224u8, 1u8, 176u8, 192u8,
							197u8, 220u8, 147u8, 94u8, 196u8, 150u8, 125u8, 23u8, 48u8, 255u8,
						],
					)
				}
			}
		}
	}
	pub mod ranked_collective {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AddMember {
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct PromoteMember {
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DemoteMember {
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RemoveMember {
				pub who: ::subxt::utils::MultiAddress<
					::subxt::utils::AccountId32,
					::core::primitive::u32,
				>,
				pub min_rank: ::core::primitive::u16,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Vote {
				pub poll: ::core::primitive::u32,
				pub aye: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CleanupPoll {
				pub poll_index: ::core::primitive::u32,
				pub max: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Introduce a new member.
				///
				/// - `origin`: Must be the `AdminOrigin`.
				/// - `who`: Account of non-member which will become a member.
				/// - `rank`: The rank to give the new member.
				///
				///Weight: `O(1)`
				pub fn add_member(
					&self,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<AddMember> {
					::subxt::tx::Payload::new_static(
						"RankedCollective",
						"add_member",
						AddMember { who },
						[
							168u8, 166u8, 6u8, 167u8, 12u8, 109u8, 99u8, 96u8, 240u8, 57u8, 60u8,
							174u8, 57u8, 52u8, 131u8, 16u8, 230u8, 172u8, 23u8, 140u8, 48u8, 131u8,
							73u8, 131u8, 133u8, 217u8, 137u8, 50u8, 165u8, 149u8, 174u8, 188u8,
						],
					)
				}
				///Increment the rank of an existing member by one.
				///
				/// - `origin`: Must be the `AdminOrigin`.
				/// - `who`: Account of existing member.
				///
				///Weight: `O(1)`
				pub fn promote_member(
					&self,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<PromoteMember> {
					::subxt::tx::Payload::new_static(
						"RankedCollective",
						"promote_member",
						PromoteMember { who },
						[
							253u8, 173u8, 241u8, 51u8, 86u8, 53u8, 201u8, 217u8, 19u8, 193u8,
							223u8, 249u8, 125u8, 125u8, 97u8, 12u8, 36u8, 68u8, 93u8, 152u8, 83u8,
							14u8, 106u8, 38u8, 163u8, 216u8, 63u8, 79u8, 254u8, 6u8, 79u8, 80u8,
						],
					)
				}
				///Decrement the rank of an existing member by one. If the member is already at
				/// rank zero, then they are removed entirely.
				///
				/// - `origin`: Must be the `AdminOrigin`.
				/// - `who`: Account of existing member of rank greater than zero.
				///
				///Weight: `O(1)`, less if the member's index is highest in its rank.
				pub fn demote_member(
					&self,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
				) -> ::subxt::tx::Payload<DemoteMember> {
					::subxt::tx::Payload::new_static(
						"RankedCollective",
						"demote_member",
						DemoteMember { who },
						[
							199u8, 199u8, 22u8, 115u8, 223u8, 23u8, 187u8, 33u8, 89u8, 244u8,
							148u8, 87u8, 75u8, 187u8, 108u8, 176u8, 69u8, 250u8, 72u8, 90u8, 161u8,
							218u8, 14u8, 156u8, 82u8, 159u8, 200u8, 141u8, 217u8, 221u8, 65u8,
							174u8,
						],
					)
				}
				///Remove the member entirely.
				///
				/// - `origin`: Must be the `AdminOrigin`.
				/// - `who`: Account of existing member of rank greater than zero.
				/// - `min_rank`: The rank of the member or greater.
				///
				///Weight: `O(min_rank)`.
				pub fn remove_member(
					&self,
					who: ::subxt::utils::MultiAddress<
						::subxt::utils::AccountId32,
						::core::primitive::u32,
					>,
					min_rank: ::core::primitive::u16,
				) -> ::subxt::tx::Payload<RemoveMember> {
					::subxt::tx::Payload::new_static(
						"RankedCollective",
						"remove_member",
						RemoveMember { who, min_rank },
						[
							244u8, 61u8, 35u8, 202u8, 97u8, 223u8, 51u8, 2u8, 76u8, 170u8, 141u8,
							197u8, 90u8, 159u8, 112u8, 185u8, 180u8, 45u8, 51u8, 206u8, 121u8,
							227u8, 206u8, 134u8, 72u8, 243u8, 4u8, 83u8, 167u8, 63u8, 65u8, 44u8,
						],
					)
				}
				///Add an aye or nay vote for the sender to the given proposal.
				///
				/// - `origin`: Must be `Signed` by a member account.
				/// - `poll`: Index of a poll which is ongoing.
				/// - `aye`: `true` if the vote is to approve the proposal, `false` otherwise.
				///
				///Transaction fees are be waived if the member is voting on any particular
				/// proposal for the first time and the call is successful. Subsequent vote changes
				/// will charge a fee.
				///
				///Weight: `O(1)`, less if there was no previous vote on the poll by the member.
				pub fn vote(
					&self,
					poll: ::core::primitive::u32,
					aye: ::core::primitive::bool,
				) -> ::subxt::tx::Payload<Vote> {
					::subxt::tx::Payload::new_static(
						"RankedCollective",
						"vote",
						Vote { poll, aye },
						[
							76u8, 243u8, 228u8, 228u8, 168u8, 70u8, 128u8, 140u8, 206u8, 48u8,
							220u8, 178u8, 134u8, 107u8, 76u8, 106u8, 137u8, 0u8, 200u8, 156u8,
							21u8, 160u8, 123u8, 213u8, 251u8, 105u8, 94u8, 249u8, 63u8, 164u8,
							196u8, 243u8,
						],
					)
				}
				///Remove votes from the given poll. It must have ended.
				///
				/// - `origin`: Must be `Signed` by any account.
				/// - `poll_index`: Index of a poll which is completed and for which votes continue
				///   to
				///  exist.
				/// - `max`: Maximum number of vote items from remove in this call.
				///
				///Transaction fees are waived if the operation is successful.
				///
				///Weight `O(max)` (less if there are fewer items to remove than `max`).
				pub fn cleanup_poll(
					&self,
					poll_index: ::core::primitive::u32,
					max: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<CleanupPoll> {
					::subxt::tx::Payload::new_static(
						"RankedCollective",
						"cleanup_poll",
						CleanupPoll { poll_index, max },
						[
							163u8, 143u8, 138u8, 57u8, 50u8, 73u8, 137u8, 95u8, 35u8, 87u8, 114u8,
							216u8, 49u8, 151u8, 196u8, 247u8, 46u8, 255u8, 155u8, 63u8, 178u8,
							240u8, 54u8, 124u8, 9u8, 168u8, 11u8, 228u8, 205u8, 162u8, 233u8,
							183u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_ranked_collective::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A member `who` has been added.
			pub struct MemberAdded {
				pub who: ::subxt::utils::AccountId32,
			}
			impl ::subxt::events::StaticEvent for MemberAdded {
				const PALLET: &'static str = "RankedCollective";
				const EVENT: &'static str = "MemberAdded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The member `who`se rank has been changed to the given `rank`.
			pub struct RankChanged {
				pub who: ::subxt::utils::AccountId32,
				pub rank: ::core::primitive::u16,
			}
			impl ::subxt::events::StaticEvent for RankChanged {
				const PALLET: &'static str = "RankedCollective";
				const EVENT: &'static str = "RankChanged";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The member `who` of given `rank` has been removed from the collective.
			pub struct MemberRemoved {
				pub who: ::subxt::utils::AccountId32,
				pub rank: ::core::primitive::u16,
			}
			impl ::subxt::events::StaticEvent for MemberRemoved {
				const PALLET: &'static str = "RankedCollective";
				const EVENT: &'static str = "MemberRemoved";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///The member `who` has voted for the `poll` with the given `vote` leading to an
			/// updated `tally`.
			pub struct Voted {
				pub who: ::subxt::utils::AccountId32,
				pub poll: ::core::primitive::u32,
				pub vote: runtime_types::pallet_ranked_collective::VoteRecord,
				pub tally: runtime_types::pallet_ranked_collective::Tally,
			}
			impl ::subxt::events::StaticEvent for Voted {
				const PALLET: &'static str = "RankedCollective";
				const EVENT: &'static str = "Voted";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The number of members in the collective who have at least the rank according to
				/// the index of the vec.
				pub fn member_count(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u16>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedCollective",
						"MemberCount",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							122u8, 103u8, 33u8, 235u8, 19u8, 181u8, 16u8, 140u8, 233u8, 252u8,
							27u8, 219u8, 12u8, 127u8, 16u8, 137u8, 240u8, 120u8, 208u8, 247u8,
							81u8, 138u8, 52u8, 32u8, 120u8, 206u8, 141u8, 101u8, 215u8, 66u8,
							147u8, 170u8,
						],
					)
				}
				/// The number of members in the collective who have at least the rank according to
				/// the index of the vec.
				pub fn member_count_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedCollective",
						"MemberCount",
						Vec::new(),
						[
							122u8, 103u8, 33u8, 235u8, 19u8, 181u8, 16u8, 140u8, 233u8, 252u8,
							27u8, 219u8, 12u8, 127u8, 16u8, 137u8, 240u8, 120u8, 208u8, 247u8,
							81u8, 138u8, 52u8, 32u8, 120u8, 206u8, 141u8, 101u8, 215u8, 66u8,
							147u8, 170u8,
						],
					)
				}
				/// The current members of the collective.
				pub fn members(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_ranked_collective::MemberRecord,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedCollective",
						"Members",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							98u8, 137u8, 208u8, 103u8, 187u8, 115u8, 182u8, 10u8, 226u8, 35u8,
							218u8, 247u8, 229u8, 205u8, 104u8, 89u8, 150u8, 229u8, 247u8, 45u8,
							241u8, 51u8, 134u8, 210u8, 232u8, 159u8, 179u8, 232u8, 249u8, 153u8,
							186u8, 245u8,
						],
					)
				}
				/// The current members of the collective.
				pub fn members_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_ranked_collective::MemberRecord,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedCollective",
						"Members",
						Vec::new(),
						[
							98u8, 137u8, 208u8, 103u8, 187u8, 115u8, 182u8, 10u8, 226u8, 35u8,
							218u8, 247u8, 229u8, 205u8, 104u8, 89u8, 150u8, 229u8, 247u8, 45u8,
							241u8, 51u8, 134u8, 210u8, 232u8, 159u8, 179u8, 232u8, 249u8, 153u8,
							186u8, 245u8,
						],
					)
				}
				/// The index of each ranks's member into the group of members who have at least
				/// that rank.
				pub fn id_to_index(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u16>,
					_1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedCollective",
						"IdToIndex",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							186u8, 92u8, 44u8, 141u8, 26u8, 112u8, 63u8, 128u8, 66u8, 62u8, 160u8,
							33u8, 121u8, 155u8, 190u8, 153u8, 38u8, 255u8, 197u8, 21u8, 141u8,
							192u8, 157u8, 229u8, 149u8, 104u8, 11u8, 119u8, 161u8, 182u8, 248u8,
							105u8,
						],
					)
				}
				/// The index of each ranks's member into the group of members who have at least
				/// that rank.
				pub fn id_to_index_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedCollective",
						"IdToIndex",
						Vec::new(),
						[
							186u8, 92u8, 44u8, 141u8, 26u8, 112u8, 63u8, 128u8, 66u8, 62u8, 160u8,
							33u8, 121u8, 155u8, 190u8, 153u8, 38u8, 255u8, 197u8, 21u8, 141u8,
							192u8, 157u8, 229u8, 149u8, 104u8, 11u8, 119u8, 161u8, 182u8, 248u8,
							105u8,
						],
					)
				}
				/// The members in the collective by index. All indices in the range
				/// `0..MemberCount` will return `Some`, however a member's index is not guaranteed
				/// to remain unchanged over time.
				pub fn index_to_id(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u16>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedCollective",
						"IndexToId",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							216u8, 113u8, 138u8, 39u8, 227u8, 44u8, 222u8, 36u8, 175u8, 134u8,
							181u8, 1u8, 242u8, 50u8, 75u8, 177u8, 213u8, 252u8, 224u8, 241u8,
							195u8, 74u8, 163u8, 223u8, 100u8, 61u8, 96u8, 1u8, 205u8, 147u8, 63u8,
							64u8,
						],
					)
				}
				/// The members in the collective by index. All indices in the range
				/// `0..MemberCount` will return `Some`, however a member's index is not guaranteed
				/// to remain unchanged over time.
				pub fn index_to_id_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::subxt::utils::AccountId32,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedCollective",
						"IndexToId",
						Vec::new(),
						[
							216u8, 113u8, 138u8, 39u8, 227u8, 44u8, 222u8, 36u8, 175u8, 134u8,
							181u8, 1u8, 242u8, 50u8, 75u8, 177u8, 213u8, 252u8, 224u8, 241u8,
							195u8, 74u8, 163u8, 223u8, 100u8, 61u8, 96u8, 1u8, 205u8, 147u8, 63u8,
							64u8,
						],
					)
				}
				/// Votes on a given proposal, if it is ongoing.
				pub fn voting(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_ranked_collective::VoteRecord,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedCollective",
						"Voting",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							113u8, 198u8, 3u8, 155u8, 220u8, 110u8, 5u8, 50u8, 91u8, 232u8, 18u8,
							224u8, 39u8, 238u8, 17u8, 28u8, 21u8, 44u8, 36u8, 12u8, 109u8, 10u8,
							191u8, 81u8, 78u8, 76u8, 155u8, 66u8, 99u8, 180u8, 63u8, 99u8,
						],
					)
				}
				/// Votes on a given proposal, if it is ongoing.
				pub fn voting_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_ranked_collective::VoteRecord,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedCollective",
						"Voting",
						Vec::new(),
						[
							113u8, 198u8, 3u8, 155u8, 220u8, 110u8, 5u8, 50u8, 91u8, 232u8, 18u8,
							224u8, 39u8, 238u8, 17u8, 28u8, 21u8, 44u8, 36u8, 12u8, 109u8, 10u8,
							191u8, 81u8, 78u8, 76u8, 155u8, 66u8, 99u8, 180u8, 63u8, 99u8,
						],
					)
				}
				pub fn voting_cleanup(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedCollective",
						"VotingCleanup",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							49u8, 202u8, 198u8, 106u8, 238u8, 117u8, 209u8, 225u8, 166u8, 130u8,
							38u8, 236u8, 172u8, 59u8, 21u8, 168u8, 189u8, 41u8, 190u8, 54u8, 74u8,
							255u8, 230u8, 255u8, 160u8, 237u8, 70u8, 208u8, 44u8, 182u8, 96u8,
							157u8,
						],
					)
				}
				pub fn voting_cleanup_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"RankedCollective",
						"VotingCleanup",
						Vec::new(),
						[
							49u8, 202u8, 198u8, 106u8, 238u8, 117u8, 209u8, 225u8, 166u8, 130u8,
							38u8, 236u8, 172u8, 59u8, 21u8, 168u8, 189u8, 41u8, 190u8, 54u8, 74u8,
							255u8, 230u8, 255u8, 160u8, 237u8, 70u8, 208u8, 44u8, 182u8, 96u8,
							157u8,
						],
					)
				}
			}
		}
	}
	pub mod fast_unstake {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RegisterFastUnstake;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Deregister;
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Control {
				pub eras_to_check: ::core::primitive::u32,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Register oneself for fast-unstake.
				///
				///The dispatch origin of this call must be signed by the controller account,
				/// similar to `staking::unbond`.
				///
				///The stash associated with the origin must have no ongoing unlocking chunks. If
				///successful, this will fully unbond and chill the stash. Then, it will enqueue
				/// the stash to be checked in further blocks.
				///
				///If by the time this is called, the stash is actually eligible for fast-unstake,
				/// then they are guaranteed to remain eligible, because the call will chill them as
				/// well.
				///
				///If the check works, the entire staking data is removed, i.e. the stash is fully
				///unstaked.
				///
				///If the check fails, the stash remains chilled and waiting for being unbonded as
				/// in with the normal staking system, but they lose part of their unbonding chunks
				/// due to consuming the chain's resources.
				pub fn register_fast_unstake(&self) -> ::subxt::tx::Payload<RegisterFastUnstake> {
					::subxt::tx::Payload::new_static(
						"FastUnstake",
						"register_fast_unstake",
						RegisterFastUnstake {},
						[
							254u8, 85u8, 128u8, 135u8, 172u8, 170u8, 34u8, 145u8, 79u8, 117u8,
							234u8, 90u8, 16u8, 174u8, 159u8, 197u8, 27u8, 239u8, 180u8, 85u8,
							116u8, 23u8, 254u8, 30u8, 197u8, 110u8, 48u8, 184u8, 177u8, 129u8,
							42u8, 122u8,
						],
					)
				}
				///Deregister oneself from the fast-unstake.
				///
				///This is useful if one is registered, they are still waiting, and they change
				/// their mind.
				///
				///Note that the associated stash is still fully unbonded and chilled as a
				/// consequence of calling `register_fast_unstake`. This should probably be followed
				/// by a call to `Staking::rebond`.
				pub fn deregister(&self) -> ::subxt::tx::Payload<Deregister> {
					::subxt::tx::Payload::new_static(
						"FastUnstake",
						"deregister",
						Deregister {},
						[
							198u8, 180u8, 253u8, 148u8, 124u8, 145u8, 175u8, 121u8, 42u8, 181u8,
							41u8, 155u8, 229u8, 181u8, 66u8, 140u8, 103u8, 86u8, 242u8, 155u8,
							192u8, 34u8, 157u8, 107u8, 211u8, 162u8, 1u8, 144u8, 35u8, 252u8, 88u8,
							21u8,
						],
					)
				}
				///Control the operation of this pallet.
				///
				///Dispatch origin must be signed by the [`Config::ControlOrigin`].
				pub fn control(
					&self,
					eras_to_check: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<Control> {
					::subxt::tx::Payload::new_static(
						"FastUnstake",
						"control",
						Control { eras_to_check },
						[
							92u8, 241u8, 123u8, 251u8, 82u8, 36u8, 209u8, 87u8, 238u8, 56u8, 32u8,
							54u8, 190u8, 89u8, 167u8, 2u8, 36u8, 249u8, 131u8, 54u8, 217u8, 217u8,
							231u8, 167u8, 232u8, 35u8, 108u8, 193u8, 70u8, 224u8, 47u8, 142u8,
						],
					)
				}
			}
		}
		///The events of this pallet.
		pub type Event = runtime_types::pallet_fast_unstake::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A staker was unstaked.
			pub struct Unstaked {
				pub stash: ::subxt::utils::AccountId32,
				pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
			}
			impl ::subxt::events::StaticEvent for Unstaked {
				const PALLET: &'static str = "FastUnstake";
				const EVENT: &'static str = "Unstaked";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A staker was slashed for requesting fast-unstake whilst being exposed.
			pub struct Slashed {
				pub stash: ::subxt::utils::AccountId32,
				pub amount: ::core::primitive::u128,
			}
			impl ::subxt::events::StaticEvent for Slashed {
				const PALLET: &'static str = "FastUnstake";
				const EVENT: &'static str = "Slashed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///An internal error happened. Operations will be paused now.
			pub struct InternalError;
			impl ::subxt::events::StaticEvent for InternalError {
				const PALLET: &'static str = "FastUnstake";
				const EVENT: &'static str = "InternalError";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A batch was partially checked for the given eras, but the process did not finish.
			pub struct BatchChecked {
				pub eras: ::std::vec::Vec<::core::primitive::u32>,
			}
			impl ::subxt::events::StaticEvent for BatchChecked {
				const PALLET: &'static str = "FastUnstake";
				const EVENT: &'static str = "BatchChecked";
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///A batch of a given size was terminated.
			///
			///This is always follows by a number of `Unstaked` or `Slashed` events, marking the
			/// end of the batch. A new batch will be created upon next block.
			pub struct BatchFinished {
				pub size: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for BatchFinished {
				const PALLET: &'static str = "FastUnstake";
				const EVENT: &'static str = "BatchFinished";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The current "head of the queue" being unstaked.
				pub fn head(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_fast_unstake::types::UnstakeRequest,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"FastUnstake",
						"Head",
						vec![],
						[
							206u8, 19u8, 169u8, 239u8, 214u8, 136u8, 16u8, 102u8, 82u8, 110u8,
							128u8, 205u8, 102u8, 96u8, 148u8, 190u8, 67u8, 75u8, 2u8, 213u8, 134u8,
							143u8, 40u8, 57u8, 54u8, 66u8, 170u8, 42u8, 135u8, 212u8, 108u8, 177u8,
						],
					)
				}
				/// The map of all accounts wishing to be unstaked.
				///
				/// Keeps track of `AccountId` wishing to unstake and it's corresponding deposit.
				///
				/// TWOX-NOTE: SAFE since `AccountId` is a secure hash.
				pub fn queue(
					&self,
					_0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"FastUnstake",
						"Queue",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							250u8, 208u8, 88u8, 68u8, 8u8, 87u8, 27u8, 59u8, 120u8, 242u8, 79u8,
							54u8, 108u8, 15u8, 62u8, 143u8, 126u8, 66u8, 159u8, 159u8, 55u8, 212u8,
							190u8, 26u8, 171u8, 90u8, 156u8, 205u8, 173u8, 189u8, 230u8, 71u8,
						],
					)
				}
				/// The map of all accounts wishing to be unstaked.
				///
				/// Keeps track of `AccountId` wishing to unstake and it's corresponding deposit.
				///
				/// TWOX-NOTE: SAFE since `AccountId` is a secure hash.
				pub fn queue_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u128,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"FastUnstake",
						"Queue",
						Vec::new(),
						[
							250u8, 208u8, 88u8, 68u8, 8u8, 87u8, 27u8, 59u8, 120u8, 242u8, 79u8,
							54u8, 108u8, 15u8, 62u8, 143u8, 126u8, 66u8, 159u8, 159u8, 55u8, 212u8,
							190u8, 26u8, 171u8, 90u8, 156u8, 205u8, 173u8, 189u8, 230u8, 71u8,
						],
					)
				}
				///Counter for the related counted storage map
				pub fn counter_for_queue(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"FastUnstake",
						"CounterForQueue",
						vec![],
						[
							241u8, 174u8, 224u8, 214u8, 204u8, 37u8, 117u8, 62u8, 114u8, 63u8,
							123u8, 121u8, 201u8, 128u8, 26u8, 60u8, 170u8, 24u8, 112u8, 5u8, 248u8,
							7u8, 143u8, 17u8, 150u8, 91u8, 23u8, 90u8, 237u8, 4u8, 138u8, 210u8,
						],
					)
				}
				/// Number of eras to check per block.
				///
				/// If set to 0, this pallet does absolutely nothing.
				///
				/// Based on the amount of weight available at `on_idle`, up to this many eras of a
				/// single nominator might be checked.
				pub fn eras_to_check_per_block(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"FastUnstake",
						"ErasToCheckPerBlock",
						vec![],
						[
							85u8, 55u8, 18u8, 11u8, 75u8, 176u8, 36u8, 253u8, 183u8, 250u8, 203u8,
							178u8, 201u8, 79u8, 101u8, 89u8, 51u8, 142u8, 254u8, 23u8, 49u8, 140u8,
							195u8, 116u8, 66u8, 124u8, 165u8, 161u8, 151u8, 174u8, 37u8, 51u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// Deposit to take for unstaking, to make sure we're able to slash the it in order
				/// to cover the costs of resources on unsuccessful unstake.
				pub fn deposit(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
					::subxt::constants::Address::new_static(
						"FastUnstake",
						"Deposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
			}
		}
	}
	pub mod message_queue {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ReapPage {
				pub message_origin: ::core::primitive::u32,
				pub page_index: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ExecuteOverweight {
				pub message_origin: ::core::primitive::u32,
				pub page: ::core::primitive::u32,
				pub index: ::core::primitive::u32,
				pub weight_limit: runtime_types::sp_weights::weight_v2::Weight,
			}
			pub struct TransactionApi;
			impl TransactionApi {
				///Remove a page which has no more messages remaining to be processed or is stale.
				pub fn reap_page(
					&self,
					message_origin: ::core::primitive::u32,
					page_index: ::core::primitive::u32,
				) -> ::subxt::tx::Payload<ReapPage> {
					::subxt::tx::Payload::new_static(
						"MessageQueue",
						"reap_page",
						ReapPage { message_origin, page_index },
						[
							20u8, 245u8, 55u8, 254u8, 129u8, 5u8, 196u8, 189u8, 213u8, 199u8, 91u8,
							194u8, 15u8, 159u8, 241u8, 150u8, 66u8, 234u8, 59u8, 10u8, 115u8,
							214u8, 28u8, 206u8, 80u8, 236u8, 3u8, 67u8, 227u8, 61u8, 133u8, 129u8,
						],
					)
				}
				///Execute an overweight message.
				///
				///Temporary processing errors will be propagated whereas permanent errors are
				/// treated as success condition.
				///
				/// - `origin`: Must be `Signed`.
				/// - `message_origin`: The origin from which the message to be executed arrived.
				/// - `page`: The page in the queue in which the message to be executed is sitting.
				/// - `index`: The index into the queue of the message to be executed.
				/// - `weight_limit`: The maximum amount of weight allowed to be consumed in the
				///   execution
				///  of the message.
				///
				///Benchmark complexity considerations: O(index + weight_limit).
				pub fn execute_overweight(
					&self,
					message_origin: ::core::primitive::u32,
					page: ::core::primitive::u32,
					index: ::core::primitive::u32,
					weight_limit: runtime_types::sp_weights::weight_v2::Weight,
				) -> ::subxt::tx::Payload<ExecuteOverweight> {
					::subxt::tx::Payload::new_static(
						"MessageQueue",
						"execute_overweight",
						ExecuteOverweight { message_origin, page, index, weight_limit },
						[
							122u8, 227u8, 143u8, 162u8, 79u8, 110u8, 72u8, 91u8, 77u8, 84u8, 14u8,
							101u8, 40u8, 110u8, 110u8, 151u8, 38u8, 120u8, 190u8, 156u8, 146u8,
							178u8, 15u8, 172u8, 238u8, 97u8, 123u8, 223u8, 189u8, 169u8, 230u8,
							149u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::pallet_message_queue::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Message discarded due to an inability to decode the item. Usually caused by state
			///corruption.
			pub struct Discarded {
				pub hash: ::subxt::utils::H256,
			}
			impl ::subxt::events::StaticEvent for Discarded {
				const PALLET: &'static str = "MessageQueue";
				const EVENT: &'static str = "Discarded";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Message discarded due to an error in the `MessageProcessor` (usually a format
			/// error).
			pub struct ProcessingFailed {
				pub hash: ::subxt::utils::H256,
				pub origin: ::core::primitive::u32,
				pub error: runtime_types::frame_support::traits::messages::ProcessMessageError,
			}
			impl ::subxt::events::StaticEvent for ProcessingFailed {
				const PALLET: &'static str = "MessageQueue";
				const EVENT: &'static str = "ProcessingFailed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Message is processed.
			pub struct Processed {
				pub hash: ::subxt::utils::H256,
				pub origin: ::core::primitive::u32,
				pub weight_used: runtime_types::sp_weights::weight_v2::Weight,
				pub success: ::core::primitive::bool,
			}
			impl ::subxt::events::StaticEvent for Processed {
				const PALLET: &'static str = "MessageQueue";
				const EVENT: &'static str = "Processed";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///Message placed in overweight queue.
			pub struct OverweightEnqueued {
				pub hash: ::subxt::utils::H256,
				pub origin: ::core::primitive::u32,
				pub page_index: ::core::primitive::u32,
				pub message_index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for OverweightEnqueued {
				const PALLET: &'static str = "MessageQueue";
				const EVENT: &'static str = "OverweightEnqueued";
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			///This page was reaped.
			pub struct PageReaped {
				pub origin: ::core::primitive::u32,
				pub index: ::core::primitive::u32,
			}
			impl ::subxt::events::StaticEvent for PageReaped {
				const PALLET: &'static str = "MessageQueue";
				const EVENT: &'static str = "PageReaped";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				/// The index of the first and last (non-empty) pages.
				pub fn book_state_for(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_message_queue::BookState<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"MessageQueue",
						"BookStateFor",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							244u8, 203u8, 59u8, 77u8, 44u8, 118u8, 14u8, 140u8, 184u8, 132u8,
							137u8, 57u8, 48u8, 150u8, 144u8, 215u8, 148u8, 65u8, 191u8, 28u8, 29u8,
							138u8, 6u8, 231u8, 37u8, 225u8, 217u8, 98u8, 222u8, 165u8, 185u8,
							212u8,
						],
					)
				}
				/// The index of the first and last (non-empty) pages.
				pub fn book_state_for_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_message_queue::BookState<::core::primitive::u32>,
					(),
					::subxt::storage::address::Yes,
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"MessageQueue",
						"BookStateFor",
						Vec::new(),
						[
							244u8, 203u8, 59u8, 77u8, 44u8, 118u8, 14u8, 140u8, 184u8, 132u8,
							137u8, 57u8, 48u8, 150u8, 144u8, 215u8, 148u8, 65u8, 191u8, 28u8, 29u8,
							138u8, 6u8, 231u8, 37u8, 225u8, 217u8, 98u8, 222u8, 165u8, 185u8,
							212u8,
						],
					)
				}
				/// The origin at which we should begin servicing.
				pub fn service_head(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"MessageQueue",
						"ServiceHead",
						vec![],
						[
							147u8, 46u8, 89u8, 59u8, 244u8, 188u8, 89u8, 220u8, 250u8, 200u8,
							204u8, 10u8, 96u8, 84u8, 25u8, 183u8, 12u8, 130u8, 231u8, 23u8, 73u8,
							15u8, 192u8, 51u8, 209u8, 121u8, 144u8, 20u8, 172u8, 40u8, 123u8, 87u8,
						],
					)
				}
				/// The map of page indices to pages.
				pub fn pages(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_message_queue::Page<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"MessageQueue",
						"Pages",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							85u8, 45u8, 56u8, 214u8, 228u8, 20u8, 184u8, 109u8, 175u8, 24u8, 208u8,
							80u8, 90u8, 208u8, 52u8, 12u8, 77u8, 201u8, 46u8, 33u8, 215u8, 225u8,
							15u8, 109u8, 100u8, 222u8, 15u8, 7u8, 114u8, 186u8, 129u8, 67u8,
						],
					)
				}
				/// The map of page indices to pages.
				pub fn pages_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::pallet_message_queue::Page<::core::primitive::u32>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"MessageQueue",
						"Pages",
						Vec::new(),
						[
							85u8, 45u8, 56u8, 214u8, 228u8, 20u8, 184u8, 109u8, 175u8, 24u8, 208u8,
							80u8, 90u8, 208u8, 52u8, 12u8, 77u8, 201u8, 46u8, 33u8, 215u8, 225u8,
							15u8, 109u8, 100u8, 222u8, 15u8, 7u8, 114u8, 186u8, 129u8, 67u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				/// The size of the page; this implies the maximum message size which can be sent.
				///
				/// A good value depends on the expected message sizes, their weights, the weight
				/// that is available for processing them and the maximal needed message size. The
				/// maximal message size is slightly lower than this as defined by
				/// [`MaxMessageLenOf`].
				pub fn heap_size(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"MessageQueue",
						"HeapSize",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The maximum number of stale pages (i.e. of overweight messages) allowed before
				/// culling can happen. Once there are more stale pages than this, then historical
				/// pages may be dropped, even if they contain unprocessed overweight messages.
				pub fn max_stale(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
					::subxt::constants::Address::new_static(
						"MessageQueue",
						"MaxStale",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				/// The amount of weight (if any) which should be provided to the message queue for
				/// servicing enqueued items.
				///
				/// This may be legitimately `None` in the case that you will call
				/// `ServiceQueues::service_queues` manually.
				pub fn service_weight(
					&self,
				) -> ::subxt::constants::Address<
					::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
				> {
					::subxt::constants::Address::new_static(
						"MessageQueue",
						"ServiceWeight",
						[
							199u8, 205u8, 164u8, 188u8, 101u8, 240u8, 98u8, 54u8, 0u8, 78u8, 218u8,
							77u8, 164u8, 196u8, 0u8, 194u8, 181u8, 251u8, 195u8, 24u8, 98u8, 147u8,
							169u8, 53u8, 22u8, 202u8, 66u8, 236u8, 163u8, 36u8, 162u8, 46u8,
						],
					)
				}
			}
		}
	}
	pub mod pov {
		use super::{root_mod, runtime_types};
		///Contains one variant per dispatchable that can be called by an extrinsic.
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct EmitEvent;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Noop;
			pub struct TransactionApi;
			impl TransactionApi {
				pub fn emit_event(&self) -> ::subxt::tx::Payload<EmitEvent> {
					::subxt::tx::Payload::new_static(
						"Pov",
						"emit_event",
						EmitEvent {},
						[
							14u8, 138u8, 169u8, 158u8, 130u8, 71u8, 252u8, 8u8, 217u8, 46u8, 10u8,
							251u8, 35u8, 65u8, 52u8, 108u8, 75u8, 165u8, 250u8, 44u8, 23u8, 29u8,
							78u8, 254u8, 233u8, 69u8, 14u8, 230u8, 245u8, 51u8, 56u8, 170u8,
						],
					)
				}
				pub fn noop(&self) -> ::subxt::tx::Payload<Noop> {
					::subxt::tx::Payload::new_static(
						"Pov",
						"noop",
						Noop {},
						[
							43u8, 170u8, 96u8, 3u8, 54u8, 244u8, 186u8, 139u8, 31u8, 132u8, 17u8,
							29u8, 229u8, 218u8, 193u8, 49u8, 37u8, 105u8, 29u8, 202u8, 71u8, 117u8,
							24u8, 33u8, 216u8, 76u8, 131u8, 252u8, 93u8, 231u8, 222u8, 137u8,
						],
					)
				}
			}
		}
		/**
		The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
		by this pallet.
		*/
		pub type Event = runtime_types::frame_benchmarking_pallet_pov::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TestEvent;
			impl ::subxt::events::StaticEvent for TestEvent {
				const PALLET: &'static str = "Pov";
				const EVENT: &'static str = "TestEvent";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub struct StorageApi;
			impl StorageApi {
				pub fn value(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Pov",
						"Value",
						vec![],
						[
							9u8, 211u8, 85u8, 208u8, 134u8, 247u8, 45u8, 29u8, 206u8, 49u8, 103u8,
							68u8, 215u8, 78u8, 216u8, 26u8, 203u8, 154u8, 216u8, 106u8, 42u8,
							195u8, 219u8, 145u8, 192u8, 28u8, 211u8, 109u8, 129u8, 241u8, 229u8,
							43u8,
						],
					)
				}
				pub fn value2(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Pov",
						"Value2",
						vec![],
						[
							48u8, 80u8, 236u8, 198u8, 2u8, 183u8, 200u8, 162u8, 54u8, 196u8, 217u8,
							190u8, 27u8, 68u8, 19u8, 38u8, 28u8, 209u8, 152u8, 100u8, 177u8, 59u8,
							18u8, 223u8, 80u8, 245u8, 195u8, 170u8, 231u8, 66u8, 101u8, 186u8,
						],
					)
				}
				/// A value without a MEL bound.
				pub fn unbounded_value(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::core::primitive::u8>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Pov",
						"UnboundedValue",
						vec![],
						[
							0u8, 89u8, 151u8, 63u8, 80u8, 181u8, 206u8, 202u8, 117u8, 3u8, 126u8,
							199u8, 132u8, 43u8, 116u8, 156u8, 20u8, 180u8, 223u8, 87u8, 125u8,
							162u8, 90u8, 8u8, 39u8, 157u8, 124u8, 211u8, 38u8, 230u8, 32u8, 207u8,
						],
					)
				}
				/// A value with a MEL bound of 32 byte.
				pub fn bounded_value(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Pov",
						"BoundedValue",
						vec![],
						[
							247u8, 231u8, 116u8, 175u8, 89u8, 223u8, 189u8, 248u8, 218u8, 51u8,
							112u8, 213u8, 72u8, 161u8, 114u8, 69u8, 32u8, 245u8, 200u8, 245u8,
							130u8, 121u8, 246u8, 182u8, 1u8, 173u8, 59u8, 168u8, 206u8, 69u8,
							252u8, 139u8,
						],
					)
				}
				/// 4MiB value.
				pub fn large_value(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Pov",
						"LargeValue",
						vec![],
						[
							155u8, 64u8, 255u8, 30u8, 93u8, 13u8, 120u8, 254u8, 23u8, 144u8, 235u8,
							57u8, 196u8, 166u8, 236u8, 191u8, 158u8, 11u8, 37u8, 104u8, 228u8,
							15u8, 174u8, 246u8, 23u8, 138u8, 116u8, 0u8, 155u8, 17u8, 211u8, 206u8,
						],
					)
				}
				pub fn large_value2(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					::subxt::storage::address::Yes,
					(),
					(),
				> {
					::subxt::storage::address::Address::new_static(
						"Pov",
						"LargeValue2",
						vec![],
						[
							5u8, 177u8, 104u8, 108u8, 190u8, 191u8, 230u8, 107u8, 95u8, 181u8,
							245u8, 248u8, 7u8, 59u8, 136u8, 34u8, 185u8, 39u8, 76u8, 84u8, 115u8,
							60u8, 168u8, 247u8, 53u8, 81u8, 70u8, 141u8, 136u8, 7u8, 222u8, 217u8,
						],
					)
				}
				/// A map with a maximum of 1M entries.
				pub fn map1_m(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Pov",
						"Map1M",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							127u8, 84u8, 81u8, 165u8, 88u8, 21u8, 81u8, 221u8, 121u8, 208u8, 147u8,
							137u8, 74u8, 205u8, 16u8, 95u8, 233u8, 238u8, 73u8, 89u8, 112u8, 94u8,
							110u8, 7u8, 161u8, 4u8, 128u8, 82u8, 139u8, 124u8, 114u8, 99u8,
						],
					)
				}
				/// A map with a maximum of 1M entries.
				pub fn map1_m_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Pov",
						"Map1M",
						Vec::new(),
						[
							127u8, 84u8, 81u8, 165u8, 88u8, 21u8, 81u8, 221u8, 121u8, 208u8, 147u8,
							137u8, 74u8, 205u8, 16u8, 95u8, 233u8, 238u8, 73u8, 89u8, 112u8, 94u8,
							110u8, 7u8, 161u8, 4u8, 128u8, 82u8, 139u8, 124u8, 114u8, 99u8,
						],
					)
				}
				/// A map with a maximum of 16M entries.
				pub fn map16_m(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Pov",
						"Map16M",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							44u8, 183u8, 133u8, 18u8, 15u8, 127u8, 115u8, 20u8, 120u8, 138u8, 93u8,
							23u8, 102u8, 48u8, 228u8, 8u8, 129u8, 111u8, 44u8, 128u8, 50u8, 21u8,
							242u8, 206u8, 191u8, 150u8, 41u8, 31u8, 37u8, 214u8, 45u8, 178u8,
						],
					)
				}
				/// A map with a maximum of 16M entries.
				pub fn map16_m_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Pov",
						"Map16M",
						Vec::new(),
						[
							44u8, 183u8, 133u8, 18u8, 15u8, 127u8, 115u8, 20u8, 120u8, 138u8, 93u8,
							23u8, 102u8, 48u8, 228u8, 8u8, 129u8, 111u8, 44u8, 128u8, 50u8, 21u8,
							242u8, 206u8, 191u8, 150u8, 41u8, 31u8, 37u8, 214u8, 45u8, 178u8,
						],
					)
				}
				pub fn double_map1_m(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
					_1: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Pov",
						"DoubleMap1M",
						vec![
							::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
							::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
						],
						[
							41u8, 211u8, 39u8, 148u8, 201u8, 100u8, 60u8, 156u8, 199u8, 19u8,
							157u8, 134u8, 100u8, 159u8, 224u8, 4u8, 55u8, 195u8, 83u8, 151u8,
							225u8, 89u8, 94u8, 227u8, 160u8, 84u8, 137u8, 126u8, 173u8, 187u8, 9u8,
							191u8,
						],
					)
				}
				pub fn double_map1_m_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::core::primitive::u32,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Pov",
						"DoubleMap1M",
						Vec::new(),
						[
							41u8, 211u8, 39u8, 148u8, 201u8, 100u8, 60u8, 156u8, 199u8, 19u8,
							157u8, 134u8, 100u8, 159u8, 224u8, 4u8, 55u8, 195u8, 83u8, 151u8,
							225u8, 89u8, 94u8, 227u8, 160u8, 84u8, 137u8, 126u8, 173u8, 187u8, 9u8,
							191u8,
						],
					)
				}
				pub fn unbounded_map(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Pov",
						"UnboundedMap",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							151u8, 19u8, 220u8, 245u8, 243u8, 150u8, 100u8, 20u8, 160u8, 176u8,
							238u8, 89u8, 105u8, 140u8, 247u8, 81u8, 165u8, 123u8, 190u8, 251u8,
							128u8, 29u8, 36u8, 196u8, 17u8, 181u8, 66u8, 185u8, 68u8, 2u8, 52u8,
							108u8,
						],
					)
				}
				pub fn unbounded_map_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::core::primitive::u32>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Pov",
						"UnboundedMap",
						Vec::new(),
						[
							151u8, 19u8, 220u8, 245u8, 243u8, 150u8, 100u8, 20u8, 160u8, 176u8,
							238u8, 89u8, 105u8, 140u8, 247u8, 81u8, 165u8, 123u8, 190u8, 251u8,
							128u8, 29u8, 36u8, 196u8, 17u8, 181u8, 66u8, 185u8, 68u8, 2u8, 52u8,
							108u8,
						],
					)
				}
				pub fn unbounded_map2(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Pov",
						"UnboundedMap2",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							103u8, 138u8, 223u8, 26u8, 234u8, 2u8, 180u8, 212u8, 107u8, 220u8,
							245u8, 154u8, 204u8, 229u8, 235u8, 174u8, 194u8, 223u8, 245u8, 45u8,
							223u8, 3u8, 212u8, 169u8, 56u8, 162u8, 202u8, 135u8, 219u8, 7u8, 151u8,
							132u8,
						],
					)
				}
				pub fn unbounded_map2_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::core::primitive::u32>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Pov",
						"UnboundedMap2",
						Vec::new(),
						[
							103u8, 138u8, 223u8, 26u8, 234u8, 2u8, 180u8, 212u8, 107u8, 220u8,
							245u8, 154u8, 204u8, 229u8, 235u8, 174u8, 194u8, 223u8, 245u8, 45u8,
							223u8, 3u8, 212u8, 169u8, 56u8, 162u8, 202u8, 135u8, 219u8, 7u8, 151u8,
							132u8,
						],
					)
				}
				pub fn unbounded_map_twox(
					&self,
					_0: impl ::std::borrow::Borrow<::core::primitive::u32>,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::core::primitive::u32>,
					::subxt::storage::address::Yes,
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Pov",
						"UnboundedMapTwox",
						vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
						[
							115u8, 200u8, 232u8, 118u8, 4u8, 61u8, 79u8, 134u8, 121u8, 183u8, 29u8,
							118u8, 119u8, 189u8, 171u8, 177u8, 241u8, 81u8, 122u8, 58u8, 216u8,
							1u8, 141u8, 165u8, 172u8, 41u8, 168u8, 212u8, 222u8, 199u8, 35u8,
							154u8,
						],
					)
				}
				pub fn unbounded_map_twox_root(
					&self,
				) -> ::subxt::storage::address::Address<
					::subxt::storage::address::StaticStorageMapKey,
					::std::vec::Vec<::core::primitive::u32>,
					(),
					(),
					::subxt::storage::address::Yes,
				> {
					::subxt::storage::address::Address::new_static(
						"Pov",
						"UnboundedMapTwox",
						Vec::new(),
						[
							115u8, 200u8, 232u8, 118u8, 4u8, 61u8, 79u8, 134u8, 121u8, 183u8, 29u8,
							118u8, 119u8, 189u8, 171u8, 177u8, 241u8, 81u8, 122u8, 58u8, 216u8,
							1u8, 141u8, 165u8, 172u8, 41u8, 168u8, 212u8, 222u8, 199u8, 35u8,
							154u8,
						],
					)
				}
			}
		}
	}
	pub mod runtime_types {
		use super::runtime_types;
		pub mod babe_runtime {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct NposSolution16 {
				pub votes1: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes2: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					),
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes3: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 2usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes4: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 3usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes5: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 4usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes6: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 5usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes7: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 6usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes8: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 7usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes9: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 8usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes10: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 9usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes11: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 10usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes12: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 11usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes13: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 12usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes14: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 13usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes15: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 14usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
				pub votes16: ::std::vec::Vec<(
					::subxt::ext::codec::Compact<::core::primitive::u32>,
					[(
						::subxt::ext::codec::Compact<::core::primitive::u16>,
						::subxt::ext::codec::Compact<
							runtime_types::sp_arithmetic::per_things::PerU16,
						>,
					); 15usize],
					::subxt::ext::codec::Compact<::core::primitive::u16>,
				)>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum OriginCaller {
				#[codec(index = 0)]
				system(
					runtime_types::frame_support::dispatch::RawOrigin<::subxt::utils::AccountId32>,
				),
				#[codec(index = 13)]
				Council(runtime_types::pallet_collective::RawOrigin<::subxt::utils::AccountId32>),
				#[codec(index = 14)]
				TechnicalCommittee(
					runtime_types::pallet_collective::RawOrigin<::subxt::utils::AccountId32>,
				),
				#[codec(index = 52)]
				AllianceMotion(
					runtime_types::pallet_collective::RawOrigin<::subxt::utils::AccountId32>,
				),
				#[codec(index = 4)]
				Void(runtime_types::sp_core::Void),
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum ProxyType {
				#[codec(index = 0)]
				Any,
				#[codec(index = 1)]
				NonTransfer,
				#[codec(index = 2)]
				Governance,
				#[codec(index = 3)]
				Staking,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Runtime;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum RuntimeCall {
				#[codec(index = 0)]
				System(runtime_types::frame_system::pallet::Call),
				#[codec(index = 1)]
				Utility(runtime_types::pallet_utility::pallet::Call),
				#[codec(index = 2)]
				Babe(runtime_types::pallet_babe::pallet::Call),
				#[codec(index = 3)]
				Timestamp(runtime_types::pallet_timestamp::pallet::Call),
				#[codec(index = 5)]
				Indices(runtime_types::pallet_indices::pallet::Call),
				#[codec(index = 6)]
				Balances(runtime_types::pallet_balances::pallet::Call),
				#[codec(index = 9)]
				ElectionProviderMultiPhase(
					runtime_types::pallet_election_provider_multi_phase::pallet::Call,
				),
				#[codec(index = 10)]
				Staking(runtime_types::pallet_staking::pallet::pallet::Call),
				#[codec(index = 11)]
				Session(runtime_types::pallet_session::pallet::Call),
				#[codec(index = 12)]
				Democracy(runtime_types::pallet_democracy::pallet::Call),
				#[codec(index = 13)]
				Council(runtime_types::pallet_collective::pallet::Call),
				#[codec(index = 14)]
				TechnicalCommittee(runtime_types::pallet_collective::pallet::Call),
				#[codec(index = 15)]
				Elections(runtime_types::pallet_elections_phragmen::pallet::Call),
				#[codec(index = 16)]
				TechnicalMembership(runtime_types::pallet_membership::pallet::Call),
				#[codec(index = 17)]
				Grandpa(runtime_types::pallet_grandpa::pallet::Call),
				#[codec(index = 18)]
				Treasury(runtime_types::pallet_treasury::pallet::Call),
				#[codec(index = 19)]
				Sudo(runtime_types::pallet_sudo::pallet::Call),
				#[codec(index = 20)]
				ImOnline(runtime_types::pallet_im_online::pallet::Call),
				#[codec(index = 25)]
				Identity(runtime_types::pallet_identity::pallet::Call),
				#[codec(index = 26)]
				Society(runtime_types::pallet_society::pallet::Call),
				#[codec(index = 27)]
				Recovery(runtime_types::pallet_recovery::pallet::Call),
				#[codec(index = 28)]
				Vesting(runtime_types::pallet_vesting::pallet::Call),
				#[codec(index = 29)]
				Scheduler(runtime_types::pallet_scheduler::pallet::Call),
				#[codec(index = 30)]
				Glutton(runtime_types::pallet_glutton::pallet::Call),
				#[codec(index = 31)]
				Preimage(runtime_types::pallet_preimage::pallet::Call),
				#[codec(index = 32)]
				Proxy(runtime_types::pallet_proxy::pallet::Call),
				#[codec(index = 33)]
				Multisig(runtime_types::pallet_multisig::pallet::Call),
				#[codec(index = 34)]
				Bounties(runtime_types::pallet_bounties::pallet::Call),
				#[codec(index = 35)]
				Tips(runtime_types::pallet_tips::pallet::Call),
				#[codec(index = 36)]
				Assets(runtime_types::pallet_assets::pallet::Call),
				#[codec(index = 37)]
				Lottery(runtime_types::pallet_lottery::pallet::Call),
				#[codec(index = 38)]
				Nis(runtime_types::pallet_nis::pallet::Call),
				#[codec(index = 39)]
				Uniques(runtime_types::pallet_uniques::pallet::Call),
				#[codec(index = 40)]
				Nfts(runtime_types::pallet_nfts::pallet::Call),
				#[codec(index = 41)]
				Salary(runtime_types::pallet_salary::pallet::Call),
				#[codec(index = 42)]
				CoreFellowship(runtime_types::pallet_core_fellowship::pallet::Call),
				#[codec(index = 43)]
				TransactionStorage(runtime_types::pallet_transaction_storage::pallet::Call),
				#[codec(index = 44)]
				VoterList(runtime_types::pallet_bags_list::pallet::Call),
				#[codec(index = 45)]
				StateTrieMigration(runtime_types::pallet_state_trie_migration::pallet::Call),
				#[codec(index = 46)]
				ChildBounties(runtime_types::pallet_child_bounties::pallet::Call),
				#[codec(index = 47)]
				Referenda(runtime_types::pallet_referenda::pallet::Call),
				#[codec(index = 48)]
				Remark(runtime_types::pallet_remark::pallet::Call),
				#[codec(index = 49)]
				RootTesting(runtime_types::pallet_root_testing::pallet::Call),
				#[codec(index = 50)]
				ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Call),
				#[codec(index = 51)]
				Whitelist(runtime_types::pallet_whitelist::pallet::Call),
				#[codec(index = 52)]
				AllianceMotion(runtime_types::pallet_collective::pallet::Call),
				#[codec(index = 53)]
				Alliance(runtime_types::pallet_alliance::pallet::Call),
				#[codec(index = 54)]
				NominationPools(runtime_types::pallet_nomination_pools::pallet::Call),
				#[codec(index = 55)]
				RankedPolls(runtime_types::pallet_referenda::pallet::Call),
				#[codec(index = 56)]
				RankedCollective(runtime_types::pallet_ranked_collective::pallet::Call),
				#[codec(index = 57)]
				FastUnstake(runtime_types::pallet_fast_unstake::pallet::Call),
				#[codec(index = 58)]
				MessageQueue(runtime_types::pallet_message_queue::pallet::Call),
				#[codec(index = 59)]
				Pov(runtime_types::frame_benchmarking_pallet_pov::pallet::Call),
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum RuntimeEvent {
				#[codec(index = 0)]
				System(runtime_types::frame_system::pallet::Event),
				#[codec(index = 1)]
				Utility(runtime_types::pallet_utility::pallet::Event),
				#[codec(index = 5)]
				Indices(runtime_types::pallet_indices::pallet::Event),
				#[codec(index = 6)]
				Balances(runtime_types::pallet_balances::pallet::Event),
				#[codec(index = 7)]
				TransactionPayment(runtime_types::pallet_transaction_payment::pallet::Event),
				#[codec(index = 8)]
				AssetTxPayment(runtime_types::pallet_asset_tx_payment::pallet::Event),
				#[codec(index = 9)]
				ElectionProviderMultiPhase(
					runtime_types::pallet_election_provider_multi_phase::pallet::Event,
				),
				#[codec(index = 10)]
				Staking(runtime_types::pallet_staking::pallet::pallet::Event),
				#[codec(index = 11)]
				Session(runtime_types::pallet_session::pallet::Event),
				#[codec(index = 12)]
				Democracy(runtime_types::pallet_democracy::pallet::Event),
				#[codec(index = 13)]
				Council(runtime_types::pallet_collective::pallet::Event),
				#[codec(index = 14)]
				TechnicalCommittee(runtime_types::pallet_collective::pallet::Event),
				#[codec(index = 15)]
				Elections(runtime_types::pallet_elections_phragmen::pallet::Event),
				#[codec(index = 16)]
				TechnicalMembership(runtime_types::pallet_membership::pallet::Event),
				#[codec(index = 17)]
				Grandpa(runtime_types::pallet_grandpa::pallet::Event),
				#[codec(index = 18)]
				Treasury(runtime_types::pallet_treasury::pallet::Event),
				#[codec(index = 19)]
				Sudo(runtime_types::pallet_sudo::pallet::Event),
				#[codec(index = 20)]
				ImOnline(runtime_types::pallet_im_online::pallet::Event),
				#[codec(index = 22)]
				Offences(runtime_types::pallet_offences::pallet::Event),
				#[codec(index = 25)]
				Identity(runtime_types::pallet_identity::pallet::Event),
				#[codec(index = 26)]
				Society(runtime_types::pallet_society::pallet::Event),
				#[codec(index = 27)]
				Recovery(runtime_types::pallet_recovery::pallet::Event),
				#[codec(index = 28)]
				Vesting(runtime_types::pallet_vesting::pallet::Event),
				#[codec(index = 29)]
				Scheduler(runtime_types::pallet_scheduler::pallet::Event),
				#[codec(index = 30)]
				Glutton(runtime_types::pallet_glutton::pallet::Event),
				#[codec(index = 31)]
				Preimage(runtime_types::pallet_preimage::pallet::Event),
				#[codec(index = 32)]
				Proxy(runtime_types::pallet_proxy::pallet::Event),
				#[codec(index = 33)]
				Multisig(runtime_types::pallet_multisig::pallet::Event),
				#[codec(index = 34)]
				Bounties(runtime_types::pallet_bounties::pallet::Event),
				#[codec(index = 35)]
				Tips(runtime_types::pallet_tips::pallet::Event),
				#[codec(index = 36)]
				Assets(runtime_types::pallet_assets::pallet::Event),
				#[codec(index = 37)]
				Lottery(runtime_types::pallet_lottery::pallet::Event),
				#[codec(index = 38)]
				Nis(runtime_types::pallet_nis::pallet::Event),
				#[codec(index = 39)]
				Uniques(runtime_types::pallet_uniques::pallet::Event),
				#[codec(index = 40)]
				Nfts(runtime_types::pallet_nfts::pallet::Event),
				#[codec(index = 41)]
				Salary(runtime_types::pallet_salary::pallet::Event),
				#[codec(index = 42)]
				CoreFellowship(runtime_types::pallet_core_fellowship::pallet::Event),
				#[codec(index = 43)]
				TransactionStorage(runtime_types::pallet_transaction_storage::pallet::Event),
				#[codec(index = 44)]
				VoterList(runtime_types::pallet_bags_list::pallet::Event),
				#[codec(index = 45)]
				StateTrieMigration(runtime_types::pallet_state_trie_migration::pallet::Event),
				#[codec(index = 46)]
				ChildBounties(runtime_types::pallet_child_bounties::pallet::Event),
				#[codec(index = 47)]
				Referenda(runtime_types::pallet_referenda::pallet::Event),
				#[codec(index = 48)]
				Remark(runtime_types::pallet_remark::pallet::Event),
				#[codec(index = 50)]
				ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Event),
				#[codec(index = 51)]
				Whitelist(runtime_types::pallet_whitelist::pallet::Event),
				#[codec(index = 52)]
				AllianceMotion(runtime_types::pallet_collective::pallet::Event),
				#[codec(index = 53)]
				Alliance(runtime_types::pallet_alliance::pallet::Event),
				#[codec(index = 54)]
				NominationPools(runtime_types::pallet_nomination_pools::pallet::Event),
				#[codec(index = 55)]
				RankedPolls(runtime_types::pallet_referenda::pallet::Event),
				#[codec(index = 56)]
				RankedCollective(runtime_types::pallet_ranked_collective::pallet::Event),
				#[codec(index = 57)]
				FastUnstake(runtime_types::pallet_fast_unstake::pallet::Event),
				#[codec(index = 58)]
				MessageQueue(runtime_types::pallet_message_queue::pallet::Event),
				#[codec(index = 59)]
				Pov(runtime_types::frame_benchmarking_pallet_pov::pallet::Event),
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SessionKeys {
				pub grandpa: runtime_types::sp_consensus_grandpa::app::Public,
				pub babe: runtime_types::sp_consensus_babe::app::Public,
				pub im_online: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
				pub authority_discovery: runtime_types::sp_authority_discovery::app::Public,
			}
		}
		pub mod bounded_collections {
			use super::runtime_types;
			pub mod bounded_btree_map {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct BoundedBTreeMap<_0, _1>(pub ::subxt::utils::KeyedVec<_0, _1>);
			}
			pub mod bounded_btree_set {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct BoundedBTreeSet<_0>(pub ::std::vec::Vec<_0>);
			}
			pub mod bounded_vec {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct BoundedVec<_0>(pub ::std::vec::Vec<_0>);
			}
			pub mod weak_bounded_vec {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct WeakBoundedVec<_0>(pub ::std::vec::Vec<_0>);
			}
		}
		pub mod finality_grandpa {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Equivocation<_0, _1, _2> {
				pub round_number: ::core::primitive::u64,
				pub identity: _0,
				pub first: (_1, _2),
				pub second: (_1, _2),
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Precommit<_0, _1> {
				pub target_hash: _0,
				pub target_number: _1,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Prevote<_0, _1> {
				pub target_hash: _0,
				pub target_number: _1,
			}
		}
		pub mod frame_benchmarking_pallet_pov {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					emit_event,
					#[codec(index = 1)]
					noop,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					TestEvent,
				}
			}
		}
		pub mod frame_support {
			use super::runtime_types;
			pub mod dispatch {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum DispatchClass {
					#[codec(index = 0)]
					Normal,
					#[codec(index = 1)]
					Operational,
					#[codec(index = 2)]
					Mandatory,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct DispatchInfo {
					pub weight: runtime_types::sp_weights::weight_v2::Weight,
					pub class: runtime_types::frame_support::dispatch::DispatchClass,
					pub pays_fee: runtime_types::frame_support::dispatch::Pays,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Pays {
					#[codec(index = 0)]
					Yes,
					#[codec(index = 1)]
					No,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct PerDispatchClass<_0> {
					pub normal: _0,
					pub operational: _0,
					pub mandatory: _0,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct PostDispatchInfo {
					pub actual_weight:
						::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
					pub pays_fee: runtime_types::frame_support::dispatch::Pays,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum RawOrigin<_0> {
					#[codec(index = 0)]
					Root,
					#[codec(index = 1)]
					Signed(_0),
					#[codec(index = 2)]
					None,
				}
			}
			pub mod traits {
				use super::runtime_types;
				pub mod messages {
					use super::runtime_types;
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum ProcessMessageError {
						#[codec(index = 0)]
						BadFormat,
						#[codec(index = 1)]
						Corrupt,
						#[codec(index = 2)]
						Unsupported,
						#[codec(index = 3)]
						Overweight(runtime_types::sp_weights::weight_v2::Weight),
						#[codec(index = 4)]
						Yield,
					}
				}
				pub mod misc {
					use super::runtime_types;
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct WrapperOpaque<_0>(
						#[codec(compact)] pub ::core::primitive::u32,
						pub _0,
					);
				}
				pub mod preimages {
					use super::runtime_types;
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum Bounded<_0> {
						#[codec(index = 0)]
						Legacy {
							hash: ::subxt::utils::H256,
						},
						#[codec(index = 1)]
						Inline(
							runtime_types::bounded_collections::bounded_vec::BoundedVec<
								::core::primitive::u8,
							>,
						),
						#[codec(index = 2)]
						Lookup {
							hash: ::subxt::utils::H256,
							len: ::core::primitive::u32,
						},
						__Ignore(::core::marker::PhantomData<_0>),
					}
				}
				pub mod schedule {
					use super::runtime_types;
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum DispatchTime<_0> {
						#[codec(index = 0)]
						At(_0),
						#[codec(index = 1)]
						After(_0),
					}
				}
				pub mod tokens {
					use super::runtime_types;
					pub mod misc {
						use super::runtime_types;
						#[derive(
							::subxt::ext::codec::Decode,
							::subxt::ext::codec::Encode,
							::subxt::ext::scale_decode::DecodeAsType,
							::subxt::ext::scale_encode::EncodeAsType,
							Debug,
						)]
						#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
						#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
						pub enum BalanceStatus {
							#[codec(index = 0)]
							Free,
							#[codec(index = 1)]
							Reserved,
						}
					}
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct PalletId(pub [::core::primitive::u8; 8usize]);
		}
		pub mod frame_system {
			use super::runtime_types;
			pub mod extensions {
				use super::runtime_types;
				pub mod check_genesis {
					use super::runtime_types;
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct CheckGenesis;
				}
				pub mod check_mortality {
					use super::runtime_types;
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct CheckMortality(pub runtime_types::sp_runtime::generic::era::Era);
				}
				pub mod check_non_zero_sender {
					use super::runtime_types;
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct CheckNonZeroSender;
				}
				pub mod check_nonce {
					use super::runtime_types;
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct CheckNonce(#[codec(compact)] pub ::core::primitive::u32);
				}
				pub mod check_spec_version {
					use super::runtime_types;
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct CheckSpecVersion;
				}
				pub mod check_tx_version {
					use super::runtime_types;
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct CheckTxVersion;
				}
				pub mod check_weight {
					use super::runtime_types;
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct CheckWeight;
				}
			}
			pub mod limits {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct BlockLength {
					pub max: runtime_types::frame_support::dispatch::PerDispatchClass<
						::core::primitive::u32,
					>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct BlockWeights {
					pub base_block: runtime_types::sp_weights::weight_v2::Weight,
					pub max_block: runtime_types::sp_weights::weight_v2::Weight,
					pub per_class: runtime_types::frame_support::dispatch::PerDispatchClass<
						runtime_types::frame_system::limits::WeightsPerClass,
					>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct WeightsPerClass {
					pub base_extrinsic: runtime_types::sp_weights::weight_v2::Weight,
					pub max_extrinsic:
						::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
					pub max_total:
						::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
					pub reserved:
						::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Make some on-chain remark.
					///
					///## Complexity
					/// - `O(1)`
					remark { remark: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 1)]
					///Set the number of pages in the WebAssembly environment's heap.
					set_heap_pages { pages: ::core::primitive::u64 },
					#[codec(index = 2)]
					///Set the new runtime code.
					///
					///## Complexity
					/// - `O(C + S)` where `C` length of `code` and `S` complexity of
					///   `can_set_code`
					set_code { code: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 3)]
					///Set the new runtime code without doing any checks of the given `code`.
					///
					///## Complexity
					/// - `O(C)` where `C` length of `code`
					set_code_without_checks { code: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 4)]
					///Set some items of storage.
					set_storage {
						items: ::std::vec::Vec<(
							::std::vec::Vec<::core::primitive::u8>,
							::std::vec::Vec<::core::primitive::u8>,
						)>,
					},
					#[codec(index = 5)]
					///Kill some items from storage.
					kill_storage { keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>> },
					#[codec(index = 6)]
					///Kill all storage items with a key that starts with the given prefix.
					///
					///**NOTE:** We rely on the Root origin to provide us the number of subkeys
					/// under the prefix we are removing to accurately calculate the weight of this
					/// function.
					kill_prefix {
						prefix: ::std::vec::Vec<::core::primitive::u8>,
						subkeys: ::core::primitive::u32,
					},
					#[codec(index = 7)]
					///Make some on-chain remark and emit event.
					remark_with_event { remark: ::std::vec::Vec<::core::primitive::u8> },
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Error for the System pallet
				pub enum Error {
					#[codec(index = 0)]
					///The name of specification does not match between the current runtime
					///and the new runtime.
					InvalidSpecName,
					#[codec(index = 1)]
					///The specification version is not allowed to decrease between the current
					/// runtime and the new runtime.
					SpecVersionNeedsToIncrease,
					#[codec(index = 2)]
					///Failed to extract the runtime version from the new runtime.
					///
					///Either calling `Core_version` or decoding `RuntimeVersion` failed.
					FailedToExtractRuntimeVersion,
					#[codec(index = 3)]
					///Suicide called when the account has non-default composite data.
					NonDefaultComposite,
					#[codec(index = 4)]
					///There is a non-zero reference count preventing the account from being
					/// purged.
					NonZeroRefCount,
					#[codec(index = 5)]
					///The origin filter prevent the call to be dispatched.
					CallFiltered,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Event for the System pallet.
				pub enum Event {
					#[codec(index = 0)]
					///An extrinsic completed successfully.
					ExtrinsicSuccess {
						dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
					},
					#[codec(index = 1)]
					///An extrinsic failed.
					ExtrinsicFailed {
						dispatch_error: runtime_types::sp_runtime::DispatchError,
						dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
					},
					#[codec(index = 2)]
					///`:code` was updated.
					CodeUpdated,
					#[codec(index = 3)]
					///A new account was created.
					NewAccount { account: ::subxt::utils::AccountId32 },
					#[codec(index = 4)]
					///An account was reaped.
					KilledAccount { account: ::subxt::utils::AccountId32 },
					#[codec(index = 5)]
					///On on-chain remark happened.
					Remarked { sender: ::subxt::utils::AccountId32, hash: ::subxt::utils::H256 },
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AccountInfo<_0, _1> {
				pub nonce: _0,
				pub consumers: _0,
				pub providers: _0,
				pub sufficients: _0,
				pub data: _1,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct EventRecord<_0, _1> {
				pub phase: runtime_types::frame_system::Phase,
				pub event: _0,
				pub topics: ::std::vec::Vec<_1>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct LastRuntimeUpgradeInfo {
				#[codec(compact)]
				pub spec_version: ::core::primitive::u32,
				pub spec_name: ::std::string::String,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum Phase {
				#[codec(index = 0)]
				ApplyExtrinsic(::core::primitive::u32),
				#[codec(index = 1)]
				Finalization,
				#[codec(index = 2)]
				Initialization,
			}
		}
		pub mod pallet_alliance {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Add a new proposal to be voted on.
					///
					///Must be called by a Fellow.
					propose {
						#[codec(compact)]
						threshold: ::core::primitive::u32,
						proposal: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					///Add an aye or nay vote for the sender to the given proposal.
					///
					///Must be called by a Fellow.
					vote {
						proposal: ::subxt::utils::H256,
						#[codec(compact)]
						index: ::core::primitive::u32,
						approve: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					///Close a vote that is either approved, disapproved, or whose voting period
					/// has ended.
					///
					///Must be called by a Fellow.
					close_old_weight {
						proposal_hash: ::subxt::utils::H256,
						#[codec(compact)]
						index: ::core::primitive::u32,
						#[codec(compact)]
						proposal_weight_bound: runtime_types::sp_weights::OldWeight,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					///Initialize the Alliance, onboard fellows and allies.
					///
					///The Alliance must be empty, and the call must provide some founding
					/// members.
					///
					///Must be called by the Root origin.
					init_members {
						fellows: ::std::vec::Vec<::subxt::utils::AccountId32>,
						allies: ::std::vec::Vec<::subxt::utils::AccountId32>,
					},
					#[codec(index = 4)]
					///Disband the Alliance, remove all active members and unreserve deposits.
					///
					///Witness data must be set.
					disband { witness: runtime_types::pallet_alliance::types::DisbandWitness },
					#[codec(index = 5)]
					///Set a new IPFS CID to the alliance rule.
					set_rule { rule: runtime_types::pallet_alliance::types::Cid },
					#[codec(index = 6)]
					///Make an announcement of a new IPFS CID about alliance issues.
					announce { announcement: runtime_types::pallet_alliance::types::Cid },
					#[codec(index = 7)]
					///Remove an announcement.
					remove_announcement { announcement: runtime_types::pallet_alliance::types::Cid },
					#[codec(index = 8)]
					///Submit oneself for candidacy. A fixed deposit is reserved.
					join_alliance,
					#[codec(index = 9)]
					///A Fellow can nominate someone to join the alliance as an Ally. There is no
					/// deposit required from the nominator or nominee.
					nominate_ally {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 10)]
					///Elevate an Ally to Fellow.
					elevate_ally {
						ally: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 11)]
					///As a member, give a retirement notice and start a retirement period
					/// required to pass in order to retire.
					give_retirement_notice,
					#[codec(index = 12)]
					///As a member, retire from the Alliance and unreserve the deposit.
					///
					///This can only be done once you have called `give_retirement_notice` and the
					///`RetirementPeriod` has passed.
					retire,
					#[codec(index = 13)]
					///Kick a member from the Alliance and slash its deposit.
					kick_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 14)]
					///Add accounts or websites to the list of unscrupulous items.
					add_unscrupulous_items {
						items: ::std::vec::Vec<
							runtime_types::pallet_alliance::UnscrupulousItem<
								::subxt::utils::AccountId32,
								runtime_types::bounded_collections::bounded_vec::BoundedVec<
									::core::primitive::u8,
								>,
							>,
						>,
					},
					#[codec(index = 15)]
					///Deem some items no longer unscrupulous.
					remove_unscrupulous_items {
						items: ::std::vec::Vec<
							runtime_types::pallet_alliance::UnscrupulousItem<
								::subxt::utils::AccountId32,
								runtime_types::bounded_collections::bounded_vec::BoundedVec<
									::core::primitive::u8,
								>,
							>,
						>,
					},
					#[codec(index = 16)]
					///Close a vote that is either approved, disapproved, or whose voting period
					/// has ended.
					///
					///Must be called by a Fellow.
					close {
						proposal_hash: ::subxt::utils::H256,
						#[codec(compact)]
						index: ::core::primitive::u32,
						proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 17)]
					///Abdicate one's position as a voting member and just be an Ally. May be used
					/// by Fellows who do not want to leave the Alliance but do not have the
					/// capacity to participate operationally for some time.
					abdicate_fellow_status,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///The Alliance has not been initialized yet, therefore accounts cannot join
					/// it.
					AllianceNotYetInitialized,
					#[codec(index = 1)]
					///The Alliance has been initialized, therefore cannot be initialized again.
					AllianceAlreadyInitialized,
					#[codec(index = 2)]
					///Account is already a member.
					AlreadyMember,
					#[codec(index = 3)]
					///Account is not a member.
					NotMember,
					#[codec(index = 4)]
					///Account is not an ally.
					NotAlly,
					#[codec(index = 5)]
					///Account does not have voting rights.
					NoVotingRights,
					#[codec(index = 6)]
					///Account is already an elevated (fellow) member.
					AlreadyElevated,
					#[codec(index = 7)]
					///Item is already listed as unscrupulous.
					AlreadyUnscrupulous,
					#[codec(index = 8)]
					///Account has been deemed unscrupulous by the Alliance and is not welcome to
					/// join or be nominated.
					AccountNonGrata,
					#[codec(index = 9)]
					///Item has not been deemed unscrupulous.
					NotListedAsUnscrupulous,
					#[codec(index = 10)]
					///The number of unscrupulous items exceeds `MaxUnscrupulousItems`.
					TooManyUnscrupulousItems,
					#[codec(index = 11)]
					///Length of website URL exceeds `MaxWebsiteUrlLength`.
					TooLongWebsiteUrl,
					#[codec(index = 12)]
					///Balance is insufficient for the required deposit.
					InsufficientFunds,
					#[codec(index = 13)]
					///The account's identity does not have display field and website field.
					WithoutIdentityDisplayAndWebsite,
					#[codec(index = 14)]
					///The account's identity has no good judgement.
					WithoutGoodIdentityJudgement,
					#[codec(index = 15)]
					///The proposal hash is not found.
					MissingProposalHash,
					#[codec(index = 16)]
					///The announcement is not found.
					MissingAnnouncement,
					#[codec(index = 17)]
					///Number of members exceeds `MaxMembersCount`.
					TooManyMembers,
					#[codec(index = 18)]
					///Number of announcements exceeds `MaxAnnouncementsCount`.
					TooManyAnnouncements,
					#[codec(index = 19)]
					///Invalid witness data given.
					BadWitness,
					#[codec(index = 20)]
					///Account already gave retirement notice
					AlreadyRetiring,
					#[codec(index = 21)]
					///Account did not give a retirement notice required to retire.
					RetirementNoticeNotGiven,
					#[codec(index = 22)]
					///Retirement period has not passed.
					RetirementPeriodNotPassed,
					#[codec(index = 23)]
					///Fellows must be provided to initialize the Alliance.
					FellowsMissing,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A new rule has been set.
					NewRuleSet { rule: runtime_types::pallet_alliance::types::Cid },
					#[codec(index = 1)]
					///A new announcement has been proposed.
					Announced { announcement: runtime_types::pallet_alliance::types::Cid },
					#[codec(index = 2)]
					///An on-chain announcement has been removed.
					AnnouncementRemoved { announcement: runtime_types::pallet_alliance::types::Cid },
					#[codec(index = 3)]
					///Some accounts have been initialized as members (fellows/allies).
					MembersInitialized {
						fellows: ::std::vec::Vec<::subxt::utils::AccountId32>,
						allies: ::std::vec::Vec<::subxt::utils::AccountId32>,
					},
					#[codec(index = 4)]
					///An account has been added as an Ally and reserved its deposit.
					NewAllyJoined {
						ally: ::subxt::utils::AccountId32,
						nominator: ::core::option::Option<::subxt::utils::AccountId32>,
						reserved: ::core::option::Option<::core::primitive::u128>,
					},
					#[codec(index = 5)]
					///An ally has been elevated to Fellow.
					AllyElevated { ally: ::subxt::utils::AccountId32 },
					#[codec(index = 6)]
					///A member gave retirement notice and their retirement period started.
					MemberRetirementPeriodStarted { member: ::subxt::utils::AccountId32 },
					#[codec(index = 7)]
					///A member has retired with its deposit unreserved.
					MemberRetired {
						member: ::subxt::utils::AccountId32,
						unreserved: ::core::option::Option<::core::primitive::u128>,
					},
					#[codec(index = 8)]
					///A member has been kicked out with its deposit slashed.
					MemberKicked {
						member: ::subxt::utils::AccountId32,
						slashed: ::core::option::Option<::core::primitive::u128>,
					},
					#[codec(index = 9)]
					///Accounts or websites have been added into the list of unscrupulous items.
					UnscrupulousItemAdded {
						items: ::std::vec::Vec<
							runtime_types::pallet_alliance::UnscrupulousItem<
								::subxt::utils::AccountId32,
								runtime_types::bounded_collections::bounded_vec::BoundedVec<
									::core::primitive::u8,
								>,
							>,
						>,
					},
					#[codec(index = 10)]
					///Accounts or websites have been removed from the list of unscrupulous items.
					UnscrupulousItemRemoved {
						items: ::std::vec::Vec<
							runtime_types::pallet_alliance::UnscrupulousItem<
								::subxt::utils::AccountId32,
								runtime_types::bounded_collections::bounded_vec::BoundedVec<
									::core::primitive::u8,
								>,
							>,
						>,
					},
					#[codec(index = 11)]
					///Alliance disbanded. Includes number deleted members and unreserved
					/// deposits.
					AllianceDisbanded {
						fellow_members: ::core::primitive::u32,
						ally_members: ::core::primitive::u32,
						unreserved: ::core::primitive::u32,
					},
					#[codec(index = 12)]
					///A Fellow abdicated their voting rights. They are now an Ally.
					FellowAbdicated { fellow: ::subxt::utils::AccountId32 },
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Cid {
					pub version: runtime_types::pallet_alliance::types::Version,
					pub codec: ::core::primitive::u64,
					pub hash: runtime_types::pallet_alliance::types::Multihash,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct DisbandWitness {
					#[codec(compact)]
					pub fellow_members: ::core::primitive::u32,
					#[codec(compact)]
					pub ally_members: ::core::primitive::u32,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Multihash {
					pub code: ::core::primitive::u64,
					pub digest: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Version {
					#[codec(index = 0)]
					V0,
					#[codec(index = 1)]
					V1,
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum MemberRole {
				#[codec(index = 0)]
				Fellow,
				#[codec(index = 1)]
				Ally,
				#[codec(index = 2)]
				Retiring,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum UnscrupulousItem<_0, _1> {
				#[codec(index = 0)]
				AccountId(_0),
				#[codec(index = 1)]
				Website(_1),
			}
		}
		pub mod pallet_asset_tx_payment {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A transaction fee `actual_fee`, of which `tip` was added to the minimum
					/// inclusion fee, has been paid by `who` in an asset `asset_id`.
					AssetTxFeePaid {
						who: ::subxt::utils::AccountId32,
						actual_fee: ::core::primitive::u128,
						tip: ::core::primitive::u128,
						asset_id: ::core::option::Option<::core::primitive::u32>,
					},
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ChargeAssetTxPayment {
				#[codec(compact)]
				pub tip: ::core::primitive::u128,
				pub asset_id: ::core::option::Option<::core::primitive::u32>,
			}
		}
		pub mod pallet_assets {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Issue a new class of fungible assets from a public origin.
					///
					///This new asset class has no assets initially and its owner is the origin.
					///
					///The origin must conform to the configured `CreateOrigin` and have
					/// sufficient funds free.
					///
					///Funds of sender are reserved by `AssetDeposit`.
					///
					///Parameters:
					/// - `id`: The identifier of the new asset. This must not be currently in use
					///   to identify
					///an existing asset.
					/// - `admin`: The admin of this class of assets. The admin is the initial
					///   address of each
					///member of the asset class's admin team.
					/// - `min_balance`: The minimum balance of this new asset that any single
					///   account must
					///have. If an account's balance is reduced below this, then it collapses to
					/// zero.
					///
					///Emits `Created` event when successful.
					///
					///Weight: `O(1)`
					create {
						#[codec(compact)]
						id: ::core::primitive::u32,
						admin: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						min_balance: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					///Issue a new class of fungible assets from a privileged origin.
					///
					///This new asset class has no assets initially.
					///
					///The origin must conform to `ForceOrigin`.
					///
					///Unlike `create`, no funds are reserved.
					///
					/// - `id`: The identifier of the new asset. This must not be currently in use
					///   to identify
					///an existing asset.
					/// - `owner`: The owner of this class of assets. The owner has full superuser
					///   permissions
					///over this asset, but may later change and configure the permissions using
					///`transfer_ownership` and `set_team`.
					/// - `min_balance`: The minimum balance of this new asset that any single
					///   account must
					///have. If an account's balance is reduced below this, then it collapses to
					/// zero.
					///
					///Emits `ForceCreated` event when successful.
					///
					///Weight: `O(1)`
					force_create {
						#[codec(compact)]
						id: ::core::primitive::u32,
						owner: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						is_sufficient: ::core::primitive::bool,
						#[codec(compact)]
						min_balance: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					///Start the process of destroying a fungible asset class.
					///
					///`start_destroy` is the first in a series of extrinsics that should be
					/// called, to allow destruction of an asset class.
					///
					///The origin must conform to `ForceOrigin` or must be `Signed` by the asset's
					/// `owner`.
					///
					/// - `id`: The identifier of the asset to be destroyed. This must identify an
					///   existing
					///  asset.
					///
					///The asset class must be frozen before calling `start_destroy`.
					start_destroy {
						#[codec(compact)]
						id: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					///Destroy all accounts associated with a given asset.
					///
					///`destroy_accounts` should only be called after `start_destroy` has been
					/// called, and the asset is in a `Destroying` state.
					///
					///Due to weight restrictions, this function may need to be called multiple
					/// times to fully destroy all accounts. It will destroy `RemoveItemsLimit`
					/// accounts at a time.
					///
					/// - `id`: The identifier of the asset to be destroyed. This must identify an
					///   existing
					///  asset.
					///
					///Each call emits the `Event::DestroyedAccounts` event.
					destroy_accounts {
						#[codec(compact)]
						id: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					///Destroy all approvals associated with a given asset up to the max
					/// (T::RemoveItemsLimit).
					///
					///`destroy_approvals` should only be called after `start_destroy` has been
					/// called, and the asset is in a `Destroying` state.
					///
					///Due to weight restrictions, this function may need to be called multiple
					/// times to fully destroy all approvals. It will destroy `RemoveItemsLimit`
					/// approvals at a time.
					///
					/// - `id`: The identifier of the asset to be destroyed. This must identify an
					///   existing
					///  asset.
					///
					///Each call emits the `Event::DestroyedApprovals` event.
					destroy_approvals {
						#[codec(compact)]
						id: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					///Complete destroying asset and unreserve currency.
					///
					///`finish_destroy` should only be called after `start_destroy` has been
					/// called, and the asset is in a `Destroying` state. All accounts or approvals
					/// should be destroyed before hand.
					///
					/// - `id`: The identifier of the asset to be destroyed. This must identify an
					///   existing
					///  asset.
					///
					///Each successful call emits the `Event::Destroyed` event.
					finish_destroy {
						#[codec(compact)]
						id: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					///Mint assets of a particular class.
					///
					///The origin must be Signed and the sender must be the Issuer of the asset
					/// `id`.
					///
					/// - `id`: The identifier of the asset to have some amount minted.
					/// - `beneficiary`: The account to be credited with the minted assets.
					/// - `amount`: The amount of the asset to be minted.
					///
					///Emits `Issued` event when successful.
					///
					///Weight: `O(1)`
					///Modes: Pre-existing balance of `beneficiary`; Account pre-existence of
					/// `beneficiary`.
					mint {
						#[codec(compact)]
						id: ::core::primitive::u32,
						beneficiary: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 7)]
					///Reduce the balance of `who` by as much as possible up to `amount` assets of
					/// `id`.
					///
					///Origin must be Signed and the sender should be the Manager of the asset
					/// `id`.
					///
					///Bails with `NoAccount` if the `who` is already dead.
					///
					/// - `id`: The identifier of the asset to have some amount burned.
					/// - `who`: The account to be debited from.
					/// - `amount`: The maximum amount by which `who`'s balance should be reduced.
					///
					///Emits `Burned` with the actual amount burned. If this takes the balance to
					/// below the minimum for the asset, then the amount burned is increased to
					/// take it to zero.
					///
					///Weight: `O(1)`
					///Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
					burn {
						#[codec(compact)]
						id: ::core::primitive::u32,
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					///Move some assets from the sender account to another.
					///
					///Origin must be Signed.
					///
					/// - `id`: The identifier of the asset to have some amount transferred.
					/// - `target`: The account to be credited.
					/// - `amount`: The amount by which the sender's balance of assets should be
					///   reduced and
					///`target`'s balance increased. The amount actually transferred may be
					/// slightly greater in the case that the transfer would otherwise take the
					/// sender balance above zero but below the minimum balance. Must be greater
					/// than zero.
					///
					///Emits `Transferred` with the actual amount transferred. If this takes the
					/// source balance to below the minimum for the asset, then the amount
					/// transferred is increased to take it to zero.
					///
					///Weight: `O(1)`
					///Modes: Pre-existence of `target`; Post-existence of sender; Account
					/// pre-existence of `target`.
					transfer {
						#[codec(compact)]
						id: ::core::primitive::u32,
						target: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					///Move some assets from the sender account to another, keeping the sender
					/// account alive.
					///
					///Origin must be Signed.
					///
					/// - `id`: The identifier of the asset to have some amount transferred.
					/// - `target`: The account to be credited.
					/// - `amount`: The amount by which the sender's balance of assets should be
					///   reduced and
					///`target`'s balance increased. The amount actually transferred may be
					/// slightly greater in the case that the transfer would otherwise take the
					/// sender balance above zero but below the minimum balance. Must be greater
					/// than zero.
					///
					///Emits `Transferred` with the actual amount transferred. If this takes the
					/// source balance to below the minimum for the asset, then the amount
					/// transferred is increased to take it to zero.
					///
					///Weight: `O(1)`
					///Modes: Pre-existence of `target`; Post-existence of sender; Account
					/// pre-existence of `target`.
					transfer_keep_alive {
						#[codec(compact)]
						id: ::core::primitive::u32,
						target: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 10)]
					///Move some assets from one account to another.
					///
					///Origin must be Signed and the sender should be the Admin of the asset `id`.
					///
					/// - `id`: The identifier of the asset to have some amount transferred.
					/// - `source`: The account to be debited.
					/// - `dest`: The account to be credited.
					/// - `amount`: The amount by which the `source`'s balance of assets should be
					///   reduced and
					///`dest`'s balance increased. The amount actually transferred may be slightly
					/// greater in the case that the transfer would otherwise take the `source`
					/// balance above zero but below the minimum balance. Must be greater than
					/// zero.
					///
					///Emits `Transferred` with the actual amount transferred. If this takes the
					/// source balance to below the minimum for the asset, then the amount
					/// transferred is increased to take it to zero.
					///
					///Weight: `O(1)`
					///Modes: Pre-existence of `dest`; Post-existence of `source`; Account
					/// pre-existence of `dest`.
					force_transfer {
						#[codec(compact)]
						id: ::core::primitive::u32,
						source: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						dest: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 11)]
					///Disallow further unprivileged transfers from an account.
					///
					///Origin must be Signed and the sender should be the Freezer of the asset
					/// `id`.
					///
					/// - `id`: The identifier of the asset to be frozen.
					/// - `who`: The account to be frozen.
					///
					///Emits `Frozen`.
					///
					///Weight: `O(1)`
					freeze {
						#[codec(compact)]
						id: ::core::primitive::u32,
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 12)]
					///Allow unprivileged transfers from an account again.
					///
					///Origin must be Signed and the sender should be the Admin of the asset `id`.
					///
					/// - `id`: The identifier of the asset to be frozen.
					/// - `who`: The account to be unfrozen.
					///
					///Emits `Thawed`.
					///
					///Weight: `O(1)`
					thaw {
						#[codec(compact)]
						id: ::core::primitive::u32,
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 13)]
					///Disallow further unprivileged transfers for the asset class.
					///
					///Origin must be Signed and the sender should be the Freezer of the asset
					/// `id`.
					///
					/// - `id`: The identifier of the asset to be frozen.
					///
					///Emits `Frozen`.
					///
					///Weight: `O(1)`
					freeze_asset {
						#[codec(compact)]
						id: ::core::primitive::u32,
					},
					#[codec(index = 14)]
					///Allow unprivileged transfers for the asset again.
					///
					///Origin must be Signed and the sender should be the Admin of the asset `id`.
					///
					/// - `id`: The identifier of the asset to be thawed.
					///
					///Emits `Thawed`.
					///
					///Weight: `O(1)`
					thaw_asset {
						#[codec(compact)]
						id: ::core::primitive::u32,
					},
					#[codec(index = 15)]
					///Change the Owner of an asset.
					///
					///Origin must be Signed and the sender should be the Owner of the asset `id`.
					///
					/// - `id`: The identifier of the asset.
					/// - `owner`: The new Owner of this asset.
					///
					///Emits `OwnerChanged`.
					///
					///Weight: `O(1)`
					transfer_ownership {
						#[codec(compact)]
						id: ::core::primitive::u32,
						owner: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 16)]
					///Change the Issuer, Admin and Freezer of an asset.
					///
					///Origin must be Signed and the sender should be the Owner of the asset `id`.
					///
					/// - `id`: The identifier of the asset to be frozen.
					/// - `issuer`: The new Issuer of this asset.
					/// - `admin`: The new Admin of this asset.
					/// - `freezer`: The new Freezer of this asset.
					///
					///Emits `TeamChanged`.
					///
					///Weight: `O(1)`
					set_team {
						#[codec(compact)]
						id: ::core::primitive::u32,
						issuer: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						admin: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						freezer: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 17)]
					///Set the metadata for an asset.
					///
					///Origin must be Signed and the sender should be the Owner of the asset `id`.
					///
					///Funds of sender are reserved according to the formula:
					///`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)`
					/// taking into account any already reserved funds.
					///
					/// - `id`: The identifier of the asset to update.
					/// - `name`: The user friendly name of this asset. Limited in length by
					///   `StringLimit`.
					/// - `symbol`: The exchange symbol for this asset. Limited in length by
					///   `StringLimit`.
					/// - `decimals`: The number of decimals this asset uses to represent one unit.
					///
					///Emits `MetadataSet`.
					///
					///Weight: `O(1)`
					set_metadata {
						#[codec(compact)]
						id: ::core::primitive::u32,
						name: ::std::vec::Vec<::core::primitive::u8>,
						symbol: ::std::vec::Vec<::core::primitive::u8>,
						decimals: ::core::primitive::u8,
					},
					#[codec(index = 18)]
					///Clear the metadata for an asset.
					///
					///Origin must be Signed and the sender should be the Owner of the asset `id`.
					///
					///Any deposit is freed for the asset owner.
					///
					/// - `id`: The identifier of the asset to clear.
					///
					///Emits `MetadataCleared`.
					///
					///Weight: `O(1)`
					clear_metadata {
						#[codec(compact)]
						id: ::core::primitive::u32,
					},
					#[codec(index = 19)]
					///Force the metadata for an asset to some value.
					///
					///Origin must be ForceOrigin.
					///
					///Any deposit is left alone.
					///
					/// - `id`: The identifier of the asset to update.
					/// - `name`: The user friendly name of this asset. Limited in length by
					///   `StringLimit`.
					/// - `symbol`: The exchange symbol for this asset. Limited in length by
					///   `StringLimit`.
					/// - `decimals`: The number of decimals this asset uses to represent one unit.
					///
					///Emits `MetadataSet`.
					///
					///Weight: `O(N + S)` where N and S are the length of the name and symbol
					/// respectively.
					force_set_metadata {
						#[codec(compact)]
						id: ::core::primitive::u32,
						name: ::std::vec::Vec<::core::primitive::u8>,
						symbol: ::std::vec::Vec<::core::primitive::u8>,
						decimals: ::core::primitive::u8,
						is_frozen: ::core::primitive::bool,
					},
					#[codec(index = 20)]
					///Clear the metadata for an asset.
					///
					///Origin must be ForceOrigin.
					///
					///Any deposit is returned.
					///
					/// - `id`: The identifier of the asset to clear.
					///
					///Emits `MetadataCleared`.
					///
					///Weight: `O(1)`
					force_clear_metadata {
						#[codec(compact)]
						id: ::core::primitive::u32,
					},
					#[codec(index = 21)]
					///Alter the attributes of a given asset.
					///
					///Origin must be `ForceOrigin`.
					///
					/// - `id`: The identifier of the asset.
					/// - `owner`: The new Owner of this asset.
					/// - `issuer`: The new Issuer of this asset.
					/// - `admin`: The new Admin of this asset.
					/// - `freezer`: The new Freezer of this asset.
					/// - `min_balance`: The minimum balance of this new asset that any single
					///   account must
					///have. If an account's balance is reduced below this, then it collapses to
					/// zero.
					/// - `is_sufficient`: Whether a non-zero balance of this asset is deposit of
					///   sufficient
					///value to account for the state bloat associated with its balance storage.
					/// If set to `true`, then non-zero balances may be stored without a `consumer`
					/// reference (and thus an ED in the Balances pallet or whatever else is used
					/// to control user-account state growth).
					/// - `is_frozen`: Whether this asset class is frozen except for
					///   permissioned/admin
					///instructions.
					///
					///Emits `AssetStatusChanged` with the identity of the asset.
					///
					///Weight: `O(1)`
					force_asset_status {
						#[codec(compact)]
						id: ::core::primitive::u32,
						owner: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						issuer: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						admin: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						freezer: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						min_balance: ::core::primitive::u128,
						is_sufficient: ::core::primitive::bool,
						is_frozen: ::core::primitive::bool,
					},
					#[codec(index = 22)]
					///Approve an amount of asset for transfer by a delegated third-party account.
					///
					///Origin must be Signed.
					///
					///Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing
					/// account for the purpose of holding the approval. If some non-zero amount of
					/// assets is already approved from signing account to `delegate`, then it is
					/// topped up or unreserved to meet the right value.
					///
					///NOTE: The signing account does not need to own `amount` of assets at the
					/// point of making this call.
					///
					/// - `id`: The identifier of the asset.
					/// - `delegate`: The account to delegate permission to transfer asset.
					/// - `amount`: The amount of asset that may be transferred by `delegate`. If
					///   there is
					///already an approval in place, then this acts additively.
					///
					///Emits `ApprovedTransfer` on success.
					///
					///Weight: `O(1)`
					approve_transfer {
						#[codec(compact)]
						id: ::core::primitive::u32,
						delegate: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 23)]
					///Cancel all of some asset approved for delegated transfer by a third-party
					/// account.
					///
					///Origin must be Signed and there must be an approval in place between signer
					/// and `delegate`.
					///
					///Unreserves any deposit previously reserved by `approve_transfer` for the
					/// approval.
					///
					/// - `id`: The identifier of the asset.
					/// - `delegate`: The account delegated permission to transfer asset.
					///
					///Emits `ApprovalCancelled` on success.
					///
					///Weight: `O(1)`
					cancel_approval {
						#[codec(compact)]
						id: ::core::primitive::u32,
						delegate: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 24)]
					///Cancel all of some asset approved for delegated transfer by a third-party
					/// account.
					///
					///Origin must be either ForceOrigin or Signed origin with the signer being
					/// the Admin account of the asset `id`.
					///
					///Unreserves any deposit previously reserved by `approve_transfer` for the
					/// approval.
					///
					/// - `id`: The identifier of the asset.
					/// - `delegate`: The account delegated permission to transfer asset.
					///
					///Emits `ApprovalCancelled` on success.
					///
					///Weight: `O(1)`
					force_cancel_approval {
						#[codec(compact)]
						id: ::core::primitive::u32,
						owner: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						delegate: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 25)]
					///Transfer some asset balance from a previously delegated account to some
					/// third-party account.
					///
					///Origin must be Signed and there must be an approval in place by the `owner`
					/// to the signer.
					///
					///If the entire amount approved for transfer is transferred, then any deposit
					/// previously reserved by `approve_transfer` is unreserved.
					///
					/// - `id`: The identifier of the asset.
					/// - `owner`: The account which previously approved for a transfer of at least
					///   `amount` and
					///from which the asset balance will be withdrawn.
					/// - `destination`: The account to which the asset balance of `amount` will be
					///   transferred.
					/// - `amount`: The amount of assets to transfer.
					///
					///Emits `TransferredApproved` on success.
					///
					///Weight: `O(1)`
					transfer_approved {
						#[codec(compact)]
						id: ::core::primitive::u32,
						owner: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						destination: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 26)]
					///Create an asset account for non-provider assets.
					///
					///A deposit will be taken from the signer account.
					///
					/// - `origin`: Must be Signed; the signer account must have sufficient funds
					///   for a deposit
					///  to be taken.
					/// - `id`: The identifier of the asset for the account to be created.
					///
					///Emits `Touched` event when successful.
					touch {
						#[codec(compact)]
						id: ::core::primitive::u32,
					},
					#[codec(index = 27)]
					///Return the deposit (if any) of an asset account.
					///
					///The origin must be Signed.
					///
					/// - `id`: The identifier of the asset for the account to be created.
					/// - `allow_burn`: If `true` then assets may be destroyed in order to complete
					///   the refund.
					///
					///Emits `Refunded` event when successful.
					refund {
						#[codec(compact)]
						id: ::core::primitive::u32,
						allow_burn: ::core::primitive::bool,
					},
					#[codec(index = 28)]
					///Sets the minimum balance of an asset.
					///
					///Only works if there aren't any accounts that are holding the asset or if
					///the new value of `min_balance` is less than the old one.
					///
					///Origin must be Signed and the sender has to be the Owner of the
					///asset `id`.
					///
					/// - `id`: The identifier of the asset.
					/// - `min_balance`: The new value of `min_balance`.
					///
					///Emits `AssetMinBalanceChanged` event when successful.
					set_min_balance {
						#[codec(compact)]
						id: ::core::primitive::u32,
						min_balance: ::core::primitive::u128,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Account balance must be greater than or equal to the transfer amount.
					BalanceLow,
					#[codec(index = 1)]
					///The account to alter does not exist.
					NoAccount,
					#[codec(index = 2)]
					///The signing account has no permission to do the operation.
					NoPermission,
					#[codec(index = 3)]
					///The given asset ID is unknown.
					Unknown,
					#[codec(index = 4)]
					///The origin account is frozen.
					Frozen,
					#[codec(index = 5)]
					///The asset ID is already taken.
					InUse,
					#[codec(index = 6)]
					///Invalid witness data given.
					BadWitness,
					#[codec(index = 7)]
					///Minimum balance should be non-zero.
					MinBalanceZero,
					#[codec(index = 8)]
					///Unable to increment the consumer reference counters on the account. Either
					/// no provider reference exists to allow a non-zero balance of a
					/// non-self-sufficient asset, or the maximum number of consumers has been
					/// reached.
					NoProvider,
					#[codec(index = 9)]
					///Invalid metadata given.
					BadMetadata,
					#[codec(index = 10)]
					///No approval exists that would allow the transfer.
					Unapproved,
					#[codec(index = 11)]
					///The source account would not survive the transfer and it needs to stay
					/// alive.
					WouldDie,
					#[codec(index = 12)]
					///The asset-account already exists.
					AlreadyExists,
					#[codec(index = 13)]
					///The asset-account doesn't have an associated deposit.
					NoDeposit,
					#[codec(index = 14)]
					///The operation would result in funds being burned.
					WouldBurn,
					#[codec(index = 15)]
					///The asset is a live asset and is actively being used. Usually emit for
					/// operations such as `start_destroy` which require the asset to be in a
					/// destroying state.
					LiveAsset,
					#[codec(index = 16)]
					///The asset is not live, and likely being destroyed.
					AssetNotLive,
					#[codec(index = 17)]
					///The asset status is not the expected status.
					IncorrectStatus,
					#[codec(index = 18)]
					///The asset should be frozen before the given operation.
					NotFrozen,
					#[codec(index = 19)]
					///Callback action resulted in error
					CallbackFailed,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///Some asset class was created.
					Created {
						asset_id: ::core::primitive::u32,
						creator: ::subxt::utils::AccountId32,
						owner: ::subxt::utils::AccountId32,
					},
					#[codec(index = 1)]
					///Some assets were issued.
					Issued {
						asset_id: ::core::primitive::u32,
						owner: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					///Some assets were transferred.
					Transferred {
						asset_id: ::core::primitive::u32,
						from: ::subxt::utils::AccountId32,
						to: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					///Some assets were destroyed.
					Burned {
						asset_id: ::core::primitive::u32,
						owner: ::subxt::utils::AccountId32,
						balance: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					///The management team changed.
					TeamChanged {
						asset_id: ::core::primitive::u32,
						issuer: ::subxt::utils::AccountId32,
						admin: ::subxt::utils::AccountId32,
						freezer: ::subxt::utils::AccountId32,
					},
					#[codec(index = 5)]
					///The owner changed.
					OwnerChanged {
						asset_id: ::core::primitive::u32,
						owner: ::subxt::utils::AccountId32,
					},
					#[codec(index = 6)]
					///Some account `who` was frozen.
					Frozen { asset_id: ::core::primitive::u32, who: ::subxt::utils::AccountId32 },
					#[codec(index = 7)]
					///Some account `who` was thawed.
					Thawed { asset_id: ::core::primitive::u32, who: ::subxt::utils::AccountId32 },
					#[codec(index = 8)]
					///Some asset `asset_id` was frozen.
					AssetFrozen { asset_id: ::core::primitive::u32 },
					#[codec(index = 9)]
					///Some asset `asset_id` was thawed.
					AssetThawed { asset_id: ::core::primitive::u32 },
					#[codec(index = 10)]
					///Accounts were destroyed for given asset.
					AccountsDestroyed {
						asset_id: ::core::primitive::u32,
						accounts_destroyed: ::core::primitive::u32,
						accounts_remaining: ::core::primitive::u32,
					},
					#[codec(index = 11)]
					///Approvals were destroyed for given asset.
					ApprovalsDestroyed {
						asset_id: ::core::primitive::u32,
						approvals_destroyed: ::core::primitive::u32,
						approvals_remaining: ::core::primitive::u32,
					},
					#[codec(index = 12)]
					///An asset class is in the process of being destroyed.
					DestructionStarted { asset_id: ::core::primitive::u32 },
					#[codec(index = 13)]
					///An asset class was destroyed.
					Destroyed { asset_id: ::core::primitive::u32 },
					#[codec(index = 14)]
					///Some asset class was force-created.
					ForceCreated {
						asset_id: ::core::primitive::u32,
						owner: ::subxt::utils::AccountId32,
					},
					#[codec(index = 15)]
					///New metadata has been set for an asset.
					MetadataSet {
						asset_id: ::core::primitive::u32,
						name: ::std::vec::Vec<::core::primitive::u8>,
						symbol: ::std::vec::Vec<::core::primitive::u8>,
						decimals: ::core::primitive::u8,
						is_frozen: ::core::primitive::bool,
					},
					#[codec(index = 16)]
					///Metadata has been cleared for an asset.
					MetadataCleared { asset_id: ::core::primitive::u32 },
					#[codec(index = 17)]
					///(Additional) funds have been approved for transfer to a destination
					/// account.
					ApprovedTransfer {
						asset_id: ::core::primitive::u32,
						source: ::subxt::utils::AccountId32,
						delegate: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 18)]
					///An approval for account `delegate` was cancelled by `owner`.
					ApprovalCancelled {
						asset_id: ::core::primitive::u32,
						owner: ::subxt::utils::AccountId32,
						delegate: ::subxt::utils::AccountId32,
					},
					#[codec(index = 19)]
					///An `amount` was transferred in its entirety from `owner` to `destination`
					/// by the approved `delegate`.
					TransferredApproved {
						asset_id: ::core::primitive::u32,
						owner: ::subxt::utils::AccountId32,
						delegate: ::subxt::utils::AccountId32,
						destination: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 20)]
					///An asset has had its attributes changed by the `Force` origin.
					AssetStatusChanged { asset_id: ::core::primitive::u32 },
					#[codec(index = 21)]
					///The min_balance of an asset has been updated by the asset owner.
					AssetMinBalanceChanged {
						asset_id: ::core::primitive::u32,
						new_min_balance: ::core::primitive::u128,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Approval<_0, _1> {
					pub amount: _0,
					pub deposit: _0,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct AssetAccount<_0, _1, _2> {
					pub balance: _0,
					pub is_frozen: ::core::primitive::bool,
					pub reason: runtime_types::pallet_assets::types::ExistenceReason<_0>,
					pub extra: _2,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct AssetDetails<_0, _1, _2> {
					pub owner: _1,
					pub issuer: _1,
					pub admin: _1,
					pub freezer: _1,
					pub supply: _0,
					pub deposit: _0,
					pub min_balance: _0,
					pub is_sufficient: ::core::primitive::bool,
					pub accounts: ::core::primitive::u32,
					pub sufficients: ::core::primitive::u32,
					pub approvals: ::core::primitive::u32,
					pub status: runtime_types::pallet_assets::types::AssetStatus,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<_2>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct AssetMetadata<_0, _1> {
					pub deposit: _0,
					pub name: _1,
					pub symbol: _1,
					pub decimals: ::core::primitive::u8,
					pub is_frozen: ::core::primitive::bool,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum AssetStatus {
					#[codec(index = 0)]
					Live,
					#[codec(index = 1)]
					Frozen,
					#[codec(index = 2)]
					Destroying,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum ExistenceReason<_0> {
					#[codec(index = 0)]
					Consumer,
					#[codec(index = 1)]
					Sufficient,
					#[codec(index = 2)]
					DepositHeld(_0),
					#[codec(index = 3)]
					DepositRefunded,
				}
			}
		}
		pub mod pallet_babe {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Report authority equivocation/misbehavior. This method will verify
					///the equivocation proof and validate the given key ownership proof
					///against the extracted offender. If both are valid, the offence will
					///be reported.
					report_equivocation {
						equivocation_proof: ::std::boxed::Box<
							runtime_types::sp_consensus_slots::EquivocationProof<
								runtime_types::sp_runtime::generic::header::Header<
									::core::primitive::u32,
									runtime_types::sp_runtime::traits::BlakeTwo256,
								>,
								runtime_types::sp_consensus_babe::app::Public,
							>,
						>,
						key_owner_proof: runtime_types::sp_session::MembershipProof,
					},
					#[codec(index = 1)]
					///Report authority equivocation/misbehavior. This method will verify
					///the equivocation proof and validate the given key ownership proof
					///against the extracted offender. If both are valid, the offence will
					///be reported.
					///This extrinsic must be called unsigned and it is expected that only
					///block authors will call it (validated in `ValidateUnsigned`), as such
					///if the block author is defined it will be defined as the equivocation
					///reporter.
					report_equivocation_unsigned {
						equivocation_proof: ::std::boxed::Box<
							runtime_types::sp_consensus_slots::EquivocationProof<
								runtime_types::sp_runtime::generic::header::Header<
									::core::primitive::u32,
									runtime_types::sp_runtime::traits::BlakeTwo256,
								>,
								runtime_types::sp_consensus_babe::app::Public,
							>,
						>,
						key_owner_proof: runtime_types::sp_session::MembershipProof,
					},
					#[codec(index = 2)]
					///Plan an epoch config change. The epoch config change is recorded and will
					/// be enacted on the next call to `enact_epoch_change`. The config will be
					/// activated one epoch after. Multiple calls to this method will replace any
					/// existing planned config change that had not been enacted yet.
					plan_config_change {
						config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///An equivocation proof provided as part of an equivocation report is
					/// invalid.
					InvalidEquivocationProof,
					#[codec(index = 1)]
					///A key ownership proof provided as part of an equivocation report is
					/// invalid.
					InvalidKeyOwnershipProof,
					#[codec(index = 2)]
					///A given equivocation report is valid but already previously reported.
					DuplicateOffenceReport,
					#[codec(index = 3)]
					///Submitted configuration is invalid.
					InvalidConfiguration,
				}
			}
		}
		pub mod pallet_bags_list {
			use super::runtime_types;
			pub mod list {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Bag {
					pub head: ::core::option::Option<::subxt::utils::AccountId32>,
					pub tail: ::core::option::Option<::subxt::utils::AccountId32>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum ListError {
					#[codec(index = 0)]
					Duplicate,
					#[codec(index = 1)]
					NotHeavier,
					#[codec(index = 2)]
					NotInSameBag,
					#[codec(index = 3)]
					NodeNotFound,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Node {
					pub id: ::subxt::utils::AccountId32,
					pub prev: ::core::option::Option<::subxt::utils::AccountId32>,
					pub next: ::core::option::Option<::subxt::utils::AccountId32>,
					pub bag_upper: ::core::primitive::u64,
					pub score: ::core::primitive::u64,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Declare that some `dislocated` account has, through rewards or penalties,
					/// sufficiently changed its score that it should properly fall into a
					/// different bag than its current one.
					///
					///Anyone can call this function about any potentially dislocated account.
					///
					///Will always update the stored score of `dislocated` to the correct score,
					/// based on `ScoreProvider`.
					///
					///If `dislocated` does not exists, it returns an error.
					rebag {
						dislocated: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					///Move the caller's Id directly in front of `lighter`.
					///
					///The dispatch origin for this call must be _Signed_ and can only be called
					/// by the Id of the account going in front of `lighter`.
					///
					///Only works if
					/// - both nodes are within the same bag,
					/// - and `origin` has a greater `Score` than `lighter`.
					put_in_front_of {
						lighter: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///A error in the list interface implementation.
					List(runtime_types::pallet_bags_list::list::ListError),
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///Moved an account from one bag to another.
					Rebagged {
						who: ::subxt::utils::AccountId32,
						from: ::core::primitive::u64,
						to: ::core::primitive::u64,
					},
					#[codec(index = 1)]
					///Updated the score of some account to the given amount.
					ScoreUpdated {
						who: ::subxt::utils::AccountId32,
						new_score: ::core::primitive::u64,
					},
				}
			}
		}
		pub mod pallet_balances {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Transfer some liquid free balance to another account.
					///
					///`transfer` will set the `FreeBalance` of the sender and receiver.
					///If the sender's account is below the existential deposit as a result
					///of the transfer, the account will be reaped.
					///
					///The dispatch origin for this call must be `Signed` by the transactor.
					///
					///## Complexity
					/// - Dependent on arguments but not critical, given proper implementations for
					///   input config
					///  types. See related functions below.
					/// - It contains a limited number of reads and writes internally and no
					///   complex
					///  computation.
					///
					///Related functions:
					///
					///  - `ensure_can_withdraw` is always called internally but has a bounded
					///    complexity.
					///  - Transferring balances to accounts that did not exist before will cause
					///    `T::OnNewAccount::on_new_account` to be called.
					///  - Removing enough funds from an account will trigger
					///    `T::DustRemoval::on_unbalanced`.
					///  - `transfer_keep_alive` works the same way as `transfer`, but has an
					///    additional check that the transfer will not kill the origin account.
					transfer {
						dest: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					///Set the balances of a given account.
					///
					///This will alter `FreeBalance` and `ReservedBalance` in storage. it will
					///also alter the total issuance of the system (`TotalIssuance`)
					/// appropriately. If the new free or reserved balance is below the existential
					/// deposit, it will reset the account nonce (`frame_system::AccountNonce`).
					///
					///The dispatch origin for this call is `root`.
					set_balance {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						new_free: ::core::primitive::u128,
						#[codec(compact)]
						new_reserved: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					///Exactly as `transfer`, except the origin must be root and the source
					/// account may be specified.
					///## Complexity
					/// - Same as transfer, but additional read and write because the source
					///   account is not
					///  assumed to be in the overlay.
					force_transfer {
						source: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						dest: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					///Same as the [`transfer`] call, but with a check that the transfer will not
					/// kill the origin account.
					///
					///99% of the time you want [`transfer`] instead.
					///
					///[`transfer`]: struct.Pallet.html#method.transfer
					transfer_keep_alive {
						dest: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					///Transfer the entire transferable balance from the caller account.
					///
					///NOTE: This function only attempts to transfer _transferable_ balances. This
					/// means that any locked, reserved, or existential deposits (when `keep_alive`
					/// is `true`), will not be transferred by this function. To ensure that this
					/// function results in a killed account, you might need to prepare the account
					/// by removing any reference counters, storage deposits, etc...
					///
					///The dispatch origin of this call must be Signed.
					///
					/// - `dest`: The recipient of the transfer.
					/// - `keep_alive`: A boolean to determine if the `transfer_all` operation
					///   should send all
					///  of the funds the account has, causing the sender account to be killed
					/// (false), or  transfer everything except at least the existential deposit,
					/// which will guarantee to  keep the sender account alive (true). ##
					/// Complexity
					/// - O(1). Just like transfer, but reading the user's transferable balance
					///   first.
					transfer_all {
						dest: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					///Unreserve some balance from a user by force.
					///
					///Can only be called by ROOT.
					force_unreserve {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						amount: ::core::primitive::u128,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Vesting balance too high to send value
					VestingBalance,
					#[codec(index = 1)]
					///Account liquidity restrictions prevent withdrawal
					LiquidityRestrictions,
					#[codec(index = 2)]
					///Balance too low to send value.
					InsufficientBalance,
					#[codec(index = 3)]
					///Value too low to create account due to existential deposit
					ExistentialDeposit,
					#[codec(index = 4)]
					///Transfer/payment would kill account
					KeepAlive,
					#[codec(index = 5)]
					///A vesting schedule already exists for this account
					ExistingVestingSchedule,
					#[codec(index = 6)]
					///Beneficiary account must pre-exist
					DeadAccount,
					#[codec(index = 7)]
					///Number of named reserves exceed MaxReserves
					TooManyReserves,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///An account was created with some free balance.
					Endowed {
						account: ::subxt::utils::AccountId32,
						free_balance: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					///An account was removed whose balance was non-zero but below
					/// ExistentialDeposit, resulting in an outright loss.
					DustLost {
						account: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					///Transfer succeeded.
					Transfer {
						from: ::subxt::utils::AccountId32,
						to: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					///A balance was set by root.
					BalanceSet {
						who: ::subxt::utils::AccountId32,
						free: ::core::primitive::u128,
						reserved: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					///Some balance was reserved (moved from free to reserved).
					Reserved { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 5)]
					///Some balance was unreserved (moved from reserved to free).
					Unreserved { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 6)]
					///Some balance was moved from the reserve of the first account to the second
					/// account. Final argument indicates the destination balance type.
					ReserveRepatriated {
						from: ::subxt::utils::AccountId32,
						to: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
						destination_status:
							runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
					},
					#[codec(index = 7)]
					///Some amount was deposited (e.g. for transaction fees).
					Deposit { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 8)]
					///Some amount was withdrawn from the account (e.g. for transaction fees).
					Withdraw { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 9)]
					///Some amount was removed from the account (e.g. for misbehavior).
					Slashed { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct AccountData<_0> {
				pub free: _0,
				pub reserved: _0,
				pub misc_frozen: _0,
				pub fee_frozen: _0,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct BalanceLock<_0> {
				pub id: [::core::primitive::u8; 8usize],
				pub amount: _0,
				pub reasons: runtime_types::pallet_balances::Reasons,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum Reasons {
				#[codec(index = 0)]
				Fee,
				#[codec(index = 1)]
				Misc,
				#[codec(index = 2)]
				All,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ReserveData<_0, _1> {
				pub id: _0,
				pub amount: _1,
			}
		}
		pub mod pallet_bounties {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Propose a new bounty.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					///Payment: `TipReportDepositBase` will be reserved from the origin account,
					/// as well as `DataDepositPerByte` for each byte in `reason`. It will be
					/// unreserved upon approval, or slashed when rejected.
					///
					/// - `curator`: The curator account whom will manage this bounty.
					/// - `fee`: The curator fee.
					/// - `value`: The total payment amount of this bounty, curator fee included.
					/// - `description`: The description of this bounty.
					propose_bounty {
						#[codec(compact)]
						value: ::core::primitive::u128,
						description: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					///Approve a bounty proposal. At a later time, the bounty will be funded and
					/// become active and the original deposit will be returned.
					///
					///May only be called from `T::SpendOrigin`.
					///
					///## Complexity
					/// - O(1).
					approve_bounty {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					///Assign a curator to a funded bounty.
					///
					///May only be called from `T::SpendOrigin`.
					///
					///## Complexity
					/// - O(1).
					propose_curator {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
						curator: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						fee: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					///Unassign curator from a bounty.
					///
					///This function can only be called by the `RejectOrigin` a signed origin.
					///
					///If this function is called by the `RejectOrigin`, we assume that the
					/// curator is malicious or inactive. As a result, we will slash the curator
					/// when possible.
					///
					///If the origin is the curator, we take this as a sign they are unable to do
					/// their job and they willingly give up. We could slash them, but for now we
					/// allow them to recover their deposit and exit without issue. (We may want to
					/// change this if it is abused.)
					///
					///Finally, the origin can be anyone if and only if the curator is "inactive".
					/// This allows anyone in the community to call out that a curator is not doing
					/// their due diligence, and we should pick a new curator. In this case the
					/// curator should also be slashed.
					///
					///## Complexity
					/// - O(1).
					unassign_curator {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					///Accept the curator role for a bounty.
					///A deposit will be reserved from curator and refund upon successful payout.
					///
					///May only be called from the curator.
					///
					///## Complexity
					/// - O(1).
					accept_curator {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					///Award bounty to a beneficiary account. The beneficiary will be able to
					/// claim the funds after a delay.
					///
					///The dispatch origin for this call must be the curator of this bounty.
					///
					/// - `bounty_id`: Bounty ID to award.
					/// - `beneficiary`: The beneficiary account whom will receive the payout.
					///
					///## Complexity
					/// - O(1).
					award_bounty {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
						beneficiary: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 6)]
					///Claim the payout from an awarded bounty after payout delay.
					///
					///The dispatch origin for this call must be the beneficiary of this bounty.
					///
					/// - `bounty_id`: Bounty ID to claim.
					///
					///## Complexity
					/// - O(1).
					claim_bounty {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 7)]
					///Cancel a proposed or active bounty. All the funds will be sent to treasury
					/// and the curator deposit will be unreserved if possible.
					///
					///Only `T::RejectOrigin` is able to cancel a bounty.
					///
					/// - `bounty_id`: Bounty ID to cancel.
					///
					///## Complexity
					/// - O(1).
					close_bounty {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					///Extend the expiry time of an active bounty.
					///
					///The dispatch origin for this call must be the curator of this bounty.
					///
					/// - `bounty_id`: Bounty ID to extend.
					/// - `remark`: additional information.
					///
					///## Complexity
					/// - O(1).
					extend_bounty_expiry {
						#[codec(compact)]
						bounty_id: ::core::primitive::u32,
						remark: ::std::vec::Vec<::core::primitive::u8>,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Proposer's balance is too low.
					InsufficientProposersBalance,
					#[codec(index = 1)]
					///No proposal or bounty at that index.
					InvalidIndex,
					#[codec(index = 2)]
					///The reason given is just too big.
					ReasonTooBig,
					#[codec(index = 3)]
					///The bounty status is unexpected.
					UnexpectedStatus,
					#[codec(index = 4)]
					///Require bounty curator.
					RequireCurator,
					#[codec(index = 5)]
					///Invalid bounty value.
					InvalidValue,
					#[codec(index = 6)]
					///Invalid bounty fee.
					InvalidFee,
					#[codec(index = 7)]
					///A bounty payout is pending.
					///To cancel the bounty, you must unassign and slash the curator.
					PendingPayout,
					#[codec(index = 8)]
					///The bounties cannot be claimed/closed because it's still in the countdown
					/// period.
					Premature,
					#[codec(index = 9)]
					///The bounty cannot be closed because it has active child bounties.
					HasActiveChildBounty,
					#[codec(index = 10)]
					///Too many approvals are already queued.
					TooManyQueued,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///New bounty proposal.
					BountyProposed { index: ::core::primitive::u32 },
					#[codec(index = 1)]
					///A bounty proposal was rejected; funds were slashed.
					BountyRejected { index: ::core::primitive::u32, bond: ::core::primitive::u128 },
					#[codec(index = 2)]
					///A bounty proposal is funded and became active.
					BountyBecameActive { index: ::core::primitive::u32 },
					#[codec(index = 3)]
					///A bounty is awarded to a beneficiary.
					BountyAwarded {
						index: ::core::primitive::u32,
						beneficiary: ::subxt::utils::AccountId32,
					},
					#[codec(index = 4)]
					///A bounty is claimed by beneficiary.
					BountyClaimed {
						index: ::core::primitive::u32,
						payout: ::core::primitive::u128,
						beneficiary: ::subxt::utils::AccountId32,
					},
					#[codec(index = 5)]
					///A bounty is cancelled.
					BountyCanceled { index: ::core::primitive::u32 },
					#[codec(index = 6)]
					///A bounty expiry is extended.
					BountyExtended { index: ::core::primitive::u32 },
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Bounty<_0, _1, _2> {
				pub proposer: _0,
				pub value: _1,
				pub fee: _1,
				pub curator_deposit: _1,
				pub bond: _1,
				pub status: runtime_types::pallet_bounties::BountyStatus<_0, _2>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum BountyStatus<_0, _1> {
				#[codec(index = 0)]
				Proposed,
				#[codec(index = 1)]
				Approved,
				#[codec(index = 2)]
				Funded,
				#[codec(index = 3)]
				CuratorProposed { curator: _0 },
				#[codec(index = 4)]
				Active { curator: _0, update_due: _1 },
				#[codec(index = 5)]
				PendingPayout { curator: _0, beneficiary: _0, unlock_at: _1 },
			}
		}
		pub mod pallet_child_bounties {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Add a new child-bounty.
					///
					///The dispatch origin for this call must be the curator of parent
					///bounty and the parent bounty must be in "active" state.
					///
					///Child-bounty gets added successfully & fund gets transferred from
					///parent bounty to child-bounty account, if parent bounty has enough
					///funds, else the call fails.
					///
					///Upper bound to maximum number of active  child bounties that can be
					///added are managed via runtime trait config
					///[`Config::MaxActiveChildBountyCount`].
					///
					///If the call is success, the status of child-bounty is updated to
					///"Added".
					///
					/// - `parent_bounty_id`: Index of parent bounty for which child-bounty is
					///   being added.
					/// - `value`: Value for executing the proposal.
					/// - `description`: Text description for the child-bounty.
					add_child_bounty {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						value: ::core::primitive::u128,
						description: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					///Propose curator for funded child-bounty.
					///
					///The dispatch origin for this call must be curator of parent bounty.
					///
					///Parent bounty must be in active state, for this child-bounty call to
					///work.
					///
					///Child-bounty must be in "Added" state, for processing the call. And
					///state of child-bounty is moved to "CuratorProposed" on successful
					///call completion.
					///
					/// - `parent_bounty_id`: Index of parent bounty.
					/// - `child_bounty_id`: Index of child bounty.
					/// - `curator`: Address of child-bounty curator.
					/// - `fee`: payment fee to child-bounty curator for execution.
					propose_curator {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						child_bounty_id: ::core::primitive::u32,
						curator: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						fee: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					///Accept the curator role for the child-bounty.
					///
					///The dispatch origin for this call must be the curator of this
					///child-bounty.
					///
					///A deposit will be reserved from the curator and refund upon
					///successful payout or cancellation.
					///
					///Fee for curator is deducted from curator fee of parent bounty.
					///
					///Parent bounty must be in active state, for this child-bounty call to
					///work.
					///
					///Child-bounty must be in "CuratorProposed" state, for processing the
					///call. And state of child-bounty is moved to "Active" on successful
					///call completion.
					///
					/// - `parent_bounty_id`: Index of parent bounty.
					/// - `child_bounty_id`: Index of child bounty.
					accept_curator {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						child_bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					///Unassign curator from a child-bounty.
					///
					///The dispatch origin for this call can be either `RejectOrigin`, or
					///the curator of the parent bounty, or any signed origin.
					///
					///For the origin other than T::RejectOrigin and the child-bounty
					///curator, parent bounty must be in active state, for this call to
					///work. We allow child-bounty curator and T::RejectOrigin to execute
					///this call irrespective of the parent bounty state.
					///
					///If this function is called by the `RejectOrigin` or the
					///parent bounty curator, we assume that the child-bounty curator is
					///malicious or inactive. As a result, child-bounty curator deposit is
					///slashed.
					///
					///If the origin is the child-bounty curator, we take this as a sign
					///that they are unable to do their job, and are willingly giving up.
					///We could slash the deposit, but for now we allow them to unreserve
					///their deposit and exit without issue. (We may want to change this if
					///it is abused.)
					///
					///Finally, the origin can be anyone iff the child-bounty curator is
					///"inactive". Expiry update due of parent bounty is used to estimate
					///inactive state of child-bounty curator.
					///
					///This allows anyone in the community to call out that a child-bounty
					///curator is not doing their due diligence, and we should pick a new
					///one. In this case the child-bounty curator deposit is slashed.
					///
					///State of child-bounty is moved to Added state on successful call
					///completion.
					///
					/// - `parent_bounty_id`: Index of parent bounty.
					/// - `child_bounty_id`: Index of child bounty.
					unassign_curator {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						child_bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					///Award child-bounty to a beneficiary.
					///
					///The beneficiary will be able to claim the funds after a delay.
					///
					///The dispatch origin for this call must be the parent curator or
					///curator of this child-bounty.
					///
					///Parent bounty must be in active state, for this child-bounty call to
					///work.
					///
					///Child-bounty must be in active state, for processing the call. And
					///state of child-bounty is moved to "PendingPayout" on successful call
					///completion.
					///
					/// - `parent_bounty_id`: Index of parent bounty.
					/// - `child_bounty_id`: Index of child bounty.
					/// - `beneficiary`: Beneficiary account.
					award_child_bounty {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						child_bounty_id: ::core::primitive::u32,
						beneficiary: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 5)]
					///Claim the payout from an awarded child-bounty after payout delay.
					///
					///The dispatch origin for this call may be any signed origin.
					///
					///Call works independent of parent bounty state, No need for parent
					///bounty to be in active state.
					///
					///The Beneficiary is paid out with agreed bounty value. Curator fee is
					///paid & curator deposit is unreserved.
					///
					///Child-bounty must be in "PendingPayout" state, for processing the
					///call. And instance of child-bounty is removed from the state on
					///successful call completion.
					///
					/// - `parent_bounty_id`: Index of parent bounty.
					/// - `child_bounty_id`: Index of child bounty.
					claim_child_bounty {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						child_bounty_id: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					///Cancel a proposed or active child-bounty. Child-bounty account funds
					///are transferred to parent bounty account. The child-bounty curator
					///deposit may be unreserved if possible.
					///
					///The dispatch origin for this call must be either parent curator or
					///`T::RejectOrigin`.
					///
					///If the state of child-bounty is `Active`, curator deposit is
					///unreserved.
					///
					///If the state of child-bounty is `PendingPayout`, call fails &
					///returns `PendingPayout` error.
					///
					///For the origin other than T::RejectOrigin, parent bounty must be in
					///active state, for this child-bounty call to work. For origin
					///T::RejectOrigin execution is forced.
					///
					///Instance of child-bounty is removed from the state on successful
					///call completion.
					///
					/// - `parent_bounty_id`: Index of parent bounty.
					/// - `child_bounty_id`: Index of child bounty.
					close_child_bounty {
						#[codec(compact)]
						parent_bounty_id: ::core::primitive::u32,
						#[codec(compact)]
						child_bounty_id: ::core::primitive::u32,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///The parent bounty is not in active state.
					ParentBountyNotActive,
					#[codec(index = 1)]
					///The bounty balance is not enough to add new child-bounty.
					InsufficientBountyBalance,
					#[codec(index = 2)]
					///Number of child bounties exceeds limit `MaxActiveChildBountyCount`.
					TooManyChildBounties,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A child-bounty is added.
					Added { index: ::core::primitive::u32, child_index: ::core::primitive::u32 },
					#[codec(index = 1)]
					///A child-bounty is awarded to a beneficiary.
					Awarded {
						index: ::core::primitive::u32,
						child_index: ::core::primitive::u32,
						beneficiary: ::subxt::utils::AccountId32,
					},
					#[codec(index = 2)]
					///A child-bounty is claimed by beneficiary.
					Claimed {
						index: ::core::primitive::u32,
						child_index: ::core::primitive::u32,
						payout: ::core::primitive::u128,
						beneficiary: ::subxt::utils::AccountId32,
					},
					#[codec(index = 3)]
					///A child-bounty is cancelled.
					Canceled { index: ::core::primitive::u32, child_index: ::core::primitive::u32 },
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ChildBounty<_0, _1, _2> {
				pub parent_bounty: _2,
				pub value: _1,
				pub fee: _1,
				pub curator_deposit: _1,
				pub status: runtime_types::pallet_child_bounties::ChildBountyStatus<_0, _2>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum ChildBountyStatus<_0, _1> {
				#[codec(index = 0)]
				Added,
				#[codec(index = 1)]
				CuratorProposed { curator: _0 },
				#[codec(index = 2)]
				Active { curator: _0 },
				#[codec(index = 3)]
				PendingPayout { curator: _0, beneficiary: _0, unlock_at: _1 },
			}
		}
		pub mod pallet_collective {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Set the collective's membership.
					///
					/// - `new_members`: The new member list. Be nice to the chain and provide it
					///   sorted.
					/// - `prime`: The prime member whose vote sets the default.
					/// - `old_count`: The upper bound for the previous number of members in
					///   storage. Used for
					///  weight estimation.
					///
					///The dispatch of this call must be `SetMembersOrigin`.
					///
					///NOTE: Does not enforce the expected `MaxMembers` limit on the amount of
					/// members, but      the weight estimations rely on it to estimate
					/// dispatchable weight.
					///
					///# WARNING:
					///
					///The `pallet-collective` can also be managed by logic outside of the pallet
					/// through the implementation of the trait [`ChangeMembers`].
					///Any call to `set_members` must be careful that the member set doesn't get
					/// out of sync with other logic managing the member set.
					///
					///## Complexity:
					/// - `O(MP + N)` where:
					///  - `M` old-members-count (code- and governance-bounded)
					///  - `N` new-members-count (code- and governance-bounded)
					///  - `P` proposals-count (code-bounded)
					set_members {
						new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
						prime: ::core::option::Option<::subxt::utils::AccountId32>,
						old_count: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					///Dispatch a proposal from a member using the `Member` origin.
					///
					///Origin must be a member of the collective.
					///
					///## Complexity:
					/// - `O(B + M + P)` where:
					/// - `B` is `proposal` size in bytes (length-fee-bounded)
					/// - `M` members-count (code-bounded)
					/// - `P` complexity of dispatching `proposal`
					execute {
						proposal: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					///Add a new proposal to either be voted on or executed directly.
					///
					///Requires the sender to be member.
					///
					///`threshold` determines whether `proposal` is executed directly (`threshold
					/// < 2`) or put up for voting.
					///
					///## Complexity
					/// - `O(B + M + P1)` or `O(B + M + P2)` where:
					///  - `B` is `proposal` size in bytes (length-fee-bounded)
					///  - `M` is members-count (code- and governance-bounded)
					///  - branching is influenced by `threshold` where:
					///    - `P1` is proposal execution complexity (`threshold < 2`)
					///    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)
					propose {
						#[codec(compact)]
						threshold: ::core::primitive::u32,
						proposal: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					///Add an aye or nay vote for the sender to the given proposal.
					///
					///Requires the sender to be a member.
					///
					///Transaction fees will be waived if the member is voting on any particular
					/// proposal for the first time and the call is successful. Subsequent vote
					/// changes will charge a fee.
					///## Complexity
					/// - `O(M)` where `M` is members-count (code- and governance-bounded)
					vote {
						proposal: ::subxt::utils::H256,
						#[codec(compact)]
						index: ::core::primitive::u32,
						approve: ::core::primitive::bool,
					},
					#[codec(index = 4)]
					///Close a vote that is either approved, disapproved or whose voting period
					/// has ended.
					///
					///May be called by any signed account in order to finish voting and close the
					/// proposal.
					///
					///If called before the end of the voting period it will only close the vote
					/// if it is has enough votes to be approved or disapproved.
					///
					///If called after the end of the voting period abstentions are counted as
					/// rejections unless there is a prime member set and the prime member cast an
					/// approval.
					///
					///If the close operation completes successfully with disapproval, the
					/// transaction fee will be waived. Otherwise execution of the approved
					/// operation will be charged to the caller.
					///
					///+ `proposal_weight_bound`: The maximum amount of weight consumed by
					/// executing the closed proposal.
					///+ `length_bound`: The upper bound for the length of the proposal in
					/// storage. Checked via `storage::read` so it is `size_of::<u32>() == 4`
					/// larger than the pure length.
					///
					///## Complexity
					/// - `O(B + M + P1 + P2)` where:
					///  - `B` is `proposal` size in bytes (length-fee-bounded)
					///  - `M` is members-count (code- and governance-bounded)
					///  - `P1` is the complexity of `proposal` preimage.
					///  - `P2` is proposal-count (code-bounded)
					close_old_weight {
						proposal_hash: ::subxt::utils::H256,
						#[codec(compact)]
						index: ::core::primitive::u32,
						#[codec(compact)]
						proposal_weight_bound: runtime_types::sp_weights::OldWeight,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					///Disapprove a proposal, close, and remove it from the system, regardless of
					/// its current state.
					///
					///Must be called by the Root origin.
					///
					///Parameters:
					/// * `proposal_hash`: The hash of the proposal that should be disapproved.
					///
					///## Complexity
					///O(P) where P is the number of max proposals
					disapprove_proposal { proposal_hash: ::subxt::utils::H256 },
					#[codec(index = 6)]
					///Close a vote that is either approved, disapproved or whose voting period
					/// has ended.
					///
					///May be called by any signed account in order to finish voting and close the
					/// proposal.
					///
					///If called before the end of the voting period it will only close the vote
					/// if it is has enough votes to be approved or disapproved.
					///
					///If called after the end of the voting period abstentions are counted as
					/// rejections unless there is a prime member set and the prime member cast an
					/// approval.
					///
					///If the close operation completes successfully with disapproval, the
					/// transaction fee will be waived. Otherwise execution of the approved
					/// operation will be charged to the caller.
					///
					///+ `proposal_weight_bound`: The maximum amount of weight consumed by
					/// executing the closed proposal.
					///+ `length_bound`: The upper bound for the length of the proposal in
					/// storage. Checked via `storage::read` so it is `size_of::<u32>() == 4`
					/// larger than the pure length.
					///
					///## Complexity
					/// - `O(B + M + P1 + P2)` where:
					///  - `B` is `proposal` size in bytes (length-fee-bounded)
					///  - `M` is members-count (code- and governance-bounded)
					///  - `P1` is the complexity of `proposal` preimage.
					///  - `P2` is proposal-count (code-bounded)
					close {
						proposal_hash: ::subxt::utils::H256,
						#[codec(compact)]
						index: ::core::primitive::u32,
						proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Account is not a member
					NotMember,
					#[codec(index = 1)]
					///Duplicate proposals not allowed
					DuplicateProposal,
					#[codec(index = 2)]
					///Proposal must exist
					ProposalMissing,
					#[codec(index = 3)]
					///Mismatched index
					WrongIndex,
					#[codec(index = 4)]
					///Duplicate vote ignored
					DuplicateVote,
					#[codec(index = 5)]
					///Members are already initialized!
					AlreadyInitialized,
					#[codec(index = 6)]
					///The close call was made too early, before the end of the voting.
					TooEarly,
					#[codec(index = 7)]
					///There can only be a maximum of `MaxProposals` active proposals.
					TooManyProposals,
					#[codec(index = 8)]
					///The given weight bound for the proposal was too low.
					WrongProposalWeight,
					#[codec(index = 9)]
					///The given length bound for the proposal was too low.
					WrongProposalLength,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A motion (given hash) has been proposed (by given account) with a threshold
					/// (given `MemberCount`).
					Proposed {
						account: ::subxt::utils::AccountId32,
						proposal_index: ::core::primitive::u32,
						proposal_hash: ::subxt::utils::H256,
						threshold: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					///A motion (given hash) has been voted on by given account, leaving
					///a tally (yes votes and no votes given respectively as `MemberCount`).
					Voted {
						account: ::subxt::utils::AccountId32,
						proposal_hash: ::subxt::utils::H256,
						voted: ::core::primitive::bool,
						yes: ::core::primitive::u32,
						no: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					///A motion was approved by the required threshold.
					Approved { proposal_hash: ::subxt::utils::H256 },
					#[codec(index = 3)]
					///A motion was not approved by the required threshold.
					Disapproved { proposal_hash: ::subxt::utils::H256 },
					#[codec(index = 4)]
					///A motion was executed; result will be `Ok` if it returned without error.
					Executed {
						proposal_hash: ::subxt::utils::H256,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 5)]
					///A single member did some action; result will be `Ok` if it returned without
					/// error.
					MemberExecuted {
						proposal_hash: ::subxt::utils::H256,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 6)]
					///A proposal was closed because its threshold was reached or after its
					/// duration was up.
					Closed {
						proposal_hash: ::subxt::utils::H256,
						yes: ::core::primitive::u32,
						no: ::core::primitive::u32,
					},
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum RawOrigin<_0> {
				#[codec(index = 0)]
				Members(::core::primitive::u32, ::core::primitive::u32),
				#[codec(index = 1)]
				Member(_0),
				#[codec(index = 2)]
				_Phantom,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Votes<_0, _1> {
				pub index: _1,
				pub threshold: _1,
				pub ayes: ::std::vec::Vec<_0>,
				pub nays: ::std::vec::Vec<_0>,
				pub end: _1,
			}
		}
		pub mod pallet_conviction_voting {
			use super::runtime_types;
			pub mod conviction {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Conviction {
					#[codec(index = 0)]
					None,
					#[codec(index = 1)]
					Locked1x,
					#[codec(index = 2)]
					Locked2x,
					#[codec(index = 3)]
					Locked3x,
					#[codec(index = 4)]
					Locked4x,
					#[codec(index = 5)]
					Locked5x,
					#[codec(index = 6)]
					Locked6x,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;
					///otherwise it is a vote to keep the status quo.
					///
					///The dispatch origin of this call must be _Signed_.
					///
					/// - `poll_index`: The index of the poll to vote for.
					/// - `vote`: The vote configuration.
					///
					///Weight: `O(R)` where R is the number of polls the voter has voted on.
					vote {
						#[codec(compact)]
						poll_index: ::core::primitive::u32,
						vote: runtime_types::pallet_conviction_voting::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 1)]
					///Delegate the voting power (with some given conviction) of the sending
					/// account for a particular class of polls.
					///
					///The balance delegated is locked for as long as it's delegated, and
					/// thereafter for the time appropriate for the conviction's lock period.
					///
					///The dispatch origin of this call must be _Signed_, and the signing account
					/// must either:
					///  - be delegating already; or
					///  - have no voting activity (if there is, then it will need to be
					///    removed/consolidated through `reap_vote` or `unvote`).
					///
					/// - `to`: The account whose voting the `target` account's voting power will
					///   follow.
					/// - `class`: The class of polls to delegate. To delegate multiple classes,
					///   multiple calls
					///  to this function are required.
					/// - `conviction`: The conviction that will be attached to the delegated
					///   votes. When the
					///  account is undelegated, the funds will be locked for the corresponding
					/// period.
					/// - `balance`: The amount of the account's balance to be used in delegating.
					///   This must not
					///  be more than the account's current balance.
					///
					///Emits `Delegated`.
					///
					///Weight: `O(R)` where R is the number of polls the voter delegating to has
					///  voted on. Weight is initially charged as if maximum votes, but is refunded
					/// later.
					delegate {
						class: ::core::primitive::u16,
						to: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
						balance: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					///Undelegate the voting power of the sending account for a particular class
					/// of polls.
					///
					///Tokens may be unlocked following once an amount of time consistent with the
					/// lock period of the conviction with which the delegation was issued has
					/// passed.
					///
					///The dispatch origin of this call must be _Signed_ and the signing account
					/// must be currently delegating.
					///
					/// - `class`: The class of polls to remove the delegation from.
					///
					///Emits `Undelegated`.
					///
					///Weight: `O(R)` where R is the number of polls the voter delegating to has
					///  voted on. Weight is initially charged as if maximum votes, but is refunded
					/// later.
					undelegate { class: ::core::primitive::u16 },
					#[codec(index = 3)]
					///Remove the lock caused by prior voting/delegating which has expired within
					/// a particular class.
					///
					///The dispatch origin of this call must be _Signed_.
					///
					/// - `class`: The class of polls to unlock.
					/// - `target`: The account to remove the lock on.
					///
					///Weight: `O(R)` with R number of vote of target.
					unlock {
						class: ::core::primitive::u16,
						target: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 4)]
					///Remove a vote for a poll.
					///
					///If:
					/// - the poll was cancelled, or
					/// - the poll is ongoing, or
					/// - the poll has ended such that
					///  - the vote of the account was in opposition to the result; or
					///  - there was no conviction to the account's vote; or
					///  - the account made a split vote
					///...then the vote is removed cleanly and a following call to `unlock` may
					/// result in more funds being available.
					///
					///If, however, the poll has ended and:
					/// - it finished corresponding to the vote of the account, and
					/// - the account made a standard vote with conviction, and
					/// - the lock period of the conviction is not over
					///...then the lock will be aggregated into the overall account's lock, which
					/// may involve *overlocking* (where the two locks are combined into a single
					/// lock that is the maximum of both the amount locked and the time is it
					/// locked for).
					///
					///The dispatch origin of this call must be _Signed_, and the signer must have
					/// a vote registered for poll `index`.
					///
					/// - `index`: The index of poll of the vote to be removed.
					/// - `class`: Optional parameter, if given it indicates the class of the poll.
					///   For polls
					///  which have finished or are cancelled, this must be `Some`.
					///
					///Weight: `O(R + log R)` where R is the number of polls that `target` has
					/// voted on.  Weight is calculated for the maximum number of vote.
					remove_vote {
						class: ::core::option::Option<::core::primitive::u16>,
						index: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					///Remove a vote for a poll.
					///
					///If the `target` is equal to the signer, then this function is exactly
					/// equivalent to `remove_vote`. If not equal to the signer, then the vote must
					/// have expired, either because the poll was cancelled, because the voter lost
					/// the poll or because the conviction period is over.
					///
					///The dispatch origin of this call must be _Signed_.
					///
					/// - `target`: The account of the vote to be removed; this account must have
					///   voted for poll
					///  `index`.
					/// - `index`: The index of poll of the vote to be removed.
					/// - `class`: The class of the poll.
					///
					///Weight: `O(R + log R)` where R is the number of polls that `target` has
					/// voted on.  Weight is calculated for the maximum number of vote.
					remove_other_vote {
						target: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						class: ::core::primitive::u16,
						index: ::core::primitive::u32,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Poll is not ongoing.
					NotOngoing,
					#[codec(index = 1)]
					///The given account did not vote on the poll.
					NotVoter,
					#[codec(index = 2)]
					///The actor has no permission to conduct the action.
					NoPermission,
					#[codec(index = 3)]
					///The actor has no permission to conduct the action right now but will do in
					/// the future.
					NoPermissionYet,
					#[codec(index = 4)]
					///The account is already delegating.
					AlreadyDelegating,
					#[codec(index = 5)]
					///The account currently has votes attached to it and the operation cannot
					/// succeed until these are removed, either through `unvote` or `reap_vote`.
					AlreadyVoting,
					#[codec(index = 6)]
					///Too high a balance was provided that the account cannot afford.
					InsufficientFunds,
					#[codec(index = 7)]
					///The account is not currently delegating.
					NotDelegating,
					#[codec(index = 8)]
					///Delegation to oneself makes no sense.
					Nonsense,
					#[codec(index = 9)]
					///Maximum number of votes reached.
					MaxVotesReached,
					#[codec(index = 10)]
					///The class must be supplied since it is not easily determinable from the
					/// state.
					ClassNeeded,
					#[codec(index = 11)]
					///The class ID supplied is invalid.
					BadClass,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///An account has delegated their vote to another account. \[who, target\]
					Delegated(::subxt::utils::AccountId32, ::subxt::utils::AccountId32),
					#[codec(index = 1)]
					///An \[account\] has cancelled a previous delegation operation.
					Undelegated(::subxt::utils::AccountId32),
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Delegations<_0> {
					pub votes: _0,
					pub capital: _0,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Tally<_0> {
					pub ayes: _0,
					pub nays: _0,
					pub support: _0,
				}
			}
			pub mod vote {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum AccountVote<_0> {
					#[codec(index = 0)]
					Standard {
						vote: runtime_types::pallet_conviction_voting::vote::Vote,
						balance: _0,
					},
					#[codec(index = 1)]
					Split { aye: _0, nay: _0 },
					#[codec(index = 2)]
					SplitAbstain { aye: _0, nay: _0, abstain: _0 },
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Casting<_0, _1, _2> {
					pub votes: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						_1,
						runtime_types::pallet_conviction_voting::vote::AccountVote<_0>,
					)>,
					pub delegations:
						runtime_types::pallet_conviction_voting::types::Delegations<_0>,
					pub prior: runtime_types::pallet_conviction_voting::vote::PriorLock<_1, _0>,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<_2>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Delegating<_0, _1, _2> {
					pub balance: _0,
					pub target: _1,
					pub conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
					pub delegations:
						runtime_types::pallet_conviction_voting::types::Delegations<_0>,
					pub prior: runtime_types::pallet_conviction_voting::vote::PriorLock<_2, _0>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct PriorLock<_0, _1>(pub _0, pub _1);
				#[derive(
					::subxt::ext::codec::CompactAs,
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Vote(pub ::core::primitive::u8);
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Voting<_0, _1, _2, _3> {
					#[codec(index = 0)]
					Casting(runtime_types::pallet_conviction_voting::vote::Casting<_0, _2, _2>),
					#[codec(index = 1)]
					Delegating(
						runtime_types::pallet_conviction_voting::vote::Delegating<_0, _1, _2>,
					),
					__Ignore(::core::marker::PhantomData<_3>),
				}
			}
		}
		pub mod pallet_core_fellowship {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Bump the state of a member.
					///
					///This will demote a member whose `last_proof` is now beyond their rank's
					///`demotion_period`.
					///
					/// - `origin`: A `Signed` origin of an account.
					/// - `who`: A member account whose state is to be updated.
					bump { who: ::subxt::utils::AccountId32 },
					#[codec(index = 1)]
					///Set the parameters.
					///
					/// - `origin`: A origin complying with `ParamsOrigin` or root.
					/// - `params`: The new parameters for the pallet.
					set_params {
						params: ::std::boxed::Box<
							runtime_types::pallet_core_fellowship::ParamsType<
								::core::primitive::u128,
								::core::primitive::u32,
							>,
						>,
					},
					#[codec(index = 2)]
					///Set whether a member is active or not.
					///
					/// - `origin`: A `Signed` origin of a member's account.
					/// - `is_active`: `true` iff the member is active.
					set_active { is_active: ::core::primitive::bool },
					#[codec(index = 3)]
					///Approve a member to continue at their rank.
					///
					///This resets `last_proof` to the current block, thereby delaying any
					/// automatic demotion.
					///
					///If `who` is not already tracked by this pallet, then it will become
					/// tracked. `last_promotion` will be set to zero.
					///
					/// - `origin`: An origin which satisfies `ApproveOrigin` or root.
					/// - `who`: A member (i.e. of non-zero rank).
					/// - `at_rank`: The rank of member.
					approve { who: ::subxt::utils::AccountId32, at_rank: ::core::primitive::u16 },
					#[codec(index = 4)]
					///Introduce a new and unranked candidate (rank zero).
					///
					/// - `origin`: An origin which satisfies `InductOrigin` or root.
					/// - `who`: The account ID of the candidate to be inducted and become a
					///   member.
					induct { who: ::subxt::utils::AccountId32 },
					#[codec(index = 5)]
					///Increment the rank of a ranked and tracked account.
					///
					/// - `origin`: An origin which satisfies `PromoteOrigin` with a `Success`
					///   result of
					///  `to_rank` or more or root.
					/// - `who`: The account ID of the member to be promoted to `to_rank`.
					/// - `to_rank`: One more than the current rank of `who`.
					promote { who: ::subxt::utils::AccountId32, to_rank: ::core::primitive::u16 },
					#[codec(index = 6)]
					///Stop tracking a prior member who is now not a ranked member of the
					/// collective.
					///
					/// - `origin`: A `Signed` origin of an account.
					/// - `who`: The ID of an account which was tracked in this pallet but which is
					///   now not a
					///  ranked member of the collective.
					offboard { who: ::subxt::utils::AccountId32 },
					#[codec(index = 7)]
					///Provide evidence that a rank is deserved.
					///
					///This is free as long as no evidence for the forthcoming judgement is
					/// already submitted. Evidence is cleared after an outcome (either demotion,
					/// promotion of approval).
					///
					/// - `origin`: A `Signed` origin of an inducted and ranked account.
					/// - `wish`: The stated desire of the member.
					/// - `evidence`: A dump of evidence to be considered. This should generally be
					///   either a
					///  Markdown-encoded document or a series of 32-byte hashes which can be found
					/// on a  decentralised content-based-indexing system such as IPFS.
					submit_evidence {
						wish: runtime_types::pallet_core_fellowship::Wish,
						evidence: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 8)]
					///Introduce an already-ranked individual of the collective into this pallet.
					/// The rank may still be zero.
					///
					///This resets `last_proof` to the current block and `last_promotion` will be
					/// set to zero, thereby delaying any automatic demotion but allowing immediate
					/// promotion.
					///
					/// - `origin`: A signed origin of a ranked, but not tracked, account.
					import,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Member's rank is too low.
					Unranked,
					#[codec(index = 1)]
					///Member's rank is not zero.
					Ranked,
					#[codec(index = 2)]
					///Member's rank is not as expected - generally means that the rank provided
					/// to the call does not agree with the state of the system.
					UnexpectedRank,
					#[codec(index = 3)]
					///The given rank is invalid - this generally means it's not between 1 and
					/// `RANK_COUNT`.
					InvalidRank,
					#[codec(index = 4)]
					///The origin does not have enough permission to do this operation.
					NoPermission,
					#[codec(index = 5)]
					///No work needs to be done at present for this member.
					NothingDoing,
					#[codec(index = 6)]
					///The candidate has already been inducted. This should never happen since it
					/// would require a candidate (rank 0) to already be tracked in the pallet.
					AlreadyInducted,
					#[codec(index = 7)]
					///The candidate has not been inducted, so cannot be offboarded from this
					/// pallet.
					NotTracked,
					#[codec(index = 8)]
					///Operation cannot be done yet since not enough time has passed.
					TooSoon,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///Parameters for the pallet have changed.
					ParamsChanged {
						params: runtime_types::pallet_core_fellowship::ParamsType<
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					///Member activity flag has been set.
					ActiveChanged {
						who: ::subxt::utils::AccountId32,
						is_active: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					///Member has begun being tracked in this pallet.
					Inducted { who: ::subxt::utils::AccountId32 },
					#[codec(index = 3)]
					///Member has been removed from being tracked in this pallet (i.e. because
					/// rank is now zero).
					Offboarded { who: ::subxt::utils::AccountId32 },
					#[codec(index = 4)]
					///Member has been promoted to the given rank.
					Promoted { who: ::subxt::utils::AccountId32, to_rank: ::core::primitive::u16 },
					#[codec(index = 5)]
					///Member has been demoted to the given (non-zero) rank.
					Demoted { who: ::subxt::utils::AccountId32, to_rank: ::core::primitive::u16 },
					#[codec(index = 6)]
					///Member has been proven at their current rank, postponing auto-demotion.
					Proven { who: ::subxt::utils::AccountId32, at_rank: ::core::primitive::u16 },
					#[codec(index = 7)]
					///Member has stated evidence of their efforts their request for rank.
					Requested {
						who: ::subxt::utils::AccountId32,
						wish: runtime_types::pallet_core_fellowship::Wish,
					},
					#[codec(index = 8)]
					///Some submitted evidence was judged and removed. There may or may not have
					/// been a change to the rank, but in any case, `last_proof` is reset.
					EvidenceJudged {
						who: ::subxt::utils::AccountId32,
						wish: runtime_types::pallet_core_fellowship::Wish,
						evidence: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						old_rank: ::core::primitive::u16,
						new_rank: ::core::option::Option<::core::primitive::u16>,
					},
					#[codec(index = 9)]
					///Pre-ranked account has been inducted at their current rank.
					Imported { who: ::subxt::utils::AccountId32, rank: ::core::primitive::u16 },
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct MemberStatus<_0> {
				pub is_active: ::core::primitive::bool,
				pub last_promotion: _0,
				pub last_proof: _0,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ParamsType<_0, _1> {
				pub active_salary: [_0; 9usize],
				pub passive_salary: [_0; 9usize],
				pub demotion_period: [_1; 9usize],
				pub min_promotion_period: [_1; 9usize],
				pub offboard_timeout: _1,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum Wish {
				#[codec(index = 0)]
				Retention,
				#[codec(index = 1)]
				Promotion,
			}
		}
		pub mod pallet_democracy {
			use super::runtime_types;
			pub mod conviction {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Conviction {
					#[codec(index = 0)]
					None,
					#[codec(index = 1)]
					Locked1x,
					#[codec(index = 2)]
					Locked2x,
					#[codec(index = 3)]
					Locked3x,
					#[codec(index = 4)]
					Locked4x,
					#[codec(index = 5)]
					Locked5x,
					#[codec(index = 6)]
					Locked6x,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Propose a sensitive action to be taken.
					///
					///The dispatch origin of this call must be _Signed_ and the sender must
					///have funds to cover the deposit.
					///
					/// - `proposal_hash`: The hash of the proposal preimage.
					/// - `value`: The amount of deposit (must be at least `MinimumDeposit`).
					///
					///Emits `Proposed`.
					propose {
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::babe_runtime::RuntimeCall,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					///Signals agreement with a particular proposal.
					///
					///The dispatch origin of this call must be _Signed_ and the sender
					///must have funds to cover the deposit, equal to the original deposit.
					///
					/// - `proposal`: The index of the proposal to second.
					second {
						#[codec(compact)]
						proposal: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					///Vote in a referendum. If `vote.is_aye()`, the vote is to enact the
					/// proposal; otherwise it is a vote to keep the status quo.
					///
					///The dispatch origin of this call must be _Signed_.
					///
					/// - `ref_index`: The index of the referendum to vote for.
					/// - `vote`: The vote configuration.
					vote {
						#[codec(compact)]
						ref_index: ::core::primitive::u32,
						vote: runtime_types::pallet_democracy::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 3)]
					///Schedule an emergency cancellation of a referendum. Cannot happen twice to
					/// the same referendum.
					///
					///The dispatch origin of this call must be `CancellationOrigin`.
					///
					///-`ref_index`: The index of the referendum to cancel.
					///
					///Weight: `O(1)`.
					emergency_cancel { ref_index: ::core::primitive::u32 },
					#[codec(index = 4)]
					///Schedule a referendum to be tabled once it is legal to schedule an external
					///referendum.
					///
					///The dispatch origin of this call must be `ExternalOrigin`.
					///
					/// - `proposal_hash`: The preimage hash of the proposal.
					external_propose {
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::babe_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 5)]
					///Schedule a majority-carries referendum to be tabled next once it is legal
					/// to schedule an external referendum.
					///
					///The dispatch of this call must be `ExternalMajorityOrigin`.
					///
					/// - `proposal_hash`: The preimage hash of the proposal.
					///
					///Unlike `external_propose`, blacklisting has no effect on this and it may
					/// replace a pre-scheduled `external_propose` call.
					///
					///Weight: `O(1)`
					external_propose_majority {
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::babe_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 6)]
					///Schedule a negative-turnout-bias referendum to be tabled next once it is
					/// legal to schedule an external referendum.
					///
					///The dispatch of this call must be `ExternalDefaultOrigin`.
					///
					/// - `proposal_hash`: The preimage hash of the proposal.
					///
					///Unlike `external_propose`, blacklisting has no effect on this and it may
					/// replace a pre-scheduled `external_propose` call.
					///
					///Weight: `O(1)`
					external_propose_default {
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::babe_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 7)]
					///Schedule the currently externally-proposed majority-carries referendum to
					/// be tabled immediately. If there is no externally-proposed referendum
					/// currently, or if there is one but it is not a majority-carries referendum
					/// then it fails.
					///
					///The dispatch of this call must be `FastTrackOrigin`.
					///
					/// - `proposal_hash`: The hash of the current external proposal.
					/// - `voting_period`: The period that is allowed for voting on this proposal.
					///   Increased to
					///	Must be always greater than zero.
					///	For `FastTrackOrigin` must be equal or greater than
					/// `FastTrackVotingPeriod`.
					/// - `delay`: The number of block after voting has ended in approval and this
					///   should be
					///  enacted. This doesn't have a minimum amount.
					///
					///Emits `Started`.
					///
					///Weight: `O(1)`
					fast_track {
						proposal_hash: ::subxt::utils::H256,
						voting_period: ::core::primitive::u32,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					///Veto and blacklist the external proposal hash.
					///
					///The dispatch origin of this call must be `VetoOrigin`.
					///
					/// - `proposal_hash`: The preimage hash of the proposal to veto and blacklist.
					///
					///Emits `Vetoed`.
					///
					///Weight: `O(V + log(V))` where V is number of `existing vetoers`
					veto_external { proposal_hash: ::subxt::utils::H256 },
					#[codec(index = 9)]
					///Remove a referendum.
					///
					///The dispatch origin of this call must be _Root_.
					///
					/// - `ref_index`: The index of the referendum to cancel.
					///
					///# Weight: `O(1)`.
					cancel_referendum {
						#[codec(compact)]
						ref_index: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					///Delegate the voting power (with some given conviction) of the sending
					/// account.
					///
					///The balance delegated is locked for as long as it's delegated, and
					/// thereafter for the time appropriate for the conviction's lock period.
					///
					///The dispatch origin of this call must be _Signed_, and the signing account
					/// must either:
					///  - be delegating already; or
					///  - have no voting activity (if there is, then it will need to be
					///    removed/consolidated through `reap_vote` or `unvote`).
					///
					/// - `to`: The account whose voting the `target` account's voting power will
					///   follow.
					/// - `conviction`: The conviction that will be attached to the delegated
					///   votes. When the
					///  account is undelegated, the funds will be locked for the corresponding
					/// period.
					/// - `balance`: The amount of the account's balance to be used in delegating.
					///   This must not
					///  be more than the account's current balance.
					///
					///Emits `Delegated`.
					///
					///Weight: `O(R)` where R is the number of referendums the voter delegating to
					/// has  voted on. Weight is charged as if maximum votes.
					delegate {
						to: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						conviction: runtime_types::pallet_democracy::conviction::Conviction,
						balance: ::core::primitive::u128,
					},
					#[codec(index = 11)]
					///Undelegate the voting power of the sending account.
					///
					///Tokens may be unlocked following once an amount of time consistent with the
					/// lock period of the conviction with which the delegation was issued.
					///
					///The dispatch origin of this call must be _Signed_ and the signing account
					/// must be currently delegating.
					///
					///Emits `Undelegated`.
					///
					///Weight: `O(R)` where R is the number of referendums the voter delegating to
					/// has  voted on. Weight is charged as if maximum votes.
					undelegate,
					#[codec(index = 12)]
					///Clears all public proposals.
					///
					///The dispatch origin of this call must be _Root_.
					///
					///Weight: `O(1)`.
					clear_public_proposals,
					#[codec(index = 13)]
					///Unlock tokens that have an expired lock.
					///
					///The dispatch origin of this call must be _Signed_.
					///
					/// - `target`: The account to remove the lock on.
					///
					///Weight: `O(R)` with R number of vote of target.
					unlock {
						target: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 14)]
					///Remove a vote for a referendum.
					///
					///If:
					/// - the referendum was cancelled, or
					/// - the referendum is ongoing, or
					/// - the referendum has ended such that
					///  - the vote of the account was in opposition to the result; or
					///  - there was no conviction to the account's vote; or
					///  - the account made a split vote
					///...then the vote is removed cleanly and a following call to `unlock` may
					/// result in more funds being available.
					///
					///If, however, the referendum has ended and:
					/// - it finished corresponding to the vote of the account, and
					/// - the account made a standard vote with conviction, and
					/// - the lock period of the conviction is not over
					///...then the lock will be aggregated into the overall account's lock, which
					/// may involve *overlocking* (where the two locks are combined into a single
					/// lock that is the maximum of both the amount locked and the time is it
					/// locked for).
					///
					///The dispatch origin of this call must be _Signed_, and the signer must have
					/// a vote registered for referendum `index`.
					///
					/// - `index`: The index of referendum of the vote to be removed.
					///
					///Weight: `O(R + log R)` where R is the number of referenda that `target` has
					/// voted on.  Weight is calculated for the maximum number of vote.
					remove_vote { index: ::core::primitive::u32 },
					#[codec(index = 15)]
					///Remove a vote for a referendum.
					///
					///If the `target` is equal to the signer, then this function is exactly
					/// equivalent to `remove_vote`. If not equal to the signer, then the vote must
					/// have expired, either because the referendum was cancelled, because the
					/// voter lost the referendum or because the conviction period is over.
					///
					///The dispatch origin of this call must be _Signed_.
					///
					/// - `target`: The account of the vote to be removed; this account must have
					///   voted for
					///  referendum `index`.
					/// - `index`: The index of referendum of the vote to be removed.
					///
					///Weight: `O(R + log R)` where R is the number of referenda that `target` has
					/// voted on.  Weight is calculated for the maximum number of vote.
					remove_other_vote {
						target: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						index: ::core::primitive::u32,
					},
					#[codec(index = 16)]
					///Permanently place a proposal into the blacklist. This prevents it from ever
					/// being proposed again.
					///
					///If called on a queued public or external proposal, then this will result in
					/// it being removed. If the `ref_index` supplied is an active referendum with
					/// the proposal hash, then it will be cancelled.
					///
					///The dispatch origin of this call must be `BlacklistOrigin`.
					///
					/// - `proposal_hash`: The proposal hash to blacklist permanently.
					/// - `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which
					///   will be
					///cancelled.
					///
					///Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it
					/// has a  reasonable value).
					blacklist {
						proposal_hash: ::subxt::utils::H256,
						maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 17)]
					///Remove a proposal.
					///
					///The dispatch origin of this call must be `CancelProposalOrigin`.
					///
					/// - `prop_index`: The index of the proposal to cancel.
					///
					///Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`
					cancel_proposal {
						#[codec(compact)]
						prop_index: ::core::primitive::u32,
					},
					#[codec(index = 18)]
					///Set or clear a metadata of a proposal or a referendum.
					///
					///Parameters:
					/// - `origin`: Must correspond to the `MetadataOwner`.
					///    - `ExternalOrigin` for an external proposal with the
					///      `SuperMajorityApprove` threshold.
					///    - `ExternalDefaultOrigin` for an external proposal with the
					///      `SuperMajorityAgainst` threshold.
					///    - `ExternalMajorityOrigin` for an external proposal with the
					///      `SimpleMajority` threshold.
					///    - `Signed` by a creator for a public proposal.
					///    - `Signed` to clear a metadata for a finished referendum.
					///    - `Root` to set a metadata for an ongoing referendum.
					/// - `owner`: an identifier of a metadata owner.
					/// - `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a
					///   metadata.
					set_metadata {
						owner: runtime_types::pallet_democracy::types::MetadataOwner,
						maybe_hash: ::core::option::Option<::subxt::utils::H256>,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Value too low
					ValueLow,
					#[codec(index = 1)]
					///Proposal does not exist
					ProposalMissing,
					#[codec(index = 2)]
					///Cannot cancel the same proposal twice
					AlreadyCanceled,
					#[codec(index = 3)]
					///Proposal already made
					DuplicateProposal,
					#[codec(index = 4)]
					///Proposal still blacklisted
					ProposalBlacklisted,
					#[codec(index = 5)]
					///Next external proposal not simple majority
					NotSimpleMajority,
					#[codec(index = 6)]
					///Invalid hash
					InvalidHash,
					#[codec(index = 7)]
					///No external proposal
					NoProposal,
					#[codec(index = 8)]
					///Identity may not veto a proposal twice
					AlreadyVetoed,
					#[codec(index = 9)]
					///Vote given for invalid referendum
					ReferendumInvalid,
					#[codec(index = 10)]
					///No proposals waiting
					NoneWaiting,
					#[codec(index = 11)]
					///The given account did not vote on the referendum.
					NotVoter,
					#[codec(index = 12)]
					///The actor has no permission to conduct the action.
					NoPermission,
					#[codec(index = 13)]
					///The account is already delegating.
					AlreadyDelegating,
					#[codec(index = 14)]
					///Too high a balance was provided that the account cannot afford.
					InsufficientFunds,
					#[codec(index = 15)]
					///The account is not currently delegating.
					NotDelegating,
					#[codec(index = 16)]
					///The account currently has votes attached to it and the operation cannot
					/// succeed until these are removed, either through `unvote` or `reap_vote`.
					VotesExist,
					#[codec(index = 17)]
					///The instant referendum origin is currently disallowed.
					InstantNotAllowed,
					#[codec(index = 18)]
					///Delegation to oneself makes no sense.
					Nonsense,
					#[codec(index = 19)]
					///Invalid upper bound.
					WrongUpperBound,
					#[codec(index = 20)]
					///Maximum number of votes reached.
					MaxVotesReached,
					#[codec(index = 21)]
					///Maximum number of items reached.
					TooMany,
					#[codec(index = 22)]
					///Voting period too low
					VotingPeriodLow,
					#[codec(index = 23)]
					///The preimage does not exist.
					PreimageNotExist,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A motion has been proposed by a public account.
					Proposed {
						proposal_index: ::core::primitive::u32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					///A public proposal has been tabled for referendum vote.
					Tabled {
						proposal_index: ::core::primitive::u32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					///An external proposal has been tabled.
					ExternalTabled,
					#[codec(index = 3)]
					///A referendum has begun.
					Started {
						ref_index: ::core::primitive::u32,
						threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
					},
					#[codec(index = 4)]
					///A proposal has been approved by referendum.
					Passed { ref_index: ::core::primitive::u32 },
					#[codec(index = 5)]
					///A proposal has been rejected by referendum.
					NotPassed { ref_index: ::core::primitive::u32 },
					#[codec(index = 6)]
					///A referendum has been cancelled.
					Cancelled { ref_index: ::core::primitive::u32 },
					#[codec(index = 7)]
					///An account has delegated their vote to another account.
					Delegated {
						who: ::subxt::utils::AccountId32,
						target: ::subxt::utils::AccountId32,
					},
					#[codec(index = 8)]
					///An account has cancelled a previous delegation operation.
					Undelegated { account: ::subxt::utils::AccountId32 },
					#[codec(index = 9)]
					///An external proposal has been vetoed.
					Vetoed {
						who: ::subxt::utils::AccountId32,
						proposal_hash: ::subxt::utils::H256,
						until: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					///A proposal_hash has been blacklisted permanently.
					Blacklisted { proposal_hash: ::subxt::utils::H256 },
					#[codec(index = 11)]
					///An account has voted in a referendum
					Voted {
						voter: ::subxt::utils::AccountId32,
						ref_index: ::core::primitive::u32,
						vote: runtime_types::pallet_democracy::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 12)]
					///An account has secconded a proposal
					Seconded {
						seconder: ::subxt::utils::AccountId32,
						prop_index: ::core::primitive::u32,
					},
					#[codec(index = 13)]
					///A proposal got canceled.
					ProposalCanceled { prop_index: ::core::primitive::u32 },
					#[codec(index = 14)]
					///Metadata for a proposal or a referendum has been set.
					MetadataSet {
						owner: runtime_types::pallet_democracy::types::MetadataOwner,
						hash: ::subxt::utils::H256,
					},
					#[codec(index = 15)]
					///Metadata for a proposal or a referendum has been cleared.
					MetadataCleared {
						owner: runtime_types::pallet_democracy::types::MetadataOwner,
						hash: ::subxt::utils::H256,
					},
					#[codec(index = 16)]
					///Metadata has been transferred to new owner.
					MetadataTransferred {
						prev_owner: runtime_types::pallet_democracy::types::MetadataOwner,
						owner: runtime_types::pallet_democracy::types::MetadataOwner,
						hash: ::subxt::utils::H256,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Delegations<_0> {
					pub votes: _0,
					pub capital: _0,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum MetadataOwner {
					#[codec(index = 0)]
					External,
					#[codec(index = 1)]
					Proposal(::core::primitive::u32),
					#[codec(index = 2)]
					Referendum(::core::primitive::u32),
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum ReferendumInfo<_0, _1, _2> {
					#[codec(index = 0)]
					Ongoing(runtime_types::pallet_democracy::types::ReferendumStatus<_0, _1, _2>),
					#[codec(index = 1)]
					Finished { approved: ::core::primitive::bool, end: _0 },
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ReferendumStatus<_0, _1, _2> {
					pub end: _0,
					pub proposal: _1,
					pub threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
					pub delay: _0,
					pub tally: runtime_types::pallet_democracy::types::Tally<_2>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Tally<_0> {
					pub ayes: _0,
					pub nays: _0,
					pub turnout: _0,
				}
			}
			pub mod vote {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum AccountVote<_0> {
					#[codec(index = 0)]
					Standard { vote: runtime_types::pallet_democracy::vote::Vote, balance: _0 },
					#[codec(index = 1)]
					Split { aye: _0, nay: _0 },
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct PriorLock<_0, _1>(pub _0, pub _1);
				#[derive(
					::subxt::ext::codec::CompactAs,
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Vote(pub ::core::primitive::u8);
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Voting<_0, _1, _2> {
					#[codec(index = 0)]
					Direct {
						votes: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							_2,
							runtime_types::pallet_democracy::vote::AccountVote<_0>,
						)>,
						delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
						prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
					},
					#[codec(index = 1)]
					Delegating {
						balance: _0,
						target: _1,
						conviction: runtime_types::pallet_democracy::conviction::Conviction,
						delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
						prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
					},
				}
			}
			pub mod vote_threshold {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum VoteThreshold {
					#[codec(index = 0)]
					SuperMajorityApprove,
					#[codec(index = 1)]
					SuperMajorityAgainst,
					#[codec(index = 2)]
					SimpleMajority,
				}
			}
		}
		pub mod pallet_election_provider_multi_phase {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
                    ///Submit a solution for the unsigned phase.
                    ///
                    ///The dispatch origin fo this call must be __none__.
                    ///
                    ///This submission is checked on the fly. Moreover, this unsigned solution is only
                    ///validated when submitted to the pool from the **local** node. Effectively, this means
                    ///that only active validators can submit this transaction when authoring a block (similar
                    ///to an inherent).
                    ///
                    ///To prevent any incorrect solution (and thus wasted time/weight), this transaction will
                    ///panic if the solution submitted by the validator is invalid in any way, effectively
                    ///putting their authoring reward at risk.
                    ///
                    ///No deposit or reward is associated with this submission.
                    submit_unsigned {
                        raw_solution: ::std::boxed::Box<
                            runtime_types::pallet_election_provider_multi_phase::RawSolution<
                                runtime_types::babe_runtime::NposSolution16,
                            >,
                        >,
                        witness: runtime_types::pallet_election_provider_multi_phase::SolutionOrSnapshotSize,
                    },
                    #[codec(index = 1)]
                    ///Set a new value for `MinimumUntrustedScore`.
                    ///
                    ///Dispatch origin must be aligned with `T::ForceOrigin`.
                    ///
                    ///This check can be turned off by setting the value to `None`.
                    set_minimum_untrusted_score {
                        maybe_next_score: ::core::option::Option<
                            runtime_types::sp_npos_elections::ElectionScore,
                        >,
                    },
                    #[codec(index = 2)]
                    ///Set a solution in the queue, to be handed out to the client of this pallet in the next
                    ///call to `ElectionProvider::elect`.
                    ///
                    ///This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.
                    ///
                    ///The solution is not checked for any feasibility and is assumed to be trustworthy, as any
                    ///feasibility check itself can in principle cause the election process to fail (due to
                    ///memory/weight constrains).
                    set_emergency_election_result {
                        supports: ::std::vec::Vec<
                            (
                                ::subxt::utils::AccountId32,
                                runtime_types::sp_npos_elections::Support<
                                    ::subxt::utils::AccountId32,
                                >,
                            ),
                        >,
                    },
                    #[codec(index = 3)]
                    ///Submit a solution for the signed phase.
                    ///
                    ///The dispatch origin fo this call must be __signed__.
                    ///
                    ///The solution is potentially queued, based on the claimed score and processed at the end
                    ///of the signed phase.
                    ///
                    ///A deposit is reserved and recorded for the solution. Based on the outcome, the solution
                    ///might be rewarded, slashed, or get all or a part of the deposit back.
                    submit {
                        raw_solution: ::std::boxed::Box<
                            runtime_types::pallet_election_provider_multi_phase::RawSolution<
                                runtime_types::babe_runtime::NposSolution16,
                            >,
                        >,
                    },
                    #[codec(index = 4)]
                    ///Trigger the governance fallback.
                    ///
                    ///This can only be called when [`Phase::Emergency`] is enabled, as an alternative to
                    ///calling [`Call::set_emergency_election_result`].
                    governance_fallback {
                        maybe_max_voters: ::core::option::Option<::core::primitive::u32>,
                        maybe_max_targets: ::core::option::Option<::core::primitive::u32>,
                    },
                }
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Error of the pallet that can be returned in response to dispatches.
				pub enum Error {
					#[codec(index = 0)]
					///Submission was too early.
					PreDispatchEarlySubmission,
					#[codec(index = 1)]
					///Wrong number of winners presented.
					PreDispatchWrongWinnerCount,
					#[codec(index = 2)]
					///Submission was too weak, score-wise.
					PreDispatchWeakSubmission,
					#[codec(index = 3)]
					///The queue was full, and the solution was not better than any of the
					/// existing ones.
					SignedQueueFull,
					#[codec(index = 4)]
					///The origin failed to pay the deposit.
					SignedCannotPayDeposit,
					#[codec(index = 5)]
					///Witness data to dispatchable is invalid.
					SignedInvalidWitness,
					#[codec(index = 6)]
					///The signed submission consumes too much weight
					SignedTooMuchWeight,
					#[codec(index = 7)]
					///OCW submitted solution for wrong round
					OcwCallWrongEra,
					#[codec(index = 8)]
					///Snapshot metadata should exist but didn't.
					MissingSnapshotMetadata,
					#[codec(index = 9)]
					///`Self::insert_submission` returned an invalid index.
					InvalidSubmissionIndex,
					#[codec(index = 10)]
					///The call is not allowed at this point.
					CallNotAllowed,
					#[codec(index = 11)]
					///The fallback failed
					FallbackFailed,
					#[codec(index = 12)]
					///Some bound not met
					BoundNotMet,
					#[codec(index = 13)]
					///Submitted solution has too many winners
					TooManyWinners,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A solution was stored with the given compute.
					///
					///The `origin` indicates the origin of the solution. If `origin` is
					/// `Some(AccountId)`, the stored solution was submited in the signed phase by
					/// a miner with the `AccountId`. Otherwise, the solution was stored either
					/// during the unsigned phase or by `T::ForceOrigin`. The `bool` is `true` when
					/// a previous solution was ejected to make room for this one.
					SolutionStored {
						compute:
							runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
						origin: ::core::option::Option<::subxt::utils::AccountId32>,
						prev_ejected: ::core::primitive::bool,
					},
					#[codec(index = 1)]
					///The election has been finalized, with the given computation and score.
					ElectionFinalized {
						compute:
							runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
						score: runtime_types::sp_npos_elections::ElectionScore,
					},
					#[codec(index = 2)]
					///An election failed.
					///
					///Not much can be said about which computes failed in the process.
					ElectionFailed,
					#[codec(index = 3)]
					///An account has been rewarded for their signed submission being finalized.
					Rewarded {
						account: ::subxt::utils::AccountId32,
						value: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					///An account has been slashed for submitting an invalid signed submission.
					Slashed { account: ::subxt::utils::AccountId32, value: ::core::primitive::u128 },
					#[codec(index = 5)]
					///There was a phase transition in a given round.
					PhaseTransitioned {
						from: runtime_types::pallet_election_provider_multi_phase::Phase<
							::core::primitive::u32,
						>,
						to: runtime_types::pallet_election_provider_multi_phase::Phase<
							::core::primitive::u32,
						>,
						round: ::core::primitive::u32,
					},
				}
			}
			pub mod signed {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct SignedSubmission<_0, _1, _2> {
					pub who: _0,
					pub deposit: _1,
					pub raw_solution:
						runtime_types::pallet_election_provider_multi_phase::RawSolution<_2>,
					pub call_fee: _1,
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum ElectionCompute {
				#[codec(index = 0)]
				OnChain,
				#[codec(index = 1)]
				Signed,
				#[codec(index = 2)]
				Unsigned,
				#[codec(index = 3)]
				Fallback,
				#[codec(index = 4)]
				Emergency,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum Phase<_0> {
				#[codec(index = 0)]
				Off,
				#[codec(index = 1)]
				Signed,
				#[codec(index = 2)]
				Unsigned((::core::primitive::bool, _0)),
				#[codec(index = 3)]
				Emergency,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RawSolution<_0> {
				pub solution: _0,
				pub score: runtime_types::sp_npos_elections::ElectionScore,
				pub round: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ReadySolution {
				pub supports: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
					::subxt::utils::AccountId32,
					runtime_types::sp_npos_elections::Support<::subxt::utils::AccountId32>,
				)>,
				pub score: runtime_types::sp_npos_elections::ElectionScore,
				pub compute: runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RoundSnapshot<_0, _1> {
				pub voters: ::std::vec::Vec<_1>,
				pub targets: ::std::vec::Vec<_0>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SolutionOrSnapshotSize {
				#[codec(compact)]
				pub voters: ::core::primitive::u32,
				#[codec(compact)]
				pub targets: ::core::primitive::u32,
			}
		}
		pub mod pallet_elections_phragmen {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Vote for a set of candidates for the upcoming round of election. This can
					/// be called to set the initial votes, or update already existing votes.
					///
					///Upon initial voting, `value` units of `who`'s balance is locked and a
					/// deposit amount is reserved. The deposit is based on the number of votes and
					/// can be updated over time.
					///
					///The `votes` should:
					///  - not be empty.
					///  - be less than the number of possible candidates. Note that all current
					///    members and runners-up are also automatically candidates for the next
					///    round.
					///
					///If `value` is more than `who`'s free balance, then the maximum of the two
					/// is used.
					///
					///The dispatch origin of this call must be signed.
					///
					///### Warning
					///
					///It is the responsibility of the caller to **NOT** place all of their
					/// balance into the lock and keep some for further operations.
					vote {
						votes: ::std::vec::Vec<::subxt::utils::AccountId32>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					///Remove `origin` as a voter.
					///
					///This removes the lock and returns the deposit.
					///
					///The dispatch origin of this call must be signed and be a voter.
					remove_voter,
					#[codec(index = 2)]
					///Submit oneself for candidacy. A fixed amount of deposit is recorded.
					///
					///All candidates are wiped at the end of the term. They either become a
					/// member/runner-up, or leave the system while their deposit is slashed.
					///
					///The dispatch origin of this call must be signed.
					///
					///### Warning
					///
					///Even if a candidate ends up being a member, they must call
					/// [`Call::renounce_candidacy`] to get their deposit back. Losing the spot in
					/// an election will always lead to a slash.
					///
					///The number of current candidates must be provided as witness data.
					///## Complexity
					///O(C + log(C)) where C is candidate_count.
					submit_candidacy {
						#[codec(compact)]
						candidate_count: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					///Renounce one's intention to be a candidate for the next election round. 3
					/// potential outcomes exist:
					///
					/// - `origin` is a candidate and not elected in any set. In this case, the
					///   deposit is
					///  unreserved, returned and origin is removed as a candidate.
					/// - `origin` is a current runner-up. In this case, the deposit is unreserved,
					///   returned and
					///  origin is removed as a runner-up.
					/// - `origin` is a current member. In this case, the deposit is unreserved and
					///   origin is
					///  removed as a member, consequently not being a candidate for the next round
					/// anymore.  Similar to [`remove_member`](Self::remove_member), if replacement
					/// runners exists, they  are immediately used. If the prime is renouncing,
					/// then no prime will exist until the  next round.
					///
					///The dispatch origin of this call must be signed, and have one of the above
					/// roles. The type of renouncing must be provided as witness data.
					///
					///## Complexity
					///  - Renouncing::Candidate(count): O(count + log(count))
					///  - Renouncing::Member: O(1)
					///  - Renouncing::RunnerUp: O(1)
					renounce_candidacy {
						renouncing: runtime_types::pallet_elections_phragmen::Renouncing,
					},
					#[codec(index = 4)]
					///Remove a particular member from the set. This is effective immediately and
					/// the bond of the outgoing member is slashed.
					///
					///If a runner-up is available, then the best runner-up will be removed and
					/// replaces the outgoing member. Otherwise, if `rerun_election` is `true`, a
					/// new phragmen election is started, else, nothing happens.
					///
					///If `slash_bond` is set to true, the bond of the member being removed is
					/// slashed. Else, it is returned.
					///
					///The dispatch origin of this call must be root.
					///
					///Note that this does not affect the designated block number of the next
					/// election.
					///
					///## Complexity
					/// - Check details of remove_and_replace_member() and do_phragmen().
					remove_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						slash_bond: ::core::primitive::bool,
						rerun_election: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					///Clean all voters who are defunct (i.e. they do not serve any purpose at
					/// all). The deposit of the removed voters are returned.
					///
					///This is an root function to be used only for cleaning the state.
					///
					///The dispatch origin of this call must be root.
					///
					///## Complexity
					/// - Check is_defunct_voter() details.
					clean_defunct_voters {
						num_voters: ::core::primitive::u32,
						num_defunct: ::core::primitive::u32,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Cannot vote when no candidates or members exist.
					UnableToVote,
					#[codec(index = 1)]
					///Must vote for at least one candidate.
					NoVotes,
					#[codec(index = 2)]
					///Cannot vote more than candidates.
					TooManyVotes,
					#[codec(index = 3)]
					///Cannot vote more than maximum allowed.
					MaximumVotesExceeded,
					#[codec(index = 4)]
					///Cannot vote with stake less than minimum balance.
					LowBalance,
					#[codec(index = 5)]
					///Voter can not pay voting bond.
					UnableToPayBond,
					#[codec(index = 6)]
					///Must be a voter.
					MustBeVoter,
					#[codec(index = 7)]
					///Duplicated candidate submission.
					DuplicatedCandidate,
					#[codec(index = 8)]
					///Too many candidates have been created.
					TooManyCandidates,
					#[codec(index = 9)]
					///Member cannot re-submit candidacy.
					MemberSubmit,
					#[codec(index = 10)]
					///Runner cannot re-submit candidacy.
					RunnerUpSubmit,
					#[codec(index = 11)]
					///Candidate does not have enough funds.
					InsufficientCandidateFunds,
					#[codec(index = 12)]
					///Not a member.
					NotMember,
					#[codec(index = 13)]
					///The provided count of number of candidates is incorrect.
					InvalidWitnessData,
					#[codec(index = 14)]
					///The provided count of number of votes is incorrect.
					InvalidVoteCount,
					#[codec(index = 15)]
					///The renouncing origin presented a wrong `Renouncing` parameter.
					InvalidRenouncing,
					#[codec(index = 16)]
					///Prediction regarding replacement after member removal is wrong.
					InvalidReplacement,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A new term with new_members. This indicates that enough candidates existed
					/// to run the election, not that enough have has been elected. The inner value
					/// must be examined for this purpose. A `NewTerm(\[\])` indicates that some
					/// candidates got their bond slashed and none were elected, whilst `EmptyTerm`
					/// means that no candidates existed to begin with.
					NewTerm {
						new_members:
							::std::vec::Vec<(::subxt::utils::AccountId32, ::core::primitive::u128)>,
					},
					#[codec(index = 1)]
					///No (or not enough) candidates existed for this round. This is different
					/// from `NewTerm(\[\])`. See the description of `NewTerm`.
					EmptyTerm,
					#[codec(index = 2)]
					///Internal error happened while trying to perform election.
					ElectionError,
					#[codec(index = 3)]
					///A member has been removed. This should always be followed by either
					/// `NewTerm` or `EmptyTerm`.
					MemberKicked { member: ::subxt::utils::AccountId32 },
					#[codec(index = 4)]
					///Someone has renounced their candidacy.
					Renounced { candidate: ::subxt::utils::AccountId32 },
					#[codec(index = 5)]
					///A candidate was slashed by amount due to failing to obtain a seat as member
					/// or runner-up.
					///
					///Note that old members and runners-up are also candidates.
					CandidateSlashed {
						candidate: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					///A seat holder was slashed by amount by being forcefully removed from the
					/// set.
					SeatHolderSlashed {
						seat_holder: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum Renouncing {
				#[codec(index = 0)]
				Member,
				#[codec(index = 1)]
				RunnerUp,
				#[codec(index = 2)]
				Candidate(#[codec(compact)] ::core::primitive::u32),
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SeatHolder<_0, _1> {
				pub who: _0,
				pub stake: _1,
				pub deposit: _1,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Voter<_0, _1> {
				pub votes: ::std::vec::Vec<_0>,
				pub stake: _1,
				pub deposit: _1,
			}
		}
		pub mod pallet_fast_unstake {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Register oneself for fast-unstake.
					///
					///The dispatch origin of this call must be signed by the controller account,
					/// similar to `staking::unbond`.
					///
					///The stash associated with the origin must have no ongoing unlocking chunks.
					/// If successful, this will fully unbond and chill the stash. Then, it will
					/// enqueue the stash to be checked in further blocks.
					///
					///If by the time this is called, the stash is actually eligible for
					/// fast-unstake, then they are guaranteed to remain eligible, because the call
					/// will chill them as well.
					///
					///If the check works, the entire staking data is removed, i.e. the stash is
					/// fully unstaked.
					///
					///If the check fails, the stash remains chilled and waiting for being
					/// unbonded as in with the normal staking system, but they lose part of their
					/// unbonding chunks due to consuming the chain's resources.
					register_fast_unstake,
					#[codec(index = 1)]
					///Deregister oneself from the fast-unstake.
					///
					///This is useful if one is registered, they are still waiting, and they
					/// change their mind.
					///
					///Note that the associated stash is still fully unbonded and chilled as a
					/// consequence of calling `register_fast_unstake`. This should probably be
					/// followed by a call to `Staking::rebond`.
					deregister,
					#[codec(index = 2)]
					///Control the operation of this pallet.
					///
					///Dispatch origin must be signed by the [`Config::ControlOrigin`].
					control { eras_to_check: ::core::primitive::u32 },
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///The provided Controller account was not found.
					///
					///This means that the given account is not bonded.
					NotController,
					#[codec(index = 1)]
					///The bonded account has already been queued.
					AlreadyQueued,
					#[codec(index = 2)]
					///The bonded account has active unlocking chunks.
					NotFullyBonded,
					#[codec(index = 3)]
					///The provided un-staker is not in the `Queue`.
					NotQueued,
					#[codec(index = 4)]
					///The provided un-staker is already in Head, and cannot deregister.
					AlreadyHead,
					#[codec(index = 5)]
					///The call is not allowed at this point because the pallet is not active.
					CallNotAllowed,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///The events of this pallet.
				pub enum Event {
					#[codec(index = 0)]
					///A staker was unstaked.
					Unstaked {
						stash: ::subxt::utils::AccountId32,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 1)]
					///A staker was slashed for requesting fast-unstake whilst being exposed.
					Slashed { stash: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 2)]
					///An internal error happened. Operations will be paused now.
					InternalError,
					#[codec(index = 3)]
					///A batch was partially checked for the given eras, but the process did not
					/// finish.
					BatchChecked { eras: ::std::vec::Vec<::core::primitive::u32> },
					#[codec(index = 4)]
					///A batch of a given size was terminated.
					///
					///This is always follows by a number of `Unstaked` or `Slashed` events,
					/// marking the end of the batch. A new batch will be created upon next block.
					BatchFinished { size: ::core::primitive::u32 },
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct UnstakeRequest {
					pub stashes: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						::subxt::utils::AccountId32,
						::core::primitive::u128,
					)>,
					pub checked: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u32,
					>,
				}
			}
		}
		pub mod pallet_glutton {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Initializes the pallet by writing into `TrashData`.
					///
					///Only callable by Root. A good default for `trash_count` is `5_000`.
					initialize_pallet {
						new_count: ::core::primitive::u32,
						witness_count: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 1)]
					///Set the `Compute` storage value that determines how much of the
					///block's weight `ref_time` to use during `on_idle`.
					///
					///Only callable by Root.
					set_compute { compute: runtime_types::sp_arithmetic::per_things::Perbill },
					#[codec(index = 2)]
					///Set the `Storage` storage value that determines the PoV size usage
					///for each block.
					///
					///Only callable by Root.
					set_storage { storage: runtime_types::sp_arithmetic::per_things::Perbill },
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///The pallet was already initialized.
					///
					///Set `witness_count` to `Some` to bypass this error.
					AlreadyInitialized,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///The pallet has been (re)initialized by root.
					PalletInitialized { reinit: ::core::primitive::bool },
					#[codec(index = 1)]
					///The computation limit has been updated by root.
					ComputationLimitSet {
						compute: runtime_types::sp_arithmetic::per_things::Perbill,
					},
					#[codec(index = 2)]
					///The storage limit has been updated by root.
					StorageLimitSet { storage: runtime_types::sp_arithmetic::per_things::Perbill },
				}
			}
		}
		pub mod pallet_grandpa {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Report voter equivocation/misbehavior. This method will verify the
					///equivocation proof and validate the given key ownership proof
					///against the extracted offender. If both are valid, the offence
					///will be reported.
					report_equivocation {
						equivocation_proof: ::std::boxed::Box<
							runtime_types::sp_consensus_grandpa::EquivocationProof<
								::subxt::utils::H256,
								::core::primitive::u32,
							>,
						>,
						key_owner_proof: runtime_types::sp_session::MembershipProof,
					},
					#[codec(index = 1)]
					///Report voter equivocation/misbehavior. This method will verify the
					///equivocation proof and validate the given key ownership proof
					///against the extracted offender. If both are valid, the offence
					///will be reported.
					///
					///This extrinsic must be called unsigned and it is expected that only
					///block authors will call it (validated in `ValidateUnsigned`), as such
					///if the block author is defined it will be defined as the equivocation
					///reporter.
					report_equivocation_unsigned {
						equivocation_proof: ::std::boxed::Box<
							runtime_types::sp_consensus_grandpa::EquivocationProof<
								::subxt::utils::H256,
								::core::primitive::u32,
							>,
						>,
						key_owner_proof: runtime_types::sp_session::MembershipProof,
					},
					#[codec(index = 2)]
					///Note that the current authority set of the GRANDPA finality gadget has
					/// stalled.
					///
					///This will trigger a forced authority set change at the beginning of the
					/// next session, to be enacted `delay` blocks after that. The `delay` should
					/// be high enough to safely assume that the block signalling the forced change
					/// will not be re-orged e.g. 1000 blocks. The block production rate (which may
					/// be slowed down because of finality lagging) should be taken into account
					/// when choosing the `delay`. The GRANDPA voters based on the new
					/// authority will start voting on top of `best_finalized_block_number` for new
					/// finalized blocks. `best_finalized_block_number` should be the highest of
					/// the latest finalized block of all validators of the new authority set.
					///
					///Only callable by root.
					note_stalled {
						delay: ::core::primitive::u32,
						best_finalized_block_number: ::core::primitive::u32,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Attempt to signal GRANDPA pause when the authority set isn't live
					///(either paused or already pending pause).
					PauseFailed,
					#[codec(index = 1)]
					///Attempt to signal GRANDPA resume when the authority set isn't paused
					///(either live or already pending resume).
					ResumeFailed,
					#[codec(index = 2)]
					///Attempt to signal GRANDPA change with one already pending.
					ChangePending,
					#[codec(index = 3)]
					///Cannot signal forced change so soon after last.
					TooSoon,
					#[codec(index = 4)]
					///A key ownership proof provided as part of an equivocation report is
					/// invalid.
					InvalidKeyOwnershipProof,
					#[codec(index = 5)]
					///An equivocation proof provided as part of an equivocation report is
					/// invalid.
					InvalidEquivocationProof,
					#[codec(index = 6)]
					///A given equivocation report is valid but already previously reported.
					DuplicateOffenceReport,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///New authority set has been applied.
					NewAuthorities {
						authority_set: ::std::vec::Vec<(
							runtime_types::sp_consensus_grandpa::app::Public,
							::core::primitive::u64,
						)>,
					},
					#[codec(index = 1)]
					///Current authority set has been paused.
					Paused,
					#[codec(index = 2)]
					///Current authority set has been resumed.
					Resumed,
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct StoredPendingChange<_0> {
				pub scheduled_at: _0,
				pub delay: _0,
				pub next_authorities:
					runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<(
						runtime_types::sp_consensus_grandpa::app::Public,
						::core::primitive::u64,
					)>,
				pub forced: ::core::option::Option<_0>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum StoredState<_0> {
				#[codec(index = 0)]
				Live,
				#[codec(index = 1)]
				PendingPause { scheduled_at: _0, delay: _0 },
				#[codec(index = 2)]
				Paused,
				#[codec(index = 3)]
				PendingResume { scheduled_at: _0, delay: _0 },
			}
		}
		pub mod pallet_identity {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Identity pallet declaration.
				pub enum Call {
					#[codec(index = 0)]
					///Add a registrar to the system.
					///
					///The dispatch origin for this call must be `T::RegistrarOrigin`.
					///
					/// - `account`: the account of the registrar.
					///
					///Emits `RegistrarAdded` if successful.
					///
					///## Complexity
					/// - `O(R)` where `R` registrar-count (governance-bounded and code-bounded).
					add_registrar {
						account: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					///Set an account's identity information and reserve the appropriate deposit.
					///
					///If the account already has identity information, the deposit is taken as
					/// part payment for the new deposit.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					/// - `info`: The identity information.
					///
					///Emits `IdentitySet` if successful.
					///
					///## Complexity
					/// - `O(X + X' + R)`
					///  - where `X` additional-field-count (deposit-bounded and code-bounded)
					///  - where `R` judgements-count (registrar-count-bounded)
					set_identity {
						info:
							::std::boxed::Box<runtime_types::pallet_identity::types::IdentityInfo>,
					},
					#[codec(index = 2)]
					///Set the sub-accounts of the sender.
					///
					///Payment: Any aggregate balance reserved by previous `set_subs` calls will
					/// be returned and an amount `SubAccountDeposit` will be reserved for each
					/// item in `subs`.
					///
					///The dispatch origin for this call must be _Signed_ and the sender must have
					/// a registered identity.
					///
					/// - `subs`: The identity's (new) sub-accounts.
					///
					///## Complexity
					/// - `O(P + S)`
					///  - where `P` old-subs-count (hard- and deposit-bounded).
					///  - where `S` subs-count (hard- and deposit-bounded).
					set_subs {
						subs: ::std::vec::Vec<(
							::subxt::utils::AccountId32,
							runtime_types::pallet_identity::types::Data,
						)>,
					},
					#[codec(index = 3)]
					///Clear an account's identity info and all sub-accounts and return all
					/// deposits.
					///
					///Payment: All reserved balances on the account are returned.
					///
					///The dispatch origin for this call must be _Signed_ and the sender must have
					/// a registered identity.
					///
					///Emits `IdentityCleared` if successful.
					///
					///## Complexity
					/// - `O(R + S + X)`
					///  - where `R` registrar-count (governance-bounded).
					///  - where `S` subs-count (hard- and deposit-bounded).
					///  - where `X` additional-field-count (deposit-bounded and code-bounded).
					clear_identity,
					#[codec(index = 4)]
					///Request a judgement from a registrar.
					///
					///Payment: At most `max_fee` will be reserved for payment to the registrar if
					/// judgement given.
					///
					///The dispatch origin for this call must be _Signed_ and the sender must have
					/// a registered identity.
					///
					/// - `reg_index`: The index of the registrar whose judgement is requested.
					/// - `max_fee`: The maximum fee that may be paid. This should just be
					///   auto-populated as:
					///
					///```nocompile
					/// Self::registrars().get(reg_index).unwrap().fee
					/// ```
					///
					///Emits `JudgementRequested` if successful.
					///
					///## Complexity
					/// - `O(R + X)`.
					///  - where `R` registrar-count (governance-bounded).
					///  - where `X` additional-field-count (deposit-bounded and code-bounded).
					request_judgement {
						#[codec(compact)]
						reg_index: ::core::primitive::u32,
						#[codec(compact)]
						max_fee: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					///Cancel a previous request.
					///
					///Payment: A previously reserved deposit is returned on success.
					///
					///The dispatch origin for this call must be _Signed_ and the sender must have
					/// a registered identity.
					///
					/// - `reg_index`: The index of the registrar whose judgement is no longer
					///   requested.
					///
					///Emits `JudgementUnrequested` if successful.
					///
					///## Complexity
					/// - `O(R + X)`.
					///  - where `R` registrar-count (governance-bounded).
					///  - where `X` additional-field-count (deposit-bounded and code-bounded).
					cancel_request { reg_index: ::core::primitive::u32 },
					#[codec(index = 6)]
					///Set the fee required for a judgement to be requested from a registrar.
					///
					///The dispatch origin for this call must be _Signed_ and the sender must be
					/// the account of the registrar whose index is `index`.
					///
					/// - `index`: the index of the registrar whose fee is to be set.
					/// - `fee`: the new fee.
					///
					///## Complexity
					/// - `O(R)`.
					///  - where `R` registrar-count (governance-bounded).
					set_fee {
						#[codec(compact)]
						index: ::core::primitive::u32,
						#[codec(compact)]
						fee: ::core::primitive::u128,
					},
					#[codec(index = 7)]
					///Change the account associated with a registrar.
					///
					///The dispatch origin for this call must be _Signed_ and the sender must be
					/// the account of the registrar whose index is `index`.
					///
					/// - `index`: the index of the registrar whose fee is to be set.
					/// - `new`: the new account ID.
					///
					///## Complexity
					/// - `O(R)`.
					///  - where `R` registrar-count (governance-bounded).
					set_account_id {
						#[codec(compact)]
						index: ::core::primitive::u32,
						new: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 8)]
					///Set the field information for a registrar.
					///
					///The dispatch origin for this call must be _Signed_ and the sender must be
					/// the account of the registrar whose index is `index`.
					///
					/// - `index`: the index of the registrar whose fee is to be set.
					/// - `fields`: the fields that the registrar concerns themselves with.
					///
					///## Complexity
					/// - `O(R)`.
					///  - where `R` registrar-count (governance-bounded).
					set_fields {
						#[codec(compact)]
						index: ::core::primitive::u32,
						fields: runtime_types::pallet_identity::types::BitFlags<
							runtime_types::pallet_identity::types::IdentityField,
						>,
					},
					#[codec(index = 9)]
					///Provide a judgement for an account's identity.
					///
					///The dispatch origin for this call must be _Signed_ and the sender must be
					/// the account of the registrar whose index is `reg_index`.
					///
					/// - `reg_index`: the index of the registrar whose judgement is being made.
					/// - `target`: the account whose identity the judgement is upon. This must be
					///   an account
					///  with a registered identity.
					/// - `judgement`: the judgement of the registrar of index `reg_index` about
					///   `target`.
					/// - `identity`: The hash of the [`IdentityInfo`] for that the judgement is
					///   provided.
					///
					///Emits `JudgementGiven` if successful.
					///
					///## Complexity
					/// - `O(R + X)`.
					///  - where `R` registrar-count (governance-bounded).
					///  - where `X` additional-field-count (deposit-bounded and code-bounded).
					provide_judgement {
						#[codec(compact)]
						reg_index: ::core::primitive::u32,
						target: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						judgement: runtime_types::pallet_identity::types::Judgement<
							::core::primitive::u128,
						>,
						identity: ::subxt::utils::H256,
					},
					#[codec(index = 10)]
					///Remove an account's identity and sub-account information and slash the
					/// deposits.
					///
					///Payment: Reserved balances from `set_subs` and `set_identity` are slashed
					/// and handled by `Slash`. Verification request deposits are not returned;
					/// they should be cancelled manually using `cancel_request`.
					///
					///The dispatch origin for this call must match `T::ForceOrigin`.
					///
					/// - `target`: the account whose identity the judgement is upon. This must be
					///   an account
					///  with a registered identity.
					///
					///Emits `IdentityKilled` if successful.
					///
					///## Complexity
					/// - `O(R + S + X)`
					///  - where `R` registrar-count (governance-bounded).
					///  - where `S` subs-count (hard- and deposit-bounded).
					///  - where `X` additional-field-count (deposit-bounded and code-bounded).
					kill_identity {
						target: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 11)]
					///Add the given account to the sender's subs.
					///
					///Payment: Balance reserved by a previous `set_subs` call for one sub will be
					/// repatriated to the sender.
					///
					///The dispatch origin for this call must be _Signed_ and the sender must have
					/// a registered sub identity of `sub`.
					add_sub {
						sub: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						data: runtime_types::pallet_identity::types::Data,
					},
					#[codec(index = 12)]
					///Alter the associated name of the given sub-account.
					///
					///The dispatch origin for this call must be _Signed_ and the sender must have
					/// a registered sub identity of `sub`.
					rename_sub {
						sub: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						data: runtime_types::pallet_identity::types::Data,
					},
					#[codec(index = 13)]
					///Remove the given account from the sender's subs.
					///
					///Payment: Balance reserved by a previous `set_subs` call for one sub will be
					/// repatriated to the sender.
					///
					///The dispatch origin for this call must be _Signed_ and the sender must have
					/// a registered sub identity of `sub`.
					remove_sub {
						sub: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 14)]
					///Remove the sender as a sub-account.
					///
					///Payment: Balance reserved by a previous `set_subs` call for one sub will be
					/// repatriated to the sender (*not* the original depositor).
					///
					///The dispatch origin for this call must be _Signed_ and the sender must have
					/// a registered super-identity.
					///
					///NOTE: This should not normally be used, but is provided in the case that
					/// the non- controller of an account is maliciously registered as a
					/// sub-account.
					quit_sub,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Too many subs-accounts.
					TooManySubAccounts,
					#[codec(index = 1)]
					///Account isn't found.
					NotFound,
					#[codec(index = 2)]
					///Account isn't named.
					NotNamed,
					#[codec(index = 3)]
					///Empty index.
					EmptyIndex,
					#[codec(index = 4)]
					///Fee is changed.
					FeeChanged,
					#[codec(index = 5)]
					///No identity found.
					NoIdentity,
					#[codec(index = 6)]
					///Sticky judgement.
					StickyJudgement,
					#[codec(index = 7)]
					///Judgement given.
					JudgementGiven,
					#[codec(index = 8)]
					///Invalid judgement.
					InvalidJudgement,
					#[codec(index = 9)]
					///The index is invalid.
					InvalidIndex,
					#[codec(index = 10)]
					///The target is invalid.
					InvalidTarget,
					#[codec(index = 11)]
					///Too many additional fields.
					TooManyFields,
					#[codec(index = 12)]
					///Maximum amount of registrars reached. Cannot add any more.
					TooManyRegistrars,
					#[codec(index = 13)]
					///Account ID is already named.
					AlreadyClaimed,
					#[codec(index = 14)]
					///Sender is not a sub-account.
					NotSub,
					#[codec(index = 15)]
					///Sub-account isn't owned by sender.
					NotOwned,
					#[codec(index = 16)]
					///The provided judgement was for a different identity.
					JudgementForDifferentIdentity,
					#[codec(index = 17)]
					///Error that occurs when there is an issue paying for judgement.
					JudgementPaymentFailed,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A name was set or reset (which will remove all judgements).
					IdentitySet { who: ::subxt::utils::AccountId32 },
					#[codec(index = 1)]
					///A name was cleared, and the given balance returned.
					IdentityCleared {
						who: ::subxt::utils::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					///A name was removed and the given balance slashed.
					IdentityKilled {
						who: ::subxt::utils::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					///A judgement was asked from a registrar.
					JudgementRequested {
						who: ::subxt::utils::AccountId32,
						registrar_index: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					///A judgement request was retracted.
					JudgementUnrequested {
						who: ::subxt::utils::AccountId32,
						registrar_index: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					///A judgement was given by a registrar.
					JudgementGiven {
						target: ::subxt::utils::AccountId32,
						registrar_index: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					///A registrar was added.
					RegistrarAdded { registrar_index: ::core::primitive::u32 },
					#[codec(index = 7)]
					///A sub-identity was added to an identity and the deposit paid.
					SubIdentityAdded {
						sub: ::subxt::utils::AccountId32,
						main: ::subxt::utils::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					///A sub-identity was removed from an identity and the deposit freed.
					SubIdentityRemoved {
						sub: ::subxt::utils::AccountId32,
						main: ::subxt::utils::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					///A sub-identity was cleared, and the given deposit repatriated from the
					///main identity account to the sub-identity account.
					SubIdentityRevoked {
						sub: ::subxt::utils::AccountId32,
						main: ::subxt::utils::AccountId32,
						deposit: ::core::primitive::u128,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::CompactAs,
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct BitFlags<_0>(
					pub ::core::primitive::u64,
					#[codec(skip)] pub ::core::marker::PhantomData<_0>,
				);
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Data {
					#[codec(index = 0)]
					None,
					#[codec(index = 1)]
					Raw0([::core::primitive::u8; 0usize]),
					#[codec(index = 2)]
					Raw1([::core::primitive::u8; 1usize]),
					#[codec(index = 3)]
					Raw2([::core::primitive::u8; 2usize]),
					#[codec(index = 4)]
					Raw3([::core::primitive::u8; 3usize]),
					#[codec(index = 5)]
					Raw4([::core::primitive::u8; 4usize]),
					#[codec(index = 6)]
					Raw5([::core::primitive::u8; 5usize]),
					#[codec(index = 7)]
					Raw6([::core::primitive::u8; 6usize]),
					#[codec(index = 8)]
					Raw7([::core::primitive::u8; 7usize]),
					#[codec(index = 9)]
					Raw8([::core::primitive::u8; 8usize]),
					#[codec(index = 10)]
					Raw9([::core::primitive::u8; 9usize]),
					#[codec(index = 11)]
					Raw10([::core::primitive::u8; 10usize]),
					#[codec(index = 12)]
					Raw11([::core::primitive::u8; 11usize]),
					#[codec(index = 13)]
					Raw12([::core::primitive::u8; 12usize]),
					#[codec(index = 14)]
					Raw13([::core::primitive::u8; 13usize]),
					#[codec(index = 15)]
					Raw14([::core::primitive::u8; 14usize]),
					#[codec(index = 16)]
					Raw15([::core::primitive::u8; 15usize]),
					#[codec(index = 17)]
					Raw16([::core::primitive::u8; 16usize]),
					#[codec(index = 18)]
					Raw17([::core::primitive::u8; 17usize]),
					#[codec(index = 19)]
					Raw18([::core::primitive::u8; 18usize]),
					#[codec(index = 20)]
					Raw19([::core::primitive::u8; 19usize]),
					#[codec(index = 21)]
					Raw20([::core::primitive::u8; 20usize]),
					#[codec(index = 22)]
					Raw21([::core::primitive::u8; 21usize]),
					#[codec(index = 23)]
					Raw22([::core::primitive::u8; 22usize]),
					#[codec(index = 24)]
					Raw23([::core::primitive::u8; 23usize]),
					#[codec(index = 25)]
					Raw24([::core::primitive::u8; 24usize]),
					#[codec(index = 26)]
					Raw25([::core::primitive::u8; 25usize]),
					#[codec(index = 27)]
					Raw26([::core::primitive::u8; 26usize]),
					#[codec(index = 28)]
					Raw27([::core::primitive::u8; 27usize]),
					#[codec(index = 29)]
					Raw28([::core::primitive::u8; 28usize]),
					#[codec(index = 30)]
					Raw29([::core::primitive::u8; 29usize]),
					#[codec(index = 31)]
					Raw30([::core::primitive::u8; 30usize]),
					#[codec(index = 32)]
					Raw31([::core::primitive::u8; 31usize]),
					#[codec(index = 33)]
					Raw32([::core::primitive::u8; 32usize]),
					#[codec(index = 34)]
					BlakeTwo256([::core::primitive::u8; 32usize]),
					#[codec(index = 35)]
					Sha256([::core::primitive::u8; 32usize]),
					#[codec(index = 36)]
					Keccak256([::core::primitive::u8; 32usize]),
					#[codec(index = 37)]
					ShaThree256([::core::primitive::u8; 32usize]),
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum IdentityField {
					#[codec(index = 1)]
					Display,
					#[codec(index = 2)]
					Legal,
					#[codec(index = 4)]
					Web,
					#[codec(index = 8)]
					Riot,
					#[codec(index = 16)]
					Email,
					#[codec(index = 32)]
					PgpFingerprint,
					#[codec(index = 64)]
					Image,
					#[codec(index = 128)]
					Twitter,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct IdentityInfo {
					pub additional: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						runtime_types::pallet_identity::types::Data,
						runtime_types::pallet_identity::types::Data,
					)>,
					pub display: runtime_types::pallet_identity::types::Data,
					pub legal: runtime_types::pallet_identity::types::Data,
					pub web: runtime_types::pallet_identity::types::Data,
					pub riot: runtime_types::pallet_identity::types::Data,
					pub email: runtime_types::pallet_identity::types::Data,
					pub pgp_fingerprint: ::core::option::Option<[::core::primitive::u8; 20usize]>,
					pub image: runtime_types::pallet_identity::types::Data,
					pub twitter: runtime_types::pallet_identity::types::Data,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Judgement<_0> {
					#[codec(index = 0)]
					Unknown,
					#[codec(index = 1)]
					FeePaid(_0),
					#[codec(index = 2)]
					Reasonable,
					#[codec(index = 3)]
					KnownGood,
					#[codec(index = 4)]
					OutOfDate,
					#[codec(index = 5)]
					LowQuality,
					#[codec(index = 6)]
					Erroneous,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct RegistrarInfo<_0, _1> {
					pub account: _1,
					pub fee: _0,
					pub fields: runtime_types::pallet_identity::types::BitFlags<
						runtime_types::pallet_identity::types::IdentityField,
					>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Registration<_0> {
					pub judgements: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						::core::primitive::u32,
						runtime_types::pallet_identity::types::Judgement<_0>,
					)>,
					pub deposit: _0,
					pub info: runtime_types::pallet_identity::types::IdentityInfo,
				}
			}
		}
		pub mod pallet_im_online {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///## Complexity:
					/// - `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E
					///   is length of
					///  `heartbeat.network_state.external_address`
					///  - `O(K)`: decoding of length `K`
					///  - `O(E)`: decoding/encoding of length `E`
					heartbeat {
						heartbeat:
							runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
						signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Non existent public key.
					InvalidKey,
					#[codec(index = 1)]
					///Duplicated heartbeat.
					DuplicatedHeartbeat,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A new heartbeat was received from `AuthorityId`.
					HeartbeatReceived {
						authority_id: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
					},
					#[codec(index = 1)]
					///At the end of the session, no offence was committed.
					AllGood,
					#[codec(index = 2)]
					///At the end of the session, at least one validator was found to be offline.
					SomeOffline {
						offline: ::std::vec::Vec<(
							::subxt::utils::AccountId32,
							runtime_types::pallet_staking::Exposure<
								::subxt::utils::AccountId32,
								::core::primitive::u128,
							>,
						)>,
					},
				}
			}
			pub mod sr25519 {
				use super::runtime_types;
				pub mod app_sr25519 {
					use super::runtime_types;
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct Public(pub runtime_types::sp_core::sr25519::Public);
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct Signature(pub runtime_types::sp_core::sr25519::Signature);
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct BoundedOpaqueNetworkState {
				pub peer_id: runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
					::core::primitive::u8,
				>,
				pub external_addresses:
					runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
						runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
							::core::primitive::u8,
						>,
					>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Heartbeat<_0> {
				pub block_number: _0,
				pub network_state: runtime_types::sp_core::offchain::OpaqueNetworkState,
				pub session_index: _0,
				pub authority_index: _0,
				pub validators_len: _0,
			}
		}
		pub mod pallet_indices {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Assign an previously unassigned index.
					///
					///Payment: `Deposit` is reserved from the sender account.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					/// - `index`: the index to be claimed. This must not be in use.
					///
					///Emits `IndexAssigned` if successful.
					///
					///## Complexity
					/// - `O(1)`.
					claim { index: ::core::primitive::u32 },
					#[codec(index = 1)]
					///Assign an index already owned by the sender to another account. The balance
					/// reservation is effectively transferred to the new account.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					/// - `index`: the index to be re-assigned. This must be owned by the sender.
					/// - `new`: the new owner of the index. This function is a no-op if it is
					///   equal to sender.
					///
					///Emits `IndexAssigned` if successful.
					///
					///## Complexity
					/// - `O(1)`.
					transfer {
						new: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						index: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					///Free up an index owned by the sender.
					///
					///Payment: Any previous deposit placed for the index is unreserved in the
					/// sender account.
					///
					///The dispatch origin for this call must be _Signed_ and the sender must own
					/// the index.
					///
					/// - `index`: the index to be freed. This must be owned by the sender.
					///
					///Emits `IndexFreed` if successful.
					///
					///## Complexity
					/// - `O(1)`.
					free { index: ::core::primitive::u32 },
					#[codec(index = 3)]
					///Force an index to an account. This doesn't require a deposit. If the index
					/// is already held, then any deposit is reimbursed to its current owner.
					///
					///The dispatch origin for this call must be _Root_.
					///
					/// - `index`: the index to be (re-)assigned.
					/// - `new`: the new owner of the index. This function is a no-op if it is
					///   equal to sender.
					/// - `freeze`: if set to `true`, will freeze the index so it cannot be
					///   transferred.
					///
					///Emits `IndexAssigned` if successful.
					///
					///## Complexity
					/// - `O(1)`.
					force_transfer {
						new: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						index: ::core::primitive::u32,
						freeze: ::core::primitive::bool,
					},
					#[codec(index = 4)]
					///Freeze an index so it will always point to the sender account. This
					/// consumes the deposit.
					///
					///The dispatch origin for this call must be _Signed_ and the signing account
					/// must have a non-frozen account `index`.
					///
					/// - `index`: the index to be frozen in place.
					///
					///Emits `IndexFrozen` if successful.
					///
					///## Complexity
					/// - `O(1)`.
					freeze { index: ::core::primitive::u32 },
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///The index was not already assigned.
					NotAssigned,
					#[codec(index = 1)]
					///The index is assigned to another account.
					NotOwner,
					#[codec(index = 2)]
					///The index was not available.
					InUse,
					#[codec(index = 3)]
					///The source and destination accounts are identical.
					NotTransfer,
					#[codec(index = 4)]
					///The index is permanent and may not be freed/changed.
					Permanent,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A account index was assigned.
					IndexAssigned {
						who: ::subxt::utils::AccountId32,
						index: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					///A account index has been freed up (unassigned).
					IndexFreed { index: ::core::primitive::u32 },
					#[codec(index = 2)]
					///A account index has been frozen to its current account ID.
					IndexFrozen { index: ::core::primitive::u32, who: ::subxt::utils::AccountId32 },
				}
			}
		}
		pub mod pallet_lottery {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Buy a ticket to enter the lottery.
					///
					///This extrinsic acts as a passthrough function for `call`. In all
					///situations where `call` alone would succeed, this extrinsic should
					///succeed.
					///
					///If `call` is successful, then we will attempt to purchase a ticket,
					///which may fail silently. To detect success of a ticket purchase, you
					///should listen for the `TicketBought` event.
					///
					///This extrinsic must be called by a signed origin.
					buy_ticket { call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall> },
					#[codec(index = 1)]
					///Set calls in storage which can be used to purchase a lottery ticket.
					///
					///This function only matters if you use the `ValidateCall` implementation
					///provided by this pallet, which uses storage to determine the valid calls.
					///
					///This extrinsic must be called by the Manager origin.
					set_calls { calls: ::std::vec::Vec<runtime_types::babe_runtime::RuntimeCall> },
					#[codec(index = 2)]
					///Start a lottery using the provided configuration.
					///
					///This extrinsic must be called by the `ManagerOrigin`.
					///
					///Parameters:
					///
					/// * `price`: The cost of a single ticket.
					/// * `length`: How long the lottery should run for starting at the current
					///   block.
					/// * `delay`: How long after the lottery end we should wait before picking a
					///   winner.
					/// * `repeat`: If the lottery should repeat when completed.
					start_lottery {
						price: ::core::primitive::u128,
						length: ::core::primitive::u32,
						delay: ::core::primitive::u32,
						repeat: ::core::primitive::bool,
					},
					#[codec(index = 3)]
					///If a lottery is repeating, you can use this to stop the repeat.
					///The lottery will continue to run to completion.
					///
					///This extrinsic must be called by the `ManagerOrigin`.
					stop_repeat,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///A lottery has not been configured.
					NotConfigured,
					#[codec(index = 1)]
					///A lottery is already in progress.
					InProgress,
					#[codec(index = 2)]
					///A lottery has already ended.
					AlreadyEnded,
					#[codec(index = 3)]
					///The call is not valid for an open lottery.
					InvalidCall,
					#[codec(index = 4)]
					///You are already participating in the lottery with this call.
					AlreadyParticipating,
					#[codec(index = 5)]
					///Too many calls for a single lottery.
					TooManyCalls,
					#[codec(index = 6)]
					///Failed to encode calls
					EncodingFailed,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A lottery has been started!
					LotteryStarted,
					#[codec(index = 1)]
					///A new set of calls have been set!
					CallsUpdated,
					#[codec(index = 2)]
					///A winner has been chosen!
					Winner {
						winner: ::subxt::utils::AccountId32,
						lottery_balance: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					///A ticket has been bought!
					TicketBought {
						who: ::subxt::utils::AccountId32,
						call_index: (::core::primitive::u8, ::core::primitive::u8),
					},
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct LotteryConfig<_0, _1> {
				pub price: _1,
				pub start: _0,
				pub length: _0,
				pub delay: _0,
				pub repeat: ::core::primitive::bool,
			}
		}
		pub mod pallet_membership {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Add a member `who` to the set.
					///
					///May only be called from `T::AddOrigin`.
					add_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					///Remove a member `who` from the set.
					///
					///May only be called from `T::RemoveOrigin`.
					remove_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 2)]
					///Swap out one member `remove` for another `add`.
					///
					///May only be called from `T::SwapOrigin`.
					///
					///Prime membership is *not* passed from `remove` to `add`, if extant.
					swap_member {
						remove: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						add: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 3)]
					///Change the membership to a new set, disregarding the existing membership.
					/// Be nice and pass `members` pre-sorted.
					///
					///May only be called from `T::ResetOrigin`.
					reset_members { members: ::std::vec::Vec<::subxt::utils::AccountId32> },
					#[codec(index = 4)]
					///Swap out the sending member for some other key `new`.
					///
					///May only be called from `Signed` origin of a current member.
					///
					///Prime membership is passed from the origin account to `new`, if extant.
					change_key {
						new: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 5)]
					///Set the prime member. Must be a current member.
					///
					///May only be called from `T::PrimeOrigin`.
					set_prime {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 6)]
					///Remove the prime member if it exists.
					///
					///May only be called from `T::PrimeOrigin`.
					clear_prime,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Already a member.
					AlreadyMember,
					#[codec(index = 1)]
					///Not a member.
					NotMember,
					#[codec(index = 2)]
					///Too many members.
					TooManyMembers,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///The given member was added; see the transaction for who.
					MemberAdded,
					#[codec(index = 1)]
					///The given member was removed; see the transaction for who.
					MemberRemoved,
					#[codec(index = 2)]
					///Two members were swapped; see the transaction for who.
					MembersSwapped,
					#[codec(index = 3)]
					///The membership was reset; see the transaction for who the new set is.
					MembersReset,
					#[codec(index = 4)]
					///One of the members' keys changed.
					KeyChanged,
					#[codec(index = 5)]
					///Phantom member, never used.
					Dummy,
				}
			}
		}
		pub mod pallet_message_queue {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Remove a page which has no more messages remaining to be processed or is
					/// stale.
					reap_page {
						message_origin: ::core::primitive::u32,
						page_index: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					///Execute an overweight message.
					///
					///Temporary processing errors will be propagated whereas permanent errors are
					/// treated as success condition.
					///
					/// - `origin`: Must be `Signed`.
					/// - `message_origin`: The origin from which the message to be executed
					///   arrived.
					/// - `page`: The page in the queue in which the message to be executed is
					///   sitting.
					/// - `index`: The index into the queue of the message to be executed.
					/// - `weight_limit`: The maximum amount of weight allowed to be consumed in
					///   the execution
					///  of the message.
					///
					///Benchmark complexity considerations: O(index + weight_limit).
					execute_overweight {
						message_origin: ::core::primitive::u32,
						page: ::core::primitive::u32,
						index: ::core::primitive::u32,
						weight_limit: runtime_types::sp_weights::weight_v2::Weight,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Page is not reapable because it has items remaining to be processed and is
					/// not old enough.
					NotReapable,
					#[codec(index = 1)]
					///Page to be reaped does not exist.
					NoPage,
					#[codec(index = 2)]
					///The referenced message could not be found.
					NoMessage,
					#[codec(index = 3)]
					///The message was already processed and cannot be processed again.
					AlreadyProcessed,
					#[codec(index = 4)]
					///The message is queued for future execution.
					Queued,
					#[codec(index = 5)]
					///There is temporarily not enough weight to continue servicing messages.
					InsufficientWeight,
					#[codec(index = 6)]
					///This message is temporarily unprocessable.
					///
					///Such errors are expected, but not guaranteed, to resolve themselves
					/// eventually through retrying.
					TemporarilyUnprocessable,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///Message discarded due to an inability to decode the item. Usually caused by
					/// state corruption.
					Discarded { hash: ::subxt::utils::H256 },
					#[codec(index = 1)]
					///Message discarded due to an error in the `MessageProcessor` (usually a
					/// format error).
					ProcessingFailed {
						hash: ::subxt::utils::H256,
						origin: ::core::primitive::u32,
						error: runtime_types::frame_support::traits::messages::ProcessMessageError,
					},
					#[codec(index = 2)]
					///Message is processed.
					Processed {
						hash: ::subxt::utils::H256,
						origin: ::core::primitive::u32,
						weight_used: runtime_types::sp_weights::weight_v2::Weight,
						success: ::core::primitive::bool,
					},
					#[codec(index = 3)]
					///Message placed in overweight queue.
					OverweightEnqueued {
						hash: ::subxt::utils::H256,
						origin: ::core::primitive::u32,
						page_index: ::core::primitive::u32,
						message_index: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					///This page was reaped.
					PageReaped { origin: ::core::primitive::u32, index: ::core::primitive::u32 },
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct BookState<_0> {
				pub begin: _0,
				pub end: _0,
				pub count: _0,
				pub ready_neighbours:
					::core::option::Option<runtime_types::pallet_message_queue::Neighbours<_0>>,
				pub message_count: ::core::primitive::u64,
				pub size: ::core::primitive::u64,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Neighbours<_0> {
				pub prev: _0,
				pub next: _0,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Page<_0> {
				pub remaining: _0,
				pub remaining_size: _0,
				pub first_index: _0,
				pub first: _0,
				pub last: _0,
				pub heap: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
			}
		}
		pub mod pallet_multisig {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Immediately dispatch a multi-signature call using a single approval from
					/// the caller.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					/// - `other_signatories`: The accounts (other than the sender) who are part of
					///   the
					///multi-signature, but do not participate in the approval process.
					/// - `call`: The call to be executed.
					///
					///Result is equivalent to the dispatched result.
					///
					///## Complexity
					///O(Z + C) where Z is the length of the call and C its execution weight.
					as_multi_threshold_1 {
						other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
						call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
					},
					#[codec(index = 1)]
					///Register approval for a dispatch to be made from a deterministic composite
					/// account if approved by a total of `threshold - 1` of `other_signatories`.
					///
					///If there are enough, then dispatch the call.
					///
					///Payment: `DepositBase` will be reserved if this is the first approval, plus
					///`threshold` times `DepositFactor`. It is returned once this dispatch
					/// happens or is cancelled.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					/// - `threshold`: The total number of approvals for this dispatch before it is
					///   executed.
					/// - `other_signatories`: The accounts (other than the sender) who can approve
					///   this
					///dispatch. May not be empty.
					/// - `maybe_timepoint`: If this is the first approval, then this must be
					///   `None`. If it is
					///not the first approval, then it must be `Some`, with the timepoint (block
					/// number and transaction index) of the first approval transaction.
					/// - `call`: The call to be executed.
					///
					///NOTE: Unless this is the final approval, you will generally want to use
					///`approve_as_multi` instead, since it only requires a hash of the call.
					///
					///Result is equivalent to the dispatched result if `threshold` is exactly
					/// `1`. Otherwise on success, result is `Ok` and the result from the interior
					/// call, if it was executed, may be found in the deposited `MultisigExecuted`
					/// event.
					///
					///## Complexity
					/// - `O(S + Z + Call)`.
					/// - Up to one balance-reserve or unreserve operation.
					/// - One passthrough operation, one insert, both `O(S)` where `S` is the
					///   number of
					///  signatories. `S` is capped by `MaxSignatories`, with weight being
					/// proportional.
					/// - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
					/// - One encode & hash, both of complexity `O(S)`.
					/// - Up to one binary search and insert (`O(logS + S)`).
					/// - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
					/// - One event.
					/// - The weight of the `call`.
					/// - Storage: inserts one item, value size bounded by `MaxSignatories`, with a
					///   deposit
					///  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
					as_multi {
						threshold: ::core::primitive::u16,
						other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
						maybe_timepoint: ::core::option::Option<
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						>,
						call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
						max_weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 2)]
					///Register approval for a dispatch to be made from a deterministic composite
					/// account if approved by a total of `threshold - 1` of `other_signatories`.
					///
					///Payment: `DepositBase` will be reserved if this is the first approval, plus
					///`threshold` times `DepositFactor`. It is returned once this dispatch
					/// happens or is cancelled.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					/// - `threshold`: The total number of approvals for this dispatch before it is
					///   executed.
					/// - `other_signatories`: The accounts (other than the sender) who can approve
					///   this
					///dispatch. May not be empty.
					/// - `maybe_timepoint`: If this is the first approval, then this must be
					///   `None`. If it is
					///not the first approval, then it must be `Some`, with the timepoint (block
					/// number and transaction index) of the first approval transaction.
					/// - `call_hash`: The hash of the call to be executed.
					///
					///NOTE: If this is the final approval, you will want to use `as_multi`
					/// instead.
					///
					///## Complexity
					/// - `O(S)`.
					/// - Up to one balance-reserve or unreserve operation.
					/// - One passthrough operation, one insert, both `O(S)` where `S` is the
					///   number of
					///  signatories. `S` is capped by `MaxSignatories`, with weight being
					/// proportional.
					/// - One encode & hash, both of complexity `O(S)`.
					/// - Up to one binary search and insert (`O(logS + S)`).
					/// - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
					/// - One event.
					/// - Storage: inserts one item, value size bounded by `MaxSignatories`, with a
					///   deposit
					///  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
					approve_as_multi {
						threshold: ::core::primitive::u16,
						other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
						maybe_timepoint: ::core::option::Option<
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						>,
						call_hash: [::core::primitive::u8; 32usize],
						max_weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 3)]
					///Cancel a pre-existing, on-going multisig transaction. Any deposit reserved
					/// previously for this operation will be unreserved on success.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					/// - `threshold`: The total number of approvals for this dispatch before it is
					///   executed.
					/// - `other_signatories`: The accounts (other than the sender) who can approve
					///   this
					///dispatch. May not be empty.
					/// - `timepoint`: The timepoint (block number and transaction index) of the
					///   first approval
					///transaction for this dispatch.
					/// - `call_hash`: The hash of the call to be executed.
					///
					///## Complexity
					/// - `O(S)`.
					/// - Up to one balance-reserve or unreserve operation.
					/// - One passthrough operation, one insert, both `O(S)` where `S` is the
					///   number of
					///  signatories. `S` is capped by `MaxSignatories`, with weight being
					/// proportional.
					/// - One encode & hash, both of complexity `O(S)`.
					/// - One event.
					/// - I/O: 1 read `O(S)`, one remove.
					/// - Storage: removes one item.
					cancel_as_multi {
						threshold: ::core::primitive::u16,
						other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						call_hash: [::core::primitive::u8; 32usize],
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Threshold must be 2 or greater.
					MinimumThreshold,
					#[codec(index = 1)]
					///Call is already approved by this signatory.
					AlreadyApproved,
					#[codec(index = 2)]
					///Call doesn't need any (more) approvals.
					NoApprovalsNeeded,
					#[codec(index = 3)]
					///There are too few signatories in the list.
					TooFewSignatories,
					#[codec(index = 4)]
					///There are too many signatories in the list.
					TooManySignatories,
					#[codec(index = 5)]
					///The signatories were provided out of order; they should be ordered.
					SignatoriesOutOfOrder,
					#[codec(index = 6)]
					///The sender was contained in the other signatories; it shouldn't be.
					SenderInSignatories,
					#[codec(index = 7)]
					///Multisig operation not found when attempting to cancel.
					NotFound,
					#[codec(index = 8)]
					///Only the account that originally created the multisig is able to cancel it.
					NotOwner,
					#[codec(index = 9)]
					///No timepoint was given, yet the multisig operation is already underway.
					NoTimepoint,
					#[codec(index = 10)]
					///A different timepoint was given to the multisig operation that is underway.
					WrongTimepoint,
					#[codec(index = 11)]
					///A timepoint was given, yet no multisig operation is underway.
					UnexpectedTimepoint,
					#[codec(index = 12)]
					///The maximum weight information provided was too low.
					MaxWeightTooLow,
					#[codec(index = 13)]
					///The data to be stored is already stored.
					AlreadyStored,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A new multisig operation has begun.
					NewMultisig {
						approving: ::subxt::utils::AccountId32,
						multisig: ::subxt::utils::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 1)]
					///A multisig operation has been approved by someone.
					MultisigApproval {
						approving: ::subxt::utils::AccountId32,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::subxt::utils::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 2)]
					///A multisig operation has been executed.
					MultisigExecuted {
						approving: ::subxt::utils::AccountId32,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::subxt::utils::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 3)]
					///A multisig operation has been cancelled.
					MultisigCancelled {
						cancelling: ::subxt::utils::AccountId32,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::subxt::utils::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
					},
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Multisig<_0, _1, _2> {
				pub when: runtime_types::pallet_multisig::Timepoint<_0>,
				pub deposit: _1,
				pub depositor: _2,
				pub approvals: runtime_types::bounded_collections::bounded_vec::BoundedVec<_2>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Timepoint<_0> {
				pub height: _0,
				pub index: _0,
			}
		}
		pub mod pallet_nfts {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Issue a new collection of non-fungible items from a public origin.
					///
					///This new collection has no items initially and its owner is the origin.
					///
					///The origin must be Signed and the sender must have sufficient funds free.
					///
					///`ItemDeposit` funds of sender are reserved.
					///
					///Parameters:
					/// - `admin`: The admin of this collection. The admin is the initial address
					///   of each
					///member of the collection's admin team.
					///
					///Emits `Created` event when successful.
					///
					///Weight: `O(1)`
					create {
						admin: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						config: runtime_types::pallet_nfts::types::CollectionConfig<
							::core::primitive::u128,
							::core::primitive::u32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					///Issue a new collection of non-fungible items from a privileged origin.
					///
					///This new collection has no items initially.
					///
					///The origin must conform to `ForceOrigin`.
					///
					///Unlike `create`, no funds are reserved.
					///
					/// - `owner`: The owner of this collection of items. The owner has full
					///   superuser
					///  permissions over this item, but may later change and configure the
					/// permissions using  `transfer_ownership` and `set_team`.
					///
					///Emits `ForceCreated` event when successful.
					///
					///Weight: `O(1)`
					force_create {
						owner: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						config: runtime_types::pallet_nfts::types::CollectionConfig<
							::core::primitive::u128,
							::core::primitive::u32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 2)]
					///Destroy a collection of fungible items.
					///
					///The origin must conform to `ForceOrigin` or must be `Signed` and the sender
					/// must be the owner of the `collection`.
					///
					///NOTE: The collection must have 0 items to be destroyed.
					///
					/// - `collection`: The identifier of the collection to be destroyed.
					/// - `witness`: Information on the items minted in the collection. This must
					///   be
					///correct.
					///
					///Emits `Destroyed` event when successful.
					///
					///Weight: `O(m + c + a)` where:
					/// - `m = witness.item_metadatas`
					/// - `c = witness.item_configs`
					/// - `a = witness.attributes`
					destroy {
						collection: ::core::primitive::u32,
						witness: runtime_types::pallet_nfts::types::DestroyWitness,
					},
					#[codec(index = 3)]
					///Mint an item of a particular collection.
					///
					///The origin must be Signed and the sender must comply with the
					/// `mint_settings` rules.
					///
					/// - `collection`: The collection of the item to be minted.
					/// - `item`: An identifier of the new item.
					/// - `mint_to`: Account into which the item will be minted.
					/// - `witness_data`: When the mint type is `HolderOf(collection_id)`, then the
					///   owned
					///  item_id from that collection needs to be provided within the witness data
					/// object.
					///
					///Note: the deposit will be taken from the `origin` and not the `owner` of
					/// the `item`.
					///
					///Emits `Issued` event when successful.
					///
					///Weight: `O(1)`
					mint {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						mint_to: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						witness_data: ::core::option::Option<
							runtime_types::pallet_nfts::types::MintWitness<::core::primitive::u32>,
						>,
					},
					#[codec(index = 4)]
					///Mint an item of a particular collection from a privileged origin.
					///
					///The origin must conform to `ForceOrigin` or must be `Signed` and the sender
					/// must be the Issuer of the `collection`.
					///
					/// - `collection`: The collection of the item to be minted.
					/// - `item`: An identifier of the new item.
					/// - `mint_to`: Account into which the item will be minted.
					/// - `item_config`: A config of the new item.
					///
					///Emits `Issued` event when successful.
					///
					///Weight: `O(1)`
					force_mint {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						mint_to: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						item_config: runtime_types::pallet_nfts::types::ItemConfig,
					},
					#[codec(index = 5)]
					///Destroy a single item.
					///
					///The origin must conform to `ForceOrigin` or must be Signed and the signing
					/// account must be the owner of the `item`.
					///
					/// - `collection`: The collection of the item to be burned.
					/// - `item`: The item to be burned.
					///
					///Emits `Burned`.
					///
					///Weight: `O(1)`
					burn { collection: ::core::primitive::u32, item: ::core::primitive::u32 },
					#[codec(index = 6)]
					///Move an item from the sender account to another.
					///
					///Origin must be Signed and the signing account must be either:
					/// - the Owner of the `item`;
					/// - the approved delegate for the `item` (in this case, the approval is
					///   reset).
					///
					///Arguments:
					/// - `collection`: The collection of the item to be transferred.
					/// - `item`: The item to be transferred.
					/// - `dest`: The account to receive ownership of the item.
					///
					///Emits `Transferred`.
					///
					///Weight: `O(1)`
					transfer {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						dest: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 7)]
					///Re-evaluate the deposits on some items.
					///
					///Origin must be Signed and the sender should be the Owner of the
					/// `collection`.
					///
					/// - `collection`: The collection of the items to be reevaluated.
					/// - `items`: The items of the collection whose deposits will be reevaluated.
					///
					///NOTE: This exists as a best-effort function. Any items which are unknown or
					///in the case that the owner account does not have reservable funds to pay
					/// for a deposit increase are ignored. Generally the owner isn't going to call
					/// this on items whose existing deposit is less than the refreshed deposit as
					/// it would only cost them, so it's of little consequence.
					///
					///It will still return an error in the case that the collection is unknown or
					/// the signer is not permitted to call it.
					///
					///Weight: `O(items.len())`
					redeposit {
						collection: ::core::primitive::u32,
						items: ::std::vec::Vec<::core::primitive::u32>,
					},
					#[codec(index = 8)]
					///Disallow further unprivileged transfer of an item.
					///
					///Origin must be Signed and the sender should be the Freezer of the
					/// `collection`.
					///
					/// - `collection`: The collection of the item to be changed.
					/// - `item`: The item to become non-transferable.
					///
					///Emits `ItemTransferLocked`.
					///
					///Weight: `O(1)`
					lock_item_transfer {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					///Re-allow unprivileged transfer of an item.
					///
					///Origin must be Signed and the sender should be the Freezer of the
					/// `collection`.
					///
					/// - `collection`: The collection of the item to be changed.
					/// - `item`: The item to become transferable.
					///
					///Emits `ItemTransferUnlocked`.
					///
					///Weight: `O(1)`
					unlock_item_transfer {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					///Disallows specified settings for the whole collection.
					///
					///Origin must be Signed and the sender should be the Owner of the
					/// `collection`.
					///
					/// - `collection`: The collection to be locked.
					/// - `lock_settings`: The settings to be locked.
					///
					///Note: it's possible to only lock(set) the setting, but not to unset it.
					///
					///Emits `CollectionLocked`.
					///
					///Weight: `O(1)`
					lock_collection {
						collection: ::core::primitive::u32,
						lock_settings: runtime_types::pallet_nfts::types::BitFlags<
							runtime_types::pallet_nfts::types::CollectionSetting,
						>,
					},
					#[codec(index = 11)]
					///Change the Owner of a collection.
					///
					///Origin must be Signed and the sender should be the Owner of the
					/// `collection`.
					///
					/// - `collection`: The collection whose owner should be changed.
					/// - `owner`: The new Owner of this collection. They must have called
					///  `set_accept_ownership` with `collection` in order for this operation to
					/// succeed.
					///
					///Emits `OwnerChanged`.
					///
					///Weight: `O(1)`
					transfer_ownership {
						collection: ::core::primitive::u32,
						owner: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 12)]
					///Change the Issuer, Admin and Freezer of a collection.
					///
					///Origin must be either `ForceOrigin` or Signed and the sender should be the
					/// Owner of the `collection`.
					///
					///Note: by setting the role to `None` only the `ForceOrigin` will be able to
					/// change it after to `Some(account)`.
					///
					/// - `collection`: The collection whose team should be changed.
					/// - `issuer`: The new Issuer of this collection.
					/// - `admin`: The new Admin of this collection.
					/// - `freezer`: The new Freezer of this collection.
					///
					///Emits `TeamChanged`.
					///
					///Weight: `O(1)`
					set_team {
						collection: ::core::primitive::u32,
						issuer: ::core::option::Option<
							::subxt::utils::MultiAddress<
								::subxt::utils::AccountId32,
								::core::primitive::u32,
							>,
						>,
						admin: ::core::option::Option<
							::subxt::utils::MultiAddress<
								::subxt::utils::AccountId32,
								::core::primitive::u32,
							>,
						>,
						freezer: ::core::option::Option<
							::subxt::utils::MultiAddress<
								::subxt::utils::AccountId32,
								::core::primitive::u32,
							>,
						>,
					},
					#[codec(index = 13)]
					///Change the Owner of a collection.
					///
					///Origin must be `ForceOrigin`.
					///
					/// - `collection`: The identifier of the collection.
					/// - `owner`: The new Owner of this collection.
					///
					///Emits `OwnerChanged`.
					///
					///Weight: `O(1)`
					force_collection_owner {
						collection: ::core::primitive::u32,
						owner: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 14)]
					///Change the config of a collection.
					///
					///Origin must be `ForceOrigin`.
					///
					/// - `collection`: The identifier of the collection.
					/// - `config`: The new config of this collection.
					///
					///Emits `CollectionConfigChanged`.
					///
					///Weight: `O(1)`
					force_collection_config {
						collection: ::core::primitive::u32,
						config: runtime_types::pallet_nfts::types::CollectionConfig<
							::core::primitive::u128,
							::core::primitive::u32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 15)]
					///Approve an item to be transferred by a delegated third-party account.
					///
					///Origin must be either `ForceOrigin` or Signed and the sender should be the
					/// Owner of the `item`.
					///
					/// - `collection`: The collection of the item to be approved for delegated
					///   transfer.
					/// - `item`: The item to be approved for delegated transfer.
					/// - `delegate`: The account to delegate permission to transfer the item.
					/// - `maybe_deadline`: Optional deadline for the approval. Specified by
					///   providing the
					///	number of blocks after which the approval will expire
					///
					///Emits `TransferApproved` on success.
					///
					///Weight: `O(1)`
					approve_transfer {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						delegate: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						maybe_deadline: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 16)]
					///Cancel one of the transfer approvals for a specific item.
					///
					///Origin must be either:
					/// - the `Force` origin;
					/// - `Signed` with the signer being the Owner of the `item`;
					///
					///Arguments:
					/// - `collection`: The collection of the item of whose approval will be
					///   cancelled.
					/// - `item`: The item of the collection of whose approval will be cancelled.
					/// - `delegate`: The account that is going to loose their approval.
					///
					///Emits `ApprovalCancelled` on success.
					///
					///Weight: `O(1)`
					cancel_approval {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						delegate: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 17)]
					///Cancel all the approvals of a specific item.
					///
					///Origin must be either:
					/// - the `Force` origin;
					/// - `Signed` with the signer being the Owner of the `item`;
					///
					///Arguments:
					/// - `collection`: The collection of the item of whose approvals will be
					///   cleared.
					/// - `item`: The item of the collection of whose approvals will be cleared.
					///
					///Emits `AllApprovalsCancelled` on success.
					///
					///Weight: `O(1)`
					clear_all_transfer_approvals {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
					},
					#[codec(index = 18)]
					///Disallows changing the metadata or attributes of the item.
					///
					///Origin must be either `ForceOrigin` or Signed and the sender should be the
					/// Admin of the `collection`.
					///
					/// - `collection`: The collection if the `item`.
					/// - `item`: An item to be locked.
					/// - `lock_metadata`: Specifies whether the metadata should be locked.
					/// - `lock_attributes`: Specifies whether the attributes in the
					///   `CollectionOwner` namespace
					///  should be locked.
					///
					///Note: `lock_attributes` affects the attributes in the `CollectionOwner`
					/// namespace only. When the metadata or attributes are locked, it won't be
					/// possible the unlock them.
					///
					///Emits `ItemPropertiesLocked`.
					///
					///Weight: `O(1)`
					lock_item_properties {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						lock_metadata: ::core::primitive::bool,
						lock_attributes: ::core::primitive::bool,
					},
					#[codec(index = 19)]
					///Set an attribute for a collection or item.
					///
					///Origin must be Signed and must conform to the namespace ruleset:
					/// - `CollectionOwner` namespace could be modified by the `collection` Admin
					///   only;
					/// - `ItemOwner` namespace could be modified by the `maybe_item` owner only.
					///   `maybe_item`
					///  should be set in that case;
					/// - `Account(AccountId)` namespace could be modified only when the `origin`
					///   was given a
					///  permission to do so;
					///
					///The funds of `origin` are reserved according to the formula:
					///`AttributeDepositBase + DepositPerByte * (key.len + value.len)` taking into
					///account any already reserved funds.
					///
					/// - `collection`: The identifier of the collection whose item's metadata to
					///   set.
					/// - `maybe_item`: The identifier of the item whose metadata to set.
					/// - `namespace`: Attribute's namespace.
					/// - `key`: The key of the attribute.
					/// - `value`: The value to which to set the attribute.
					///
					///Emits `AttributeSet`.
					///
					///Weight: `O(1)`
					set_attribute {
						collection: ::core::primitive::u32,
						maybe_item: ::core::option::Option<::core::primitive::u32>,
						namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
							::subxt::utils::AccountId32,
						>,
						key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 20)]
					///Force-set an attribute for a collection or item.
					///
					///Origin must be `ForceOrigin`.
					///
					///If the attribute already exists and it was set by another account, the
					/// deposit will be returned to the previous owner.
					///
					/// - `set_as`: An optional owner of the attribute.
					/// - `collection`: The identifier of the collection whose item's metadata to
					///   set.
					/// - `maybe_item`: The identifier of the item whose metadata to set.
					/// - `namespace`: Attribute's namespace.
					/// - `key`: The key of the attribute.
					/// - `value`: The value to which to set the attribute.
					///
					///Emits `AttributeSet`.
					///
					///Weight: `O(1)`
					force_set_attribute {
						set_as: ::core::option::Option<::subxt::utils::AccountId32>,
						collection: ::core::primitive::u32,
						maybe_item: ::core::option::Option<::core::primitive::u32>,
						namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
							::subxt::utils::AccountId32,
						>,
						key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 21)]
					///Clear an attribute for a collection or item.
					///
					///Origin must be either `ForceOrigin` or Signed and the sender should be the
					/// Owner of the attribute.
					///
					///Any deposit is freed for the collection's owner.
					///
					/// - `collection`: The identifier of the collection whose item's metadata to
					///   clear.
					/// - `maybe_item`: The identifier of the item whose metadata to clear.
					/// - `namespace`: Attribute's namespace.
					/// - `key`: The key of the attribute.
					///
					///Emits `AttributeCleared`.
					///
					///Weight: `O(1)`
					clear_attribute {
						collection: ::core::primitive::u32,
						maybe_item: ::core::option::Option<::core::primitive::u32>,
						namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
							::subxt::utils::AccountId32,
						>,
						key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 22)]
					///Approve item's attributes to be changed by a delegated third-party account.
					///
					///Origin must be Signed and must be an owner of the `item`.
					///
					/// - `collection`: A collection of the item.
					/// - `item`: The item that holds attributes.
					/// - `delegate`: The account to delegate permission to change attributes of
					///   the item.
					///
					///Emits `ItemAttributesApprovalAdded` on success.
					approve_item_attributes {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						delegate: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 23)]
					///Cancel the previously provided approval to change item's attributes.
					///All the previously set attributes by the `delegate` will be removed.
					///
					///Origin must be Signed and must be an owner of the `item`.
					///
					/// - `collection`: Collection that the item is contained within.
					/// - `item`: The item that holds attributes.
					/// - `delegate`: The previously approved account to remove.
					///
					///Emits `ItemAttributesApprovalRemoved` on success.
					cancel_item_attributes_approval {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						delegate: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						witness: runtime_types::pallet_nfts::types::CancelAttributesApprovalWitness,
					},
					#[codec(index = 24)]
					///Set the metadata for an item.
					///
					///Origin must be either `ForceOrigin` or Signed and the sender should be the
					/// Admin of the `collection`.
					///
					///If the origin is Signed, then funds of signer are reserved according to the
					/// formula: `MetadataDepositBase + DepositPerByte * data.len` taking into
					///account any already reserved funds.
					///
					/// - `collection`: The identifier of the collection whose item's metadata to
					///   set.
					/// - `item`: The identifier of the item whose metadata to set.
					/// - `data`: The general information of this item. Limited in length by
					///   `StringLimit`.
					///
					///Emits `ItemMetadataSet`.
					///
					///Weight: `O(1)`
					set_metadata {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 25)]
					///Clear the metadata for an item.
					///
					///Origin must be either `ForceOrigin` or Signed and the sender should be the
					/// Admin of the `collection`.
					///
					///Any deposit is freed for the collection's owner.
					///
					/// - `collection`: The identifier of the collection whose item's metadata to
					///   clear.
					/// - `item`: The identifier of the item whose metadata to clear.
					///
					///Emits `ItemMetadataCleared`.
					///
					///Weight: `O(1)`
					clear_metadata {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
					},
					#[codec(index = 26)]
					///Set the metadata for a collection.
					///
					///Origin must be either `ForceOrigin` or `Signed` and the sender should be
					/// the Admin of the `collection`.
					///
					///If the origin is `Signed`, then funds of signer are reserved according to
					/// the formula: `MetadataDepositBase + DepositPerByte * data.len` taking into
					///account any already reserved funds.
					///
					/// - `collection`: The identifier of the item whose metadata to update.
					/// - `data`: The general information of this item. Limited in length by
					///   `StringLimit`.
					///
					///Emits `CollectionMetadataSet`.
					///
					///Weight: `O(1)`
					set_collection_metadata {
						collection: ::core::primitive::u32,
						data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 27)]
					///Clear the metadata for a collection.
					///
					///Origin must be either `ForceOrigin` or `Signed` and the sender should be
					/// the Admin of the `collection`.
					///
					///Any deposit is freed for the collection's owner.
					///
					/// - `collection`: The identifier of the collection whose metadata to clear.
					///
					///Emits `CollectionMetadataCleared`.
					///
					///Weight: `O(1)`
					clear_collection_metadata { collection: ::core::primitive::u32 },
					#[codec(index = 28)]
					///Set (or reset) the acceptance of ownership for a particular account.
					///
					///Origin must be `Signed` and if `maybe_collection` is `Some`, then the
					/// signer must have a provider reference.
					///
					/// - `maybe_collection`: The identifier of the collection whose ownership the
					///   signer is
					///  willing to accept, or if `None`, an indication that the signer is willing
					/// to accept no  ownership transferal.
					///
					///Emits `OwnershipAcceptanceChanged`.
					set_accept_ownership {
						maybe_collection: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 29)]
					///Set the maximum number of items a collection could have.
					///
					///Origin must be either `ForceOrigin` or `Signed` and the sender should be
					/// the Owner of the `collection`.
					///
					/// - `collection`: The identifier of the collection to change.
					/// - `max_supply`: The maximum number of items a collection could have.
					///
					///Emits `CollectionMaxSupplySet` event when successful.
					set_collection_max_supply {
						collection: ::core::primitive::u32,
						max_supply: ::core::primitive::u32,
					},
					#[codec(index = 30)]
					///Update mint settings.
					///
					///Origin must be either `ForceOrigin` or `Signed` and the sender should be
					/// the Issuer of the `collection`.
					///
					/// - `collection`: The identifier of the collection to change.
					/// - `mint_settings`: The new mint settings.
					///
					///Emits `CollectionMintSettingsUpdated` event when successful.
					update_mint_settings {
						collection: ::core::primitive::u32,
						mint_settings: runtime_types::pallet_nfts::types::MintSettings<
							::core::primitive::u128,
							::core::primitive::u32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 31)]
					///Set (or reset) the price for an item.
					///
					///Origin must be Signed and must be the owner of the `item`.
					///
					/// - `collection`: The collection of the item.
					/// - `item`: The item to set the price for.
					/// - `price`: The price for the item. Pass `None`, to reset the price.
					/// - `buyer`: Restricts the buy operation to a specific account.
					///
					///Emits `ItemPriceSet` on success if the price is not `None`.
					///Emits `ItemPriceRemoved` on success if the price is `None`.
					set_price {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						price: ::core::option::Option<::core::primitive::u128>,
						whitelisted_buyer: ::core::option::Option<
							::subxt::utils::MultiAddress<
								::subxt::utils::AccountId32,
								::core::primitive::u32,
							>,
						>,
					},
					#[codec(index = 32)]
					///Allows to buy an item if it's up for sale.
					///
					///Origin must be Signed and must not be the owner of the `item`.
					///
					/// - `collection`: The collection of the item.
					/// - `item`: The item the sender wants to buy.
					/// - `bid_price`: The price the sender is willing to pay.
					///
					///Emits `ItemBought` on success.
					buy_item {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						bid_price: ::core::primitive::u128,
					},
					#[codec(index = 33)]
					///Allows to pay the tips.
					///
					///Origin must be Signed.
					///
					/// - `tips`: Tips array.
					///
					///Emits `TipSent` on every tip transfer.
					pay_tips {
						tips: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::pallet_nfts::types::ItemTip<
								::core::primitive::u32,
								::core::primitive::u32,
								::subxt::utils::AccountId32,
								::core::primitive::u128,
							>,
						>,
					},
					#[codec(index = 34)]
					///Register a new atomic swap, declaring an intention to send an `item` in
					/// exchange for `desired_item` from origin to target on the current
					/// blockchain. The target can execute the swap during the specified `duration`
					/// of blocks (if set). Additionally, the price could be set for the desired
					/// `item`.
					///
					///Origin must be Signed and must be an owner of the `item`.
					///
					/// - `collection`: The collection of the item.
					/// - `item`: The item an owner wants to give.
					/// - `desired_collection`: The collection of the desired item.
					/// - `desired_item`: The desired item an owner wants to receive.
					/// - `maybe_price`: The price an owner is willing to pay or receive for the
					///   desired `item`.
					/// - `duration`: A deadline for the swap. Specified by providing the number of
					///   blocks
					///	after which the swap will expire.
					///
					///Emits `SwapCreated` on success.
					create_swap {
						offered_collection: ::core::primitive::u32,
						offered_item: ::core::primitive::u32,
						desired_collection: ::core::primitive::u32,
						maybe_desired_item: ::core::option::Option<::core::primitive::u32>,
						maybe_price: ::core::option::Option<
							runtime_types::pallet_nfts::types::PriceWithDirection<
								::core::primitive::u128,
							>,
						>,
						duration: ::core::primitive::u32,
					},
					#[codec(index = 35)]
					///Cancel an atomic swap.
					///
					///Origin must be Signed.
					///Origin must be an owner of the `item` if the deadline hasn't expired.
					///
					/// - `collection`: The collection of the item.
					/// - `item`: The item an owner wants to give.
					///
					///Emits `SwapCancelled` on success.
					cancel_swap {
						offered_collection: ::core::primitive::u32,
						offered_item: ::core::primitive::u32,
					},
					#[codec(index = 36)]
					///Claim an atomic swap.
					///This method executes a pending swap, that was created by a counterpart
					/// before.
					///
					///Origin must be Signed and must be an owner of the `item`.
					///
					/// - `send_collection`: The collection of the item to be sent.
					/// - `send_item`: The item to be sent.
					/// - `receive_collection`: The collection of the item to be received.
					/// - `receive_item`: The item to be received.
					/// - `witness_price`: A price that was previously agreed on.
					///
					///Emits `SwapClaimed` on success.
					claim_swap {
						send_collection: ::core::primitive::u32,
						send_item: ::core::primitive::u32,
						receive_collection: ::core::primitive::u32,
						receive_item: ::core::primitive::u32,
						witness_price: ::core::option::Option<
							runtime_types::pallet_nfts::types::PriceWithDirection<
								::core::primitive::u128,
							>,
						>,
					},
					#[codec(index = 37)]
					///Mint an item by providing the pre-signed approval.
					///
					///Origin must be Signed.
					///
					/// - `mint_data`: The pre-signed approval that consists of the information
					///   about the item,
					///  its metadata, attributes, who can mint it (`None` for anyone) and until
					/// what block  number.
					/// - `signature`: The signature of the `data` object.
					/// - `signer`: The `data` object's signer. Should be an Issuer of the
					///   collection.
					///
					///Emits `Issued` on success.
					///Emits `AttributeSet` if the attributes were provided.
					///Emits `ItemMetadataSet` if the metadata was not empty.
					mint_pre_signed {
						mint_data: runtime_types::pallet_nfts::types::PreSignedMint<
							::core::primitive::u32,
							::core::primitive::u32,
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						signature: runtime_types::sp_runtime::MultiSignature,
						signer: ::subxt::utils::AccountId32,
					},
					#[codec(index = 38)]
					///Set attributes for an item by providing the pre-signed approval.
					///
					///Origin must be Signed and must be an owner of the `data.item`.
					///
					/// - `data`: The pre-signed approval that consists of the information about
					///   the item,
					///  attributes to update and until what block number.
					/// - `signature`: The signature of the `data` object.
					/// - `signer`: The `data` object's signer. Should be an Admin of the
					///   collection for the
					///  `CollectionOwner` namespace.
					///
					///Emits `AttributeSet` for each provided attribute.
					///Emits `ItemAttributesApprovalAdded` if the approval wasn't set before.
					///Emits `PreSignedAttributesSet` on success.
					set_attributes_pre_signed {
						data: runtime_types::pallet_nfts::types::PreSignedAttributes<
							::core::primitive::u32,
							::core::primitive::u32,
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						signature: runtime_types::sp_runtime::MultiSignature,
						signer: ::subxt::utils::AccountId32,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///The signing account has no permission to do the operation.
					NoPermission,
					#[codec(index = 1)]
					///The given item ID is unknown.
					UnknownCollection,
					#[codec(index = 2)]
					///The item ID has already been used for an item.
					AlreadyExists,
					#[codec(index = 3)]
					///The approval had a deadline that expired, so the approval isn't valid
					/// anymore.
					ApprovalExpired,
					#[codec(index = 4)]
					///The owner turned out to be different to what was expected.
					WrongOwner,
					#[codec(index = 5)]
					///The witness data given does not match the current state of the chain.
					BadWitness,
					#[codec(index = 6)]
					///Collection ID is already taken.
					CollectionIdInUse,
					#[codec(index = 7)]
					///Items within that collection are non-transferable.
					ItemsNonTransferable,
					#[codec(index = 8)]
					///The provided account is not a delegate.
					NotDelegate,
					#[codec(index = 9)]
					///The delegate turned out to be different to what was expected.
					WrongDelegate,
					#[codec(index = 10)]
					///No approval exists that would allow the transfer.
					Unapproved,
					#[codec(index = 11)]
					///The named owner has not signed ownership acceptance of the collection.
					Unaccepted,
					#[codec(index = 12)]
					///The item is locked (non-transferable).
					ItemLocked,
					#[codec(index = 13)]
					///Item's attributes are locked.
					LockedItemAttributes,
					#[codec(index = 14)]
					///Collection's attributes are locked.
					LockedCollectionAttributes,
					#[codec(index = 15)]
					///Item's metadata is locked.
					LockedItemMetadata,
					#[codec(index = 16)]
					///Collection's metadata is locked.
					LockedCollectionMetadata,
					#[codec(index = 17)]
					///All items have been minted.
					MaxSupplyReached,
					#[codec(index = 18)]
					///The max supply is locked and can't be changed.
					MaxSupplyLocked,
					#[codec(index = 19)]
					///The provided max supply is less than the number of items a collection
					/// already has.
					MaxSupplyTooSmall,
					#[codec(index = 20)]
					///The given item ID is unknown.
					UnknownItem,
					#[codec(index = 21)]
					///Swap doesn't exist.
					UnknownSwap,
					#[codec(index = 22)]
					///The given item has no metadata set.
					MetadataNotFound,
					#[codec(index = 23)]
					///The provided attribute can't be found.
					AttributeNotFound,
					#[codec(index = 24)]
					///Item is not for sale.
					NotForSale,
					#[codec(index = 25)]
					///The provided bid is too low.
					BidTooLow,
					#[codec(index = 26)]
					///The item has reached its approval limit.
					ReachedApprovalLimit,
					#[codec(index = 27)]
					///The deadline has already expired.
					DeadlineExpired,
					#[codec(index = 28)]
					///The duration provided should be less than or equal to
					/// `MaxDeadlineDuration`.
					WrongDuration,
					#[codec(index = 29)]
					///The method is disabled by system settings.
					MethodDisabled,
					#[codec(index = 30)]
					///The provided setting can't be set.
					WrongSetting,
					#[codec(index = 31)]
					///Item's config already exists and should be equal to the provided one.
					InconsistentItemConfig,
					#[codec(index = 32)]
					///Config for a collection or an item can't be found.
					NoConfig,
					#[codec(index = 33)]
					///Some roles were not cleared.
					RolesNotCleared,
					#[codec(index = 34)]
					///Mint has not started yet.
					MintNotStarted,
					#[codec(index = 35)]
					///Mint has already ended.
					MintEnded,
					#[codec(index = 36)]
					///The provided Item was already used for claiming.
					AlreadyClaimed,
					#[codec(index = 37)]
					///The provided data is incorrect.
					IncorrectData,
					#[codec(index = 38)]
					///The extrinsic was sent by the wrong origin.
					WrongOrigin,
					#[codec(index = 39)]
					///The provided signature is incorrect.
					WrongSignature,
					#[codec(index = 40)]
					///The provided metadata might be too long.
					IncorrectMetadata,
					#[codec(index = 41)]
					///Can't set more attributes per one call.
					MaxAttributesLimitReached,
					#[codec(index = 42)]
					///The provided namespace isn't supported in this call.
					WrongNamespace,
					#[codec(index = 43)]
					///Can't delete non-empty collections.
					CollectionNotEmpty,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A `collection` was created.
					Created {
						collection: ::core::primitive::u32,
						creator: ::subxt::utils::AccountId32,
						owner: ::subxt::utils::AccountId32,
					},
					#[codec(index = 1)]
					///A `collection` was force-created.
					ForceCreated {
						collection: ::core::primitive::u32,
						owner: ::subxt::utils::AccountId32,
					},
					#[codec(index = 2)]
					///A `collection` was destroyed.
					Destroyed { collection: ::core::primitive::u32 },
					#[codec(index = 3)]
					///An `item` was issued.
					Issued {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						owner: ::subxt::utils::AccountId32,
					},
					#[codec(index = 4)]
					///An `item` was transferred.
					Transferred {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						from: ::subxt::utils::AccountId32,
						to: ::subxt::utils::AccountId32,
					},
					#[codec(index = 5)]
					///An `item` was destroyed.
					Burned {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						owner: ::subxt::utils::AccountId32,
					},
					#[codec(index = 6)]
					///An `item` became non-transferable.
					ItemTransferLocked {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
					},
					#[codec(index = 7)]
					///An `item` became transferable.
					ItemTransferUnlocked {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					///`item` metadata or attributes were locked.
					ItemPropertiesLocked {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						lock_metadata: ::core::primitive::bool,
						lock_attributes: ::core::primitive::bool,
					},
					#[codec(index = 9)]
					///Some `collection` was locked.
					CollectionLocked { collection: ::core::primitive::u32 },
					#[codec(index = 10)]
					///The owner changed.
					OwnerChanged {
						collection: ::core::primitive::u32,
						new_owner: ::subxt::utils::AccountId32,
					},
					#[codec(index = 11)]
					///The management team changed.
					TeamChanged {
						collection: ::core::primitive::u32,
						issuer: ::core::option::Option<::subxt::utils::AccountId32>,
						admin: ::core::option::Option<::subxt::utils::AccountId32>,
						freezer: ::core::option::Option<::subxt::utils::AccountId32>,
					},
					#[codec(index = 12)]
					///An `item` of a `collection` has been approved by the `owner` for transfer
					/// by a `delegate`.
					TransferApproved {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						owner: ::subxt::utils::AccountId32,
						delegate: ::subxt::utils::AccountId32,
						deadline: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 13)]
					///An approval for a `delegate` account to transfer the `item` of an item
					///`collection` was cancelled by its `owner`.
					ApprovalCancelled {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						owner: ::subxt::utils::AccountId32,
						delegate: ::subxt::utils::AccountId32,
					},
					#[codec(index = 14)]
					///All approvals of an item got cancelled.
					AllApprovalsCancelled {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						owner: ::subxt::utils::AccountId32,
					},
					#[codec(index = 15)]
					///A `collection` has had its config changed by the `Force` origin.
					CollectionConfigChanged { collection: ::core::primitive::u32 },
					#[codec(index = 16)]
					///New metadata has been set for a `collection`.
					CollectionMetadataSet {
						collection: ::core::primitive::u32,
						data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 17)]
					///Metadata has been cleared for a `collection`.
					CollectionMetadataCleared { collection: ::core::primitive::u32 },
					#[codec(index = 18)]
					///New metadata has been set for an item.
					ItemMetadataSet {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 19)]
					///Metadata has been cleared for an item.
					ItemMetadataCleared {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
					},
					#[codec(index = 20)]
					///The deposit for a set of `item`s within a `collection` has been updated.
					Redeposited {
						collection: ::core::primitive::u32,
						successful_items: ::std::vec::Vec<::core::primitive::u32>,
					},
					#[codec(index = 21)]
					///New attribute metadata has been set for a `collection` or `item`.
					AttributeSet {
						collection: ::core::primitive::u32,
						maybe_item: ::core::option::Option<::core::primitive::u32>,
						key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
							::subxt::utils::AccountId32,
						>,
					},
					#[codec(index = 22)]
					///Attribute metadata has been cleared for a `collection` or `item`.
					AttributeCleared {
						collection: ::core::primitive::u32,
						maybe_item: ::core::option::Option<::core::primitive::u32>,
						key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
							::subxt::utils::AccountId32,
						>,
					},
					#[codec(index = 23)]
					///A new approval to modify item attributes was added.
					ItemAttributesApprovalAdded {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						delegate: ::subxt::utils::AccountId32,
					},
					#[codec(index = 24)]
					///A new approval to modify item attributes was removed.
					ItemAttributesApprovalRemoved {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						delegate: ::subxt::utils::AccountId32,
					},
					#[codec(index = 25)]
					///Ownership acceptance has changed for an account.
					OwnershipAcceptanceChanged {
						who: ::subxt::utils::AccountId32,
						maybe_collection: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 26)]
					///Max supply has been set for a collection.
					CollectionMaxSupplySet {
						collection: ::core::primitive::u32,
						max_supply: ::core::primitive::u32,
					},
					#[codec(index = 27)]
					///Mint settings for a collection had changed.
					CollectionMintSettingsUpdated { collection: ::core::primitive::u32 },
					#[codec(index = 28)]
					///Event gets emitted when the `NextCollectionId` gets incremented.
					NextCollectionIdIncremented { next_id: ::core::primitive::u32 },
					#[codec(index = 29)]
					///The price was set for the item.
					ItemPriceSet {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						price: ::core::primitive::u128,
						whitelisted_buyer: ::core::option::Option<::subxt::utils::AccountId32>,
					},
					#[codec(index = 30)]
					///The price for the item was removed.
					ItemPriceRemoved {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
					},
					#[codec(index = 31)]
					///An item was bought.
					ItemBought {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						price: ::core::primitive::u128,
						seller: ::subxt::utils::AccountId32,
						buyer: ::subxt::utils::AccountId32,
					},
					#[codec(index = 32)]
					///A tip was sent.
					TipSent {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						sender: ::subxt::utils::AccountId32,
						receiver: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 33)]
					///An `item` swap intent was created.
					SwapCreated {
						offered_collection: ::core::primitive::u32,
						offered_item: ::core::primitive::u32,
						desired_collection: ::core::primitive::u32,
						desired_item: ::core::option::Option<::core::primitive::u32>,
						price: ::core::option::Option<
							runtime_types::pallet_nfts::types::PriceWithDirection<
								::core::primitive::u128,
							>,
						>,
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 34)]
					///The swap was cancelled.
					SwapCancelled {
						offered_collection: ::core::primitive::u32,
						offered_item: ::core::primitive::u32,
						desired_collection: ::core::primitive::u32,
						desired_item: ::core::option::Option<::core::primitive::u32>,
						price: ::core::option::Option<
							runtime_types::pallet_nfts::types::PriceWithDirection<
								::core::primitive::u128,
							>,
						>,
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 35)]
					///The swap has been claimed.
					SwapClaimed {
						sent_collection: ::core::primitive::u32,
						sent_item: ::core::primitive::u32,
						sent_item_owner: ::subxt::utils::AccountId32,
						received_collection: ::core::primitive::u32,
						received_item: ::core::primitive::u32,
						received_item_owner: ::subxt::utils::AccountId32,
						price: ::core::option::Option<
							runtime_types::pallet_nfts::types::PriceWithDirection<
								::core::primitive::u128,
							>,
						>,
						deadline: ::core::primitive::u32,
					},
					#[codec(index = 36)]
					///New attributes have been set for an `item` of the `collection`.
					PreSignedAttributesSet {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
							::subxt::utils::AccountId32,
						>,
					},
					#[codec(index = 37)]
					///A new attribute in the `Pallet` namespace was set for the `collection` or
					/// an `item` within that `collection`.
					PalletAttributeSet {
						collection: ::core::primitive::u32,
						item: ::core::option::Option<::core::primitive::u32>,
						attribute: runtime_types::pallet_nfts::types::PalletAttributes<
							::core::primitive::u32,
						>,
						value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct AttributeDeposit<_0, _1> {
					pub account: ::core::option::Option<_1>,
					pub amount: _0,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum AttributeNamespace<_0> {
					#[codec(index = 0)]
					Pallet,
					#[codec(index = 1)]
					CollectionOwner,
					#[codec(index = 2)]
					ItemOwner,
					#[codec(index = 3)]
					Account(_0),
				}
				#[derive(
					::subxt::ext::codec::CompactAs,
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct BitFlags<_0>(
					pub ::core::primitive::u64,
					#[codec(skip)] pub ::core::marker::PhantomData<_0>,
				);
				#[derive(
					::subxt::ext::codec::CompactAs,
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct CancelAttributesApprovalWitness {
					pub account_attributes: ::core::primitive::u32,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct CollectionConfig<_0, _1, _2> {
					pub settings: runtime_types::pallet_nfts::types::BitFlags<
						runtime_types::pallet_nfts::types::CollectionSetting,
					>,
					pub max_supply: ::core::option::Option<_1>,
					pub mint_settings: runtime_types::pallet_nfts::types::MintSettings<_0, _1, _1>,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<_2>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct CollectionDetails<_0, _1> {
					pub owner: _0,
					pub owner_deposit: _1,
					pub items: ::core::primitive::u32,
					pub item_metadatas: ::core::primitive::u32,
					pub item_configs: ::core::primitive::u32,
					pub attributes: ::core::primitive::u32,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct CollectionMetadata<_0> {
					pub deposit: _0,
					pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum CollectionRole {
					#[codec(index = 1)]
					Issuer,
					#[codec(index = 2)]
					Freezer,
					#[codec(index = 4)]
					Admin,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum CollectionSetting {
					#[codec(index = 1)]
					TransferableItems,
					#[codec(index = 2)]
					UnlockedMetadata,
					#[codec(index = 4)]
					UnlockedAttributes,
					#[codec(index = 8)]
					UnlockedMaxSupply,
					#[codec(index = 16)]
					DepositRequired,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct DestroyWitness {
					#[codec(compact)]
					pub item_metadatas: ::core::primitive::u32,
					#[codec(compact)]
					pub item_configs: ::core::primitive::u32,
					#[codec(compact)]
					pub attributes: ::core::primitive::u32,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ItemConfig {
					pub settings: runtime_types::pallet_nfts::types::BitFlags<
						runtime_types::pallet_nfts::types::ItemSetting,
					>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ItemDeposit<_0, _1> {
					pub account: _1,
					pub amount: _0,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ItemDetails<_0, _1, _2> {
					pub owner: _0,
					pub approvals: _2,
					pub deposit: _1,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ItemMetadata<_0> {
					pub deposit: _0,
					pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ItemMetadataDeposit<_0, _1> {
					pub account: ::core::option::Option<_1>,
					pub amount: _0,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum ItemSetting {
					#[codec(index = 1)]
					Transferable,
					#[codec(index = 2)]
					UnlockedMetadata,
					#[codec(index = 4)]
					UnlockedAttributes,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ItemTip<_0, _1, _2, _3> {
					pub collection: _0,
					pub item: _0,
					pub receiver: _2,
					pub amount: _3,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct MintSettings<_0, _1, _2> {
					pub mint_type: runtime_types::pallet_nfts::types::MintType<_1>,
					pub price: ::core::option::Option<_0>,
					pub start_block: ::core::option::Option<_1>,
					pub end_block: ::core::option::Option<_1>,
					pub default_item_settings: runtime_types::pallet_nfts::types::BitFlags<
						runtime_types::pallet_nfts::types::ItemSetting,
					>,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<_2>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum MintType<_0> {
					#[codec(index = 0)]
					Issuer,
					#[codec(index = 1)]
					Public,
					#[codec(index = 2)]
					HolderOf(_0),
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct MintWitness<_0> {
					pub owned_item: _0,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum PalletAttributes<_0> {
					#[codec(index = 0)]
					UsedToClaim(_0),
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum PalletFeature {
					#[codec(index = 1)]
					Trading,
					#[codec(index = 2)]
					Attributes,
					#[codec(index = 4)]
					Approvals,
					#[codec(index = 8)]
					Swaps,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct PendingSwap<_0, _1, _2, _3> {
					pub desired_collection: _0,
					pub desired_item: ::core::option::Option<_0>,
					pub price: ::core::option::Option<_2>,
					pub deadline: _0,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<(_3, _1)>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct PreSignedAttributes<_0, _1, _2, _3> {
					pub collection: _0,
					pub item: _0,
					pub attributes: ::std::vec::Vec<(
						::std::vec::Vec<::core::primitive::u8>,
						::std::vec::Vec<::core::primitive::u8>,
					)>,
					pub namespace: runtime_types::pallet_nfts::types::AttributeNamespace<_2>,
					pub deadline: _0,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<(_3, _1)>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct PreSignedMint<_0, _1, _2, _3> {
					pub collection: _0,
					pub item: _0,
					pub attributes: ::std::vec::Vec<(
						::std::vec::Vec<::core::primitive::u8>,
						::std::vec::Vec<::core::primitive::u8>,
					)>,
					pub metadata: ::std::vec::Vec<::core::primitive::u8>,
					pub only_account: ::core::option::Option<_2>,
					pub deadline: _0,
					#[codec(skip)]
					pub __subxt_unused_type_params: ::core::marker::PhantomData<(_3, _1)>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum PriceDirection {
					#[codec(index = 0)]
					Send,
					#[codec(index = 1)]
					Receive,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct PriceWithDirection<_0> {
					pub amount: _0,
					pub direction: runtime_types::pallet_nfts::types::PriceDirection,
				}
			}
		}
		pub mod pallet_nis {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Bid<_0, _1> {
					pub amount: _0,
					pub who: _1,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Place a bid.
					///
					///Origin must be Signed, and account must have at least `amount` in free
					/// balance.
					///
					/// - `amount`: The amount of the bid; these funds will be reserved, and
					///   if/when
					///  consolidated, removed. Must be at least `MinBid`.
					/// - `duration`: The number of periods before which the newly consolidated bid
					///   may be
					///  thawed. Must be greater than 1 and no more than `QueueCount`.
					///
					///Complexities:
					/// - `Queues[duration].len()` (just take max).
					place_bid {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						duration: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					///Retract a previously placed bid.
					///
					///Origin must be Signed, and the account should have previously issued a
					/// still-active bid of `amount` for `duration`.
					///
					/// - `amount`: The amount of the previous bid.
					/// - `duration`: The duration of the previous bid.
					retract_bid {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						duration: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					///Ensure we have sufficient funding for all potential payouts.
					///
					/// - `origin`: Must be accepted by `FundOrigin`.
					fund_deficit,
					#[codec(index = 3)]
					///Reduce or remove an outstanding receipt, placing the according proportion
					/// of funds into the account of the owner.
					///
					/// - `origin`: Must be Signed and the account must be the owner of the receipt
					///   `index` as
					///  well as any fungible counterpart.
					/// - `index`: The index of the receipt.
					/// - `portion`: If `Some`, then only the given portion of the receipt should
					///   be thawed. If
					///  `None`, then all of it should be.
					thaw_private {
						#[codec(compact)]
						index: ::core::primitive::u32,
						maybe_proportion: ::core::option::Option<
							runtime_types::sp_arithmetic::per_things::Perquintill,
						>,
					},
					#[codec(index = 4)]
					///Reduce or remove an outstanding receipt, placing the according proportion
					/// of funds into the account of the owner.
					///
					/// - `origin`: Must be Signed and the account must be the owner of the
					///   fungible counterpart
					///  for receipt `index`.
					/// - `index`: The index of the receipt.
					thaw_communal {
						#[codec(compact)]
						index: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					///Make a private receipt communal and create fungible counterparts for its
					/// owner.
					communify {
						#[codec(compact)]
						index: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					///Make a communal receipt private and burn fungible counterparts from its
					/// owner.
					privatize {
						#[codec(compact)]
						index: ::core::primitive::u32,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///The duration of the bid is less than one.
					DurationTooSmall,
					#[codec(index = 1)]
					///The duration is the bid is greater than the number of queues.
					DurationTooBig,
					#[codec(index = 2)]
					///The amount of the bid is less than the minimum allowed.
					AmountTooSmall,
					#[codec(index = 3)]
					///The queue for the bid's duration is full and the amount bid is too low to
					/// get in through replacing an existing bid.
					BidTooLow,
					#[codec(index = 4)]
					///Receipt index is unknown.
					UnknownReceipt,
					#[codec(index = 5)]
					///Not the owner of the receipt.
					NotOwner,
					#[codec(index = 6)]
					///Bond not yet at expiry date.
					NotExpired,
					#[codec(index = 7)]
					///The given bid for retraction is not found.
					UnknownBid,
					#[codec(index = 8)]
					///The portion supplied is beyond the value of the receipt.
					PortionTooBig,
					#[codec(index = 9)]
					///Not enough funds are held to pay out.
					Unfunded,
					#[codec(index = 10)]
					///There are enough funds for what is required.
					AlreadyFunded,
					#[codec(index = 11)]
					///The thaw throttle has been reached for this period.
					Throttled,
					#[codec(index = 12)]
					///The operation would result in a receipt worth an insignficant value.
					MakesDust,
					#[codec(index = 13)]
					///The receipt is already communal.
					AlreadyCommunal,
					#[codec(index = 14)]
					///The receipt is already private.
					AlreadyPrivate,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A bid was successfully placed.
					BidPlaced {
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
						duration: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					///A bid was successfully removed (before being accepted).
					BidRetracted {
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
						duration: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					///A bid was dropped from a queue because of another, more substantial, bid
					/// was present.
					BidDropped {
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
						duration: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					///A bid was accepted. The balance may not be released until expiry.
					Issued {
						index: ::core::primitive::u32,
						expiry: ::core::primitive::u32,
						who: ::subxt::utils::AccountId32,
						proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					///An receipt has been (at least partially) thawed.
					Thawed {
						index: ::core::primitive::u32,
						who: ::subxt::utils::AccountId32,
						proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
						amount: ::core::primitive::u128,
						dropped: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					///An automatic funding of the deficit was made.
					Funded { deficit: ::core::primitive::u128 },
					#[codec(index = 6)]
					///A receipt was transfered.
					Transferred {
						from: ::subxt::utils::AccountId32,
						to: ::subxt::utils::AccountId32,
						index: ::core::primitive::u32,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ReceiptRecord<_0, _1, _2> {
					pub proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
					pub owner: ::core::option::Option<(_0, _2)>,
					pub expiry: _1,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct SummaryRecord<_0, _1> {
					pub proportion_owed: runtime_types::sp_arithmetic::per_things::Perquintill,
					pub index: _0,
					pub thawed: runtime_types::sp_arithmetic::per_things::Perquintill,
					pub last_period: _0,
					pub receipts_on_hold: _1,
				}
			}
		}
		pub mod pallet_nomination_pools {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Stake funds with a pool. The amount to bond is transferred from the member
					/// to the pools account and immediately increases the pools bond.
					///
					///# Note
					///
					/// * An account can only be a member of a single pool.
					/// * An account cannot join the same pool multiple times.
					/// * This call will *not* dust the member account, so the member must have at
					///   least
					///  `existential deposit + amount` in their account.
					/// * Only a pool with [`PoolState::Open`] can be joined
					join {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						pool_id: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					///Bond `extra` more funds from `origin` into the pool to which they already
					/// belong.
					///
					///Additional funds can come from either the free balance of the account, of
					/// from the accumulated rewards, see [`BondExtra`].
					///
					///Bonding extra funds implies an automatic payout of all pending rewards as
					/// well. See `bond_extra_other` to bond pending rewards of `other` members.
					bond_extra {
						extra: runtime_types::pallet_nomination_pools::BondExtra<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 2)]
					///A bonded member can use this to claim their payout based on the rewards
					/// that the pool has accumulated since their last claimed payout (OR since
					/// joining if this is their first time claiming rewards). The payout will be
					/// transferred to the member's account.
					///
					///The member will earn rewards pro rata based on the members stake vs the sum
					/// of the members in the pools stake. Rewards do not "expire".
					///
					///See `claim_payout_other` to caim rewards on bahalf of some `other` pool
					/// member.
					claim_payout,
					#[codec(index = 3)]
					///Unbond up to `unbonding_points` of the `member_account`'s funds from the
					/// pool. It implicitly collects the rewards one last time, since not doing so
					/// would mean some rewards would be forfeited.
					///
					///Under certain conditions, this call can be dispatched permissionlessly
					/// (i.e. by any account).
					///
					///# Conditions for a permissionless dispatch.
					///
					/// * The pool is blocked and the caller is either the root or bouncer. This is
					///   refereed to
					///  as a kick.
					/// * The pool is destroying and the member is not the depositor.
					/// * The pool is destroying, the member is the depositor and no other members
					///   are in the
					///  pool.
					///
					///## Conditions for permissioned dispatch (i.e. the caller is also the
					///`member_account`):
					///
					/// * The caller is not the depositor.
					/// * The caller is the depositor, the pool is destroying and no other members
					///   are in the
					///  pool.
					///
					///# Note
					///
					///If there are too many unlocking chunks to unbond with the pool account,
					///[`Call::pool_withdraw_unbonded`] can be called to try and minimize
					/// unlocking chunks. The [`StakingInterface::unbond`] will implicitly call
					/// [`Call::pool_withdraw_unbonded`] to try to free chunks if necessary (ie. if
					/// unbound was called and no unlocking chunks are available). However, it may
					/// not be possible to release the current unlocking chunks, in which case, the
					/// result of this call will likely be the `NoMoreChunks` error from the
					/// staking system.
					unbond {
						member_account: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						unbonding_points: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					///Call `withdraw_unbonded` for the pools account. This call can be made by
					/// any account.
					///
					///This is useful if their are too many unlocking chunks to call `unbond`, and
					/// some can be cleared by withdrawing. In the case there are too many
					/// unlocking chunks, the user would probably see an error like `NoMoreChunks`
					/// emitted from the staking system when they attempt to unbond.
					pool_withdraw_unbonded {
						pool_id: ::core::primitive::u32,
						num_slashing_spans: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					///Withdraw unbonded funds from `member_account`. If no bonded funds can be
					/// unbonded, an error is returned.
					///
					///Under certain conditions, this call can be dispatched permissionlessly
					/// (i.e. by any account).
					///
					///# Conditions for a permissionless dispatch
					///
					/// * The pool is in destroy mode and the target is not the depositor.
					/// * The target is the depositor and they are the only member in the sub
					///   pools.
					/// * The pool is blocked and the caller is either the root or bouncer.
					///
					///# Conditions for permissioned dispatch
					///
					/// * The caller is the target and they are not the depositor.
					///
					///# Note
					///
					///If the target is the depositor, the pool will be destroyed.
					withdraw_unbonded {
						member_account: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						num_slashing_spans: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					///Create a new delegation pool.
					///
					///# Arguments
					///
					/// * `amount` - The amount of funds to delegate to the pool. This also acts of
					///   a sort of
					///  deposit since the pools creator cannot fully unbond funds until the pool
					/// is being  destroyed.
					/// * `index` - A disambiguation index for creating the account. Likely only
					///   useful when
					///  creating multiple pools in the same extrinsic.
					/// * `root` - The account to set as [`PoolRoles::root`].
					/// * `nominator` - The account to set as the [`PoolRoles::nominator`].
					/// * `bouncer` - The account to set as the [`PoolRoles::bouncer`].
					///
					///# Note
					///
					///In addition to `amount`, the caller will transfer the existential deposit;
					/// so the caller needs at have at least `amount + existential_deposit`
					/// transferrable.
					create {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						root: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						nominator: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						bouncer: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 7)]
					///Create a new delegation pool with a previously used pool id
					///
					///# Arguments
					///
					///same as `create` with the inclusion of
					/// * `pool_id` - `A valid PoolId.
					create_with_pool_id {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						root: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						nominator: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						bouncer: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						pool_id: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					///Nominate on behalf of the pool.
					///
					///The dispatch origin of this call must be signed by the pool nominator or
					/// the pool root role.
					///
					///This directly forward the call to the staking pallet, on behalf of the pool
					/// bonded account.
					nominate {
						pool_id: ::core::primitive::u32,
						validators: ::std::vec::Vec<::subxt::utils::AccountId32>,
					},
					#[codec(index = 9)]
					///Set a new state for the pool.
					///
					///If a pool is already in the `Destroying` state, then under no condition can
					/// its state change again.
					///
					///The dispatch origin of this call must be either:
					///
					///1. signed by the bouncer, or the root role of the pool,
					///2. if the pool conditions to be open are NOT met (as described by
					/// `ok_to_be_open`), and   then the state of the pool can be permissionlessly
					/// changed to `Destroying`.
					set_state {
						pool_id: ::core::primitive::u32,
						state: runtime_types::pallet_nomination_pools::PoolState,
					},
					#[codec(index = 10)]
					///Set a new metadata for the pool.
					///
					///The dispatch origin of this call must be signed by the bouncer, or the root
					/// role of the pool.
					set_metadata {
						pool_id: ::core::primitive::u32,
						metadata: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 11)]
					///Update configurations for the nomination pools. The origin for this call
					/// must be Root.
					///
					///# Arguments
					///
					/// * `min_join_bond` - Set [`MinJoinBond`].
					/// * `min_create_bond` - Set [`MinCreateBond`].
					/// * `max_pools` - Set [`MaxPools`].
					/// * `max_members` - Set [`MaxPoolMembers`].
					/// * `max_members_per_pool` - Set [`MaxPoolMembersPerPool`].
					/// * `global_max_commission` - Set [`GlobalMaxCommission`].
					set_configs {
						min_join_bond: runtime_types::pallet_nomination_pools::ConfigOp<
							::core::primitive::u128,
						>,
						min_create_bond: runtime_types::pallet_nomination_pools::ConfigOp<
							::core::primitive::u128,
						>,
						max_pools: runtime_types::pallet_nomination_pools::ConfigOp<
							::core::primitive::u32,
						>,
						max_members: runtime_types::pallet_nomination_pools::ConfigOp<
							::core::primitive::u32,
						>,
						max_members_per_pool: runtime_types::pallet_nomination_pools::ConfigOp<
							::core::primitive::u32,
						>,
						global_max_commission: runtime_types::pallet_nomination_pools::ConfigOp<
							runtime_types::sp_arithmetic::per_things::Perbill,
						>,
					},
					#[codec(index = 12)]
					///Update the roles of the pool.
					///
					///The root is the only entity that can change any of the roles, including
					/// itself, excluding the depositor, who can never change.
					///
					///It emits an event, notifying UIs of the role change. This event is quite
					/// relevant to most pool members and they should be informed of changes to
					/// pool roles.
					update_roles {
						pool_id: ::core::primitive::u32,
						new_root: runtime_types::pallet_nomination_pools::ConfigOp<
							::subxt::utils::AccountId32,
						>,
						new_nominator: runtime_types::pallet_nomination_pools::ConfigOp<
							::subxt::utils::AccountId32,
						>,
						new_bouncer: runtime_types::pallet_nomination_pools::ConfigOp<
							::subxt::utils::AccountId32,
						>,
					},
					#[codec(index = 13)]
					///Chill on behalf of the pool.
					///
					///The dispatch origin of this call must be signed by the pool nominator or
					/// the pool root role, same as [`Pallet::nominate`].
					///
					///This directly forward the call to the staking pallet, on behalf of the pool
					/// bonded account.
					chill { pool_id: ::core::primitive::u32 },
					#[codec(index = 14)]
					///`origin` bonds funds from `extra` for some pool member `member` into their
					/// respective pools.
					///
					///`origin` can bond extra funds from free balance or pending rewards when
					/// `origin == other`.
					///
					///In the case of `origin != other`, `origin` can only bond extra pending
					/// rewards of `other` members assuming set_claim_permission for the given
					/// member is `PermissionlessAll` or `PermissionlessCompound`.
					bond_extra_other {
						member: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						extra: runtime_types::pallet_nomination_pools::BondExtra<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 15)]
					///Allows a pool member to set a claim permission to allow or disallow
					/// permissionless bonding and withdrawing.
					///
					///By default, this is `Permissioned`, which implies only the pool member
					/// themselves can claim their pending rewards. If a pool member wishes so,
					/// they can set this to `PermissionlessAll` to allow any account to claim
					/// their rewards and bond extra to the pool.
					///
					///# Arguments
					///
					/// * `origin` - Member of a pool.
					/// * `actor` - Account to claim reward. // improve this
					set_claim_permission {
						permission: runtime_types::pallet_nomination_pools::ClaimPermission,
					},
					#[codec(index = 16)]
					///`origin` can claim payouts on some pool member `other`'s behalf.
					///
					///Pool member `other` must have a `PermissionlessAll` or
					/// `PermissionlessWithdraw` in order for this call to be successful.
					claim_payout_other { other: ::subxt::utils::AccountId32 },
					#[codec(index = 17)]
					///Set the commission of a pool.
					///Both a commission percentage and a commission payee must be provided in the
					/// `current` tuple. Where a `current` of `None` is provided, any current
					/// commission will be removed.
					///
					/// - If a `None` is supplied to `new_commission`, existing commission will be
					///   removed.
					set_commission {
						pool_id: ::core::primitive::u32,
						new_commission: ::core::option::Option<(
							runtime_types::sp_arithmetic::per_things::Perbill,
							::subxt::utils::AccountId32,
						)>,
					},
					#[codec(index = 18)]
					///Set the maximum commission of a pool.
					///
					/// - Initial max can be set to any `Perbill`, and only smaller values
					///   thereafter.
					/// - Current commission will be lowered in the event it is higher than a new
					///   max
					///  commission.
					set_commission_max {
						pool_id: ::core::primitive::u32,
						max_commission: runtime_types::sp_arithmetic::per_things::Perbill,
					},
					#[codec(index = 19)]
					///Set the commission change rate for a pool.
					///
					///Initial change rate is not bounded, whereas subsequent updates can only be
					/// more restrictive than the current.
					set_commission_change_rate {
						pool_id: ::core::primitive::u32,
						change_rate: runtime_types::pallet_nomination_pools::CommissionChangeRate<
							::core::primitive::u32,
						>,
					},
					#[codec(index = 20)]
					///Claim pending commission.
					///
					///The dispatch origin of this call must be signed by the `root` role of the
					/// pool. Pending commission is paid out and added to total claimed
					/// commission`. Total pending commission is reset to zero. the current.
					claim_commission { pool_id: ::core::primitive::u32 },
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum DefensiveError {
					#[codec(index = 0)]
					NotEnoughSpaceInUnbondPool,
					#[codec(index = 1)]
					PoolNotFound,
					#[codec(index = 2)]
					RewardPoolNotFound,
					#[codec(index = 3)]
					SubPoolsNotFound,
					#[codec(index = 4)]
					BondedStashKilledPrematurely,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///A (bonded) pool id does not exist.
					PoolNotFound,
					#[codec(index = 1)]
					///An account is not a member.
					PoolMemberNotFound,
					#[codec(index = 2)]
					///A reward pool does not exist. In all cases this is a system logic error.
					RewardPoolNotFound,
					#[codec(index = 3)]
					///A sub pool does not exist.
					SubPoolsNotFound,
					#[codec(index = 4)]
					///An account is already delegating in another pool. An account may only
					/// belong to one pool at a time.
					AccountBelongsToOtherPool,
					#[codec(index = 5)]
					///The member is fully unbonded (and thus cannot access the bonded and reward
					/// pool anymore to, for example, collect rewards).
					FullyUnbonding,
					#[codec(index = 6)]
					///The member cannot unbond further chunks due to reaching the limit.
					MaxUnbondingLimit,
					#[codec(index = 7)]
					///None of the funds can be withdrawn yet because the bonding duration has not
					/// passed.
					CannotWithdrawAny,
					#[codec(index = 8)]
					///The amount does not meet the minimum bond to either join or create a pool.
					///
					///The depositor can never unbond to a value less than
					///`Pallet::depositor_min_bond`. The caller does not have nominating
					///permissions for the pool. Members can never unbond to a value below
					/// `MinJoinBond`.
					MinimumBondNotMet,
					#[codec(index = 9)]
					///The transaction could not be executed due to overflow risk for the pool.
					OverflowRisk,
					#[codec(index = 10)]
					///A pool must be in [`PoolState::Destroying`] in order for the depositor to
					/// unbond or for other members to be permissionlessly unbonded.
					NotDestroying,
					#[codec(index = 11)]
					///The caller does not have nominating permissions for the pool.
					NotNominator,
					#[codec(index = 12)]
					///Either a) the caller cannot make a valid kick or b) the pool is not
					/// destroying.
					NotKickerOrDestroying,
					#[codec(index = 13)]
					///The pool is not open to join
					NotOpen,
					#[codec(index = 14)]
					///The system is maxed out on pools.
					MaxPools,
					#[codec(index = 15)]
					///Too many members in the pool or system.
					MaxPoolMembers,
					#[codec(index = 16)]
					///The pools state cannot be changed.
					CanNotChangeState,
					#[codec(index = 17)]
					///The caller does not have adequate permissions.
					DoesNotHavePermission,
					#[codec(index = 18)]
					///Metadata exceeds [`Config::MaxMetadataLen`]
					MetadataExceedsMaxLen,
					#[codec(index = 19)]
					///Some error occurred that should never happen. This should be reported to
					/// the maintainers.
					Defensive(runtime_types::pallet_nomination_pools::pallet::DefensiveError),
					#[codec(index = 20)]
					///Partial unbonding now allowed permissionlessly.
					PartialUnbondNotAllowedPermissionlessly,
					#[codec(index = 21)]
					///The pool's max commission cannot be set higher than the existing value.
					MaxCommissionRestricted,
					#[codec(index = 22)]
					///The supplied commission exceeds the max allowed commission.
					CommissionExceedsMaximum,
					#[codec(index = 23)]
					///Not enough blocks have surpassed since the last commission update.
					CommissionChangeThrottled,
					#[codec(index = 24)]
					///The submitted changes to commission change rate are not allowed.
					CommissionChangeRateNotAllowed,
					#[codec(index = 25)]
					///There is no pending commission to claim.
					NoPendingCommission,
					#[codec(index = 26)]
					///No commission current has been set.
					NoCommissionCurrentSet,
					#[codec(index = 27)]
					///Pool id currently in use.
					PoolIdInUse,
					#[codec(index = 28)]
					///Pool id provided is not correct/usable.
					InvalidPoolId,
					#[codec(index = 29)]
					///Bonding extra is restricted to the exact pending reward amount.
					BondExtraRestricted,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Events of this pallet.
				pub enum Event {
					#[codec(index = 0)]
					///A pool has been created.
					Created {
						depositor: ::subxt::utils::AccountId32,
						pool_id: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					///A member has became bonded in a pool.
					Bonded {
						member: ::subxt::utils::AccountId32,
						pool_id: ::core::primitive::u32,
						bonded: ::core::primitive::u128,
						joined: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					///A payout has been made to a member.
					PaidOut {
						member: ::subxt::utils::AccountId32,
						pool_id: ::core::primitive::u32,
						payout: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					///A member has unbonded from their pool.
					///
					/// - `balance` is the corresponding balance of the number of points that has
					///   been
					///  requested to be unbonded (the argument of the `unbond` transaction) from
					/// the bonded  pool.
					/// - `points` is the number of points that are issued as a result of `balance`
					///   being
					///dissolved into the corresponding unbonding pool.
					/// - `era` is the era in which the balance will be unbonded.
					///In the absence of slashing, these values will match. In the presence of
					/// slashing, the number of points that are issued in the unbonding pool will
					/// be less than the amount requested to be unbonded.
					Unbonded {
						member: ::subxt::utils::AccountId32,
						pool_id: ::core::primitive::u32,
						balance: ::core::primitive::u128,
						points: ::core::primitive::u128,
						era: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					///A member has withdrawn from their pool.
					///
					///The given number of `points` have been dissolved in return of `balance`.
					///
					///Similar to `Unbonded` event, in the absence of slashing, the ratio of point
					/// to balance will be 1.
					Withdrawn {
						member: ::subxt::utils::AccountId32,
						pool_id: ::core::primitive::u32,
						balance: ::core::primitive::u128,
						points: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					///A pool has been destroyed.
					Destroyed { pool_id: ::core::primitive::u32 },
					#[codec(index = 6)]
					///The state of a pool has changed
					StateChanged {
						pool_id: ::core::primitive::u32,
						new_state: runtime_types::pallet_nomination_pools::PoolState,
					},
					#[codec(index = 7)]
					///A member has been removed from a pool.
					///
					///The removal can be voluntary (withdrawn all unbonded funds) or involuntary
					/// (kicked).
					MemberRemoved {
						pool_id: ::core::primitive::u32,
						member: ::subxt::utils::AccountId32,
					},
					#[codec(index = 8)]
					///The roles of a pool have been updated to the given new roles. Note that the
					/// depositor can never change.
					RolesUpdated {
						root: ::core::option::Option<::subxt::utils::AccountId32>,
						bouncer: ::core::option::Option<::subxt::utils::AccountId32>,
						nominator: ::core::option::Option<::subxt::utils::AccountId32>,
					},
					#[codec(index = 9)]
					///The active balance of pool `pool_id` has been slashed to `balance`.
					PoolSlashed {
						pool_id: ::core::primitive::u32,
						balance: ::core::primitive::u128,
					},
					#[codec(index = 10)]
					///The unbond pool at `era` of pool `pool_id` has been slashed to `balance`.
					UnbondingPoolSlashed {
						pool_id: ::core::primitive::u32,
						era: ::core::primitive::u32,
						balance: ::core::primitive::u128,
					},
					#[codec(index = 11)]
					///A pool's commission setting has been changed.
					PoolCommissionUpdated {
						pool_id: ::core::primitive::u32,
						current: ::core::option::Option<(
							runtime_types::sp_arithmetic::per_things::Perbill,
							::subxt::utils::AccountId32,
						)>,
					},
					#[codec(index = 12)]
					///A pool's maximum commission setting has been changed.
					PoolMaxCommissionUpdated {
						pool_id: ::core::primitive::u32,
						max_commission: runtime_types::sp_arithmetic::per_things::Perbill,
					},
					#[codec(index = 13)]
					///A pool's commission `change_rate` has been changed.
					PoolCommissionChangeRateUpdated {
						pool_id: ::core::primitive::u32,
						change_rate: runtime_types::pallet_nomination_pools::CommissionChangeRate<
							::core::primitive::u32,
						>,
					},
					#[codec(index = 14)]
					///Pool commission has been claimed.
					PoolCommissionClaimed {
						pool_id: ::core::primitive::u32,
						commission: ::core::primitive::u128,
					},
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum BondExtra<_0> {
				#[codec(index = 0)]
				FreeBalance(_0),
				#[codec(index = 1)]
				Rewards,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct BondedPoolInner {
				pub commission: runtime_types::pallet_nomination_pools::Commission,
				pub member_counter: ::core::primitive::u32,
				pub points: ::core::primitive::u128,
				pub roles:
					runtime_types::pallet_nomination_pools::PoolRoles<::subxt::utils::AccountId32>,
				pub state: runtime_types::pallet_nomination_pools::PoolState,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum ClaimPermission {
				#[codec(index = 0)]
				Permissioned,
				#[codec(index = 1)]
				PermissionlessCompound,
				#[codec(index = 2)]
				PermissionlessWithdraw,
				#[codec(index = 3)]
				PermissionlessAll,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Commission {
				pub current: ::core::option::Option<(
					runtime_types::sp_arithmetic::per_things::Perbill,
					::subxt::utils::AccountId32,
				)>,
				pub max: ::core::option::Option<runtime_types::sp_arithmetic::per_things::Perbill>,
				pub change_rate: ::core::option::Option<
					runtime_types::pallet_nomination_pools::CommissionChangeRate<
						::core::primitive::u32,
					>,
				>,
				pub throttle_from: ::core::option::Option<::core::primitive::u32>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct CommissionChangeRate<_0> {
				pub max_increase: runtime_types::sp_arithmetic::per_things::Perbill,
				pub min_delay: _0,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum ConfigOp<_0> {
				#[codec(index = 0)]
				Noop,
				#[codec(index = 1)]
				Set(_0),
				#[codec(index = 2)]
				Remove,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct PoolMember {
				pub pool_id: ::core::primitive::u32,
				pub points: ::core::primitive::u128,
				pub last_recorded_reward_counter:
					runtime_types::sp_arithmetic::fixed_point::FixedU128,
				pub unbonding_eras:
					runtime_types::bounded_collections::bounded_btree_map::BoundedBTreeMap<
						::core::primitive::u32,
						::core::primitive::u128,
					>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct PoolRoles<_0> {
				pub depositor: _0,
				pub root: ::core::option::Option<_0>,
				pub nominator: ::core::option::Option<_0>,
				pub bouncer: ::core::option::Option<_0>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum PoolState {
				#[codec(index = 0)]
				Open,
				#[codec(index = 1)]
				Blocked,
				#[codec(index = 2)]
				Destroying,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RewardPool {
				pub last_recorded_reward_counter:
					runtime_types::sp_arithmetic::fixed_point::FixedU128,
				pub last_recorded_total_payouts: ::core::primitive::u128,
				pub total_rewards_claimed: ::core::primitive::u128,
				pub total_commission_pending: ::core::primitive::u128,
				pub total_commission_claimed: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct SubPools {
				pub no_era: runtime_types::pallet_nomination_pools::UnbondPool,
				pub with_era:
					runtime_types::bounded_collections::bounded_btree_map::BoundedBTreeMap<
						::core::primitive::u32,
						runtime_types::pallet_nomination_pools::UnbondPool,
					>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct UnbondPool {
				pub points: ::core::primitive::u128,
				pub balance: ::core::primitive::u128,
			}
		}
		pub mod pallet_offences {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Events type.
				pub enum Event {
					#[codec(index = 0)]
					///There is an offence reported of the given `kind` happened at the
					/// `session_index` and (kind-specific) time slot. This event is not deposited
					/// for duplicate slashes. \[kind, timeslot\].
					Offence {
						kind: [::core::primitive::u8; 16usize],
						timeslot: ::std::vec::Vec<::core::primitive::u8>,
					},
				}
			}
		}
		pub mod pallet_preimage {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Register a preimage on-chain.
					///
					///If the preimage was previously requested, no fees or deposits are taken for
					/// providing the preimage. Otherwise, a deposit is taken proportional to the
					/// size of the preimage.
					note_preimage { bytes: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 1)]
					///Clear an unrequested preimage from the runtime storage.
					///
					///If `len` is provided, then it will be a much cheaper operation.
					///
					/// - `hash`: The hash of the preimage to be removed from the store.
					/// - `len`: The length of the preimage of `hash`.
					unnote_preimage { hash: ::subxt::utils::H256 },
					#[codec(index = 2)]
					///Request a preimage be uploaded to the chain without paying any fees or
					/// deposits.
					///
					///If the preimage requests has already been provided on-chain, we unreserve
					/// any deposit a user may have paid, and take the control of the preimage out
					/// of their hands.
					request_preimage { hash: ::subxt::utils::H256 },
					#[codec(index = 3)]
					///Clear a previously made request for a preimage.
					///
					///NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`.
					unrequest_preimage { hash: ::subxt::utils::H256 },
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Preimage is too large to store on-chain.
					TooBig,
					#[codec(index = 1)]
					///Preimage has already been noted on-chain.
					AlreadyNoted,
					#[codec(index = 2)]
					///The user is not authorized to perform this action.
					NotAuthorized,
					#[codec(index = 3)]
					///The preimage cannot be removed since it has not yet been noted.
					NotNoted,
					#[codec(index = 4)]
					///A preimage may not be removed when there are outstanding requests.
					Requested,
					#[codec(index = 5)]
					///The preimage request cannot be removed since no outstanding requests exist.
					NotRequested,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A preimage has been noted.
					Noted { hash: ::subxt::utils::H256 },
					#[codec(index = 1)]
					///A preimage has been requested.
					Requested { hash: ::subxt::utils::H256 },
					#[codec(index = 2)]
					///A preimage has ben cleared.
					Cleared { hash: ::subxt::utils::H256 },
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum RequestStatus<_0, _1> {
				#[codec(index = 0)]
				Unrequested { deposit: (_0, _1), len: ::core::primitive::u32 },
				#[codec(index = 1)]
				Requested {
					deposit: ::core::option::Option<(_0, _1)>,
					count: ::core::primitive::u32,
					len: ::core::option::Option<::core::primitive::u32>,
				},
			}
		}
		pub mod pallet_proxy {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Dispatch the given `call` from an account that the sender is authorised for
					/// through `add_proxy`.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					///Parameters:
					/// - `real`: The account that the proxy will make a call on behalf of.
					/// - `force_proxy_type`: Specify the exact proxy type to be used and checked
					///   for this call.
					/// - `call`: The call to be made by the `real` account.
					proxy {
						real: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						force_proxy_type:
							::core::option::Option<runtime_types::babe_runtime::ProxyType>,
						call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
					},
					#[codec(index = 1)]
					///Register a proxy account for the sender that is able to make calls on its
					/// behalf.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					///Parameters:
					/// - `proxy`: The account that the `caller` would like to make a proxy.
					/// - `proxy_type`: The permissions allowed for this proxy account.
					/// - `delay`: The announcement period required of the initial proxy. Will
					///   generally be
					///zero.
					add_proxy {
						delegate: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						proxy_type: runtime_types::babe_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					///Unregister a proxy account for the sender.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					///Parameters:
					/// - `proxy`: The account that the `caller` would like to remove as a proxy.
					/// - `proxy_type`: The permissions currently enabled for the removed proxy
					///   account.
					remove_proxy {
						delegate: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						proxy_type: runtime_types::babe_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					///Unregister all proxy accounts for the sender.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					///WARNING: This may be called on accounts created by `pure`, however if done,
					/// then the unreserved fees will be inaccessible. **All access to this account
					/// will be lost.**
					remove_proxies,
					#[codec(index = 4)]
					///Spawn a fresh new account that is guaranteed to be otherwise inaccessible,
					/// and initialize it with a proxy of `proxy_type` for `origin` sender.
					///
					///Requires a `Signed` origin.
					///
					/// - `proxy_type`: The type of the proxy that the sender will be registered as
					///   over the
					///new account. This will almost always be the most permissive `ProxyType`
					/// possible to allow for maximum flexibility.
					/// - `index`: A disambiguation index, in case this is called multiple times in
					///   the same
					///transaction (e.g. with `utility::batch`). Unless you're using `batch` you
					/// probably just want to use `0`.
					/// - `delay`: The announcement period required of the initial proxy. Will
					///   generally be
					///zero.
					///
					///Fails with `Duplicate` if this has already been called in this transaction,
					/// from the same sender, with the same parameters.
					///
					///Fails if there are insufficient funds to pay for deposit.
					create_pure {
						proxy_type: runtime_types::babe_runtime::ProxyType,
						delay: ::core::primitive::u32,
						index: ::core::primitive::u16,
					},
					#[codec(index = 5)]
					///Removes a previously spawned pure proxy.
					///
					///WARNING: **All access to this account will be lost.** Any funds held in it
					/// will be inaccessible.
					///
					///Requires a `Signed` origin, and the sender account must have been created
					/// by a call to `pure` with corresponding parameters.
					///
					/// - `spawner`: The account that originally called `pure` to create this
					///   account.
					/// - `index`: The disambiguation index originally passed to `pure`. Probably
					///   `0`.
					/// - `proxy_type`: The proxy type originally passed to `pure`.
					/// - `height`: The height of the chain when the call to `pure` was processed.
					/// - `ext_index`: The extrinsic index in which the call to `pure` was
					///   processed.
					///
					///Fails with `NoPermission` in case the caller is not a previously created
					/// pure account whose `pure` call has corresponding parameters.
					kill_pure {
						spawner: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						proxy_type: runtime_types::babe_runtime::ProxyType,
						index: ::core::primitive::u16,
						#[codec(compact)]
						height: ::core::primitive::u32,
						#[codec(compact)]
						ext_index: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					///Publish the hash of a proxy-call that will be made in the future.
					///
					///This must be called some number of blocks before the corresponding `proxy`
					/// is attempted if the delay associated with the proxy relationship is greater
					/// than zero.
					///
					///No more than `MaxPending` announcements may be made at any one time.
					///
					///This will take a deposit of `AnnouncementDepositFactor` as well as
					///`AnnouncementDepositBase` if there are no other pending announcements.
					///
					///The dispatch origin for this call must be _Signed_ and a proxy of `real`.
					///
					///Parameters:
					/// - `real`: The account that the proxy will make a call on behalf of.
					/// - `call_hash`: The hash of the call to be made by the `real` account.
					announce {
						real: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						call_hash: ::subxt::utils::H256,
					},
					#[codec(index = 7)]
					///Remove a given announcement.
					///
					///May be called by a proxy account to remove a call they previously announced
					/// and return the deposit.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					///Parameters:
					/// - `real`: The account that the proxy will make a call on behalf of.
					/// - `call_hash`: The hash of the call to be made by the `real` account.
					remove_announcement {
						real: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						call_hash: ::subxt::utils::H256,
					},
					#[codec(index = 8)]
					///Remove the given announcement of a delegate.
					///
					///May be called by a target (proxied) account to remove a call that one of
					/// their delegates (`delegate`) has announced they want to execute. The
					/// deposit is returned.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					///Parameters:
					/// - `delegate`: The account that previously announced the call.
					/// - `call_hash`: The hash of the call to be made.
					reject_announcement {
						delegate: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						call_hash: ::subxt::utils::H256,
					},
					#[codec(index = 9)]
					///Dispatch the given `call` from an account that the sender is authorized for
					/// through `add_proxy`.
					///
					///Removes any corresponding announcement(s).
					///
					///The dispatch origin for this call must be _Signed_.
					///
					///Parameters:
					/// - `real`: The account that the proxy will make a call on behalf of.
					/// - `force_proxy_type`: Specify the exact proxy type to be used and checked
					///   for this call.
					/// - `call`: The call to be made by the `real` account.
					proxy_announced {
						delegate: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						real: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						force_proxy_type:
							::core::option::Option<runtime_types::babe_runtime::ProxyType>,
						call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///There are too many proxies registered or too many announcements pending.
					TooMany,
					#[codec(index = 1)]
					///Proxy registration not found.
					NotFound,
					#[codec(index = 2)]
					///Sender is not a proxy of the account to be proxied.
					NotProxy,
					#[codec(index = 3)]
					///A call which is incompatible with the proxy type's filter was attempted.
					Unproxyable,
					#[codec(index = 4)]
					///Account is already a proxy.
					Duplicate,
					#[codec(index = 5)]
					///Call may not be made by proxy because it may escalate its privileges.
					NoPermission,
					#[codec(index = 6)]
					///Announcement, if made at all, was made too recently.
					Unannounced,
					#[codec(index = 7)]
					///Cannot add self as proxy.
					NoSelfProxy,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A proxy was executed correctly, with the given.
					ProxyExecuted {
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 1)]
					///A pure account has been created by new proxy with given
					///disambiguation index and proxy type.
					PureCreated {
						pure: ::subxt::utils::AccountId32,
						who: ::subxt::utils::AccountId32,
						proxy_type: runtime_types::babe_runtime::ProxyType,
						disambiguation_index: ::core::primitive::u16,
					},
					#[codec(index = 2)]
					///An announcement was placed to make a call in the future.
					Announced {
						real: ::subxt::utils::AccountId32,
						proxy: ::subxt::utils::AccountId32,
						call_hash: ::subxt::utils::H256,
					},
					#[codec(index = 3)]
					///A proxy was added.
					ProxyAdded {
						delegator: ::subxt::utils::AccountId32,
						delegatee: ::subxt::utils::AccountId32,
						proxy_type: runtime_types::babe_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					///A proxy was removed.
					ProxyRemoved {
						delegator: ::subxt::utils::AccountId32,
						delegatee: ::subxt::utils::AccountId32,
						proxy_type: runtime_types::babe_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Announcement<_0, _1, _2> {
				pub real: _0,
				pub call_hash: _1,
				pub height: _2,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ProxyDefinition<_0, _1, _2> {
				pub delegate: _0,
				pub proxy_type: _1,
				pub delay: _2,
			}
		}
		pub mod pallet_ranked_collective {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Introduce a new member.
					///
					/// - `origin`: Must be the `AdminOrigin`.
					/// - `who`: Account of non-member which will become a member.
					/// - `rank`: The rank to give the new member.
					///
					///Weight: `O(1)`
					add_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					///Increment the rank of an existing member by one.
					///
					/// - `origin`: Must be the `AdminOrigin`.
					/// - `who`: Account of existing member.
					///
					///Weight: `O(1)`
					promote_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 2)]
					///Decrement the rank of an existing member by one. If the member is already
					/// at rank zero, then they are removed entirely.
					///
					/// - `origin`: Must be the `AdminOrigin`.
					/// - `who`: Account of existing member of rank greater than zero.
					///
					///Weight: `O(1)`, less if the member's index is highest in its rank.
					demote_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 3)]
					///Remove the member entirely.
					///
					/// - `origin`: Must be the `AdminOrigin`.
					/// - `who`: Account of existing member of rank greater than zero.
					/// - `min_rank`: The rank of the member or greater.
					///
					///Weight: `O(min_rank)`.
					remove_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						min_rank: ::core::primitive::u16,
					},
					#[codec(index = 4)]
					///Add an aye or nay vote for the sender to the given proposal.
					///
					/// - `origin`: Must be `Signed` by a member account.
					/// - `poll`: Index of a poll which is ongoing.
					/// - `aye`: `true` if the vote is to approve the proposal, `false` otherwise.
					///
					///Transaction fees are be waived if the member is voting on any particular
					/// proposal for the first time and the call is successful. Subsequent vote
					/// changes will charge a fee.
					///
					///Weight: `O(1)`, less if there was no previous vote on the poll by the
					/// member.
					vote { poll: ::core::primitive::u32, aye: ::core::primitive::bool },
					#[codec(index = 5)]
					///Remove votes from the given poll. It must have ended.
					///
					/// - `origin`: Must be `Signed` by any account.
					/// - `poll_index`: Index of a poll which is completed and for which votes
					///   continue to
					///  exist.
					/// - `max`: Maximum number of vote items from remove in this call.
					///
					///Transaction fees are waived if the operation is successful.
					///
					///Weight `O(max)` (less if there are fewer items to remove than `max`).
					cleanup_poll { poll_index: ::core::primitive::u32, max: ::core::primitive::u32 },
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Account is already a member.
					AlreadyMember,
					#[codec(index = 1)]
					///Account is not a member.
					NotMember,
					#[codec(index = 2)]
					///The given poll index is unknown or has closed.
					NotPolling,
					#[codec(index = 3)]
					///The given poll is still ongoing.
					Ongoing,
					#[codec(index = 4)]
					///There are no further records to be removed.
					NoneRemaining,
					#[codec(index = 5)]
					///Unexpected error in state.
					Corruption,
					#[codec(index = 6)]
					///The member's rank is too low to vote.
					RankTooLow,
					#[codec(index = 7)]
					///The information provided is incorrect.
					InvalidWitness,
					#[codec(index = 8)]
					///The origin is not sufficiently privileged to do the operation.
					NoPermission,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A member `who` has been added.
					MemberAdded { who: ::subxt::utils::AccountId32 },
					#[codec(index = 1)]
					///The member `who`se rank has been changed to the given `rank`.
					RankChanged { who: ::subxt::utils::AccountId32, rank: ::core::primitive::u16 },
					#[codec(index = 2)]
					///The member `who` of given `rank` has been removed from the collective.
					MemberRemoved { who: ::subxt::utils::AccountId32, rank: ::core::primitive::u16 },
					#[codec(index = 3)]
					///The member `who` has voted for the `poll` with the given `vote` leading to
					/// an updated `tally`.
					Voted {
						who: ::subxt::utils::AccountId32,
						poll: ::core::primitive::u32,
						vote: runtime_types::pallet_ranked_collective::VoteRecord,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
				}
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct MemberRecord {
				pub rank: ::core::primitive::u16,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Tally {
				pub bare_ayes: ::core::primitive::u32,
				pub ayes: ::core::primitive::u32,
				pub nays: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum VoteRecord {
				#[codec(index = 0)]
				Aye(::core::primitive::u32),
				#[codec(index = 1)]
				Nay(::core::primitive::u32),
			}
		}
		pub mod pallet_recovery {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Send a call through a recovered account.
					///
					///The dispatch origin for this call must be _Signed_ and registered to
					///be able to make calls on behalf of the recovered account.
					///
					///Parameters:
					/// - `account`: The recovered account you want to make a call on-behalf-of.
					/// - `call`: The call you want to make with the recovered account.
					as_recovered {
						account: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
					},
					#[codec(index = 1)]
					///Allow ROOT to bypass the recovery process and set an a rescuer account
					///for a lost account directly.
					///
					///The dispatch origin for this call must be _ROOT_.
					///
					///Parameters:
					/// - `lost`: The "lost account" to be recovered.
					/// - `rescuer`: The "rescuer account" which can call as the lost account.
					set_recovered {
						lost: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						rescuer: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 2)]
					///Create a recovery configuration for your account. This makes your account
					/// recoverable.
					///
					///Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance
					///will be reserved for storing the recovery configuration. This deposit is
					/// returned in full when the user calls `remove_recovery`.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					///Parameters:
					/// - `friends`: A list of friends you trust to vouch for recovery attempts.
					///   Should be
					///  ordered and contain no duplicate values.
					/// - `threshold`: The number of friends that must vouch for a recovery attempt
					///   before the
					///  account can be recovered. Should be less than or equal to the length of
					/// the list of  friends.
					/// - `delay_period`: The number of blocks after a recovery attempt is
					///   initialized that
					///  needs to pass before the account can be recovered.
					create_recovery {
						friends: ::std::vec::Vec<::subxt::utils::AccountId32>,
						threshold: ::core::primitive::u16,
						delay_period: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					///Initiate the process for recovering a recoverable account.
					///
					///Payment: `RecoveryDeposit` balance will be reserved for initiating the
					///recovery process. This deposit will always be repatriated to the account
					///trying to be recovered. See `close_recovery`.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					///Parameters:
					/// - `account`: The lost account that you want to recover. This account needs
					///   to be
					///  recoverable (i.e. have a recovery configuration).
					initiate_recovery {
						account: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 4)]
					///Allow a "friend" of a recoverable account to vouch for an active recovery
					///process for that account.
					///
					///The dispatch origin for this call must be _Signed_ and must be a "friend"
					///for the recoverable account.
					///
					///Parameters:
					/// - `lost`: The lost account that you want to recover.
					/// - `rescuer`: The account trying to rescue the lost account that you want to
					///   vouch for.
					///
					///The combination of these two parameters must point to an active recovery
					///process.
					vouch_recovery {
						lost: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						rescuer: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 5)]
					///Allow a successful rescuer to claim their recovered account.
					///
					///The dispatch origin for this call must be _Signed_ and must be a "rescuer"
					///who has successfully completed the account recovery process: collected
					///`threshold` or more vouches, waited `delay_period` blocks since initiation.
					///
					///Parameters:
					/// - `account`: The lost account that you want to claim has been successfully
					///   recovered by
					///  you.
					claim_recovery {
						account: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 6)]
					///As the controller of a recoverable account, close an active recovery
					///process for your account.
					///
					///Payment: By calling this function, the recoverable account will receive
					///the recovery deposit `RecoveryDeposit` placed by the rescuer.
					///
					///The dispatch origin for this call must be _Signed_ and must be a
					///recoverable account with an active recovery process for it.
					///
					///Parameters:
					/// - `rescuer`: The account trying to rescue this recoverable account.
					close_recovery {
						rescuer: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 7)]
					///Remove the recovery process for your account. Recovered accounts are still
					/// accessible.
					///
					///NOTE: The user must make sure to call `close_recovery` on all active
					///recovery attempts before calling this function else it will fail.
					///
					///Payment: By calling this function the recoverable account will unreserve
					///their recovery configuration deposit.
					///(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)
					///
					///The dispatch origin for this call must be _Signed_ and must be a
					///recoverable account (i.e. has a recovery configuration).
					remove_recovery,
					#[codec(index = 8)]
					///Cancel the ability to use `as_recovered` for `account`.
					///
					///The dispatch origin for this call must be _Signed_ and registered to
					///be able to make calls on behalf of the recovered account.
					///
					///Parameters:
					/// - `account`: The recovered account you are able to call on-behalf-of.
					cancel_recovered {
						account: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///User is not allowed to make a call on behalf of this account
					NotAllowed,
					#[codec(index = 1)]
					///Threshold must be greater than zero
					ZeroThreshold,
					#[codec(index = 2)]
					///Friends list must be greater than zero and threshold
					NotEnoughFriends,
					#[codec(index = 3)]
					///Friends list must be less than max friends
					MaxFriends,
					#[codec(index = 4)]
					///Friends list must be sorted and free of duplicates
					NotSorted,
					#[codec(index = 5)]
					///This account is not set up for recovery
					NotRecoverable,
					#[codec(index = 6)]
					///This account is already set up for recovery
					AlreadyRecoverable,
					#[codec(index = 7)]
					///A recovery process has already started for this account
					AlreadyStarted,
					#[codec(index = 8)]
					///A recovery process has not started for this rescuer
					NotStarted,
					#[codec(index = 9)]
					///This account is not a friend who can vouch
					NotFriend,
					#[codec(index = 10)]
					///The friend must wait until the delay period to vouch for this recovery
					DelayPeriod,
					#[codec(index = 11)]
					///This user has already vouched for this recovery
					AlreadyVouched,
					#[codec(index = 12)]
					///The threshold for recovering this account has not been met
					Threshold,
					#[codec(index = 13)]
					///There are still active recovery attempts that need to be closed
					StillActive,
					#[codec(index = 14)]
					///This account is already set up for recovery
					AlreadyProxy,
					#[codec(index = 15)]
					///Some internal state is broken.
					BadState,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Events type.
				pub enum Event {
					#[codec(index = 0)]
					///A recovery process has been set up for an account.
					RecoveryCreated { account: ::subxt::utils::AccountId32 },
					#[codec(index = 1)]
					///A recovery process has been initiated for lost account by rescuer account.
					RecoveryInitiated {
						lost_account: ::subxt::utils::AccountId32,
						rescuer_account: ::subxt::utils::AccountId32,
					},
					#[codec(index = 2)]
					///A recovery process for lost account by rescuer account has been vouched for
					/// by sender.
					RecoveryVouched {
						lost_account: ::subxt::utils::AccountId32,
						rescuer_account: ::subxt::utils::AccountId32,
						sender: ::subxt::utils::AccountId32,
					},
					#[codec(index = 3)]
					///A recovery process for lost account by rescuer account has been closed.
					RecoveryClosed {
						lost_account: ::subxt::utils::AccountId32,
						rescuer_account: ::subxt::utils::AccountId32,
					},
					#[codec(index = 4)]
					///Lost account has been successfully recovered by rescuer account.
					AccountRecovered {
						lost_account: ::subxt::utils::AccountId32,
						rescuer_account: ::subxt::utils::AccountId32,
					},
					#[codec(index = 5)]
					///A recovery process has been removed for an account.
					RecoveryRemoved { lost_account: ::subxt::utils::AccountId32 },
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ActiveRecovery<_0, _1, _2> {
				pub created: _0,
				pub deposit: _1,
				pub friends: _2,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RecoveryConfig<_0, _1, _2> {
				pub delay_period: _0,
				pub deposit: _1,
				pub friends: _2,
				pub threshold: ::core::primitive::u16,
			}
		}
		pub mod pallet_referenda {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Propose a referendum on a privileged action.
					///
					/// - `origin`: must be `SubmitOrigin` and the account must have
					///   `SubmissionDeposit` funds
					///  available.
					/// - `proposal_origin`: The origin from which the proposal should be executed.
					/// - `proposal`: The proposal.
					/// - `enactment_moment`: The moment that the proposal should be enacted.
					///
					///Emits `Submitted`.
					submit {
						proposal_origin:
							::std::boxed::Box<runtime_types::babe_runtime::OriginCaller>,
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::babe_runtime::RuntimeCall,
						>,
						enactment_moment:
							runtime_types::frame_support::traits::schedule::DispatchTime<
								::core::primitive::u32,
							>,
					},
					#[codec(index = 1)]
					///Post the Decision Deposit for a referendum.
					///
					/// - `origin`: must be `Signed` and the account must have funds available for
					///   the
					///  referendum's track's Decision Deposit.
					/// - `index`: The index of the submitted referendum whose Decision Deposit is
					///   yet to be
					///  posted.
					///
					///Emits `DecisionDepositPlaced`.
					place_decision_deposit { index: ::core::primitive::u32 },
					#[codec(index = 2)]
					///Refund the Decision Deposit for a closed referendum back to the depositor.
					///
					/// - `origin`: must be `Signed` or `Root`.
					/// - `index`: The index of a closed referendum whose Decision Deposit has not
					///   yet been
					///  refunded.
					///
					///Emits `DecisionDepositRefunded`.
					refund_decision_deposit { index: ::core::primitive::u32 },
					#[codec(index = 3)]
					///Cancel an ongoing referendum.
					///
					/// - `origin`: must be the `CancelOrigin`.
					/// - `index`: The index of the referendum to be cancelled.
					///
					///Emits `Cancelled`.
					cancel { index: ::core::primitive::u32 },
					#[codec(index = 4)]
					///Cancel an ongoing referendum and slash the deposits.
					///
					/// - `origin`: must be the `KillOrigin`.
					/// - `index`: The index of the referendum to be cancelled.
					///
					///Emits `Killed` and `DepositSlashed`.
					kill { index: ::core::primitive::u32 },
					#[codec(index = 5)]
					///Advance a referendum onto its next logical state. Only used internally.
					///
					/// - `origin`: must be `Root`.
					/// - `index`: the referendum to be advanced.
					nudge_referendum { index: ::core::primitive::u32 },
					#[codec(index = 6)]
					///Advance a track onto its next logical state. Only used internally.
					///
					/// - `origin`: must be `Root`.
					/// - `track`: the track to be advanced.
					///
					///Action item for when there is now one fewer referendum in the deciding
					/// phase and the `DecidingCount` is not yet updated. This means that we should
					/// either:
					/// - begin deciding another referendum (and leave `DecidingCount` alone); or
					/// - decrement `DecidingCount`.
					one_fewer_deciding { track: ::core::primitive::u16 },
					#[codec(index = 7)]
					///Refund the Submission Deposit for a closed referendum back to the
					/// depositor.
					///
					/// - `origin`: must be `Signed` or `Root`.
					/// - `index`: The index of a closed referendum whose Submission Deposit has
					///   not yet been
					///  refunded.
					///
					///Emits `SubmissionDepositRefunded`.
					refund_submission_deposit { index: ::core::primitive::u32 },
					#[codec(index = 8)]
					///Set or clear metadata of a referendum.
					///
					///Parameters:
					/// - `origin`: Must be `Signed` by a creator of a referendum or by anyone to
					///   clear a
					///  metadata of a finished referendum.
					/// - `index`:  The index of a referendum to set or clear metadata for.
					/// - `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a
					///   metadata.
					set_metadata {
						index: ::core::primitive::u32,
						maybe_hash: ::core::option::Option<::subxt::utils::H256>,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Referendum is not ongoing.
					NotOngoing,
					#[codec(index = 1)]
					///Referendum's decision deposit is already paid.
					HasDeposit,
					#[codec(index = 2)]
					///The track identifier given was invalid.
					BadTrack,
					#[codec(index = 3)]
					///There are already a full complement of referenda in progress for this
					/// track.
					Full,
					#[codec(index = 4)]
					///The queue of the track is empty.
					QueueEmpty,
					#[codec(index = 5)]
					///The referendum index provided is invalid in this context.
					BadReferendum,
					#[codec(index = 6)]
					///There was nothing to do in the advancement.
					NothingToDo,
					#[codec(index = 7)]
					///No track exists for the proposal origin.
					NoTrack,
					#[codec(index = 8)]
					///Any deposit cannot be refunded until after the decision is over.
					Unfinished,
					#[codec(index = 9)]
					///The deposit refunder is not the depositor.
					NoPermission,
					#[codec(index = 10)]
					///The deposit cannot be refunded since none was made.
					NoDeposit,
					#[codec(index = 11)]
					///The referendum status is invalid for this operation.
					BadStatus,
					#[codec(index = 12)]
					///The preimage does not exist.
					PreimageNotExist,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A referendum has been submitted.
					Submitted {
						index: ::core::primitive::u32,
						track: ::core::primitive::u16,
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::babe_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 1)]
					///The decision deposit has been placed.
					DecisionDepositPlaced {
						index: ::core::primitive::u32,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					///The decision deposit has been refunded.
					DecisionDepositRefunded {
						index: ::core::primitive::u32,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					///A deposit has been slashaed.
					DepositSlashed {
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					///A referendum has moved into the deciding phase.
					DecisionStarted {
						index: ::core::primitive::u32,
						track: ::core::primitive::u16,
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::babe_runtime::RuntimeCall,
						>,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
					#[codec(index = 5)]
					ConfirmStarted { index: ::core::primitive::u32 },
					#[codec(index = 6)]
					ConfirmAborted { index: ::core::primitive::u32 },
					#[codec(index = 7)]
					///A referendum has ended its confirmation phase and is ready for approval.
					Confirmed {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
					#[codec(index = 8)]
					///A referendum has been approved and its proposal has been scheduled.
					Approved { index: ::core::primitive::u32 },
					#[codec(index = 9)]
					///A proposal has been rejected by referendum.
					Rejected {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
					#[codec(index = 10)]
					///A referendum has been timed out without being decided.
					TimedOut {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
					#[codec(index = 11)]
					///A referendum has been cancelled.
					Cancelled {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
					#[codec(index = 12)]
					///A referendum has been killed.
					Killed {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_ranked_collective::Tally,
					},
					#[codec(index = 13)]
					///The submission deposit has been refunded.
					SubmissionDepositRefunded {
						index: ::core::primitive::u32,
						who: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 14)]
					///Metadata for a referendum has been set.
					MetadataSet { index: ::core::primitive::u32, hash: ::subxt::utils::H256 },
					#[codec(index = 15)]
					///Metadata for a referendum has been cleared.
					MetadataCleared { index: ::core::primitive::u32, hash: ::subxt::utils::H256 },
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Curve {
					#[codec(index = 0)]
					LinearDecreasing {
						length: runtime_types::sp_arithmetic::per_things::Perbill,
						floor: runtime_types::sp_arithmetic::per_things::Perbill,
						ceil: runtime_types::sp_arithmetic::per_things::Perbill,
					},
					#[codec(index = 1)]
					SteppedDecreasing {
						begin: runtime_types::sp_arithmetic::per_things::Perbill,
						end: runtime_types::sp_arithmetic::per_things::Perbill,
						step: runtime_types::sp_arithmetic::per_things::Perbill,
						period: runtime_types::sp_arithmetic::per_things::Perbill,
					},
					#[codec(index = 2)]
					Reciprocal {
						factor: runtime_types::sp_arithmetic::fixed_point::FixedI64,
						x_offset: runtime_types::sp_arithmetic::fixed_point::FixedI64,
						y_offset: runtime_types::sp_arithmetic::fixed_point::FixedI64,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct DecidingStatus<_0> {
					pub since: _0,
					pub confirming: ::core::option::Option<_0>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Deposit<_0, _1> {
					pub who: _0,
					pub amount: _1,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum ReferendumInfo<_0, _1, _2, _3, _4, _5, _6, _7> {
					#[codec(index = 0)]
					Ongoing(
						runtime_types::pallet_referenda::types::ReferendumStatus<
							_0,
							_1,
							_2,
							_3,
							_4,
							_5,
							_6,
							_7,
						>,
					),
					#[codec(index = 1)]
					Approved(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 2)]
					Rejected(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 3)]
					Cancelled(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 4)]
					TimedOut(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 5)]
					Killed(_2),
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ReferendumStatus<_0, _1, _2, _3, _4, _5, _6, _7> {
					pub track: _0,
					pub origin: _1,
					pub proposal: _3,
					pub enactment: runtime_types::frame_support::traits::schedule::DispatchTime<_2>,
					pub submitted: _2,
					pub submission_deposit: runtime_types::pallet_referenda::types::Deposit<_6, _4>,
					pub decision_deposit: ::core::option::Option<
						runtime_types::pallet_referenda::types::Deposit<_6, _4>,
					>,
					pub deciding: ::core::option::Option<
						runtime_types::pallet_referenda::types::DecidingStatus<_2>,
					>,
					pub tally: _5,
					pub in_queue: ::core::primitive::bool,
					pub alarm: ::core::option::Option<(_2, _7)>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct TrackInfo<_0, _1> {
					pub name: ::std::string::String,
					pub max_deciding: _1,
					pub decision_deposit: _0,
					pub prepare_period: _1,
					pub decision_period: _1,
					pub confirm_period: _1,
					pub min_enactment_period: _1,
					pub min_approval: runtime_types::pallet_referenda::types::Curve,
					pub min_support: runtime_types::pallet_referenda::types::Curve,
				}
			}
		}
		pub mod pallet_remark {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Index and store data off chain.
					store { remark: ::std::vec::Vec<::core::primitive::u8> },
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Attempting to store empty data.
					Empty,
					#[codec(index = 1)]
					///Attempted to call `store` outside of block execution.
					BadContext,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///Stored data off chain.
					Stored {
						sender: ::subxt::utils::AccountId32,
						content_hash: ::subxt::utils::H256,
					},
				}
			}
		}
		pub mod pallet_root_testing {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///A dispatch that will fill the block weight up to the given ratio.
					fill_block { ratio: runtime_types::sp_arithmetic::per_things::Perbill },
				}
			}
		}
		pub mod pallet_salary {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Start the first payout cycle.
					///
					/// - `origin`: A `Signed` origin of an account.
					init,
					#[codec(index = 1)]
					///Move to next payout cycle, assuming that the present block is now within
					/// that cycle.
					///
					/// - `origin`: A `Signed` origin of an account.
					bump,
					#[codec(index = 2)]
					///Induct oneself into the payout system.
					induct,
					#[codec(index = 3)]
					///Register for a payout.
					///
					///Will only work if we are in the first `RegistrationPeriod` blocks since the
					/// cycle started.
					///
					/// - `origin`: A `Signed` origin of an account which is a member of `Members`.
					register,
					#[codec(index = 4)]
					///Request a payout.
					///
					///Will only work if we are after the first `RegistrationPeriod` blocks since
					/// the cycle started but by no more than `PayoutPeriod` blocks.
					///
					/// - `origin`: A `Signed` origin of an account which is a member of `Members`.
					payout,
					#[codec(index = 5)]
					///Request a payout to a secondary account.
					///
					///Will only work if we are after the first `RegistrationPeriod` blocks since
					/// the cycle started but by no more than `PayoutPeriod` blocks.
					///
					/// - `origin`: A `Signed` origin of an account which is a member of `Members`.
					/// - `beneficiary`: The account to receive payment.
					payout_other { beneficiary: ::subxt::utils::AccountId32 },
					#[codec(index = 6)]
					///Update a payment's status; if it failed, alter the state so the payment can
					/// be retried.
					///
					///This must be called within the same cycle as the failed payment. It will
					/// fail with `Event::NotCurrent` otherwise.
					///
					/// - `origin`: A `Signed` origin of an account which is a member of `Members`
					///   who has
					///  received a payment this cycle.
					check_payment,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///The salary system has already been started.
					AlreadyStarted,
					#[codec(index = 1)]
					///The account is not a ranked member.
					NotMember,
					#[codec(index = 2)]
					///The account is already inducted.
					AlreadyInducted,
					#[codec(index = 3)]
					NotInducted,
					#[codec(index = 4)]
					///The member does not have a current valid claim.
					NoClaim,
					#[codec(index = 5)]
					///The member's claim is zero.
					ClaimZero,
					#[codec(index = 6)]
					///Current cycle's registration period is over.
					TooLate,
					#[codec(index = 7)]
					///Current cycle's payment period is not yet begun.
					TooEarly,
					#[codec(index = 8)]
					///Cycle is not yet over.
					NotYet,
					#[codec(index = 9)]
					///The payout cycles have not yet started.
					NotStarted,
					#[codec(index = 10)]
					///There is no budget left for the payout.
					Bankrupt,
					#[codec(index = 11)]
					///There was some issue with the mechanism of payment.
					PayError,
					#[codec(index = 12)]
					///The payment has neither failed nor succeeded yet.
					Inconclusive,
					#[codec(index = 13)]
					///The cycle is after that in which the payment was made.
					NotCurrent,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A member is inducted into the payroll.
					Inducted { who: ::subxt::utils::AccountId32 },
					#[codec(index = 1)]
					///A member registered for a payout.
					Registered { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 2)]
					///A payment happened.
					Paid {
						who: ::subxt::utils::AccountId32,
						beneficiary: ::subxt::utils::AccountId32,
						amount: ::core::primitive::u128,
						id: (),
					},
					#[codec(index = 3)]
					///The next cycle begins.
					CycleStarted { index: ::core::primitive::u32 },
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum ClaimState<_0, _1> {
				#[codec(index = 0)]
				Nothing,
				#[codec(index = 1)]
				Registered(_0),
				#[codec(index = 2)]
				Attempted { registered: ::core::option::Option<_0>, id: _1, amount: _0 },
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ClaimantStatus<_0, _1, _2> {
				pub last_active: _0,
				pub status: runtime_types::pallet_salary::ClaimState<_1, _2>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct StatusType<_0, _1, _2> {
				pub cycle_index: _0,
				pub cycle_start: _0,
				pub budget: _2,
				pub total_registrations: _2,
				pub total_unregistered_paid: _2,
				#[codec(skip)]
				pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
			}
		}
		pub mod pallet_scheduler {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Anonymously schedule a task.
					schedule {
						when: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
					},
					#[codec(index = 1)]
					///Cancel an anonymously scheduled task.
					cancel { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 2)]
					///Schedule a named task.
					schedule_named {
						id: [::core::primitive::u8; 32usize],
						when: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
					},
					#[codec(index = 3)]
					///Cancel a named scheduled task.
					cancel_named { id: [::core::primitive::u8; 32usize] },
					#[codec(index = 4)]
					///Anonymously schedule a task after a delay.
					schedule_after {
						after: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
					},
					#[codec(index = 5)]
					///Schedule a named task after a delay.
					schedule_named_after {
						id: [::core::primitive::u8; 32usize],
						after: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Failed to schedule a call
					FailedToSchedule,
					#[codec(index = 1)]
					///Cannot find the scheduled call.
					NotFound,
					#[codec(index = 2)]
					///Given target block number is in the past.
					TargetBlockNumberInPast,
					#[codec(index = 3)]
					///Reschedule failed because it does not change scheduled time.
					RescheduleNoChange,
					#[codec(index = 4)]
					///Attempt to use a non-named function on a named task.
					Named,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Events type.
				pub enum Event {
					#[codec(index = 0)]
					///Scheduled some task.
					Scheduled { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 1)]
					///Canceled some task.
					Canceled { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 2)]
					///Dispatched some task.
					Dispatched {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 3)]
					///The call for the provided hash was not found so the task has been aborted.
					CallUnavailable {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
					#[codec(index = 4)]
					///The given task was unable to be renewed since the agenda is full at that
					/// block.
					PeriodicFailed {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
					#[codec(index = 5)]
					///The given task can never be executed since it is overweight.
					PermanentlyOverweight {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Scheduled<_0, _1, _2, _3, _4> {
				pub maybe_id: ::core::option::Option<_0>,
				pub priority: ::core::primitive::u8,
				pub call: _1,
				pub maybe_periodic: ::core::option::Option<(_2, _2)>,
				pub origin: _3,
				#[codec(skip)]
				pub __subxt_unused_type_params: ::core::marker::PhantomData<_4>,
			}
		}
		pub mod pallet_session {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Sets the session key(s) of the function caller to `keys`.
					///Allows an account to set its session key prior to becoming a validator.
					///This doesn't take effect until the next session.
					///
					///The dispatch origin of this function must be signed.
					///
					///## Complexity
					/// - `O(1)`. Actual cost depends on the number of length of
					///   `T::Keys::key_ids()` which is
					///  fixed.
					set_keys {
						keys: runtime_types::babe_runtime::SessionKeys,
						proof: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					///Removes any session key(s) of the function caller.
					///
					///This doesn't take effect until the next session.
					///
					///The dispatch origin of this function must be Signed and the account must be
					/// either be convertible to a validator ID using the chain's typical
					/// addressing system (this usually means being a controller account) or
					/// directly convertible into a validator ID (which usually means being a stash
					/// account).
					///
					///## Complexity
					/// - `O(1)` in number of key types. Actual cost depends on the number of
					///   length of
					///  `T::Keys::key_ids()` which is fixed.
					purge_keys,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Error for the session pallet.
				pub enum Error {
					#[codec(index = 0)]
					///Invalid ownership proof.
					InvalidProof,
					#[codec(index = 1)]
					///No associated validator ID for account.
					NoAssociatedValidatorId,
					#[codec(index = 2)]
					///Registered duplicate key.
					DuplicatedKey,
					#[codec(index = 3)]
					///No keys are associated with this account.
					NoKeys,
					#[codec(index = 4)]
					///Key setting account is not live, so it's impossible to associate keys.
					NoAccount,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///New session has happened. Note that the argument is the session index, not
					/// the block number as the type might suggest.
					NewSession { session_index: ::core::primitive::u32 },
				}
			}
		}
		pub mod pallet_society {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///A user outside of the society can make a bid for entry.
					///
					///Payment: `CandidateDeposit` will be reserved for making a bid. It is
					/// returned when the bid becomes a member, or if the bid calls `unbid`.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					///Parameters:
					/// - `value`: A one time payment the bid would like to receive when joining
					///   the society.
					///
					///## Complexity
					/// - O(M + B + C + logM + logB + X)
					/// 	  - B (len of bids)
					///  - C (len of candidates)
					///  - M (len of members)
					///  - X (balance reserve)
					bid { value: ::core::primitive::u128 },
					#[codec(index = 1)]
					///A bidder can remove their bid for entry into society.
					///By doing so, they will have their candidate deposit returned or
					///they will unvouch their voucher.
					///
					///Payment: The bid deposit is unreserved if the user made a bid.
					///
					///The dispatch origin for this call must be _Signed_ and a bidder.
					///
					///Parameters:
					/// - `pos`: Position in the `Bids` vector of the bid who wants to unbid.
					///
					///## Complexity
					/// - O(B + X)
					///  - B (len of bids)
					///  - X (balance unreserve)
					unbid { pos: ::core::primitive::u32 },
					#[codec(index = 2)]
					///As a member, vouch for someone to join society by placing a bid on their
					/// behalf.
					///
					///There is no deposit required to vouch for a new bid, but a member can only
					/// vouch for one bid at a time. If the bid becomes a suspended candidate and
					/// ultimately rejected by the suspension judgement origin, the member will be
					/// banned from vouching again.
					///
					///As a vouching member, you can claim a tip if the candidate is accepted.
					/// This tip will be paid as a portion of the reward the member will receive
					/// for joining the society.
					///
					///The dispatch origin for this call must be _Signed_ and a member.
					///
					///Parameters:
					/// - `who`: The user who you would like to vouch for.
					/// - `value`: The total reward to be paid between you and the candidate if
					///   they become
					///a member in the society.
					/// - `tip`: Your cut of the total `value` payout when the candidate is
					///   inducted into
					///the society. Tips larger than `value` will be saturated upon payout.
					///
					///## Complexity
					/// - O(M + B + C + logM + logB + X)
					///  - B (len of bids)
					///  - C (len of candidates)
					///  - M (len of members)
					///  - X (balance reserve)
					vouch {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						value: ::core::primitive::u128,
						tip: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					///As a vouching member, unvouch a bid. This only works while vouched user is
					///only a bidder (and not a candidate).
					///
					///The dispatch origin for this call must be _Signed_ and a vouching member.
					///
					///Parameters:
					/// - `pos`: Position in the `Bids` vector of the bid who should be unvouched.
					///
					///## Complexity
					/// - O(B)
					///  - B (len of bids)
					unvouch { pos: ::core::primitive::u32 },
					#[codec(index = 4)]
					///As a member, vote on a candidate.
					///
					///The dispatch origin for this call must be _Signed_ and a member.
					///
					///Parameters:
					/// - `candidate`: The candidate that the member would like to bid on.
					/// - `approve`: A boolean which says if the candidate should be approved
					///   (`true`) or
					///  rejected (`false`).
					///
					///## Complexity
					/// - O(M + logM + C)
					///  - C (len of candidates)
					///  - M (len of members)
					vote {
						candidate: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						approve: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					///As a member, vote on the defender.
					///
					///The dispatch origin for this call must be _Signed_ and a member.
					///
					///Parameters:
					/// - `approve`: A boolean which says if the candidate should be
					///approved (`true`) or rejected (`false`).
					///
					///## Complexity
					/// - O(M + logM)
					///  - M (len of members)
					defender_vote { approve: ::core::primitive::bool },
					#[codec(index = 6)]
					///Transfer the first matured payout for the sender and remove it from the
					/// records.
					///
					///NOTE: This extrinsic needs to be called multiple times to claim multiple
					/// matured payouts.
					///
					///Payment: The member will receive a payment equal to their first matured
					///payout to their free balance.
					///
					///The dispatch origin for this call must be _Signed_ and a member with
					///payouts remaining.
					///
					///## Complexity
					/// - O(M + logM + P + X)
					///  - M (len of members)
					///  - P (number of payouts for a particular member)
					///  - X (currency transfer call)
					payout,
					#[codec(index = 7)]
					///Found the society.
					///
					///This is done as a discrete action in order to allow for the
					///pallet to be included into a running chain and can only be done once.
					///
					///The dispatch origin for this call must be from the _FounderSetOrigin_.
					///
					///Parameters:
					/// - `founder` - The first member and head of the newly founded society.
					/// - `max_members` - The initial max number of members for the society.
					/// - `rules` - The rules of this society concerning membership.
					///
					///## Complexity
					/// - O(1)
					found {
						founder: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						max_members: ::core::primitive::u32,
						rules: ::std::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 8)]
					///Annul the founding of the society.
					///
					///The dispatch origin for this call must be Signed, and the signing account
					/// must be both the `Founder` and the `Head`. This implies that it may only be
					/// done when there is one member.
					///
					///## Complexity
					/// - O(1)
					unfound,
					#[codec(index = 9)]
					///Allow suspension judgement origin to make judgement on a suspended member.
					///
					///If a suspended member is forgiven, we simply add them back as a member, not
					/// affecting any of the existing storage items for that member.
					///
					///If a suspended member is rejected, remove all associated storage items,
					/// including their payouts, and remove any vouched bids they currently have.
					///
					///The dispatch origin for this call must be from the
					/// _SuspensionJudgementOrigin_.
					///
					///Parameters:
					/// - `who` - The suspended member to be judged.
					/// - `forgive` - A boolean representing whether the suspension judgement
					///   origin forgives
					///  (`true`) or rejects (`false`) a suspended member.
					///
					///## Complexity
					/// - O(M + logM + B)
					///  - B (len of bids)
					///  - M (len of members)
					judge_suspended_member {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						forgive: ::core::primitive::bool,
					},
					#[codec(index = 10)]
					///Allow suspended judgement origin to make judgement on a suspended
					/// candidate.
					///
					///If the judgement is `Approve`, we add them to society as a member with the
					/// appropriate payment for joining society.
					///
					///If the judgement is `Reject`, we either slash the deposit of the bid,
					/// giving it back to the society treasury, or we ban the voucher from vouching
					/// again.
					///
					///If the judgement is `Rebid`, we put the candidate back in the bid pool and
					/// let them go through the induction process again.
					///
					///The dispatch origin for this call must be from the
					/// _SuspensionJudgementOrigin_.
					///
					///Parameters:
					/// - `who` - The suspended candidate to be judged.
					/// - `judgement` - `Approve`, `Reject`, or `Rebid`.
					///
					///## Complexity
					/// - O(M + logM + B + X)
					///  - B (len of bids)
					///  - M (len of members)
					///  - X (balance action)
					judge_suspended_candidate {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						judgement: runtime_types::pallet_society::Judgement,
					},
					#[codec(index = 11)]
					///Allows root origin to change the maximum number of members in society.
					///Max membership count must be greater than 1.
					///
					///The dispatch origin for this call must be from _ROOT_.
					///
					///Parameters:
					/// - `max` - The maximum number of members for the society.
					///
					///## Complexity
					/// - O(1)
					set_max_members { max: ::core::primitive::u32 },
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///An incorrect position was provided.
					BadPosition,
					#[codec(index = 1)]
					///User is not a member.
					NotMember,
					#[codec(index = 2)]
					///User is already a member.
					AlreadyMember,
					#[codec(index = 3)]
					///User is suspended.
					Suspended,
					#[codec(index = 4)]
					///User is not suspended.
					NotSuspended,
					#[codec(index = 5)]
					///Nothing to payout.
					NoPayout,
					#[codec(index = 6)]
					///Society already founded.
					AlreadyFounded,
					#[codec(index = 7)]
					///Not enough in pot to accept candidate.
					InsufficientPot,
					#[codec(index = 8)]
					///Member is already vouching or banned from vouching again.
					AlreadyVouching,
					#[codec(index = 9)]
					///Member is not vouching.
					NotVouching,
					#[codec(index = 10)]
					///Cannot remove the head of the chain.
					Head,
					#[codec(index = 11)]
					///Cannot remove the founder.
					Founder,
					#[codec(index = 12)]
					///User has already made a bid.
					AlreadyBid,
					#[codec(index = 13)]
					///User is already a candidate.
					AlreadyCandidate,
					#[codec(index = 14)]
					///User is not a candidate.
					NotCandidate,
					#[codec(index = 15)]
					///Too many members in the society.
					MaxMembers,
					#[codec(index = 16)]
					///The caller is not the founder.
					NotFounder,
					#[codec(index = 17)]
					///The caller is not the head.
					NotHead,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///The society is founded by the given identity.
					Founded { founder: ::subxt::utils::AccountId32 },
					#[codec(index = 1)]
					///A membership bid just happened. The given account is the candidate's ID and
					/// their offer is the second.
					Bid {
						candidate_id: ::subxt::utils::AccountId32,
						offer: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					///A membership bid just happened by vouching. The given account is the
					/// candidate's ID and their offer is the second. The vouching party is the
					/// third.
					Vouch {
						candidate_id: ::subxt::utils::AccountId32,
						offer: ::core::primitive::u128,
						vouching: ::subxt::utils::AccountId32,
					},
					#[codec(index = 3)]
					///A candidate was dropped (due to an excess of bids in the system).
					AutoUnbid { candidate: ::subxt::utils::AccountId32 },
					#[codec(index = 4)]
					///A candidate was dropped (by their request).
					Unbid { candidate: ::subxt::utils::AccountId32 },
					#[codec(index = 5)]
					///A candidate was dropped (by request of who vouched for them).
					Unvouch { candidate: ::subxt::utils::AccountId32 },
					#[codec(index = 6)]
					///A group of candidates have been inducted. The batch's primary is the first
					/// value, the batch in full is the second.
					Inducted {
						primary: ::subxt::utils::AccountId32,
						candidates: ::std::vec::Vec<::subxt::utils::AccountId32>,
					},
					#[codec(index = 7)]
					///A suspended member has been judged.
					SuspendedMemberJudgement {
						who: ::subxt::utils::AccountId32,
						judged: ::core::primitive::bool,
					},
					#[codec(index = 8)]
					///A candidate has been suspended
					CandidateSuspended { candidate: ::subxt::utils::AccountId32 },
					#[codec(index = 9)]
					///A member has been suspended
					MemberSuspended { member: ::subxt::utils::AccountId32 },
					#[codec(index = 10)]
					///A member has been challenged
					Challenged { member: ::subxt::utils::AccountId32 },
					#[codec(index = 11)]
					///A vote has been placed
					Vote {
						candidate: ::subxt::utils::AccountId32,
						voter: ::subxt::utils::AccountId32,
						vote: ::core::primitive::bool,
					},
					#[codec(index = 12)]
					///A vote has been placed for a defending member
					DefenderVote {
						voter: ::subxt::utils::AccountId32,
						vote: ::core::primitive::bool,
					},
					#[codec(index = 13)]
					///A new \[max\] member count has been set
					NewMaxMembers { max: ::core::primitive::u32 },
					#[codec(index = 14)]
					///Society is unfounded.
					Unfounded { founder: ::subxt::utils::AccountId32 },
					#[codec(index = 15)]
					///Some funds were deposited into the society account.
					Deposit { value: ::core::primitive::u128 },
					#[codec(index = 16)]
					///A group of members has been choosen as Skeptics
					SkepticsChosen { skeptics: ::std::vec::Vec<::subxt::utils::AccountId32> },
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Bid<_0, _1> {
				pub who: _0,
				pub kind: runtime_types::pallet_society::BidKind<_0, _1>,
				pub value: _1,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum BidKind<_0, _1> {
				#[codec(index = 0)]
				Deposit(_1),
				#[codec(index = 1)]
				Vouch(_0, _1),
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum Judgement {
				#[codec(index = 0)]
				Rebid,
				#[codec(index = 1)]
				Reject,
				#[codec(index = 2)]
				Approve,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum Vote {
				#[codec(index = 0)]
				Skeptic,
				#[codec(index = 1)]
				Reject,
				#[codec(index = 2)]
				Approve,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum VouchingStatus {
				#[codec(index = 0)]
				Vouching,
				#[codec(index = 1)]
				Banned,
			}
		}
		pub mod pallet_staking {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					///Contains one variant per dispatchable that can be called by an extrinsic.
					pub enum Call {
						#[codec(index = 0)]
						///Take the origin account as a stash and lock up `value` of its balance.
						/// `controller` will be the account that controls it.
						///
						///`value` must be more than the `minimum_balance` specified by
						/// `T::Currency`.
						///
						///The dispatch origin for this call must be _Signed_ by the stash
						/// account.
						///
						///Emits `Bonded`.
						///## Complexity
						/// - Independent of the arguments. Moderate complexity.
						/// - O(1).
						/// - Three extra DB entries.
						///
						///NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are
						/// _never_ cleaned unless the `origin` falls below _existential deposit_
						/// and gets removed as dust.
						bond {
							controller: ::subxt::utils::MultiAddress<
								::subxt::utils::AccountId32,
								::core::primitive::u32,
							>,
							#[codec(compact)]
							value: ::core::primitive::u128,
							payee: runtime_types::pallet_staking::RewardDestination<
								::subxt::utils::AccountId32,
							>,
						},
						#[codec(index = 1)]
						///Add some extra amount that have appeared in the stash `free_balance`
						/// into the balance up for staking.
						///
						///The dispatch origin for this call must be _Signed_ by the stash, not
						/// the controller.
						///
						///Use this if there are additional funds in your stash account that you
						/// wish to bond. Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond)
						/// this function does not impose any limitation on the amount that can be
						/// added.
						///
						///Emits `Bonded`.
						///
						///## Complexity
						/// - Independent of the arguments. Insignificant complexity.
						/// - O(1).
						bond_extra {
							#[codec(compact)]
							max_additional: ::core::primitive::u128,
						},
						#[codec(index = 2)]
						///Schedule a portion of the stash to be unlocked ready for transfer out
						/// after the bond period ends. If this leaves an amount actively bonded
						/// less than T::Currency::minimum_balance(), then it is increased to the
						/// full amount.
						///
						///The dispatch origin for this call must be _Signed_ by the controller,
						/// not the stash.
						///
						///Once the unlock period is done, you can call `withdraw_unbonded` to
						/// actually move the funds out of management ready for transfer.
						///
						///No more than a limited number of unlocking chunks (see
						/// `MaxUnlockingChunks`) can co-exists at the same time. If there are no
						/// unlocking chunks slots available [`Call::withdraw_unbonded`] is called
						/// to remove some of the chunks (if possible).
						///
						///If a user encounters the `InsufficientBond` error when calling this
						/// extrinsic, they should call `chill` first in order to free up their
						/// bonded funds.
						///
						///Emits `Unbonded`.
						///
						///See also [`Call::withdraw_unbonded`].
						unbond {
							#[codec(compact)]
							value: ::core::primitive::u128,
						},
						#[codec(index = 3)]
						///Remove any unlocked chunks from the `unlocking` queue from our
						/// management.
						///
						///This essentially frees up that balance to be used by the stash account
						/// to do whatever it wants.
						///
						///The dispatch origin for this call must be _Signed_ by the controller.
						///
						///Emits `Withdrawn`.
						///
						///See also [`Call::unbond`].
						///
						///## Complexity
						///O(S) where S is the number of slashing spans to remove
						///NOTE: Weight annotation is the kill scenario, we refund otherwise.
						withdraw_unbonded { num_slashing_spans: ::core::primitive::u32 },
						#[codec(index = 4)]
						///Declare the desire to validate for the origin controller.
						///
						///Effects will be felt at the beginning of the next era.
						///
						///The dispatch origin for this call must be _Signed_ by the controller,
						/// not the stash.
						validate { prefs: runtime_types::pallet_staking::ValidatorPrefs },
						#[codec(index = 5)]
						///Declare the desire to nominate `targets` for the origin controller.
						///
						///Effects will be felt at the beginning of the next era.
						///
						///The dispatch origin for this call must be _Signed_ by the controller,
						/// not the stash.
						///
						///## Complexity
						/// - The transaction's complexity is proportional to the size of `targets`
						///   (N)
						///which is capped at CompactAssignments::LIMIT (T::MaxNominations).
						/// - Both the reads and writes follow a similar pattern.
						nominate {
							targets: ::std::vec::Vec<
								::subxt::utils::MultiAddress<
									::subxt::utils::AccountId32,
									::core::primitive::u32,
								>,
							>,
						},
						#[codec(index = 6)]
						///Declare no desire to either validate or nominate.
						///
						///Effects will be felt at the beginning of the next era.
						///
						///The dispatch origin for this call must be _Signed_ by the controller,
						/// not the stash.
						///
						///## Complexity
						/// - Independent of the arguments. Insignificant complexity.
						/// - Contains one read.
						/// - Writes are limited to the `origin` account key.
						chill,
						#[codec(index = 7)]
						///(Re-)set the payment target for a controller.
						///
						///Effects will be felt instantly (as soon as this function is completed
						/// successfully).
						///
						///The dispatch origin for this call must be _Signed_ by the controller,
						/// not the stash.
						///
						///## Complexity
						/// - O(1)
						/// - Independent of the arguments. Insignificant complexity.
						/// - Contains a limited number of reads.
						/// - Writes are limited to the `origin` account key.
						///---------
						set_payee {
							payee: runtime_types::pallet_staking::RewardDestination<
								::subxt::utils::AccountId32,
							>,
						},
						#[codec(index = 8)]
						///(Re-)set the controller of a stash.
						///
						///Effects will be felt instantly (as soon as this function is completed
						/// successfully).
						///
						///The dispatch origin for this call must be _Signed_ by the stash, not
						/// the controller.
						///
						///## Complexity
						///O(1)
						/// - Independent of the arguments. Insignificant complexity.
						/// - Contains a limited number of reads.
						/// - Writes are limited to the `origin` account key.
						set_controller {
							controller: ::subxt::utils::MultiAddress<
								::subxt::utils::AccountId32,
								::core::primitive::u32,
							>,
						},
						#[codec(index = 9)]
						///Sets the ideal number of validators.
						///
						///The dispatch origin must be Root.
						///
						///## Complexity
						///O(1)
						set_validator_count {
							#[codec(compact)]
							new: ::core::primitive::u32,
						},
						#[codec(index = 10)]
						///Increments the ideal number of validators upto maximum of
						///`ElectionProviderBase::MaxWinners`.
						///
						///The dispatch origin must be Root.
						///
						///## Complexity
						///Same as [`Self::set_validator_count`].
						increase_validator_count {
							#[codec(compact)]
							additional: ::core::primitive::u32,
						},
						#[codec(index = 11)]
						///Scale up the ideal number of validators by a factor upto maximum of
						///`ElectionProviderBase::MaxWinners`.
						///
						///The dispatch origin must be Root.
						///
						///## Complexity
						///Same as [`Self::set_validator_count`].
						scale_validator_count {
							factor: runtime_types::sp_arithmetic::per_things::Percent,
						},
						#[codec(index = 12)]
						///Force there to be no new eras indefinitely.
						///
						///The dispatch origin must be Root.
						///
						///# Warning
						///
						///The election process starts multiple blocks before the end of the era.
						///Thus the election process may be ongoing when this is called. In this
						/// case the election will continue until the next era is triggered.
						///
						///## Complexity
						/// - No arguments.
						/// - Weight: O(1)
						force_no_eras,
						#[codec(index = 13)]
						///Force there to be a new era at the end of the next session. After this,
						/// it will be reset to normal (non-forced) behaviour.
						///
						///The dispatch origin must be Root.
						///
						///# Warning
						///
						///The election process starts multiple blocks before the end of the era.
						///If this is called just before a new era is triggered, the election
						/// process may not have enough blocks to get a result.
						///
						///## Complexity
						/// - No arguments.
						/// - Weight: O(1)
						force_new_era,
						#[codec(index = 14)]
						///Set the validators who cannot be slashed (if any).
						///
						///The dispatch origin must be Root.
						set_invulnerables {
							invulnerables: ::std::vec::Vec<::subxt::utils::AccountId32>,
						},
						#[codec(index = 15)]
						///Force a current staker to become completely unstaked, immediately.
						///
						///The dispatch origin must be Root.
						force_unstake {
							stash: ::subxt::utils::AccountId32,
							num_slashing_spans: ::core::primitive::u32,
						},
						#[codec(index = 16)]
						///Force there to be a new era at the end of sessions indefinitely.
						///
						///The dispatch origin must be Root.
						///
						///# Warning
						///
						///The election process starts multiple blocks before the end of the era.
						///If this is called just before a new era is triggered, the election
						/// process may not have enough blocks to get a result.
						force_new_era_always,
						#[codec(index = 17)]
						///Cancel enactment of a deferred slash.
						///
						///Can be called by the `T::AdminOrigin`.
						///
						///Parameters: era and indices of the slashes for that era to kill.
						cancel_deferred_slash {
							era: ::core::primitive::u32,
							slash_indices: ::std::vec::Vec<::core::primitive::u32>,
						},
						#[codec(index = 18)]
						///Pay out all the stakers behind a single validator for a single era.
						///
						/// - `validator_stash` is the stash account of the validator. Their
						///   nominators, up to
						///  `T::MaxNominatorRewardedPerValidator`, will also receive their
						/// rewards.
						/// - `era` may be any era between `[current_era - history_depth;
						///   current_era]`.
						///
						///The origin of this call must be _Signed_. Any account can call this
						/// function, even if it is not one of the stakers.
						///
						///## Complexity
						/// - At most O(MaxNominatorRewardedPerValidator).
						payout_stakers {
							validator_stash: ::subxt::utils::AccountId32,
							era: ::core::primitive::u32,
						},
						#[codec(index = 19)]
						///Rebond a portion of the stash scheduled to be unlocked.
						///
						///The dispatch origin must be signed by the controller.
						///
						///## Complexity
						/// - Time complexity: O(L), where L is unlocking chunks
						/// - Bounded by `MaxUnlockingChunks`.
						rebond {
							#[codec(compact)]
							value: ::core::primitive::u128,
						},
						#[codec(index = 20)]
						///Remove all data structures concerning a staker/stash once it is at a
						/// state where it can be considered `dust` in the staking system. The
						/// requirements are:
						///
						///1. the `total_balance` of the stash is below existential deposit.
						///2. or, the `ledger.total` of the stash is below existential deposit.
						///
						///The former can happen in cases like a slash; the latter when a fully
						/// unbonded account is still receiving staking rewards in
						/// `RewardDestination::Staked`.
						///
						///It can be called by anyone, as long as `stash` meets the above
						/// requirements.
						///
						///Refunds the transaction fees upon successful execution.
						reap_stash {
							stash: ::subxt::utils::AccountId32,
							num_slashing_spans: ::core::primitive::u32,
						},
						#[codec(index = 21)]
						///Remove the given nominations from the calling validator.
						///
						///Effects will be felt at the beginning of the next era.
						///
						///The dispatch origin for this call must be _Signed_ by the controller,
						/// not the stash.
						///
						/// - `who`: A list of nominator stash accounts who are nominating this
						///   validator which
						///  should no longer be nominating this validator.
						///
						///Note: Making this call only makes sense if you first set the validator
						/// preferences to block any further nominations.
						kick {
							who: ::std::vec::Vec<
								::subxt::utils::MultiAddress<
									::subxt::utils::AccountId32,
									::core::primitive::u32,
								>,
							>,
						},
						#[codec(index = 22)]
						///Update the various staking configurations .
						///
						/// * `min_nominator_bond`: The minimum active bond needed to be a
						///   nominator.
						/// * `min_validator_bond`: The minimum active bond needed to be a
						///   validator.
						/// * `max_nominator_count`: The max number of users who can be a nominator
						///   at once. When
						///  set to `None`, no limit is enforced.
						/// * `max_validator_count`: The max number of users who can be a validator
						///   at once. When
						///  set to `None`, no limit is enforced.
						/// * `chill_threshold`: The ratio of `max_nominator_count` or
						///   `max_validator_count` which
						///  should be filled in order for the `chill_other` transaction to work.
						/// * `min_commission`: The minimum amount of commission that each
						///   validators must maintain.
						///  This is checked only upon calling `validate`. Existing validators are
						/// not affected.
						///
						///RuntimeOrigin must be Root to call this function.
						///
						///NOTE: Existing nominators and validators will not be affected by this
						/// update. to kick people under the new limits, `chill_other` should be
						/// called.
						set_staking_configs {
							min_nominator_bond:
								runtime_types::pallet_staking::pallet::pallet::ConfigOp<
									::core::primitive::u128,
								>,
							min_validator_bond:
								runtime_types::pallet_staking::pallet::pallet::ConfigOp<
									::core::primitive::u128,
								>,
							max_nominator_count:
								runtime_types::pallet_staking::pallet::pallet::ConfigOp<
									::core::primitive::u32,
								>,
							max_validator_count:
								runtime_types::pallet_staking::pallet::pallet::ConfigOp<
									::core::primitive::u32,
								>,
							chill_threshold:
								runtime_types::pallet_staking::pallet::pallet::ConfigOp<
									runtime_types::sp_arithmetic::per_things::Percent,
								>,
							min_commission: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
								runtime_types::sp_arithmetic::per_things::Perbill,
							>,
						},
						#[codec(index = 23)]
						///Declare a `controller` to stop participating as either a validator or
						/// nominator.
						///
						///Effects will be felt at the beginning of the next era.
						///
						///The dispatch origin for this call must be _Signed_, but can be called
						/// by anyone.
						///
						///If the caller is the same as the controller being targeted, then no
						/// further checks are enforced, and this function behaves just like
						/// `chill`.
						///
						///If the caller is different than the controller being targeted, the
						/// following conditions must be met:
						///
						/// * `controller` must belong to a nominator who has become non-decodable,
						///
						///Or:
						///
						/// * A `ChillThreshold` must be set and checked which defines how close to
						///   the max
						///  nominators or validators we must reach before users can start chilling
						/// one-another.
						/// * A `MaxNominatorCount` and `MaxValidatorCount` must be set which is
						///   used to determine
						///  how close we are to the threshold.
						/// * A `MinNominatorBond` and `MinValidatorBond` must be set and checked,
						///   which determines
						///  if this is a person that should be chilled because they have not met
						/// the threshold  bond required.
						///
						///This can be helpful if bond requirements are updated, and we need to
						/// remove old users who do not satisfy these requirements.
						chill_other { controller: ::subxt::utils::AccountId32 },
						#[codec(index = 24)]
						///Force a validator to have at least the minimum commission. This will
						/// not affect a validator who already has a commission greater than or
						/// equal to the minimum. Any account can call this.
						force_apply_min_commission { validator_stash: ::subxt::utils::AccountId32 },
						#[codec(index = 25)]
						///Sets the minimum amount of commission that each validators must
						/// maintain.
						///
						///This call has lower privilege requirements than `set_staking_config`
						/// and can be called by the `T::AdminOrigin`. Root can always call this.
						set_min_commission {
							new: runtime_types::sp_arithmetic::per_things::Perbill,
						},
					}
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum ConfigOp<_0> {
						#[codec(index = 0)]
						Noop,
						#[codec(index = 1)]
						Set(_0),
						#[codec(index = 2)]
						Remove,
					}
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					/**
					Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
					of this pallet.
					*/
					pub enum Error {
						#[codec(index = 0)]
						///Not a controller account.
						NotController,
						#[codec(index = 1)]
						///Not a stash account.
						NotStash,
						#[codec(index = 2)]
						///Stash is already bonded.
						AlreadyBonded,
						#[codec(index = 3)]
						///Controller is already paired.
						AlreadyPaired,
						#[codec(index = 4)]
						///Targets cannot be empty.
						EmptyTargets,
						#[codec(index = 5)]
						///Duplicate index.
						DuplicateIndex,
						#[codec(index = 6)]
						///Slash record index out of bounds.
						InvalidSlashIndex,
						#[codec(index = 7)]
						///Cannot have a validator or nominator role, with value less than the
						/// minimum defined by governance (see `MinValidatorBond` and
						/// `MinNominatorBond`). If unbonding is the intention, `chill` first to
						/// remove one's role as validator/nominator.
						InsufficientBond,
						#[codec(index = 8)]
						///Can not schedule more unlock chunks.
						NoMoreChunks,
						#[codec(index = 9)]
						///Can not rebond without unlocking chunks.
						NoUnlockChunk,
						#[codec(index = 10)]
						///Attempting to target a stash that still has funds.
						FundedTarget,
						#[codec(index = 11)]
						///Invalid era to reward.
						InvalidEraToReward,
						#[codec(index = 12)]
						///Invalid number of nominations.
						InvalidNumberOfNominations,
						#[codec(index = 13)]
						///Items are not sorted and unique.
						NotSortedAndUnique,
						#[codec(index = 14)]
						///Rewards for this era have already been claimed for this validator.
						AlreadyClaimed,
						#[codec(index = 15)]
						///Incorrect previous history depth input provided.
						IncorrectHistoryDepth,
						#[codec(index = 16)]
						///Incorrect number of slashing spans provided.
						IncorrectSlashingSpans,
						#[codec(index = 17)]
						///Internal state has become somehow corrupted and the operation cannot
						/// continue.
						BadState,
						#[codec(index = 18)]
						///Too many nomination targets supplied.
						TooManyTargets,
						#[codec(index = 19)]
						///A nomination target was supplied that was blocked or otherwise not a
						/// validator.
						BadTarget,
						#[codec(index = 20)]
						///The user has enough bond and thus cannot be chilled forcefully by an
						/// external person.
						CannotChillOther,
						#[codec(index = 21)]
						///There are too many nominators in the system. Governance needs to adjust
						/// the staking settings to keep things safe for the runtime.
						TooManyNominators,
						#[codec(index = 22)]
						///There are too many validator candidates in the system. Governance needs
						/// to adjust the staking settings to keep things safe for the runtime.
						TooManyValidators,
						#[codec(index = 23)]
						///Commission is too low. Must be at least `MinCommission`.
						CommissionTooLow,
						#[codec(index = 24)]
						///Some bound is not met.
						BoundNotMet,
					}
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					/**
					The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
					by this pallet.
					*/
					pub enum Event {
						#[codec(index = 0)]
						///The era payout has been set; the first balance is the validator-payout;
						/// the second is the remainder from the maximum amount of reward.
						EraPaid {
							era_index: ::core::primitive::u32,
							validator_payout: ::core::primitive::u128,
							remainder: ::core::primitive::u128,
						},
						#[codec(index = 1)]
						///The nominator has been rewarded by this amount.
						Rewarded {
							stash: ::subxt::utils::AccountId32,
							amount: ::core::primitive::u128,
						},
						#[codec(index = 2)]
						///A staker (validator or nominator) has been slashed by the given amount.
						Slashed {
							staker: ::subxt::utils::AccountId32,
							amount: ::core::primitive::u128,
						},
						#[codec(index = 3)]
						///A slash for the given validator, for the given percentage of their
						/// stake, at the given era as been reported.
						SlashReported {
							validator: ::subxt::utils::AccountId32,
							fraction: runtime_types::sp_arithmetic::per_things::Perbill,
							slash_era: ::core::primitive::u32,
						},
						#[codec(index = 4)]
						///An old slashing report from a prior era was discarded because it could
						///not be processed.
						OldSlashingReportDiscarded { session_index: ::core::primitive::u32 },
						#[codec(index = 5)]
						///A new set of stakers was elected.
						StakersElected,
						#[codec(index = 6)]
						///An account has bonded this amount. \[stash, amount\]
						///
						///NOTE: This event is only emitted when funds are bonded via a
						/// dispatchable. Notably, it will not be emitted for staking rewards when
						/// they are added to stake.
						Bonded {
							stash: ::subxt::utils::AccountId32,
							amount: ::core::primitive::u128,
						},
						#[codec(index = 7)]
						///An account has unbonded this amount.
						Unbonded {
							stash: ::subxt::utils::AccountId32,
							amount: ::core::primitive::u128,
						},
						#[codec(index = 8)]
						///An account has called `withdraw_unbonded` and removed unbonding chunks
						/// worth `Balance` from the unlocking queue.
						Withdrawn {
							stash: ::subxt::utils::AccountId32,
							amount: ::core::primitive::u128,
						},
						#[codec(index = 9)]
						///A nominator has been kicked from a validator.
						Kicked {
							nominator: ::subxt::utils::AccountId32,
							stash: ::subxt::utils::AccountId32,
						},
						#[codec(index = 10)]
						///The election failed. No new era is planned.
						StakingElectionFailed,
						#[codec(index = 11)]
						///An account has stopped participating as either a validator or
						/// nominator.
						Chilled { stash: ::subxt::utils::AccountId32 },
						#[codec(index = 12)]
						///The stakers' rewards are getting paid.
						PayoutStarted {
							era_index: ::core::primitive::u32,
							validator_stash: ::subxt::utils::AccountId32,
						},
						#[codec(index = 13)]
						///A validator has set their preferences.
						ValidatorPrefsSet {
							stash: ::subxt::utils::AccountId32,
							prefs: runtime_types::pallet_staking::ValidatorPrefs,
						},
						#[codec(index = 14)]
						///A new force era mode was set.
						ForceEra { mode: runtime_types::pallet_staking::Forcing },
					}
				}
			}
			pub mod slashing {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct SlashingSpans {
					pub span_index: ::core::primitive::u32,
					pub last_start: ::core::primitive::u32,
					pub last_nonzero_slash: ::core::primitive::u32,
					pub prior: ::std::vec::Vec<::core::primitive::u32>,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct SpanRecord<_0> {
					pub slashed: _0,
					pub paid_out: _0,
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ActiveEraInfo {
				pub index: ::core::primitive::u32,
				pub start: ::core::option::Option<::core::primitive::u64>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct EraRewardPoints<_0> {
				pub total: ::core::primitive::u32,
				pub individual: ::subxt::utils::KeyedVec<_0, ::core::primitive::u32>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Exposure<_0, _1> {
				#[codec(compact)]
				pub total: _1,
				#[codec(compact)]
				pub own: _1,
				pub others:
					::std::vec::Vec<runtime_types::pallet_staking::IndividualExposure<_0, _1>>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum Forcing {
				#[codec(index = 0)]
				NotForcing,
				#[codec(index = 1)]
				ForceNew,
				#[codec(index = 2)]
				ForceNone,
				#[codec(index = 3)]
				ForceAlways,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct IndividualExposure<_0, _1> {
				pub who: _0,
				#[codec(compact)]
				pub value: _1,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Nominations {
				pub targets: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::subxt::utils::AccountId32,
				>,
				pub submitted_in: ::core::primitive::u32,
				pub suppressed: ::core::primitive::bool,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum RewardDestination<_0> {
				#[codec(index = 0)]
				Staked,
				#[codec(index = 1)]
				Stash,
				#[codec(index = 2)]
				Controller,
				#[codec(index = 3)]
				Account(_0),
				#[codec(index = 4)]
				None,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct StakingLedger {
				pub stash: ::subxt::utils::AccountId32,
				#[codec(compact)]
				pub total: ::core::primitive::u128,
				#[codec(compact)]
				pub active: ::core::primitive::u128,
				pub unlocking: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					runtime_types::pallet_staking::UnlockChunk<::core::primitive::u128>,
				>,
				pub claimed_rewards: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u32,
				>,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct UnappliedSlash<_0, _1> {
				pub validator: _0,
				pub own: _1,
				pub others: ::std::vec::Vec<(_0, _1)>,
				pub reporters: ::std::vec::Vec<_0>,
				pub payout: _1,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct UnlockChunk<_0> {
				#[codec(compact)]
				pub value: _0,
				#[codec(compact)]
				pub era: ::core::primitive::u32,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ValidatorPrefs {
				#[codec(compact)]
				pub commission: runtime_types::sp_arithmetic::per_things::Perbill,
				pub blocked: ::core::primitive::bool,
			}
		}
		pub mod pallet_state_trie_migration {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Control the automatic migration.
					///
					///The dispatch origin of this call must be [`Config::ControlOrigin`].
					control_auto_migration {
						maybe_config: ::core::option::Option<
							runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
						>,
					},
					#[codec(index = 1)]
					///Continue the migration for the given `limits`.
					///
					///The dispatch origin of this call can be any signed account.
					///
					///This transaction has NO MONETARY INCENTIVES. calling it will not reward
					/// anyone. Albeit, Upon successful execution, the transaction fee is returned.
					///
					///The (potentially over-estimated) of the byte length of all the data read
					/// must be provided for up-front fee-payment and weighing. In essence, the
					/// caller is guaranteeing that executing the current `MigrationTask` with the
					/// given `limits` will not exceed `real_size_upper` bytes of read data.
					///
					///The `witness_task` is merely a helper to prevent the caller from being
					/// slashed or generally trigger a migration that they do not intend. This
					/// parameter is just a message from caller, saying that they believed
					/// `witness_task` was the last state of the migration, and they only wish for
					/// their transaction to do anything, if this assumption holds. In case
					/// `witness_task` does not match, the transaction fails.
					///
					///Based on the documentation of [`MigrationTask::migrate_until_exhaustion`],
					/// the recommended way of doing this is to pass a `limit` that only bounds
					/// `count`, as the `size` limit can always be overwritten.
					continue_migrate {
						limits: runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
						real_size_upper: ::core::primitive::u32,
						witness_task:
							runtime_types::pallet_state_trie_migration::pallet::MigrationTask,
					},
					#[codec(index = 2)]
					///Migrate the list of top keys by iterating each of them one by one.
					///
					///This does not affect the global migration process tracker
					/// ([`MigrationProcess`]), and should only be used in case any keys are
					/// leftover due to a bug.
					migrate_custom_top {
						keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
						witness_size: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					///Migrate the list of child keys by iterating each of them one by one.
					///
					///All of the given child keys must be present under one `child_root`.
					///
					///This does not affect the global migration process tracker
					/// ([`MigrationProcess`]), and should only be used in case any keys are
					/// leftover due to a bug.
					migrate_custom_child {
						root: ::std::vec::Vec<::core::primitive::u8>,
						child_keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
						total_size: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					///Set the maximum limit of the signed migration.
					set_signed_max_limits {
						limits: runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
					},
					#[codec(index = 5)]
					///Forcefully set the progress the running migration.
					///
					///This is only useful in one case: the next key to migrate is too big to be
					/// migrated with a signed account, in a parachain context, and we simply want
					/// to skip it. A reasonable example of this would be `:code:`, which is both
					/// very expensive to migrate, and commonly used, so probably it is already
					/// migrated.
					///
					///In case you mess things up, you can also, in principle, use this to reset
					/// the migration process.
					force_set_progress {
						progress_top: runtime_types::pallet_state_trie_migration::pallet::Progress,
						progress_child:
							runtime_types::pallet_state_trie_migration::pallet::Progress,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Max signed limits not respected.
					MaxSignedLimits,
					#[codec(index = 1)]
					///A key was longer than the configured maximum.
					///
					///This means that the migration halted at the current [`Progress`] and
					///can be resumed with a larger [`crate::Config::MaxKeyLen`] value.
					///Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.
					///The value should only be increased to avoid a storage migration for the
					/// currently stored [`crate::Progress::LastKey`].
					KeyTooLong,
					#[codec(index = 2)]
					///submitter does not have enough funds.
					NotEnoughFunds,
					#[codec(index = 3)]
					///Bad witness data provided.
					BadWitness,
					#[codec(index = 4)]
					///Signed migration is not allowed because the maximum limit is not set yet.
					SignedMigrationNotAllowed,
					#[codec(index = 5)]
					///Bad child root provided.
					BadChildRoot,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Inner events of this pallet.
				pub enum Event {
					#[codec(index = 0)]
					///Given number of `(top, child)` keys were migrated respectively, with the
					/// given `compute`.
					Migrated {
						top: ::core::primitive::u32,
						child: ::core::primitive::u32,
						compute:
							runtime_types::pallet_state_trie_migration::pallet::MigrationCompute,
					},
					#[codec(index = 1)]
					///Some account got slashed by the given amount.
					Slashed { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
					#[codec(index = 2)]
					///The auto migration task finished.
					AutoMigrationFinished,
					#[codec(index = 3)]
					///Migration got halted due to an error or miss-configuration.
					Halted { error: runtime_types::pallet_state_trie_migration::pallet::Error },
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum MigrationCompute {
					#[codec(index = 0)]
					Signed,
					#[codec(index = 1)]
					Auto,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct MigrationLimits {
					pub size: ::core::primitive::u32,
					pub item: ::core::primitive::u32,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct MigrationTask {
					pub progress_top: runtime_types::pallet_state_trie_migration::pallet::Progress,
					pub progress_child:
						runtime_types::pallet_state_trie_migration::pallet::Progress,
					pub size: ::core::primitive::u32,
					pub top_items: ::core::primitive::u32,
					pub child_items: ::core::primitive::u32,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum Progress {
					#[codec(index = 0)]
					ToStart,
					#[codec(index = 1)]
					LastKey(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					),
					#[codec(index = 2)]
					Complete,
				}
			}
		}
		pub mod pallet_sudo {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Authenticates the sudo key and dispatches a function call with `Root`
					/// origin.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					///## Complexity
					/// - O(1).
					sudo { call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall> },
					#[codec(index = 1)]
					///Authenticates the sudo key and dispatches a function call with `Root`
					/// origin. This function does not check the weight of the call, and instead
					/// allows the Sudo user to specify the weight of the call.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					///## Complexity
					/// - O(1).
					sudo_unchecked_weight {
						call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
						weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 2)]
					///Authenticates the current sudo key and sets the given AccountId (`new`) as
					/// the new sudo key.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					///## Complexity
					/// - O(1).
					set_key {
						new: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 3)]
					///Authenticates the sudo key and dispatches a function call with `Signed`
					/// origin from a given account.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					///## Complexity
					/// - O(1).
					sudo_as {
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Error for the Sudo pallet
				pub enum Error {
					#[codec(index = 0)]
					///Sender must be the Sudo account
					RequireSudo,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A sudo just took place. \[result\]
					Sudid {
						sudo_result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 1)]
					///The \[sudoer\] just switched identity; the old key is supplied if one
					/// existed.
					KeyChanged { old_sudoer: ::core::option::Option<::subxt::utils::AccountId32> },
					#[codec(index = 2)]
					///A sudo just took place. \[result\]
					SudoAsDone {
						sudo_result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
				}
			}
		}
		pub mod pallet_timestamp {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Set the current time.
					///
					///This call should be invoked exactly once per block. It will panic at the
					/// finalization phase, if this call hasn't been invoked by that time.
					///
					///The timestamp should be greater than the previous one by the amount
					/// specified by `MinimumPeriod`.
					///
					///The dispatch origin for this call must be `Inherent`.
					///
					///## Complexity
					/// - `O(1)` (Note that implementations of `OnTimestampSet` must also be
					///   `O(1)`)
					/// - 1 storage read and 1 storage mutation (codec `O(1)`). (because of
					///   `DidUpdate::take` in
					///  `on_finalize`)
					/// - 1 event handler `on_timestamp_set`. Must be `O(1)`.
					set {
						#[codec(compact)]
						now: ::core::primitive::u64,
					},
				}
			}
		}
		pub mod pallet_tips {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Report something `reason` that deserves a tip and claim any eventual the
					/// finder's fee.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					///Payment: `TipReportDepositBase` will be reserved from the origin account,
					/// as well as `DataDepositPerByte` for each byte in `reason`.
					///
					/// - `reason`: The reason for, or the thing that deserves, the tip; generally
					///   this will be
					///  a UTF-8-encoded URL.
					/// - `who`: The account which should be credited for the tip.
					///
					///Emits `NewTip` if successful.
					///
					///## Complexity
					/// - `O(R)` where `R` length of `reason`.
					///  - encoding and hashing of 'reason'
					report_awesome {
						reason: ::std::vec::Vec<::core::primitive::u8>,
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					///Retract a prior tip-report from `report_awesome`, and cancel the process of
					/// tipping.
					///
					///If successful, the original deposit will be unreserved.
					///
					///The dispatch origin for this call must be _Signed_ and the tip identified
					/// by `hash` must have been reported by the signing account through
					/// `report_awesome` (and not through `tip_new`).
					///
					/// - `hash`: The identity of the open tip for which a tip value is declared.
					///   This is formed
					///  as the hash of the tuple of the original tip `reason` and the beneficiary
					/// account ID.
					///
					///Emits `TipRetracted` if successful.
					///
					///## Complexity
					/// - `O(1)`
					///  - Depends on the length of `T::Hash` which is fixed.
					retract_tip { hash: ::subxt::utils::H256 },
					#[codec(index = 2)]
					///Give a tip for something new; no finder's fee will be taken.
					///
					///The dispatch origin for this call must be _Signed_ and the signing account
					/// must be a member of the `Tippers` set.
					///
					/// - `reason`: The reason for, or the thing that deserves, the tip; generally
					///   this will be
					///  a UTF-8-encoded URL.
					/// - `who`: The account which should be credited for the tip.
					/// - `tip_value`: The amount of tip that the sender would like to give. The
					///   median tip
					///  value of active tippers will be given to the `who`.
					///
					///Emits `NewTip` if successful.
					///
					///## Complexity
					/// - `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.
					///  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper
					///    bound given by `ContainsLengthBound`. The actual cost depends on the
					///    implementation of `T::Tippers`.
					///  - `O(R)`: hashing and encoding of reason of length `R`
					tip_new {
						reason: ::std::vec::Vec<::core::primitive::u8>,
						who: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						tip_value: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					///Declare a tip value for an already-open tip.
					///
					///The dispatch origin for this call must be _Signed_ and the signing account
					/// must be a member of the `Tippers` set.
					///
					/// - `hash`: The identity of the open tip for which a tip value is declared.
					///   This is formed
					///  as the hash of the tuple of the hash of the original tip `reason` and the
					/// beneficiary  account ID.
					/// - `tip_value`: The amount of tip that the sender would like to give. The
					///   median tip
					///  value of active tippers will be given to the `who`.
					///
					///Emits `TipClosing` if the threshold of tippers has been reached and the
					/// countdown period has started.
					///
					///## Complexity
					/// - `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of
					///   length `T`, insert
					///  tip and check closing, `T` is charged as upper bound given by
					/// `ContainsLengthBound`.  The actual cost depends on the implementation of
					/// `T::Tippers`.
					///
					///  Actually weight could be lower as it depends on how many tips are in
					/// `OpenTip` but it  is weighted as if almost full i.e of length `T-1`.
					tip {
						hash: ::subxt::utils::H256,
						#[codec(compact)]
						tip_value: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					///Close and payout a tip.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					///The tip identified by `hash` must have finished its countdown period.
					///
					/// - `hash`: The identity of the open tip for which a tip value is declared.
					///   This is formed
					///  as the hash of the tuple of the original tip `reason` and the beneficiary
					/// account ID.
					///
					///## Complexity
					/// - : `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of
					///   length `T`. `T`
					///  is charged as upper bound given by `ContainsLengthBound`. The actual cost
					/// depends on  the implementation of `T::Tippers`.
					close_tip { hash: ::subxt::utils::H256 },
					#[codec(index = 5)]
					///Remove and slash an already-open tip.
					///
					///May only be called from `T::RejectOrigin`.
					///
					///As a result, the finder is slashed and the deposits are lost.
					///
					///Emits `TipSlashed` if successful.
					///
					///## Complexity
					/// - O(1).
					slash_tip { hash: ::subxt::utils::H256 },
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///The reason given is just too big.
					ReasonTooBig,
					#[codec(index = 1)]
					///The tip was already found/started.
					AlreadyKnown,
					#[codec(index = 2)]
					///The tip hash is unknown.
					UnknownTip,
					#[codec(index = 3)]
					///The account attempting to retract the tip is not the finder of the tip.
					NotFinder,
					#[codec(index = 4)]
					///The tip cannot be claimed/closed because there are not enough tippers yet.
					StillOpen,
					#[codec(index = 5)]
					///The tip cannot be claimed/closed because it's still in the countdown
					/// period.
					Premature,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A new tip suggestion has been opened.
					NewTip { tip_hash: ::subxt::utils::H256 },
					#[codec(index = 1)]
					///A tip suggestion has reached threshold and is closing.
					TipClosing { tip_hash: ::subxt::utils::H256 },
					#[codec(index = 2)]
					///A tip suggestion has been closed.
					TipClosed {
						tip_hash: ::subxt::utils::H256,
						who: ::subxt::utils::AccountId32,
						payout: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					///A tip suggestion has been retracted.
					TipRetracted { tip_hash: ::subxt::utils::H256 },
					#[codec(index = 4)]
					///A tip suggestion has been slashed.
					TipSlashed {
						tip_hash: ::subxt::utils::H256,
						finder: ::subxt::utils::AccountId32,
						deposit: ::core::primitive::u128,
					},
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct OpenTip<_0, _1, _2, _3> {
				pub reason: _3,
				pub who: _0,
				pub finder: _0,
				pub deposit: _1,
				pub closes: ::core::option::Option<_2>,
				pub tips: ::std::vec::Vec<(_0, _1)>,
				pub finders_fee: ::core::primitive::bool,
			}
		}
		pub mod pallet_transaction_payment {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A transaction fee `actual_fee`, of which `tip` was added to the minimum
					/// inclusion fee, has been paid by `who`.
					TransactionFeePaid {
						who: ::subxt::utils::AccountId32,
						actual_fee: ::core::primitive::u128,
						tip: ::core::primitive::u128,
					},
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum Releases {
				#[codec(index = 0)]
				V1Ancient,
				#[codec(index = 1)]
				V2,
			}
		}
		pub mod pallet_transaction_storage {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Index and store data off chain. Minimum data size is 1 bytes, maximum is
					///`MaxTransactionSize`. Data will be removed after `STORAGE_PERIOD` blocks,
					/// unless `renew` is called.
					///## Complexity
					/// - O(n*log(n)) of data size, as all data is pushed to an in-memory trie.
					store { data: ::std::vec::Vec<::core::primitive::u8> },
					#[codec(index = 1)]
					///Renew previously stored data. Parameters are the block number that contains
					///previous `store` or `renew` call and transaction index within that block.
					///Transaction index is emitted in the `Stored` or `Renewed` event.
					///Applies same fees as `store`.
					///## Complexity
					/// - O(1).
					renew { block: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 2)]
					///Check storage proof for block number `block_number() - StoragePeriod`.
					///If such block does not exist the proof is expected to be `None`.
					///## Complexity
					/// - Linear w.r.t the number of indexed transactions in the proved block for
					///   random
					///  probing.
					///There's a DB read for each transaction.
					check_proof {
						proof: runtime_types::sp_transaction_storage_proof::TransactionStorageProof,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Insufficient account balance.
					InsufficientFunds,
					#[codec(index = 1)]
					///Invalid configuration.
					NotConfigured,
					#[codec(index = 2)]
					///Renewed extrinsic is not found.
					RenewedNotFound,
					#[codec(index = 3)]
					///Attempting to store empty transaction
					EmptyTransaction,
					#[codec(index = 4)]
					///Proof was not expected in this block.
					UnexpectedProof,
					#[codec(index = 5)]
					///Proof failed verification.
					InvalidProof,
					#[codec(index = 6)]
					///Missing storage proof.
					MissingProof,
					#[codec(index = 7)]
					///Unable to verify proof becasue state data is missing.
					MissingStateData,
					#[codec(index = 8)]
					///Double proof check in the block.
					DoubleCheck,
					#[codec(index = 9)]
					///Storage proof was not checked in the block.
					ProofNotChecked,
					#[codec(index = 10)]
					///Transaction is too large.
					TransactionTooLarge,
					#[codec(index = 11)]
					///Too many transactions in the block.
					TooManyTransactions,
					#[codec(index = 12)]
					///Attempted to call `store` outside of block execution.
					BadContext,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///Stored data under specified index.
					Stored { index: ::core::primitive::u32 },
					#[codec(index = 1)]
					///Renewed data under specified index.
					Renewed { index: ::core::primitive::u32 },
					#[codec(index = 2)]
					///Storage proof was successfully checked.
					ProofChecked,
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TransactionInfo {
				pub chunk_root: ::subxt::utils::H256,
				pub content_hash: ::subxt::utils::H256,
				pub size: ::core::primitive::u32,
				pub block_chunks: ::core::primitive::u32,
			}
		}
		pub mod pallet_treasury {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Put forward a suggestion for spending. A deposit proportional to the value
					///is reserved and slashed if the proposal is rejected. It is returned once
					/// the proposal is awarded.
					///
					///## Complexity
					/// - O(1)
					propose_spend {
						#[codec(compact)]
						value: ::core::primitive::u128,
						beneficiary: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					///Reject a proposed spend. The original deposit will be slashed.
					///
					///May only be called from `T::RejectOrigin`.
					///
					///## Complexity
					/// - O(1)
					reject_proposal {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					///Approve a proposal. At a later time, the proposal will be allocated to the
					/// beneficiary and the original deposit will be returned.
					///
					///May only be called from `T::ApproveOrigin`.
					///
					///## Complexity
					/// - O(1).
					approve_proposal {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					///Propose and approve a spend of treasury funds.
					///
					/// - `origin`: Must be `SpendOrigin` with the `Success` value being at least
					///   `amount`.
					/// - `amount`: The amount to be transferred from the treasury to the
					///   `beneficiary`.
					/// - `beneficiary`: The destination account for the transfer.
					///
					///NOTE: For record-keeping purposes, the proposer is deemed to be equivalent
					/// to the beneficiary.
					spend {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						beneficiary: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 4)]
					///Force a previously approved proposal to be removed from the approval queue.
					///The original deposit will no longer be returned.
					///
					///May only be called from `T::RejectOrigin`.
					/// - `proposal_id`: The index of a proposal
					///
					///## Complexity
					/// - O(A) where `A` is the number of approvals
					///
					///Errors:
					/// - `ProposalNotApproved`: The `proposal_id` supplied was not found in the
					///   approval queue,
					///i.e., the proposal has not been approved. This could also mean the proposal
					/// does not exist altogether, thus there is no way it would have been approved
					/// in the first place.
					remove_approval {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Error for the treasury pallet.
				pub enum Error {
					#[codec(index = 0)]
					///Proposer's balance is too low.
					InsufficientProposersBalance,
					#[codec(index = 1)]
					///No proposal or bounty at that index.
					InvalidIndex,
					#[codec(index = 2)]
					///Too many approvals in the queue.
					TooManyApprovals,
					#[codec(index = 3)]
					///The spend origin is valid but the amount it is allowed to spend is lower
					/// than the amount to be spent.
					InsufficientPermission,
					#[codec(index = 4)]
					///Proposal has not been approved.
					ProposalNotApproved,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///New proposal.
					Proposed { proposal_index: ::core::primitive::u32 },
					#[codec(index = 1)]
					///We have ended a spend period and will now allocate funds.
					Spending { budget_remaining: ::core::primitive::u128 },
					#[codec(index = 2)]
					///Some funds have been allocated.
					Awarded {
						proposal_index: ::core::primitive::u32,
						award: ::core::primitive::u128,
						account: ::subxt::utils::AccountId32,
					},
					#[codec(index = 3)]
					///A proposal was rejected; funds were slashed.
					Rejected {
						proposal_index: ::core::primitive::u32,
						slashed: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					///Some of our funds have been burnt.
					Burnt { burnt_funds: ::core::primitive::u128 },
					#[codec(index = 5)]
					///Spending has finished; this is the amount that rolls over until next spend.
					Rollover { rollover_balance: ::core::primitive::u128 },
					#[codec(index = 6)]
					///Some funds have been deposited.
					Deposit { value: ::core::primitive::u128 },
					#[codec(index = 7)]
					///A new spend proposal has been approved.
					SpendApproved {
						proposal_index: ::core::primitive::u32,
						amount: ::core::primitive::u128,
						beneficiary: ::subxt::utils::AccountId32,
					},
					#[codec(index = 8)]
					///The inactive funds of the pallet have been updated.
					UpdatedInactive {
						reactivated: ::core::primitive::u128,
						deactivated: ::core::primitive::u128,
					},
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Proposal<_0, _1> {
				pub proposer: _0,
				pub value: _1,
				pub beneficiary: _0,
				pub bond: _1,
			}
		}
		pub mod pallet_uniques {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Issue a new collection of non-fungible items from a public origin.
					///
					///This new collection has no items initially and its owner is the origin.
					///
					///The origin must conform to the configured `CreateOrigin` and have
					/// sufficient funds free.
					///
					///`ItemDeposit` funds of sender are reserved.
					///
					///Parameters:
					/// - `collection`: The identifier of the new collection. This must not be
					///   currently in use.
					/// - `admin`: The admin of this collection. The admin is the initial address
					///   of each
					///member of the collection's admin team.
					///
					///Emits `Created` event when successful.
					///
					///Weight: `O(1)`
					create {
						collection: ::core::primitive::u32,
						admin: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					///Issue a new collection of non-fungible items from a privileged origin.
					///
					///This new collection has no items initially.
					///
					///The origin must conform to `ForceOrigin`.
					///
					///Unlike `create`, no funds are reserved.
					///
					/// - `collection`: The identifier of the new item. This must not be currently
					///   in use.
					/// - `owner`: The owner of this collection of items. The owner has full
					///   superuser
					///  permissions
					///over this item, but may later change and configure the permissions using
					///`transfer_ownership` and `set_team`.
					///
					///Emits `ForceCreated` event when successful.
					///
					///Weight: `O(1)`
					force_create {
						collection: ::core::primitive::u32,
						owner: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						free_holding: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					///Destroy a collection of fungible items.
					///
					///The origin must conform to `ForceOrigin` or must be `Signed` and the sender
					/// must be the owner of the `collection`.
					///
					/// - `collection`: The identifier of the collection to be destroyed.
					/// - `witness`: Information on the items minted in the collection. This must
					///   be
					///correct.
					///
					///Emits `Destroyed` event when successful.
					///
					///Weight: `O(n + m)` where:
					/// - `n = witness.items`
					/// - `m = witness.item_metadatas`
					/// - `a = witness.attributes`
					destroy {
						collection: ::core::primitive::u32,
						witness: runtime_types::pallet_uniques::types::DestroyWitness,
					},
					#[codec(index = 3)]
					///Mint an item of a particular collection.
					///
					///The origin must be Signed and the sender must be the Issuer of the
					/// `collection`.
					///
					/// - `collection`: The collection of the item to be minted.
					/// - `item`: The item value of the item to be minted.
					/// - `beneficiary`: The initial owner of the minted item.
					///
					///Emits `Issued` event when successful.
					///
					///Weight: `O(1)`
					mint {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						owner: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 4)]
					///Destroy a single item.
					///
					///Origin must be Signed and the signing account must be either:
					/// - the Admin of the `collection`;
					/// - the Owner of the `item`;
					///
					/// - `collection`: The collection of the item to be burned.
					/// - `item`: The item of the item to be burned.
					/// - `check_owner`: If `Some` then the operation will fail with `WrongOwner`
					///   unless the
					///  item is owned by this value.
					///
					///Emits `Burned` with the actual amount burned.
					///
					///Weight: `O(1)`
					///Modes: `check_owner.is_some()`.
					burn {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						check_owner: ::core::option::Option<
							::subxt::utils::MultiAddress<
								::subxt::utils::AccountId32,
								::core::primitive::u32,
							>,
						>,
					},
					#[codec(index = 5)]
					///Move an item from the sender account to another.
					///
					///This resets the approved account of the item.
					///
					///Origin must be Signed and the signing account must be either:
					/// - the Admin of the `collection`;
					/// - the Owner of the `item`;
					/// - the approved delegate for the `item` (in this case, the approval is
					///   reset).
					///
					///Arguments:
					/// - `collection`: The collection of the item to be transferred.
					/// - `item`: The item of the item to be transferred.
					/// - `dest`: The account to receive ownership of the item.
					///
					///Emits `Transferred`.
					///
					///Weight: `O(1)`
					transfer {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						dest: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 6)]
					///Reevaluate the deposits on some items.
					///
					///Origin must be Signed and the sender should be the Owner of the
					/// `collection`.
					///
					/// - `collection`: The collection to be frozen.
					/// - `items`: The items of the collection whose deposits will be reevaluated.
					///
					///NOTE: This exists as a best-effort function. Any items which are unknown or
					///in the case that the owner account does not have reservable funds to pay
					/// for a deposit increase are ignored. Generally the owner isn't going to call
					/// this on items whose existing deposit is less than the refreshed deposit as
					/// it would only cost them, so it's of little consequence.
					///
					///It will still return an error in the case that the collection is unknown of
					/// the signer is not permitted to call it.
					///
					///Weight: `O(items.len())`
					redeposit {
						collection: ::core::primitive::u32,
						items: ::std::vec::Vec<::core::primitive::u32>,
					},
					#[codec(index = 7)]
					///Disallow further unprivileged transfer of an item.
					///
					///Origin must be Signed and the sender should be the Freezer of the
					/// `collection`.
					///
					/// - `collection`: The collection of the item to be frozen.
					/// - `item`: The item of the item to be frozen.
					///
					///Emits `Frozen`.
					///
					///Weight: `O(1)`
					freeze { collection: ::core::primitive::u32, item: ::core::primitive::u32 },
					#[codec(index = 8)]
					///Re-allow unprivileged transfer of an item.
					///
					///Origin must be Signed and the sender should be the Freezer of the
					/// `collection`.
					///
					/// - `collection`: The collection of the item to be thawed.
					/// - `item`: The item of the item to be thawed.
					///
					///Emits `Thawed`.
					///
					///Weight: `O(1)`
					thaw { collection: ::core::primitive::u32, item: ::core::primitive::u32 },
					#[codec(index = 9)]
					///Disallow further unprivileged transfers for a whole collection.
					///
					///Origin must be Signed and the sender should be the Freezer of the
					/// `collection`.
					///
					/// - `collection`: The collection to be frozen.
					///
					///Emits `CollectionFrozen`.
					///
					///Weight: `O(1)`
					freeze_collection { collection: ::core::primitive::u32 },
					#[codec(index = 10)]
					///Re-allow unprivileged transfers for a whole collection.
					///
					///Origin must be Signed and the sender should be the Admin of the
					/// `collection`.
					///
					/// - `collection`: The collection to be thawed.
					///
					///Emits `CollectionThawed`.
					///
					///Weight: `O(1)`
					thaw_collection { collection: ::core::primitive::u32 },
					#[codec(index = 11)]
					///Change the Owner of a collection.
					///
					///Origin must be Signed and the sender should be the Owner of the
					/// `collection`.
					///
					/// - `collection`: The collection whose owner should be changed.
					/// - `owner`: The new Owner of this collection. They must have called
					///  `set_accept_ownership` with `collection` in order for this operation to
					/// succeed.
					///
					///Emits `OwnerChanged`.
					///
					///Weight: `O(1)`
					transfer_ownership {
						collection: ::core::primitive::u32,
						owner: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 12)]
					///Change the Issuer, Admin and Freezer of a collection.
					///
					///Origin must be Signed and the sender should be the Owner of the
					/// `collection`.
					///
					/// - `collection`: The collection whose team should be changed.
					/// - `issuer`: The new Issuer of this collection.
					/// - `admin`: The new Admin of this collection.
					/// - `freezer`: The new Freezer of this collection.
					///
					///Emits `TeamChanged`.
					///
					///Weight: `O(1)`
					set_team {
						collection: ::core::primitive::u32,
						issuer: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						admin: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						freezer: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 13)]
					///Approve an item to be transferred by a delegated third-party account.
					///
					///The origin must conform to `ForceOrigin` or must be `Signed` and the sender
					/// must be either the owner of the `item` or the admin of the collection.
					///
					/// - `collection`: The collection of the item to be approved for delegated
					///   transfer.
					/// - `item`: The item of the item to be approved for delegated transfer.
					/// - `delegate`: The account to delegate permission to transfer the item.
					///
					///Important NOTE: The `approved` account gets reset after each transfer.
					///
					///Emits `ApprovedTransfer` on success.
					///
					///Weight: `O(1)`
					approve_transfer {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						delegate: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 14)]
					///Cancel the prior approval for the transfer of an item by a delegate.
					///
					///Origin must be either:
					/// - the `Force` origin;
					/// - `Signed` with the signer being the Admin of the `collection`;
					/// - `Signed` with the signer being the Owner of the `item`;
					///
					///Arguments:
					/// - `collection`: The collection of the item of whose approval will be
					///   cancelled.
					/// - `item`: The item of the item of whose approval will be cancelled.
					/// - `maybe_check_delegate`: If `Some` will ensure that the given account is
					///   the one to
					///  which permission of transfer is delegated.
					///
					///Emits `ApprovalCancelled` on success.
					///
					///Weight: `O(1)`
					cancel_approval {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						maybe_check_delegate: ::core::option::Option<
							::subxt::utils::MultiAddress<
								::subxt::utils::AccountId32,
								::core::primitive::u32,
							>,
						>,
					},
					#[codec(index = 15)]
					///Alter the attributes of a given item.
					///
					///Origin must be `ForceOrigin`.
					///
					/// - `collection`: The identifier of the item.
					/// - `owner`: The new Owner of this item.
					/// - `issuer`: The new Issuer of this item.
					/// - `admin`: The new Admin of this item.
					/// - `freezer`: The new Freezer of this item.
					/// - `free_holding`: Whether a deposit is taken for holding an item of this
					///   collection.
					/// - `is_frozen`: Whether this collection is frozen except for
					///   permissioned/admin
					///instructions.
					///
					///Emits `ItemStatusChanged` with the identity of the item.
					///
					///Weight: `O(1)`
					force_item_status {
						collection: ::core::primitive::u32,
						owner: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						issuer: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						admin: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						freezer: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						free_holding: ::core::primitive::bool,
						is_frozen: ::core::primitive::bool,
					},
					#[codec(index = 16)]
					///Set an attribute for a collection or item.
					///
					///Origin must be either `ForceOrigin` or Signed and the sender should be the
					/// Owner of the `collection`.
					///
					///If the origin is Signed, then funds of signer are reserved according to the
					/// formula: `MetadataDepositBase + DepositPerByte * (key.len + value.len)`
					/// taking into account any already reserved funds.
					///
					/// - `collection`: The identifier of the collection whose item's metadata to
					///   set.
					/// - `maybe_item`: The identifier of the item whose metadata to set.
					/// - `key`: The key of the attribute.
					/// - `value`: The value to which to set the attribute.
					///
					///Emits `AttributeSet`.
					///
					///Weight: `O(1)`
					set_attribute {
						collection: ::core::primitive::u32,
						maybe_item: ::core::option::Option<::core::primitive::u32>,
						key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 17)]
					///Clear an attribute for a collection or item.
					///
					///Origin must be either `ForceOrigin` or Signed and the sender should be the
					/// Owner of the `collection`.
					///
					///Any deposit is freed for the collection's owner.
					///
					/// - `collection`: The identifier of the collection whose item's metadata to
					///   clear.
					/// - `maybe_item`: The identifier of the item whose metadata to clear.
					/// - `key`: The key of the attribute.
					///
					///Emits `AttributeCleared`.
					///
					///Weight: `O(1)`
					clear_attribute {
						collection: ::core::primitive::u32,
						maybe_item: ::core::option::Option<::core::primitive::u32>,
						key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 18)]
					///Set the metadata for an item.
					///
					///Origin must be either `ForceOrigin` or Signed and the sender should be the
					/// Owner of the `collection`.
					///
					///If the origin is Signed, then funds of signer are reserved according to the
					/// formula: `MetadataDepositBase + DepositPerByte * data.len` taking into
					///account any already reserved funds.
					///
					/// - `collection`: The identifier of the collection whose item's metadata to
					///   set.
					/// - `item`: The identifier of the item whose metadata to set.
					/// - `data`: The general information of this item. Limited in length by
					///   `StringLimit`.
					/// - `is_frozen`: Whether the metadata should be frozen against further
					///   changes.
					///
					///Emits `MetadataSet`.
					///
					///Weight: `O(1)`
					set_metadata {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						is_frozen: ::core::primitive::bool,
					},
					#[codec(index = 19)]
					///Clear the metadata for an item.
					///
					///Origin must be either `ForceOrigin` or Signed and the sender should be the
					/// Owner of the `item`.
					///
					///Any deposit is freed for the collection's owner.
					///
					/// - `collection`: The identifier of the collection whose item's metadata to
					///   clear.
					/// - `item`: The identifier of the item whose metadata to clear.
					///
					///Emits `MetadataCleared`.
					///
					///Weight: `O(1)`
					clear_metadata {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
					},
					#[codec(index = 20)]
					///Set the metadata for a collection.
					///
					///Origin must be either `ForceOrigin` or `Signed` and the sender should be
					/// the Owner of the `collection`.
					///
					///If the origin is `Signed`, then funds of signer are reserved according to
					/// the formula: `MetadataDepositBase + DepositPerByte * data.len` taking into
					///account any already reserved funds.
					///
					/// - `collection`: The identifier of the item whose metadata to update.
					/// - `data`: The general information of this item. Limited in length by
					///   `StringLimit`.
					/// - `is_frozen`: Whether the metadata should be frozen against further
					///   changes.
					///
					///Emits `CollectionMetadataSet`.
					///
					///Weight: `O(1)`
					set_collection_metadata {
						collection: ::core::primitive::u32,
						data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						is_frozen: ::core::primitive::bool,
					},
					#[codec(index = 21)]
					///Clear the metadata for a collection.
					///
					///Origin must be either `ForceOrigin` or `Signed` and the sender should be
					/// the Owner of the `collection`.
					///
					///Any deposit is freed for the collection's owner.
					///
					/// - `collection`: The identifier of the collection whose metadata to clear.
					///
					///Emits `CollectionMetadataCleared`.
					///
					///Weight: `O(1)`
					clear_collection_metadata { collection: ::core::primitive::u32 },
					#[codec(index = 22)]
					///Set (or reset) the acceptance of ownership for a particular account.
					///
					///Origin must be `Signed` and if `maybe_collection` is `Some`, then the
					/// signer must have a provider reference.
					///
					/// - `maybe_collection`: The identifier of the collection whose ownership the
					///   signer is
					///  willing to accept, or if `None`, an indication that the signer is willing
					/// to accept no  ownership transferal.
					///
					///Emits `OwnershipAcceptanceChanged`.
					set_accept_ownership {
						maybe_collection: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 23)]
					///Set the maximum amount of items a collection could have.
					///
					///Origin must be either `ForceOrigin` or `Signed` and the sender should be
					/// the Owner of the `collection`.
					///
					///Note: This function can only succeed once per collection.
					///
					/// - `collection`: The identifier of the collection to change.
					/// - `max_supply`: The maximum amount of items a collection could have.
					///
					///Emits `CollectionMaxSupplySet` event when successful.
					set_collection_max_supply {
						collection: ::core::primitive::u32,
						max_supply: ::core::primitive::u32,
					},
					#[codec(index = 24)]
					///Set (or reset) the price for an item.
					///
					///Origin must be Signed and must be the owner of the asset `item`.
					///
					/// - `collection`: The collection of the item.
					/// - `item`: The item to set the price for.
					/// - `price`: The price for the item. Pass `None`, to reset the price.
					/// - `buyer`: Restricts the buy operation to a specific account.
					///
					///Emits `ItemPriceSet` on success if the price is not `None`.
					///Emits `ItemPriceRemoved` on success if the price is `None`.
					set_price {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						price: ::core::option::Option<::core::primitive::u128>,
						whitelisted_buyer: ::core::option::Option<
							::subxt::utils::MultiAddress<
								::subxt::utils::AccountId32,
								::core::primitive::u32,
							>,
						>,
					},
					#[codec(index = 25)]
					///Allows to buy an item if it's up for sale.
					///
					///Origin must be Signed and must not be the owner of the `item`.
					///
					/// - `collection`: The collection of the item.
					/// - `item`: The item the sender wants to buy.
					/// - `bid_price`: The price the sender is willing to pay.
					///
					///Emits `ItemBought` on success.
					buy_item {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						bid_price: ::core::primitive::u128,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///The signing account has no permission to do the operation.
					NoPermission,
					#[codec(index = 1)]
					///The given item ID is unknown.
					UnknownCollection,
					#[codec(index = 2)]
					///The item ID has already been used for an item.
					AlreadyExists,
					#[codec(index = 3)]
					///The owner turned out to be different to what was expected.
					WrongOwner,
					#[codec(index = 4)]
					///Invalid witness data given.
					BadWitness,
					#[codec(index = 5)]
					///The item ID is already taken.
					InUse,
					#[codec(index = 6)]
					///The item or collection is frozen.
					Frozen,
					#[codec(index = 7)]
					///The delegate turned out to be different to what was expected.
					WrongDelegate,
					#[codec(index = 8)]
					///There is no delegate approved.
					NoDelegate,
					#[codec(index = 9)]
					///No approval exists that would allow the transfer.
					Unapproved,
					#[codec(index = 10)]
					///The named owner has not signed ownership of the collection is acceptable.
					Unaccepted,
					#[codec(index = 11)]
					///The item is locked.
					Locked,
					#[codec(index = 12)]
					///All items have been minted.
					MaxSupplyReached,
					#[codec(index = 13)]
					///The max supply has already been set.
					MaxSupplyAlreadySet,
					#[codec(index = 14)]
					///The provided max supply is less to the amount of items a collection already
					/// has.
					MaxSupplyTooSmall,
					#[codec(index = 15)]
					///The given item ID is unknown.
					UnknownItem,
					#[codec(index = 16)]
					///Item is not for sale.
					NotForSale,
					#[codec(index = 17)]
					///The provided bid is too low.
					BidTooLow,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///A `collection` was created.
					Created {
						collection: ::core::primitive::u32,
						creator: ::subxt::utils::AccountId32,
						owner: ::subxt::utils::AccountId32,
					},
					#[codec(index = 1)]
					///A `collection` was force-created.
					ForceCreated {
						collection: ::core::primitive::u32,
						owner: ::subxt::utils::AccountId32,
					},
					#[codec(index = 2)]
					///A `collection` was destroyed.
					Destroyed { collection: ::core::primitive::u32 },
					#[codec(index = 3)]
					///An `item` was issued.
					Issued {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						owner: ::subxt::utils::AccountId32,
					},
					#[codec(index = 4)]
					///An `item` was transferred.
					Transferred {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						from: ::subxt::utils::AccountId32,
						to: ::subxt::utils::AccountId32,
					},
					#[codec(index = 5)]
					///An `item` was destroyed.
					Burned {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						owner: ::subxt::utils::AccountId32,
					},
					#[codec(index = 6)]
					///Some `item` was frozen.
					Frozen { collection: ::core::primitive::u32, item: ::core::primitive::u32 },
					#[codec(index = 7)]
					///Some `item` was thawed.
					Thawed { collection: ::core::primitive::u32, item: ::core::primitive::u32 },
					#[codec(index = 8)]
					///Some `collection` was frozen.
					CollectionFrozen { collection: ::core::primitive::u32 },
					#[codec(index = 9)]
					///Some `collection` was thawed.
					CollectionThawed { collection: ::core::primitive::u32 },
					#[codec(index = 10)]
					///The owner changed.
					OwnerChanged {
						collection: ::core::primitive::u32,
						new_owner: ::subxt::utils::AccountId32,
					},
					#[codec(index = 11)]
					///The management team changed.
					TeamChanged {
						collection: ::core::primitive::u32,
						issuer: ::subxt::utils::AccountId32,
						admin: ::subxt::utils::AccountId32,
						freezer: ::subxt::utils::AccountId32,
					},
					#[codec(index = 12)]
					///An `item` of a `collection` has been approved by the `owner` for transfer
					/// by a `delegate`.
					ApprovedTransfer {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						owner: ::subxt::utils::AccountId32,
						delegate: ::subxt::utils::AccountId32,
					},
					#[codec(index = 13)]
					///An approval for a `delegate` account to transfer the `item` of an item
					///`collection` was cancelled by its `owner`.
					ApprovalCancelled {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						owner: ::subxt::utils::AccountId32,
						delegate: ::subxt::utils::AccountId32,
					},
					#[codec(index = 14)]
					///A `collection` has had its attributes changed by the `Force` origin.
					ItemStatusChanged { collection: ::core::primitive::u32 },
					#[codec(index = 15)]
					///New metadata has been set for a `collection`.
					CollectionMetadataSet {
						collection: ::core::primitive::u32,
						data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						is_frozen: ::core::primitive::bool,
					},
					#[codec(index = 16)]
					///Metadata has been cleared for a `collection`.
					CollectionMetadataCleared { collection: ::core::primitive::u32 },
					#[codec(index = 17)]
					///New metadata has been set for an item.
					MetadataSet {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						is_frozen: ::core::primitive::bool,
					},
					#[codec(index = 18)]
					///Metadata has been cleared for an item.
					MetadataCleared {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
					},
					#[codec(index = 19)]
					///Metadata has been cleared for an item.
					Redeposited {
						collection: ::core::primitive::u32,
						successful_items: ::std::vec::Vec<::core::primitive::u32>,
					},
					#[codec(index = 20)]
					///New attribute metadata has been set for a `collection` or `item`.
					AttributeSet {
						collection: ::core::primitive::u32,
						maybe_item: ::core::option::Option<::core::primitive::u32>,
						key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 21)]
					///Attribute metadata has been cleared for a `collection` or `item`.
					AttributeCleared {
						collection: ::core::primitive::u32,
						maybe_item: ::core::option::Option<::core::primitive::u32>,
						key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 22)]
					///Ownership acceptance has changed for an account.
					OwnershipAcceptanceChanged {
						who: ::subxt::utils::AccountId32,
						maybe_collection: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 23)]
					///Max supply has been set for a collection.
					CollectionMaxSupplySet {
						collection: ::core::primitive::u32,
						max_supply: ::core::primitive::u32,
					},
					#[codec(index = 24)]
					///The price was set for the instance.
					ItemPriceSet {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						price: ::core::primitive::u128,
						whitelisted_buyer: ::core::option::Option<::subxt::utils::AccountId32>,
					},
					#[codec(index = 25)]
					///The price for the instance was removed.
					ItemPriceRemoved {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
					},
					#[codec(index = 26)]
					///An item was bought.
					ItemBought {
						collection: ::core::primitive::u32,
						item: ::core::primitive::u32,
						price: ::core::primitive::u128,
						seller: ::subxt::utils::AccountId32,
						buyer: ::subxt::utils::AccountId32,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct CollectionDetails<_0, _1> {
					pub owner: _0,
					pub issuer: _0,
					pub admin: _0,
					pub freezer: _0,
					pub total_deposit: _1,
					pub free_holding: ::core::primitive::bool,
					pub items: ::core::primitive::u32,
					pub item_metadatas: ::core::primitive::u32,
					pub attributes: ::core::primitive::u32,
					pub is_frozen: ::core::primitive::bool,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct CollectionMetadata<_0> {
					pub deposit: _0,
					pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					pub is_frozen: ::core::primitive::bool,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct DestroyWitness {
					#[codec(compact)]
					pub items: ::core::primitive::u32,
					#[codec(compact)]
					pub item_metadatas: ::core::primitive::u32,
					#[codec(compact)]
					pub attributes: ::core::primitive::u32,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ItemDetails<_0, _1> {
					pub owner: _0,
					pub approved: ::core::option::Option<_0>,
					pub is_frozen: ::core::primitive::bool,
					pub deposit: _1,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct ItemMetadata<_0> {
					pub deposit: _0,
					pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					pub is_frozen: ::core::primitive::bool,
				}
			}
		}
		pub mod pallet_utility {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Send a batch of dispatch calls.
					///
					///May be called from any origin except `None`.
					///
					/// - `calls`: The calls to be dispatched from the same origin. The number of
					///   call must not
					///  exceed the constant: `batched_calls_limit` (available in constant
					/// metadata).
					///
					///If origin is root then the calls are dispatched without checking origin
					/// filter. (This includes bypassing `frame_system::Config::BaseCallFilter`).
					///
					///## Complexity
					/// - O(C) where C is the number of calls to be batched.
					///
					///This will return `Ok` in all circumstances. To determine the success of the
					/// batch, an event is deposited. If a call failed and the batch was
					/// interrupted, then the `BatchInterrupted` event is deposited, along with the
					/// number of successful calls made and the error of the failed call. If all
					/// were successful, then the `BatchCompleted` event is deposited.
					batch { calls: ::std::vec::Vec<runtime_types::babe_runtime::RuntimeCall> },
					#[codec(index = 1)]
					///Send a call through an indexed pseudonym of the sender.
					///
					///Filter from origin are passed along. The call will be dispatched with an
					/// origin which use the same filter as the origin of this call.
					///
					///NOTE: If you need to ensure that any account-based filtering is not honored
					/// (i.e. because you expect `proxy` to have been used prior in the call stack
					/// and you do not want the call restrictions to apply to any sub-accounts),
					/// then use `as_multi_threshold_1` in the Multisig pallet instead.
					///
					///NOTE: Prior to version *12, this was called `as_limited_sub`.
					///
					///The dispatch origin for this call must be _Signed_.
					as_derivative {
						index: ::core::primitive::u16,
						call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
					},
					#[codec(index = 2)]
					///Send a batch of dispatch calls and atomically execute them.
					///The whole transaction will rollback and fail if any of the calls failed.
					///
					///May be called from any origin except `None`.
					///
					/// - `calls`: The calls to be dispatched from the same origin. The number of
					///   call must not
					///  exceed the constant: `batched_calls_limit` (available in constant
					/// metadata).
					///
					///If origin is root then the calls are dispatched without checking origin
					/// filter. (This includes bypassing `frame_system::Config::BaseCallFilter`).
					///
					///## Complexity
					/// - O(C) where C is the number of calls to be batched.
					batch_all { calls: ::std::vec::Vec<runtime_types::babe_runtime::RuntimeCall> },
					#[codec(index = 3)]
					///Dispatches a function call with a provided origin.
					///
					///The dispatch origin for this call must be _Root_.
					///
					///## Complexity
					/// - O(1).
					dispatch_as {
						as_origin: ::std::boxed::Box<runtime_types::babe_runtime::OriginCaller>,
						call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
					},
					#[codec(index = 4)]
					///Send a batch of dispatch calls.
					///Unlike `batch`, it allows errors and won't interrupt.
					///
					///May be called from any origin except `None`.
					///
					/// - `calls`: The calls to be dispatched from the same origin. The number of
					///   call must not
					///  exceed the constant: `batched_calls_limit` (available in constant
					/// metadata).
					///
					///If origin is root then the calls are dispatch without checking origin
					/// filter. (This includes bypassing `frame_system::Config::BaseCallFilter`).
					///
					///## Complexity
					/// - O(C) where C is the number of calls to be batched.
					force_batch { calls: ::std::vec::Vec<runtime_types::babe_runtime::RuntimeCall> },
					#[codec(index = 5)]
					///Dispatch a function call with a specified weight.
					///
					///This function does not check the weight of the call, and instead allows the
					///Root origin to specify the weight of the call.
					///
					///The dispatch origin for this call must be _Root_.
					with_weight {
						call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
						weight: runtime_types::sp_weights::weight_v2::Weight,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///Too many calls batched.
					TooManyCalls,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///Batch of dispatches did not complete fully. Index of first failing dispatch
					/// given, as well as the error.
					BatchInterrupted {
						index: ::core::primitive::u32,
						error: runtime_types::sp_runtime::DispatchError,
					},
					#[codec(index = 1)]
					///Batch of dispatches completed fully with no error.
					BatchCompleted,
					#[codec(index = 2)]
					///Batch of dispatches completed but has errors.
					BatchCompletedWithErrors,
					#[codec(index = 3)]
					///A single item within a Batch of dispatches has completed with no error.
					ItemCompleted,
					#[codec(index = 4)]
					///A single item within a Batch of dispatches has completed with error.
					ItemFailed { error: runtime_types::sp_runtime::DispatchError },
					#[codec(index = 5)]
					///A call was dispatched.
					DispatchedAs {
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
				}
			}
		}
		pub mod pallet_vesting {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					///Unlock any vested funds of the sender account.
					///
					///The dispatch origin for this call must be _Signed_ and the sender must have
					/// funds still locked under this pallet.
					///
					///Emits either `VestingCompleted` or `VestingUpdated`.
					///
					///## Complexity
					/// - `O(1)`.
					vest,
					#[codec(index = 1)]
					///Unlock any vested funds of a `target` account.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					/// - `target`: The account whose vested funds should be unlocked. Must have
					///   funds still
					///locked under this pallet.
					///
					///Emits either `VestingCompleted` or `VestingUpdated`.
					///
					///## Complexity
					/// - `O(1)`.
					vest_other {
						target: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 2)]
					///Create a vested transfer.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					/// - `target`: The account receiving the vested funds.
					/// - `schedule`: The vesting schedule attached to the transfer.
					///
					///Emits `VestingCreated`.
					///
					///NOTE: This will unlock all schedules through the current block.
					///
					///## Complexity
					/// - `O(1)`.
					vested_transfer {
						target: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 3)]
					///Force a vested transfer.
					///
					///The dispatch origin for this call must be _Root_.
					///
					/// - `source`: The account whose funds should be transferred.
					/// - `target`: The account that should be transferred the vested funds.
					/// - `schedule`: The vesting schedule attached to the transfer.
					///
					///Emits `VestingCreated`.
					///
					///NOTE: This will unlock all schedules through the current block.
					///
					///## Complexity
					/// - `O(1)`.
					force_vested_transfer {
						source: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						target: ::subxt::utils::MultiAddress<
							::subxt::utils::AccountId32,
							::core::primitive::u32,
						>,
						schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 4)]
					///Merge two vesting schedules together, creating a new vesting schedule that
					/// unlocks over the highest possible start and end blocks. If both schedules
					/// have already started the current block will be used as the schedule start;
					/// with the caveat that if one schedule is finished by the current block, the
					/// other will be treated as the new merged schedule, unmodified.
					///
					///NOTE: If `schedule1_index == schedule2_index` this is a no-op.
					///NOTE: This will unlock all schedules through the current block prior to
					/// merging. NOTE: If both schedules have ended by the current block, no new
					/// schedule will be created and both will be removed.
					///
					///Merged schedule attributes:
					/// - `starting_block`: `MAX(schedule1.starting_block,
					///   scheduled2.starting_block,
					///  current_block)`.
					/// - `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.
					/// - `locked`: `schedule1.locked_at(current_block) +
					///   schedule2.locked_at(current_block)`.
					///
					///The dispatch origin for this call must be _Signed_.
					///
					/// - `schedule1_index`: index of the first schedule to merge.
					/// - `schedule2_index`: index of the second schedule to merge.
					merge_schedules {
						schedule1_index: ::core::primitive::u32,
						schedule2_index: ::core::primitive::u32,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Error for the vesting pallet.
				pub enum Error {
					#[codec(index = 0)]
					///The account given is not vesting.
					NotVesting,
					#[codec(index = 1)]
					///The account already has `MaxVestingSchedules` count of schedules and thus
					///cannot add another one. Consider merging existing schedules in order to add
					/// another.
					AtMaxVestingSchedules,
					#[codec(index = 2)]
					///Amount being transferred is too low to create a vesting schedule.
					AmountLow,
					#[codec(index = 3)]
					///An index was out of bounds of the vesting schedules.
					ScheduleIndexOutOfBounds,
					#[codec(index = 4)]
					///Failed to create a new schedule because some parameter was invalid.
					InvalidScheduleParams,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					///The amount vested has been updated. This could indicate a change in funds
					/// available. The balance given is the amount which is left unvested (and thus
					/// locked).
					VestingUpdated {
						account: ::subxt::utils::AccountId32,
						unvested: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					///An \[account\] has become fully vested.
					VestingCompleted { account: ::subxt::utils::AccountId32 },
				}
			}
			pub mod vesting_info {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct VestingInfo<_0, _1> {
					pub locked: _0,
					pub per_block: _0,
					pub starting_block: _1,
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum Releases {
				#[codec(index = 0)]
				V0,
				#[codec(index = 1)]
				V1,
			}
		}
		pub mod pallet_whitelist {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				///Contains one variant per dispatchable that can be called by an extrinsic.
				pub enum Call {
					#[codec(index = 0)]
					whitelist_call { call_hash: ::subxt::utils::H256 },
					#[codec(index = 1)]
					remove_whitelisted_call { call_hash: ::subxt::utils::H256 },
					#[codec(index = 2)]
					dispatch_whitelisted_call {
						call_hash: ::subxt::utils::H256,
						call_encoded_len: ::core::primitive::u32,
						call_weight_witness: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 3)]
					dispatch_whitelisted_call_with_preimage {
						call: ::std::boxed::Box<runtime_types::babe_runtime::RuntimeCall>,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
				of this pallet.
				*/
				pub enum Error {
					#[codec(index = 0)]
					///The preimage of the call hash could not be loaded.
					UnavailablePreImage,
					#[codec(index = 1)]
					///The call could not be decoded.
					UndecodableCall,
					#[codec(index = 2)]
					///The weight of the decoded call was higher than the witness.
					InvalidCallWeightWitness,
					#[codec(index = 3)]
					///The call was not whitelisted.
					CallIsNotWhitelisted,
					#[codec(index = 4)]
					///The call was already whitelisted; No-Op.
					CallAlreadyWhitelisted,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				/**
				The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
				by this pallet.
				*/
				pub enum Event {
					#[codec(index = 0)]
					CallWhitelisted { call_hash: ::subxt::utils::H256 },
					#[codec(index = 1)]
					WhitelistedCallRemoved { call_hash: ::subxt::utils::H256 },
					#[codec(index = 2)]
					WhitelistedCallDispatched {
						call_hash: ::subxt::utils::H256,
						result: ::core::result::Result<
							runtime_types::frame_support::dispatch::PostDispatchInfo,
							runtime_types::sp_runtime::DispatchErrorWithPostInfo<
								runtime_types::frame_support::dispatch::PostDispatchInfo,
							>,
						>,
					},
				}
			}
		}
		pub mod sp_arithmetic {
			use super::runtime_types;
			pub mod fixed_point {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct FixedI64(pub ::core::primitive::i64);
				#[derive(
					::subxt::ext::codec::CompactAs,
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct FixedU128(pub ::core::primitive::u128);
			}
			pub mod per_things {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::CompactAs,
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct PerU16(pub ::core::primitive::u16);
				#[derive(
					::subxt::ext::codec::CompactAs,
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Perbill(pub ::core::primitive::u32);
				#[derive(
					::subxt::ext::codec::CompactAs,
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Percent(pub ::core::primitive::u8);
				#[derive(
					::subxt::ext::codec::CompactAs,
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Permill(pub ::core::primitive::u32);
				#[derive(
					::subxt::ext::codec::CompactAs,
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Perquintill(pub ::core::primitive::u64);
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum ArithmeticError {
				#[codec(index = 0)]
				Underflow,
				#[codec(index = 1)]
				Overflow,
				#[codec(index = 2)]
				DivisionByZero,
			}
		}
		pub mod sp_authority_discovery {
			use super::runtime_types;
			pub mod app {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Public(pub runtime_types::sp_core::sr25519::Public);
			}
		}
		pub mod sp_consensus_babe {
			use super::runtime_types;
			pub mod app {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Public(pub runtime_types::sp_core::sr25519::Public);
			}
			pub mod digests {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum NextConfigDescriptor {
					#[codec(index = 1)]
					V1 {
						c: (::core::primitive::u64, ::core::primitive::u64),
						allowed_slots: runtime_types::sp_consensus_babe::AllowedSlots,
					},
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub enum PreDigest {
					#[codec(index = 1)]
					Primary(runtime_types::sp_consensus_babe::digests::PrimaryPreDigest),
					#[codec(index = 2)]
					SecondaryPlain(
						runtime_types::sp_consensus_babe::digests::SecondaryPlainPreDigest,
					),
					#[codec(index = 3)]
					SecondaryVRF(runtime_types::sp_consensus_babe::digests::SecondaryVRFPreDigest),
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct PrimaryPreDigest {
					pub authority_index: ::core::primitive::u32,
					pub slot: runtime_types::sp_consensus_slots::Slot,
					pub vrf_output: [::core::primitive::u8; 32usize],
					pub vrf_proof: [::core::primitive::u8; 64usize],
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct SecondaryPlainPreDigest {
					pub authority_index: ::core::primitive::u32,
					pub slot: runtime_types::sp_consensus_slots::Slot,
				}
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct SecondaryVRFPreDigest {
					pub authority_index: ::core::primitive::u32,
					pub slot: runtime_types::sp_consensus_slots::Slot,
					pub vrf_output: [::core::primitive::u8; 32usize],
					pub vrf_proof: [::core::primitive::u8; 64usize],
				}
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum AllowedSlots {
				#[codec(index = 0)]
				PrimarySlots,
				#[codec(index = 1)]
				PrimaryAndSecondaryPlainSlots,
				#[codec(index = 2)]
				PrimaryAndSecondaryVRFSlots,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct BabeEpochConfiguration {
				pub c: (::core::primitive::u64, ::core::primitive::u64),
				pub allowed_slots: runtime_types::sp_consensus_babe::AllowedSlots,
			}
		}
		pub mod sp_consensus_grandpa {
			use super::runtime_types;
			pub mod app {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Public(pub runtime_types::sp_core::ed25519::Public);
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Signature(pub runtime_types::sp_core::ed25519::Signature);
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum Equivocation<_0, _1> {
				#[codec(index = 0)]
				Prevote(
					runtime_types::finality_grandpa::Equivocation<
						runtime_types::sp_consensus_grandpa::app::Public,
						runtime_types::finality_grandpa::Prevote<_0, _1>,
						runtime_types::sp_consensus_grandpa::app::Signature,
					>,
				),
				#[codec(index = 1)]
				Precommit(
					runtime_types::finality_grandpa::Equivocation<
						runtime_types::sp_consensus_grandpa::app::Public,
						runtime_types::finality_grandpa::Precommit<_0, _1>,
						runtime_types::sp_consensus_grandpa::app::Signature,
					>,
				),
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct EquivocationProof<_0, _1> {
				pub set_id: ::core::primitive::u64,
				pub equivocation: runtime_types::sp_consensus_grandpa::Equivocation<_0, _1>,
			}
		}
		pub mod sp_consensus_slots {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct EquivocationProof<_0, _1> {
				pub offender: _1,
				pub slot: runtime_types::sp_consensus_slots::Slot,
				pub first_header: _0,
				pub second_header: _0,
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Slot(pub ::core::primitive::u64);
		}
		pub mod sp_core {
			use super::runtime_types;
			pub mod crypto {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct KeyTypeId(pub [::core::primitive::u8; 4usize]);
			}
			pub mod ecdsa {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Signature(pub [::core::primitive::u8; 65usize]);
			}
			pub mod ed25519 {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Public(pub [::core::primitive::u8; 32usize]);
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Signature(pub [::core::primitive::u8; 64usize]);
			}
			pub mod offchain {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct OpaqueMultiaddr(pub ::std::vec::Vec<::core::primitive::u8>);
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct OpaqueNetworkState {
					pub peer_id: runtime_types::sp_core::OpaquePeerId,
					pub external_addresses:
						::std::vec::Vec<runtime_types::sp_core::offchain::OpaqueMultiaddr>,
				}
			}
			pub mod sr25519 {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Public(pub [::core::primitive::u8; 32usize]);
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Signature(pub [::core::primitive::u8; 64usize]);
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct OpaquePeerId(pub ::std::vec::Vec<::core::primitive::u8>);
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum Void {}
		}
		pub mod sp_npos_elections {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ElectionScore {
				pub minimal_stake: ::core::primitive::u128,
				pub sum_stake: ::core::primitive::u128,
				pub sum_stake_squared: ::core::primitive::u128,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct Support<_0> {
				pub total: ::core::primitive::u128,
				pub voters: ::std::vec::Vec<(_0, ::core::primitive::u128)>,
			}
		}
		pub mod sp_runtime {
			use super::runtime_types;
			pub mod generic {
				use super::runtime_types;
				pub mod digest {
					use super::runtime_types;
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct Digest {
						pub logs:
							::std::vec::Vec<runtime_types::sp_runtime::generic::digest::DigestItem>,
					}
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum DigestItem {
						#[codec(index = 6)]
						PreRuntime(
							[::core::primitive::u8; 4usize],
							::std::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 4)]
						Consensus(
							[::core::primitive::u8; 4usize],
							::std::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 5)]
						Seal(
							[::core::primitive::u8; 4usize],
							::std::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 0)]
						Other(::std::vec::Vec<::core::primitive::u8>),
						#[codec(index = 8)]
						RuntimeEnvironmentUpdated,
					}
				}
				pub mod era {
					use super::runtime_types;
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub enum Era {
						#[codec(index = 0)]
						Immortal,
						#[codec(index = 1)]
						Mortal1(::core::primitive::u8),
						#[codec(index = 2)]
						Mortal2(::core::primitive::u8),
						#[codec(index = 3)]
						Mortal3(::core::primitive::u8),
						#[codec(index = 4)]
						Mortal4(::core::primitive::u8),
						#[codec(index = 5)]
						Mortal5(::core::primitive::u8),
						#[codec(index = 6)]
						Mortal6(::core::primitive::u8),
						#[codec(index = 7)]
						Mortal7(::core::primitive::u8),
						#[codec(index = 8)]
						Mortal8(::core::primitive::u8),
						#[codec(index = 9)]
						Mortal9(::core::primitive::u8),
						#[codec(index = 10)]
						Mortal10(::core::primitive::u8),
						#[codec(index = 11)]
						Mortal11(::core::primitive::u8),
						#[codec(index = 12)]
						Mortal12(::core::primitive::u8),
						#[codec(index = 13)]
						Mortal13(::core::primitive::u8),
						#[codec(index = 14)]
						Mortal14(::core::primitive::u8),
						#[codec(index = 15)]
						Mortal15(::core::primitive::u8),
						#[codec(index = 16)]
						Mortal16(::core::primitive::u8),
						#[codec(index = 17)]
						Mortal17(::core::primitive::u8),
						#[codec(index = 18)]
						Mortal18(::core::primitive::u8),
						#[codec(index = 19)]
						Mortal19(::core::primitive::u8),
						#[codec(index = 20)]
						Mortal20(::core::primitive::u8),
						#[codec(index = 21)]
						Mortal21(::core::primitive::u8),
						#[codec(index = 22)]
						Mortal22(::core::primitive::u8),
						#[codec(index = 23)]
						Mortal23(::core::primitive::u8),
						#[codec(index = 24)]
						Mortal24(::core::primitive::u8),
						#[codec(index = 25)]
						Mortal25(::core::primitive::u8),
						#[codec(index = 26)]
						Mortal26(::core::primitive::u8),
						#[codec(index = 27)]
						Mortal27(::core::primitive::u8),
						#[codec(index = 28)]
						Mortal28(::core::primitive::u8),
						#[codec(index = 29)]
						Mortal29(::core::primitive::u8),
						#[codec(index = 30)]
						Mortal30(::core::primitive::u8),
						#[codec(index = 31)]
						Mortal31(::core::primitive::u8),
						#[codec(index = 32)]
						Mortal32(::core::primitive::u8),
						#[codec(index = 33)]
						Mortal33(::core::primitive::u8),
						#[codec(index = 34)]
						Mortal34(::core::primitive::u8),
						#[codec(index = 35)]
						Mortal35(::core::primitive::u8),
						#[codec(index = 36)]
						Mortal36(::core::primitive::u8),
						#[codec(index = 37)]
						Mortal37(::core::primitive::u8),
						#[codec(index = 38)]
						Mortal38(::core::primitive::u8),
						#[codec(index = 39)]
						Mortal39(::core::primitive::u8),
						#[codec(index = 40)]
						Mortal40(::core::primitive::u8),
						#[codec(index = 41)]
						Mortal41(::core::primitive::u8),
						#[codec(index = 42)]
						Mortal42(::core::primitive::u8),
						#[codec(index = 43)]
						Mortal43(::core::primitive::u8),
						#[codec(index = 44)]
						Mortal44(::core::primitive::u8),
						#[codec(index = 45)]
						Mortal45(::core::primitive::u8),
						#[codec(index = 46)]
						Mortal46(::core::primitive::u8),
						#[codec(index = 47)]
						Mortal47(::core::primitive::u8),
						#[codec(index = 48)]
						Mortal48(::core::primitive::u8),
						#[codec(index = 49)]
						Mortal49(::core::primitive::u8),
						#[codec(index = 50)]
						Mortal50(::core::primitive::u8),
						#[codec(index = 51)]
						Mortal51(::core::primitive::u8),
						#[codec(index = 52)]
						Mortal52(::core::primitive::u8),
						#[codec(index = 53)]
						Mortal53(::core::primitive::u8),
						#[codec(index = 54)]
						Mortal54(::core::primitive::u8),
						#[codec(index = 55)]
						Mortal55(::core::primitive::u8),
						#[codec(index = 56)]
						Mortal56(::core::primitive::u8),
						#[codec(index = 57)]
						Mortal57(::core::primitive::u8),
						#[codec(index = 58)]
						Mortal58(::core::primitive::u8),
						#[codec(index = 59)]
						Mortal59(::core::primitive::u8),
						#[codec(index = 60)]
						Mortal60(::core::primitive::u8),
						#[codec(index = 61)]
						Mortal61(::core::primitive::u8),
						#[codec(index = 62)]
						Mortal62(::core::primitive::u8),
						#[codec(index = 63)]
						Mortal63(::core::primitive::u8),
						#[codec(index = 64)]
						Mortal64(::core::primitive::u8),
						#[codec(index = 65)]
						Mortal65(::core::primitive::u8),
						#[codec(index = 66)]
						Mortal66(::core::primitive::u8),
						#[codec(index = 67)]
						Mortal67(::core::primitive::u8),
						#[codec(index = 68)]
						Mortal68(::core::primitive::u8),
						#[codec(index = 69)]
						Mortal69(::core::primitive::u8),
						#[codec(index = 70)]
						Mortal70(::core::primitive::u8),
						#[codec(index = 71)]
						Mortal71(::core::primitive::u8),
						#[codec(index = 72)]
						Mortal72(::core::primitive::u8),
						#[codec(index = 73)]
						Mortal73(::core::primitive::u8),
						#[codec(index = 74)]
						Mortal74(::core::primitive::u8),
						#[codec(index = 75)]
						Mortal75(::core::primitive::u8),
						#[codec(index = 76)]
						Mortal76(::core::primitive::u8),
						#[codec(index = 77)]
						Mortal77(::core::primitive::u8),
						#[codec(index = 78)]
						Mortal78(::core::primitive::u8),
						#[codec(index = 79)]
						Mortal79(::core::primitive::u8),
						#[codec(index = 80)]
						Mortal80(::core::primitive::u8),
						#[codec(index = 81)]
						Mortal81(::core::primitive::u8),
						#[codec(index = 82)]
						Mortal82(::core::primitive::u8),
						#[codec(index = 83)]
						Mortal83(::core::primitive::u8),
						#[codec(index = 84)]
						Mortal84(::core::primitive::u8),
						#[codec(index = 85)]
						Mortal85(::core::primitive::u8),
						#[codec(index = 86)]
						Mortal86(::core::primitive::u8),
						#[codec(index = 87)]
						Mortal87(::core::primitive::u8),
						#[codec(index = 88)]
						Mortal88(::core::primitive::u8),
						#[codec(index = 89)]
						Mortal89(::core::primitive::u8),
						#[codec(index = 90)]
						Mortal90(::core::primitive::u8),
						#[codec(index = 91)]
						Mortal91(::core::primitive::u8),
						#[codec(index = 92)]
						Mortal92(::core::primitive::u8),
						#[codec(index = 93)]
						Mortal93(::core::primitive::u8),
						#[codec(index = 94)]
						Mortal94(::core::primitive::u8),
						#[codec(index = 95)]
						Mortal95(::core::primitive::u8),
						#[codec(index = 96)]
						Mortal96(::core::primitive::u8),
						#[codec(index = 97)]
						Mortal97(::core::primitive::u8),
						#[codec(index = 98)]
						Mortal98(::core::primitive::u8),
						#[codec(index = 99)]
						Mortal99(::core::primitive::u8),
						#[codec(index = 100)]
						Mortal100(::core::primitive::u8),
						#[codec(index = 101)]
						Mortal101(::core::primitive::u8),
						#[codec(index = 102)]
						Mortal102(::core::primitive::u8),
						#[codec(index = 103)]
						Mortal103(::core::primitive::u8),
						#[codec(index = 104)]
						Mortal104(::core::primitive::u8),
						#[codec(index = 105)]
						Mortal105(::core::primitive::u8),
						#[codec(index = 106)]
						Mortal106(::core::primitive::u8),
						#[codec(index = 107)]
						Mortal107(::core::primitive::u8),
						#[codec(index = 108)]
						Mortal108(::core::primitive::u8),
						#[codec(index = 109)]
						Mortal109(::core::primitive::u8),
						#[codec(index = 110)]
						Mortal110(::core::primitive::u8),
						#[codec(index = 111)]
						Mortal111(::core::primitive::u8),
						#[codec(index = 112)]
						Mortal112(::core::primitive::u8),
						#[codec(index = 113)]
						Mortal113(::core::primitive::u8),
						#[codec(index = 114)]
						Mortal114(::core::primitive::u8),
						#[codec(index = 115)]
						Mortal115(::core::primitive::u8),
						#[codec(index = 116)]
						Mortal116(::core::primitive::u8),
						#[codec(index = 117)]
						Mortal117(::core::primitive::u8),
						#[codec(index = 118)]
						Mortal118(::core::primitive::u8),
						#[codec(index = 119)]
						Mortal119(::core::primitive::u8),
						#[codec(index = 120)]
						Mortal120(::core::primitive::u8),
						#[codec(index = 121)]
						Mortal121(::core::primitive::u8),
						#[codec(index = 122)]
						Mortal122(::core::primitive::u8),
						#[codec(index = 123)]
						Mortal123(::core::primitive::u8),
						#[codec(index = 124)]
						Mortal124(::core::primitive::u8),
						#[codec(index = 125)]
						Mortal125(::core::primitive::u8),
						#[codec(index = 126)]
						Mortal126(::core::primitive::u8),
						#[codec(index = 127)]
						Mortal127(::core::primitive::u8),
						#[codec(index = 128)]
						Mortal128(::core::primitive::u8),
						#[codec(index = 129)]
						Mortal129(::core::primitive::u8),
						#[codec(index = 130)]
						Mortal130(::core::primitive::u8),
						#[codec(index = 131)]
						Mortal131(::core::primitive::u8),
						#[codec(index = 132)]
						Mortal132(::core::primitive::u8),
						#[codec(index = 133)]
						Mortal133(::core::primitive::u8),
						#[codec(index = 134)]
						Mortal134(::core::primitive::u8),
						#[codec(index = 135)]
						Mortal135(::core::primitive::u8),
						#[codec(index = 136)]
						Mortal136(::core::primitive::u8),
						#[codec(index = 137)]
						Mortal137(::core::primitive::u8),
						#[codec(index = 138)]
						Mortal138(::core::primitive::u8),
						#[codec(index = 139)]
						Mortal139(::core::primitive::u8),
						#[codec(index = 140)]
						Mortal140(::core::primitive::u8),
						#[codec(index = 141)]
						Mortal141(::core::primitive::u8),
						#[codec(index = 142)]
						Mortal142(::core::primitive::u8),
						#[codec(index = 143)]
						Mortal143(::core::primitive::u8),
						#[codec(index = 144)]
						Mortal144(::core::primitive::u8),
						#[codec(index = 145)]
						Mortal145(::core::primitive::u8),
						#[codec(index = 146)]
						Mortal146(::core::primitive::u8),
						#[codec(index = 147)]
						Mortal147(::core::primitive::u8),
						#[codec(index = 148)]
						Mortal148(::core::primitive::u8),
						#[codec(index = 149)]
						Mortal149(::core::primitive::u8),
						#[codec(index = 150)]
						Mortal150(::core::primitive::u8),
						#[codec(index = 151)]
						Mortal151(::core::primitive::u8),
						#[codec(index = 152)]
						Mortal152(::core::primitive::u8),
						#[codec(index = 153)]
						Mortal153(::core::primitive::u8),
						#[codec(index = 154)]
						Mortal154(::core::primitive::u8),
						#[codec(index = 155)]
						Mortal155(::core::primitive::u8),
						#[codec(index = 156)]
						Mortal156(::core::primitive::u8),
						#[codec(index = 157)]
						Mortal157(::core::primitive::u8),
						#[codec(index = 158)]
						Mortal158(::core::primitive::u8),
						#[codec(index = 159)]
						Mortal159(::core::primitive::u8),
						#[codec(index = 160)]
						Mortal160(::core::primitive::u8),
						#[codec(index = 161)]
						Mortal161(::core::primitive::u8),
						#[codec(index = 162)]
						Mortal162(::core::primitive::u8),
						#[codec(index = 163)]
						Mortal163(::core::primitive::u8),
						#[codec(index = 164)]
						Mortal164(::core::primitive::u8),
						#[codec(index = 165)]
						Mortal165(::core::primitive::u8),
						#[codec(index = 166)]
						Mortal166(::core::primitive::u8),
						#[codec(index = 167)]
						Mortal167(::core::primitive::u8),
						#[codec(index = 168)]
						Mortal168(::core::primitive::u8),
						#[codec(index = 169)]
						Mortal169(::core::primitive::u8),
						#[codec(index = 170)]
						Mortal170(::core::primitive::u8),
						#[codec(index = 171)]
						Mortal171(::core::primitive::u8),
						#[codec(index = 172)]
						Mortal172(::core::primitive::u8),
						#[codec(index = 173)]
						Mortal173(::core::primitive::u8),
						#[codec(index = 174)]
						Mortal174(::core::primitive::u8),
						#[codec(index = 175)]
						Mortal175(::core::primitive::u8),
						#[codec(index = 176)]
						Mortal176(::core::primitive::u8),
						#[codec(index = 177)]
						Mortal177(::core::primitive::u8),
						#[codec(index = 178)]
						Mortal178(::core::primitive::u8),
						#[codec(index = 179)]
						Mortal179(::core::primitive::u8),
						#[codec(index = 180)]
						Mortal180(::core::primitive::u8),
						#[codec(index = 181)]
						Mortal181(::core::primitive::u8),
						#[codec(index = 182)]
						Mortal182(::core::primitive::u8),
						#[codec(index = 183)]
						Mortal183(::core::primitive::u8),
						#[codec(index = 184)]
						Mortal184(::core::primitive::u8),
						#[codec(index = 185)]
						Mortal185(::core::primitive::u8),
						#[codec(index = 186)]
						Mortal186(::core::primitive::u8),
						#[codec(index = 187)]
						Mortal187(::core::primitive::u8),
						#[codec(index = 188)]
						Mortal188(::core::primitive::u8),
						#[codec(index = 189)]
						Mortal189(::core::primitive::u8),
						#[codec(index = 190)]
						Mortal190(::core::primitive::u8),
						#[codec(index = 191)]
						Mortal191(::core::primitive::u8),
						#[codec(index = 192)]
						Mortal192(::core::primitive::u8),
						#[codec(index = 193)]
						Mortal193(::core::primitive::u8),
						#[codec(index = 194)]
						Mortal194(::core::primitive::u8),
						#[codec(index = 195)]
						Mortal195(::core::primitive::u8),
						#[codec(index = 196)]
						Mortal196(::core::primitive::u8),
						#[codec(index = 197)]
						Mortal197(::core::primitive::u8),
						#[codec(index = 198)]
						Mortal198(::core::primitive::u8),
						#[codec(index = 199)]
						Mortal199(::core::primitive::u8),
						#[codec(index = 200)]
						Mortal200(::core::primitive::u8),
						#[codec(index = 201)]
						Mortal201(::core::primitive::u8),
						#[codec(index = 202)]
						Mortal202(::core::primitive::u8),
						#[codec(index = 203)]
						Mortal203(::core::primitive::u8),
						#[codec(index = 204)]
						Mortal204(::core::primitive::u8),
						#[codec(index = 205)]
						Mortal205(::core::primitive::u8),
						#[codec(index = 206)]
						Mortal206(::core::primitive::u8),
						#[codec(index = 207)]
						Mortal207(::core::primitive::u8),
						#[codec(index = 208)]
						Mortal208(::core::primitive::u8),
						#[codec(index = 209)]
						Mortal209(::core::primitive::u8),
						#[codec(index = 210)]
						Mortal210(::core::primitive::u8),
						#[codec(index = 211)]
						Mortal211(::core::primitive::u8),
						#[codec(index = 212)]
						Mortal212(::core::primitive::u8),
						#[codec(index = 213)]
						Mortal213(::core::primitive::u8),
						#[codec(index = 214)]
						Mortal214(::core::primitive::u8),
						#[codec(index = 215)]
						Mortal215(::core::primitive::u8),
						#[codec(index = 216)]
						Mortal216(::core::primitive::u8),
						#[codec(index = 217)]
						Mortal217(::core::primitive::u8),
						#[codec(index = 218)]
						Mortal218(::core::primitive::u8),
						#[codec(index = 219)]
						Mortal219(::core::primitive::u8),
						#[codec(index = 220)]
						Mortal220(::core::primitive::u8),
						#[codec(index = 221)]
						Mortal221(::core::primitive::u8),
						#[codec(index = 222)]
						Mortal222(::core::primitive::u8),
						#[codec(index = 223)]
						Mortal223(::core::primitive::u8),
						#[codec(index = 224)]
						Mortal224(::core::primitive::u8),
						#[codec(index = 225)]
						Mortal225(::core::primitive::u8),
						#[codec(index = 226)]
						Mortal226(::core::primitive::u8),
						#[codec(index = 227)]
						Mortal227(::core::primitive::u8),
						#[codec(index = 228)]
						Mortal228(::core::primitive::u8),
						#[codec(index = 229)]
						Mortal229(::core::primitive::u8),
						#[codec(index = 230)]
						Mortal230(::core::primitive::u8),
						#[codec(index = 231)]
						Mortal231(::core::primitive::u8),
						#[codec(index = 232)]
						Mortal232(::core::primitive::u8),
						#[codec(index = 233)]
						Mortal233(::core::primitive::u8),
						#[codec(index = 234)]
						Mortal234(::core::primitive::u8),
						#[codec(index = 235)]
						Mortal235(::core::primitive::u8),
						#[codec(index = 236)]
						Mortal236(::core::primitive::u8),
						#[codec(index = 237)]
						Mortal237(::core::primitive::u8),
						#[codec(index = 238)]
						Mortal238(::core::primitive::u8),
						#[codec(index = 239)]
						Mortal239(::core::primitive::u8),
						#[codec(index = 240)]
						Mortal240(::core::primitive::u8),
						#[codec(index = 241)]
						Mortal241(::core::primitive::u8),
						#[codec(index = 242)]
						Mortal242(::core::primitive::u8),
						#[codec(index = 243)]
						Mortal243(::core::primitive::u8),
						#[codec(index = 244)]
						Mortal244(::core::primitive::u8),
						#[codec(index = 245)]
						Mortal245(::core::primitive::u8),
						#[codec(index = 246)]
						Mortal246(::core::primitive::u8),
						#[codec(index = 247)]
						Mortal247(::core::primitive::u8),
						#[codec(index = 248)]
						Mortal248(::core::primitive::u8),
						#[codec(index = 249)]
						Mortal249(::core::primitive::u8),
						#[codec(index = 250)]
						Mortal250(::core::primitive::u8),
						#[codec(index = 251)]
						Mortal251(::core::primitive::u8),
						#[codec(index = 252)]
						Mortal252(::core::primitive::u8),
						#[codec(index = 253)]
						Mortal253(::core::primitive::u8),
						#[codec(index = 254)]
						Mortal254(::core::primitive::u8),
						#[codec(index = 255)]
						Mortal255(::core::primitive::u8),
					}
				}
				pub mod header {
					use super::runtime_types;
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct Header<_0, _1> {
						pub parent_hash: ::subxt::utils::H256,
						#[codec(compact)]
						pub number: _0,
						pub state_root: ::subxt::utils::H256,
						pub extrinsics_root: ::subxt::utils::H256,
						pub digest: runtime_types::sp_runtime::generic::digest::Digest,
						#[codec(skip)]
						pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
					}
				}
				pub mod unchecked_extrinsic {
					use super::runtime_types;
					#[derive(
						::subxt::ext::codec::Decode,
						::subxt::ext::codec::Encode,
						::subxt::ext::scale_decode::DecodeAsType,
						::subxt::ext::scale_encode::EncodeAsType,
						Debug,
					)]
					#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
					#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
					pub struct UncheckedExtrinsic<_0, _1, _2, _3>(
						pub ::std::vec::Vec<::core::primitive::u8>,
						#[codec(skip)] pub ::core::marker::PhantomData<(_1, _0, _2, _3)>,
					);
				}
			}
			pub mod traits {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct BlakeTwo256;
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum DispatchError {
				#[codec(index = 0)]
				Other,
				#[codec(index = 1)]
				CannotLookup,
				#[codec(index = 2)]
				BadOrigin,
				#[codec(index = 3)]
				Module(runtime_types::sp_runtime::ModuleError),
				#[codec(index = 4)]
				ConsumerRemaining,
				#[codec(index = 5)]
				NoProviders,
				#[codec(index = 6)]
				TooManyConsumers,
				#[codec(index = 7)]
				Token(runtime_types::sp_runtime::TokenError),
				#[codec(index = 8)]
				Arithmetic(runtime_types::sp_arithmetic::ArithmeticError),
				#[codec(index = 9)]
				Transactional(runtime_types::sp_runtime::TransactionalError),
				#[codec(index = 10)]
				Exhausted,
				#[codec(index = 11)]
				Corruption,
				#[codec(index = 12)]
				Unavailable,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct DispatchErrorWithPostInfo<_0> {
				pub post_info: _0,
				pub error: runtime_types::sp_runtime::DispatchError,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct ModuleError {
				pub index: ::core::primitive::u8,
				pub error: [::core::primitive::u8; 4usize],
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum MultiSignature {
				#[codec(index = 0)]
				Ed25519(runtime_types::sp_core::ed25519::Signature),
				#[codec(index = 1)]
				Sr25519(runtime_types::sp_core::sr25519::Signature),
				#[codec(index = 2)]
				Ecdsa(runtime_types::sp_core::ecdsa::Signature),
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum TokenError {
				#[codec(index = 0)]
				NoFunds,
				#[codec(index = 1)]
				WouldDie,
				#[codec(index = 2)]
				BelowMinimum,
				#[codec(index = 3)]
				CannotCreate,
				#[codec(index = 4)]
				UnknownAsset,
				#[codec(index = 5)]
				Frozen,
				#[codec(index = 6)]
				Unsupported,
			}
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub enum TransactionalError {
				#[codec(index = 0)]
				LimitReached,
				#[codec(index = 1)]
				NoLayer,
			}
		}
		pub mod sp_session {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct MembershipProof {
				pub session: ::core::primitive::u32,
				pub trie_nodes: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
				pub validator_count: ::core::primitive::u32,
			}
		}
		pub mod sp_staking {
			use super::runtime_types;
			pub mod offence {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct OffenceDetails<_0, _1> {
					pub offender: _1,
					pub reporters: ::std::vec::Vec<_0>,
				}
			}
		}
		pub mod sp_transaction_storage_proof {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct TransactionStorageProof {
				pub chunk: ::std::vec::Vec<::core::primitive::u8>,
				pub proof: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
			}
		}
		pub mod sp_version {
			use super::runtime_types;
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RuntimeVersion {
				pub spec_name: ::std::string::String,
				pub impl_name: ::std::string::String,
				pub authoring_version: ::core::primitive::u32,
				pub spec_version: ::core::primitive::u32,
				pub impl_version: ::core::primitive::u32,
				pub apis:
					::std::vec::Vec<([::core::primitive::u8; 8usize], ::core::primitive::u32)>,
				pub transaction_version: ::core::primitive::u32,
				pub state_version: ::core::primitive::u8,
			}
		}
		pub mod sp_weights {
			use super::runtime_types;
			pub mod weight_v2 {
				use super::runtime_types;
				#[derive(
					::subxt::ext::codec::Decode,
					::subxt::ext::codec::Encode,
					::subxt::ext::scale_decode::DecodeAsType,
					::subxt::ext::scale_encode::EncodeAsType,
					Debug,
				)]
				#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
				#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
				pub struct Weight {
					#[codec(compact)]
					pub ref_time: ::core::primitive::u64,
					#[codec(compact)]
					pub proof_size: ::core::primitive::u64,
				}
			}
			#[derive(
				::subxt::ext::codec::CompactAs,
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct OldWeight(pub ::core::primitive::u64);
			#[derive(
				::subxt::ext::codec::Decode,
				::subxt::ext::codec::Encode,
				::subxt::ext::scale_decode::DecodeAsType,
				::subxt::ext::scale_encode::EncodeAsType,
				Debug,
			)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
			pub struct RuntimeDbWeight {
				pub read: ::core::primitive::u64,
				pub write: ::core::primitive::u64,
			}
		}
	}
}
